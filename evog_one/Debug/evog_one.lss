
evog_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001bc  00802000  00003926  000039ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  008021bc  008021bc  00003b76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000808  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017ec5  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004aca  00000000  00000000  0001c2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003649  00000000  00000000  00020dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013a0  00000000  00000000  000243f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f46  00000000  00000000  00025794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a74  00000000  00000000  0002c6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  0003214e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__ctors_end>
       4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      10:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      14:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      18:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      1c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      20:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      24:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      28:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      2c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      30:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      34:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      38:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_14>
      3c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      40:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      44:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      48:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      4c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      50:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      54:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      58:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      5c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      60:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      64:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      68:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      6c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      70:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_28>
      74:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      78:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      7c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      80:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      84:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      88:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      8c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      90:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      94:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      98:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      9c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      a0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      a4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      a8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      ac:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      b0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      b4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      b8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      bc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      c0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      c4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      c8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      cc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      d0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      d4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      d8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      dc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      e0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      e4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      e8:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__vector_58>
      ec:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      f0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      f4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      f8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      fc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     100:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     104:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     108:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     10c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     110:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     114:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     118:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     11c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_71>
     120:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_72>
     124:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_73>
     128:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_74>
     12c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     130:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     134:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     138:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     13c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     140:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     144:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     148:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     14c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     150:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     154:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     158:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     15c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     160:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     164:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     168:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     16c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     170:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     174:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     178:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     17c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     180:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     184:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     188:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     18c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     190:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     194:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     198:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     19c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1a0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1a4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1a8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1ac:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1b0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1b4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1b8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1bc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1c0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1c4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1c8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1cc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1d0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1d4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1d8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1dc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1e0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1e4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1e8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1ec:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1f0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1f4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1f8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1fc:	50 04       	cpc	r5, r0
     1fe:	8f 04       	cpc	r8, r15
     200:	a1 04       	cpc	r10, r1
     202:	17 05       	cpc	r17, r7
     204:	17 05       	cpc	r17, r7
     206:	17 05       	cpc	r17, r7
     208:	17 05       	cpc	r17, r7
     20a:	17 05       	cpc	r17, r7
     20c:	6e 04       	cpc	r6, r14
     20e:	72 04       	cpc	r7, r2
     210:	72 04       	cpc	r7, r2
     212:	79 04       	cpc	r7, r9
     214:	17 05       	cpc	r17, r7
     216:	17 05       	cpc	r17, r7
     218:	17 05       	cpc	r17, r7
     21a:	83 04       	cpc	r8, r3
     21c:	07 63       	ori	r16, 0x37	; 55
     21e:	42 36       	cpi	r20, 0x62	; 98
     220:	b7 9b       	sbis	0x16, 7	; 22
     222:	d8 a7       	std	Y+40, r29	; 0x28
     224:	1a 39       	cpi	r17, 0x9A	; 154
     226:	68 56       	subi	r22, 0x68	; 104
     228:	18 ae       	std	Y+56, r1	; 0x38
     22a:	ba ab       	std	Y+50, r27	; 0x32
     22c:	55 8c       	ldd	r5, Z+29	; 0x1d
     22e:	1d 3c       	cpi	r17, 0xCD	; 205
     230:	b7 cc       	rjmp	.-1682   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     232:	57 63       	ori	r21, 0x37	; 55
     234:	bd 6d       	ori	r27, 0xDD	; 221
     236:	ed fd       	.word	0xfded	; ????
     238:	75 3e       	cpi	r23, 0xE5	; 229
     23a:	f6 17       	cp	r31, r22
     23c:	72 31       	cpi	r23, 0x12	; 18
     23e:	bf 00       	.word	0x00bf	; ????
     240:	00 00       	nop
     242:	80 3f       	cpi	r24, 0xF0	; 240
     244:	08 00       	.word	0x0008	; ????
     246:	00 00       	nop
     248:	be 92       	st	-X, r11
     24a:	24 49       	sbci	r18, 0x94	; 148
     24c:	12 3e       	cpi	r17, 0xE2	; 226
     24e:	ab aa       	std	Y+51, r10	; 0x33
     250:	aa 2a       	or	r10, r26
     252:	be cd       	rjmp	.-1156   	; 0xfffffdd0 <__eeprom_end+0xff7efdd0>
     254:	cc cc       	rjmp	.-1640   	; 0xfffffbee <__eeprom_end+0xff7efbee>
     256:	4c 3e       	cpi	r20, 0xEC	; 236
     258:	00 00       	nop
     25a:	00 80       	ld	r0, Z
     25c:	be ab       	std	Y+54, r27	; 0x36
     25e:	aa aa       	std	Y+50, r10	; 0x32
     260:	aa 3e       	cpi	r26, 0xEA	; 234
     262:	00 00       	nop
     264:	00 00       	nop
     266:	bf 00       	.word	0x00bf	; ????
     268:	00 00       	nop
     26a:	80 3f       	cpi	r24, 0xF0	; 240
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	00 08       	sbc	r0, r0
     272:	41 78       	andi	r20, 0x81	; 129
     274:	d3 bb       	out	0x13, r29	; 19
     276:	43 87       	std	Z+11, r20	; 0x0b
     278:	d1 13       	cpse	r29, r17
     27a:	3d 19       	sub	r19, r13
     27c:	0e 3c       	cpi	r16, 0xCE	; 206
     27e:	c3 bd       	out	0x23, r28	; 35
     280:	42 82       	std	Z+2, r4	; 0x02
     282:	ad 2b       	or	r26, r29
     284:	3e 68       	ori	r19, 0x8E	; 142
     286:	ec 82       	std	Y+4, r14	; 0x04
     288:	76 be       	out	0x36, r7	; 54
     28a:	d9 8f       	std	Y+25, r29	; 0x19
     28c:	e1 a9       	ldd	r30, Z+49	; 0x31
     28e:	3e 4c       	sbci	r19, 0xCE	; 206
     290:	80 ef       	ldi	r24, 0xF0	; 240
     292:	ff be       	out	0x3f, r15	; 63
     294:	01 c4       	rjmp	.+2050   	; 0xa98 <_ZN10ComHandler6handleEcNS_5com_eE+0x36>
     296:	ff 7f       	andi	r31, 0xFF	; 255
     298:	3f 00       	.word	0x003f	; ????
     29a:	00 00       	nop
	...

0000029e <__trampolines_start>:
     29e:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x52>
     2a2:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1e0>
     2a6:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
     2aa:	0c 94 83 04 	jmp	0x906	; 0x906 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xb8>
     2ae:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xa4>
     2b2:	0c 94 8f 04 	jmp	0x91e	; 0x91e <_ZN10ComHandler13changeHandlerENS_8change_eE+0xd0>
     2b6:	0c 94 a1 04 	jmp	0x942	; 0x942 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xf4>
     2ba:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <_ZN10ComHandler13changeHandlerENS_8change_eE+0x8e>

000002be <__trampolines_end>:
     2be:	6e 61       	ori	r22, 0x1E	; 30
     2c0:	6e 00       	.word	0x006e	; ????

000002c2 <__c.2332>:
     2c2:	69 6e 66 00                                         inf.

000002c6 <pstr_nan>:
     2c6:	4e 41 4e                                            NAN

000002c9 <pstr_inity>:
     2c9:	49 4e 49 54 59                                      INITY

000002ce <pstr_inf>:
     2ce:	49 4e 46                                            INF

000002d1 <pwr_m10>:
     2d1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2e1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002e9 <pwr_p10>:
     2e9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2f9:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     309:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     319:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     329:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     339:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     349:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     359:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     369:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     379:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     389:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     399:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     3a9:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     3b9:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     3c9:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     3d9:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     3e9:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     3f9:	3d 27 00                                            ='.

000003fc <__ctors_end>:
     3fc:	11 24       	eor	r1, r1
     3fe:	1f be       	out	0x3f, r1	; 63
     400:	cf ef       	ldi	r28, 0xFF	; 255
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df e3       	ldi	r29, 0x3F	; 63
     406:	de bf       	out	0x3e, r29	; 62
     408:	00 e0       	ldi	r16, 0x00	; 0
     40a:	0c bf       	out	0x3c, r16	; 60
     40c:	18 be       	out	0x38, r1	; 56
     40e:	19 be       	out	0x39, r1	; 57
     410:	1a be       	out	0x3a, r1	; 58
     412:	1b be       	out	0x3b, r1	; 59

00000414 <__do_copy_data>:
     414:	11 e2       	ldi	r17, 0x21	; 33
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b0 e2       	ldi	r27, 0x20	; 32
     41a:	e6 e2       	ldi	r30, 0x26	; 38
     41c:	f9 e3       	ldi	r31, 0x39	; 57
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	0b bf       	out	0x3b, r16	; 59
     422:	02 c0       	rjmp	.+4      	; 0x428 <__do_copy_data+0x14>
     424:	07 90       	elpm	r0, Z+
     426:	0d 92       	st	X+, r0
     428:	ac 3b       	cpi	r26, 0xBC	; 188
     42a:	b1 07       	cpc	r27, r17
     42c:	d9 f7       	brne	.-10     	; 0x424 <__do_copy_data+0x10>
     42e:	1b be       	out	0x3b, r1	; 59

00000430 <__do_clear_bss>:
     430:	22 e2       	ldi	r18, 0x22	; 34
     432:	ac eb       	ldi	r26, 0xBC	; 188
     434:	b1 e2       	ldi	r27, 0x21	; 33
     436:	01 c0       	rjmp	.+2      	; 0x43a <.do_clear_bss_start>

00000438 <.do_clear_bss_loop>:
     438:	1d 92       	st	X+, r1

0000043a <.do_clear_bss_start>:
     43a:	ac 37       	cpi	r26, 0x7C	; 124
     43c:	b2 07       	cpc	r27, r18
     43e:	e1 f7       	brne	.-8      	; 0x438 <.do_clear_bss_loop>
     440:	0e 94 6f 10 	call	0x20de	; 0x20de <main>
     444:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <_exit>

00000448 <__bad_interrupt>:
     448:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044c <__vector_71>:
	}
}

void Adca::flush()
{
	ADCA_CTRLA |= ADC_FLUSH_bm;
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	08 b6       	in	r0, 0x38	; 56
     458:	0f 92       	push	r0
     45a:	18 be       	out	0x38, r1	; 56
     45c:	8f 93       	push	r24
     45e:	9f 93       	push	r25
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 c7 21 	sts	0x21C7, r24	; 0x8021c7 <_ZN4Adca7ch0flagE>
     466:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     46a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     46e:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <_ZN4Adca3ch0E>
     472:	90 93 c3 21 	sts	0x21C3, r25	; 0x8021c3 <_ZN4Adca3ch0E+0x1>
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	0f 90       	pop	r0
     47c:	08 be       	out	0x38, r0	; 56
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_72>:
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	08 b6       	in	r0, 0x38	; 56
     494:	0f 92       	push	r0
     496:	18 be       	out	0x38, r1	; 56
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <_ZN4Adca7ch1flagE>
     4a2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     4a6:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     4aa:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <_ZN4Adca3ch1E>
     4ae:	90 93 c1 21 	sts	0x21C1, r25	; 0x8021c1 <_ZN4Adca3ch1E+0x1>
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	0f 90       	pop	r0
     4b8:	08 be       	out	0x38, r0	; 56
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_73>:
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	08 b6       	in	r0, 0x38	; 56
     4d0:	0f 92       	push	r0
     4d2:	18 be       	out	0x38, r1	; 56
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 c5 21 	sts	0x21C5, r24	; 0x8021c5 <_ZN4Adca7ch2flagE>
     4de:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     4e2:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     4e6:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <_ZN4Adca3ch2E>
     4ea:	90 93 bf 21 	sts	0x21BF, r25	; 0x8021bf <_ZN4Adca3ch2E+0x1>
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	0f 90       	pop	r0
     4f4:	08 be       	out	0x38, r0	; 56
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_74>:
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	08 b6       	in	r0, 0x38	; 56
     50c:	0f 92       	push	r0
     50e:	18 be       	out	0x38, r1	; 56
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <_ZN4Adca7ch3flagE>
     51a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     51e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     522:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <__data_end>
     526:	90 93 bd 21 	sts	0x21BD, r25	; 0x8021bd <__data_end+0x1>
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	0f 90       	pop	r0
     530:	08 be       	out	0x38, r0	; 56
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <_ZN4Adca21startSingleConversionENS_9channel_eE>:
     53c:	61 30       	cpi	r22, 0x01	; 1
     53e:	61 f0       	breq	.+24     	; 0x558 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x1c>
     540:	28 f0       	brcs	.+10     	; 0x54c <_ZN4Adca21startSingleConversionENS_9channel_eE+0x10>
     542:	62 30       	cpi	r22, 0x02	; 2
     544:	79 f0       	breq	.+30     	; 0x564 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x28>
     546:	63 30       	cpi	r22, 0x03	; 3
     548:	99 f0       	breq	.+38     	; 0x570 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x34>
     54a:	08 95       	ret
     54c:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <_ZN4Adca7ch0flagE>
     550:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     554:	84 60       	ori	r24, 0x04	; 4
     556:	11 c0       	rjmp	.+34     	; 0x57a <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     558:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <_ZN4Adca7ch1flagE>
     55c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     560:	88 60       	ori	r24, 0x08	; 8
     562:	0b c0       	rjmp	.+22     	; 0x57a <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     564:	10 92 c5 21 	sts	0x21C5, r1	; 0x8021c5 <_ZN4Adca7ch2flagE>
     568:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	05 c0       	rjmp	.+10     	; 0x57a <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     570:	10 92 c4 21 	sts	0x21C4, r1	; 0x8021c4 <_ZN4Adca7ch3flagE>
     574:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     578:	80 62       	ori	r24, 0x20	; 32
     57a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     57e:	08 95       	ret

00000580 <_ZN4Adca14waitConversionENS_9channel_eE>:
}

void Adca::waitConversion(channel_e channel)
{
	switch (channel) {
     580:	61 30       	cpi	r22, 0x01	; 1
     582:	59 f0       	breq	.+22     	; 0x59a <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     584:	28 f0       	brcs	.+10     	; 0x590 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     586:	62 30       	cpi	r22, 0x02	; 2
     588:	69 f0       	breq	.+26     	; 0x5a4 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     58a:	63 30       	cpi	r22, 0x03	; 3
     58c:	81 f0       	breq	.+32     	; 0x5ae <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     58e:	08 95       	ret
		case CH_0: while (!ch0flag) ; break;
     590:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <_ZN4Adca7ch0flagE>
     594:	88 23       	and	r24, r24
     596:	e1 f3       	breq	.-8      	; 0x590 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     598:	08 95       	ret
		case CH_1: while (!ch1flag) ; break;
     59a:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <_ZN4Adca7ch1flagE>
     59e:	88 23       	and	r24, r24
     5a0:	e1 f3       	breq	.-8      	; 0x59a <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     5a2:	08 95       	ret
		case CH_2: while (!ch2flag) ; break;
     5a4:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <_ZN4Adca7ch2flagE>
     5a8:	88 23       	and	r24, r24
     5aa:	e1 f3       	breq	.-8      	; 0x5a4 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     5ac:	08 95       	ret
		case CH_3: while (!ch3flag) ; break;
     5ae:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <_ZN4Adca7ch3flagE>
     5b2:	88 23       	and	r24, r24
     5b4:	e1 f3       	breq	.-8      	; 0x5ae <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     5b6:	08 95       	ret

000005b8 <_ZN4Adca11readChannelENS_9channel_eE>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

uint16_t Adca::readChannel(channel_e channel)
{
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	8c 01       	movw	r16, r24
     5c0:	c6 2f       	mov	r28, r22
	startSingleConversion(channel);
     5c2:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4Adca21startSingleConversionENS_9channel_eE>
	waitConversion(channel);
     5c6:	6c 2f       	mov	r22, r28
     5c8:	c8 01       	movw	r24, r16
     5ca:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4Adca14waitConversionENS_9channel_eE>
	switch (channel) {
     5ce:	c1 30       	cpi	r28, 0x01	; 1
     5d0:	79 f0       	breq	.+30     	; 0x5f0 <_ZN4Adca11readChannelENS_9channel_eE+0x38>
     5d2:	48 f0       	brcs	.+18     	; 0x5e6 <_ZN4Adca11readChannelENS_9channel_eE+0x2e>
     5d4:	c2 30       	cpi	r28, 0x02	; 2
     5d6:	89 f0       	breq	.+34     	; 0x5fa <_ZN4Adca11readChannelENS_9channel_eE+0x42>
     5d8:	c3 30       	cpi	r28, 0x03	; 3
     5da:	a1 f4       	brne	.+40     	; 0x604 <_ZN4Adca11readChannelENS_9channel_eE+0x4c>
		case CH_0: return ADCA_CH0RES;
		case CH_1: return ADCA_CH1RES;
		case CH_2: return ADCA_CH2RES;
		case CH_3: return ADCA_CH3RES;
     5dc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     5e0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     5e4:	11 c0       	rjmp	.+34     	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
uint16_t Adca::readChannel(channel_e channel)
{
	startSingleConversion(channel);
	waitConversion(channel);
	switch (channel) {
		case CH_0: return ADCA_CH0RES;
     5e6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     5ea:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_1: return ADCA_CH1RES;
     5f0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     5f4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_2: return ADCA_CH2RES;
     5fa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     5fe:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     602:	02 c0       	rjmp	.+4      	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_3: return ADCA_CH3RES;
	}
	return 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
}
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <_ZN4Adca9enableADCEv>:
//=== ENABLERS ===//
//================//

void Adca::enableADC()
{
	adc = true;
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	fc 01       	movw	r30, r24
     614:	21 83       	std	Z+1, r18	; 0x01
	ADCA_CTRLA |= ADC_ENABLE_bm;
     616:	e0 e0       	ldi	r30, 0x00	; 0
     618:	f2 e0       	ldi	r31, 0x02	; 2
     61a:	80 81       	ld	r24, Z
     61c:	81 60       	ori	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24
     620:	08 95       	ret

00000622 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

Adca::Adca(prescaler_e prescaler, Utils::interruptLevel_e interruptLevel)
     622:	fc 01       	movw	r30, r24
	ADCA_EVCTRL = (eventMode << ADC_EVACT_gp)|(ADCA_EVCTRL & ~ADC_EVACT_gm);
}

void Adca::setPrescaler(prescaler_e prescaler)
{
	this->prescaler = prescaler;
     624:	65 87       	std	Z+13, r22	; 0x0d
	ADCA_PRESCALER = prescaler;
     626:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
	ADCA_CTRLB = (currentLimitation << ADC_CURRLIMIT_gp)|(ADCA_CTRLB & ~ADC_CURRLIMIT_gm);
}

void Adca::setConversionMode(conversionMode_e conversionMode)
{
	this->conversionMode = conversionMode;
     62a:	14 82       	std	Z+4, r1	; 0x04
	switch(conversionMode) {
		case CM_UNSIGNED: ADCA_CTRLB &= ~ADC_CONMODE_bm; break;
     62c:	a1 e0       	ldi	r26, 0x01	; 1
     62e:	b2 e0       	ldi	r27, 0x02	; 2
     630:	8c 91       	ld	r24, X
     632:	8f 7e       	andi	r24, 0xEF	; 239
     634:	8c 93       	st	X, r24

void Adca::setChannelInputMode(channel_e channel, cim_e cim)
{
	switch (channel) {
		case CH_0:
			cim0 = cim;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	82 8b       	std	Z+18, r24	; 0x12
			ADCA_CH0_CTRL = (cim << ADC_CH_INPUTMODE_gp)|(ADCA_CH0_CTRL & ~ADC_CH_INPUTMODE_gm);
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b2 e0       	ldi	r27, 0x02	; 2
     63e:	8c 91       	ld	r24, X
     640:	8c 7f       	andi	r24, 0xFC	; 252
     642:	81 60       	ori	r24, 0x01	; 1
     644:	8c 93       	st	X, r24

void Adca::setMuxSelectionPositiveInput(channel_e channel, mspi_e mspi)
{
	switch (channel) {
		case CH_0:
			mspi0 = mspi;
     646:	16 8a       	std	Z+22, r1	; 0x16
			ADCA_CH0_MUXCTRL = ((mspi&0x0f) << ADC_CH_MUXPOS_gp)|(ADCA_CH0_MUXCTRL & ~ADC_CH_MUXPOS_gm);
     648:	a1 e2       	ldi	r26, 0x21	; 33
     64a:	b2 e0       	ldi	r27, 0x02	; 2
     64c:	8c 91       	ld	r24, X
     64e:	87 78       	andi	r24, 0x87	; 135
     650:	8c 93       	st	X, r24

void Adca::enableInterrupt(channel_e channel, Utils::interruptLevel_e il)
{
	switch (channel) {
		case CH_0:
			il0 = il;
     652:	42 a3       	std	Z+34, r20	; 0x22
			ADCA_CH0_INTCTRL = (il << ADC_CH_INTLVL_gp)|(ADCA_CH0_INTCTRL & ~ADC_CH_INTLVL_gm);
     654:	a2 e2       	ldi	r26, 0x22	; 34
     656:	b2 e0       	ldi	r27, 0x02	; 2
     658:	8c 91       	ld	r24, X
     65a:	8c 7f       	andi	r24, 0xFC	; 252
     65c:	48 2b       	or	r20, r24
     65e:	4c 93       	st	X, r20
	setPrescaler(prescaler);
	setConversionMode(CM_UNSIGNED);
	setChannelInputMode(CH_0, CIM_SINGLEENDED);
	setMuxSelectionPositiveInput(CH_0, MSPI_PIN0);
	enableInterrupt(CH_0, interruptLevel);
	enableADC();
     660:	cf 01       	movw	r24, r30
     662:	0c 94 08 03 	jmp	0x610	; 0x610 <_ZN4Adca9enableADCEv>

00000666 <_ZN10ComHandlerC1ENS_7state_eEP4Tcc0P7UsartE0P7UsartC1>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

ComHandler::ComHandler(state_e state, Tcc0* myTimer0, UsartE0* myUsart0, UsartC1* myUsart1)
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
{
	ComHandler::state = state;
     66a:	60 93 12 22 	sts	0x2212, r22	; 0x802212 <_ZN10ComHandler5stateE>
	ComHandler::myTimer0 = myTimer0;
     66e:	40 93 cc 21 	sts	0x21CC, r20	; 0x8021cc <_ZN10ComHandler8myTimer0E>
     672:	50 93 cd 21 	sts	0x21CD, r21	; 0x8021cd <_ZN10ComHandler8myTimer0E+0x1>
	ComHandler::myUsart0 = myUsart0;
     676:	20 93 ca 21 	sts	0x21CA, r18	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     67a:	30 93 cb 21 	sts	0x21CB, r19	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
	ComHandler::myUsart1 = myUsart1;
     67e:	00 93 c8 21 	sts	0x21C8, r16	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     682:	10 93 c9 21 	sts	0x21C9, r17	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
}
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <_ZN10ComHandler6updateEv>:
//=== STATIC FUNCTIONS ===//
//========================//

void ComHandler::update()
{
	switch(state) {
     68c:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	09 f0       	breq	.+2      	; 0x696 <_ZN10ComHandler6updateEv+0xa>
     694:	4d c0       	rjmp	.+154    	; 0x730 <_ZN10ComHandler6updateEv+0xa4>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile double time_ms;
	static volatile double timeIncrement_ms;
	double getTime_ms(){return time_ms;};
     696:	60 91 17 22 	lds	r22, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
     69a:	70 91 18 22 	lds	r23, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
     69e:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
     6a2:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
		default: break;
		
		case HEATING:
		if (myTimer0->getTime_ms() - timeFlag_ms > HEATING_DURATION_ms)
     6a6:	20 91 0e 22 	lds	r18, 0x220E	; 0x80220e <_ZN10ComHandler11timeFlag_msE>
     6aa:	30 91 0f 22 	lds	r19, 0x220F	; 0x80220f <_ZN10ComHandler11timeFlag_msE+0x1>
     6ae:	40 91 10 22 	lds	r20, 0x2210	; 0x802210 <_ZN10ComHandler11timeFlag_msE+0x2>
     6b2:	50 91 11 22 	lds	r21, 0x2211	; 0x802211 <_ZN10ComHandler11timeFlag_msE+0x3>
     6b6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e4       	ldi	r19, 0x40	; 64
     6be:	4c e9       	ldi	r20, 0x9C	; 156
     6c0:	56 e4       	ldi	r21, 0x46	; 70
     6c2:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	9c f5       	brge	.+102    	; 0x730 <_ZN10ComHandler6updateEv+0xa4>
		{
			state = IDLE;
     6ca:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <_ZN10ComHandler5stateE>
			switch (ComHandler::com) {
     6ce:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_ZN10ComHandler3comE>
     6d2:	88 23       	and	r24, r24
     6d4:	19 f0       	breq	.+6      	; 0x6dc <_ZN10ComHandler6updateEv+0x50>
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	b1 f0       	breq	.+44     	; 0x706 <_ZN10ComHandler6updateEv+0x7a>
     6da:	08 95       	ret
				case USART0:
				myUsart0->sendChar(CHANGED_TO_IDLE);
     6dc:	61 ef       	ldi	r22, 0xF1	; 241
     6de:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     6e2:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     6e6:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN7UsartE08sendCharEc>
				myUsart0->sendChar('\r');
     6ea:	6d e0       	ldi	r22, 0x0D	; 13
     6ec:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     6f0:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     6f4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN7UsartE08sendCharEc>
				myUsart0->sendChar('\0');
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     6fe:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     702:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <_ZN7UsartE08sendCharEc>
				break;
				case USART1:
				myUsart1->sendChar(CHANGED_TO_IDLE);
     706:	61 ef       	ldi	r22, 0xF1	; 241
     708:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     70c:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     710:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN7UsartC18sendCharEc>
				myUsart1->sendChar('\r');
     714:	6d e0       	ldi	r22, 0x0D	; 13
     716:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     71a:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     71e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN7UsartC18sendCharEc>
				myUsart1->sendChar('\0');
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     728:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     72c:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <_ZN7UsartC18sendCharEc>
     730:	08 95       	ret

00000732 <_ZN10ComHandler10sendAnswerEv>:
	}
}

void ComHandler::sendAnswer()
{
	switch(com) {
     732:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_ZN10ComHandler3comE>
		default:
		case USART0:
		myUsart0->sendString(Utils::txBuf);
		break;
		case USART1:
		myUsart1->sendString(Utils::txBuf);
     736:	6a e3       	ldi	r22, 0x3A	; 58
     738:	72 e2       	ldi	r23, 0x22	; 34
	}
}

void ComHandler::sendAnswer()
{
	switch(com) {
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	31 f0       	breq	.+12     	; 0x74a <_ZN10ComHandler10sendAnswerEv+0x18>
		default:
		case USART0:
		myUsart0->sendString(Utils::txBuf);
     73e:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     742:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     746:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <_ZN7UsartE010sendStringEPKc>
		break;
		case USART1:
		myUsart1->sendString(Utils::txBuf);
     74a:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     74e:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     752:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <_ZN7UsartC110sendStringEPKc>

00000756 <_ZN10ComHandler9fetchDataEv>:
//=== PRIVATE FUNCTIONS ===//
//=========================//

char ComHandler::fetchData()
{
	switch(com) {
     756:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_ZN10ComHandler3comE>
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	49 f0       	breq	.+18     	; 0x770 <_ZN10ComHandler9fetchDataEv+0x1a>
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
     75e:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <_ZN7UsartE07rxcFlagE>
		default:
		case USART0:
		while(!(myUsart0->isRXC())) ;
     762:	88 23       	and	r24, r24
     764:	e1 f3       	breq	.-8      	; 0x75e <_ZN10ComHandler9fetchDataEv+0x8>
	void setRXC(bool b){rxcFlag = b;};
     766:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <_ZN7UsartE07rxcFlagE>
	char getChar(){return rxChar;};
     76a:	80 91 38 22 	lds	r24, 0x2238	; 0x802238 <_ZN7UsartE06rxCharE>
     76e:	08 95       	ret
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
     770:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <_ZN7UsartC17rxcFlagE>
		myUsart0->setRXC(false);
		return myUsart0->getChar();

		case USART1:
		while(!(myUsart1->isRXC())) ;
     774:	88 23       	and	r24, r24
     776:	e1 f3       	breq	.-8      	; 0x770 <_ZN10ComHandler9fetchDataEv+0x1a>
	void setRXC(bool b){rxcFlag = b;};
     778:	10 92 37 22 	sts	0x2237, r1	; 0x802237 <_ZN7UsartC17rxcFlagE>
	char getChar(){return rxChar;};
     77c:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <_ZN7UsartC16rxCharE>
		myUsart1->setRXC(false);
		return myUsart1->getChar();
	}
}
     780:	08 95       	ret

00000782 <_ZN10ComHandler15questionHandlerENS_10question_eE>:

void ComHandler::questionHandler(question_e q)
{
	switch(q)
     782:	63 3a       	cpi	r22, 0xA3	; 163
     784:	09 f4       	brne	.+2      	; 0x788 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x6>
     786:	47 c0       	rjmp	.+142    	; 0x816 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x94>
     788:	28 f4       	brcc	.+10     	; 0x794 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x12>
     78a:	60 3a       	cpi	r22, 0xA0	; 160
     78c:	91 f0       	breq	.+36     	; 0x7b2 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x30>
     78e:	61 3a       	cpi	r22, 0xA1	; 161
     790:	51 f1       	breq	.+84     	; 0x7e6 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x64>
     792:	53 c0       	rjmp	.+166    	; 0x83a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xb8>
     794:	68 3a       	cpi	r22, 0xA8	; 168
     796:	09 f4       	brne	.+2      	; 0x79a <_ZN10ComHandler15questionHandlerENS_10question_eE+0x18>
     798:	44 c0       	rjmp	.+136    	; 0x822 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xa0>
     79a:	69 3a       	cpi	r22, 0xA9	; 169
     79c:	09 f4       	brne	.+2      	; 0x7a0 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x1e>
     79e:	47 c0       	rjmp	.+142    	; 0x82e <_ZN10ComHandler15questionHandlerENS_10question_eE+0xac>
     7a0:	64 3a       	cpi	r22, 0xA4	; 164
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x24>
     7a4:	4a c0       	rjmp	.+148    	; 0x83a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xb8>
		Utils::txBuf[0] = q + 0x10;
		snprintf(Utils::txBuf+1, TX_LEN-1, "20170610\r");
		break;
		
		case QUESTION_TIME:
		Utils::txBuf[0] = q + 0x10;
     7a6:	84 eb       	ldi	r24, 0xB4	; 180
     7a8:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "123456\r");
     7ac:	6d e1       	ldi	r22, 0x1D	; 29
     7ae:	70 e2       	ldi	r23, 0x20	; 32
     7b0:	2d c0       	rjmp	.+90     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
void ComHandler::questionHandler(question_e q)
{
	switch(q)
	{
		case QUESTION_STATE:
		Utils::txBuf[0] = q + 0x10;
     7b2:	80 eb       	ldi	r24, 0xB0	; 176
     7b4:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "%d\r", state);
     7b8:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     7bc:	1f 92       	push	r1
     7be:	8f 93       	push	r24
     7c0:	89 e0       	ldi	r24, 0x09	; 9
     7c2:	90 e2       	ldi	r25, 0x20	; 32
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	1f 92       	push	r1
     7ca:	8f e3       	ldi	r24, 0x3F	; 63
     7cc:	8f 93       	push	r24
     7ce:	8b e3       	ldi	r24, 0x3B	; 59
     7d0:	92 e2       	ldi	r25, 0x22	; 34
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 df 1b 	call	0x37be	; 0x37be <snprintf>
		break;
     7da:	8d b7       	in	r24, 0x3d	; 61
     7dc:	9e b7       	in	r25, 0x3e	; 62
     7de:	08 96       	adiw	r24, 0x08	; 8
     7e0:	8d bf       	out	0x3d, r24	; 61
     7e2:	9e bf       	out	0x3e, r25	; 62
     7e4:	32 c0       	rjmp	.+100    	; 0x84a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xc8>
		
		case QUESTION_HEATING:
		Utils::txBuf[0] = q + 0x10;
     7e6:	81 eb       	ldi	r24, 0xB1	; 177
     7e8:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		if (state == IDLE) snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     7ec:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     7f0:	81 11       	cpse	r24, r1
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <_ZN10ComHandler15questionHandlerENS_10question_eE+0x78>
     7f4:	6a e1       	ldi	r22, 0x1A	; 26
     7f6:	70 e2       	ldi	r23, 0x20	; 32
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		else if (state == HEATING) snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
     7fa:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	19 f4       	brne	.+6      	; 0x808 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x86>
     802:	6d e0       	ldi	r22, 0x0D	; 13
     804:	70 e2       	ldi	r23, 0x20	; 32
     806:	02 c0       	rjmp	.+4      	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		else snprintf(Utils::txBuf+1, TX_LEN-1, "2\r");
     808:	60 e1       	ldi	r22, 0x10	; 16
     80a:	70 e2       	ldi	r23, 0x20	; 32
     80c:	8b e3       	ldi	r24, 0x3B	; 59
     80e:	92 e2       	ldi	r25, 0x22	; 34
     810:	0e 94 91 1b 	call	0x3722	; 0x3722 <strcpy>
     814:	1a c0       	rjmp	.+52     	; 0x84a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xc8>
		break;
		
		case QUESTION_DATE:
		Utils::txBuf[0] = q + 0x10;
     816:	83 eb       	ldi	r24, 0xB3	; 179
     818:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "20170610\r");
     81c:	63 e1       	ldi	r22, 0x13	; 19
     81e:	70 e2       	ldi	r23, 0x20	; 32
     820:	f5 cf       	rjmp	.-22     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		Utils::txBuf[0] = q + 0x10;
		snprintf(Utils::txBuf+1, TX_LEN-1, "123456\r");
		break;
		
		case QUESTION_ROOM_TEMPERATURE:
		Utils::txBuf[0] = q + 0x10;
     822:	88 eb       	ldi	r24, 0xB8	; 184
     824:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "250\r");
     828:	65 e2       	ldi	r22, 0x25	; 37
     82a:	70 e2       	ldi	r23, 0x20	; 32
     82c:	ef cf       	rjmp	.-34     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		break;
		
		case QUESTION_SENSOR_TEMPERATURE:
		Utils::txBuf[0] = q + 0x10;
     82e:	89 eb       	ldi	r24, 0xB9	; 185
     830:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "340\r");
     834:	6a e2       	ldi	r22, 0x2A	; 42
     836:	70 e2       	ldi	r23, 0x20	; 32
     838:	e9 cf       	rjmp	.-46     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		break;
		
		default:
		Utils::txBuf[0] = UNKNOWN_COMMAND;
     83a:	80 ee       	ldi	r24, 0xE0	; 224
     83c:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		Utils::txBuf[1] = '\r';
     840:	8d e0       	ldi	r24, 0x0D	; 13
     842:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <_ZN5Utils5txBufE+0x1>
		Utils::txBuf[2] = '\0';
     846:	10 92 3c 22 	sts	0x223C, r1	; 0x80223c <_ZN5Utils5txBufE+0x2>
		break;
	}
	sendAnswer();
     84a:	0c 94 99 03 	jmp	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>

0000084e <_ZN10ComHandler13changeHandlerENS_8change_eE>:
}

void ComHandler::changeHandler(change_e c)
{
     84e:	8f 92       	push	r8
     850:	9f 92       	push	r9
     852:	af 92       	push	r10
     854:	bf 92       	push	r11
     856:	cf 92       	push	r12
     858:	df 92       	push	r13
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	62 97       	sbiw	r28, 0x12	; 18
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	de bf       	out	0x3e, r29	; 62
     870:	7c 01       	movw	r14, r24
	int index = 0;
	bool r = false;
	double gascal_o2_pct, gascal_co2_pct;
	char* decayed_buf = &Utils::txBuf[0];
     872:	8a e3       	ldi	r24, 0x3A	; 58
     874:	92 e2       	ldi	r25, 0x22	; 34
     876:	89 8b       	std	Y+17, r24	; 0x11
     878:	9a 8b       	std	Y+18, r25	; 0x12
	char** endptr1 = &decayed_buf;
	char** endptr2 = endptr1;
	
	Utils::txBuf[0] = c+0x10;
     87a:	80 e1       	ldi	r24, 0x10	; 16
     87c:	86 0f       	add	r24, r22
     87e:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
	switch (c)
     882:	86 2f       	mov	r24, r22
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	fc 01       	movw	r30, r24
     888:	e0 5c       	subi	r30, 0xC0	; 192
     88a:	f1 09       	sbc	r31, r1
     88c:	e0 31       	cpi	r30, 0x10	; 16
     88e:	f1 05       	cpc	r31, r1
     890:	08 f0       	brcs	.+2      	; 0x894 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x46>
     892:	cd c0       	rjmp	.+410    	; 0xa2e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1e0>
     894:	88 27       	eor	r24, r24
     896:	e2 50       	subi	r30, 0x02	; 2
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	8f 4f       	sbci	r24, 0xFF	; 255
     89c:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__tablejump2__>
	{
		case CHANGE_TO_HEATING:
		if (state == IDLE) {
     8a0:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     8a4:	81 11       	cpse	r24, r1
     8a6:	1e c0       	rjmp	.+60     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = HEATING;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     8ae:	6a e1       	ldi	r22, 0x1A	; 26
     8b0:	70 e2       	ldi	r23, 0x20	; 32
     8b2:	8b e3       	ldi	r24, 0x3B	; 59
     8b4:	92 e2       	ldi	r25, 0x22	; 34
     8b6:	0e 94 91 1b 	call	0x3722	; 0x3722 <strcpy>
     8ba:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
     8be:	90 91 18 22 	lds	r25, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
     8c2:	a0 91 19 22 	lds	r26, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
     8c6:	b0 91 1a 22 	lds	r27, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
			timeFlag_ms = myTimer0->getTime_ms();
     8ca:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <_ZN10ComHandler11timeFlag_msE>
     8ce:	90 93 0f 22 	sts	0x220F, r25	; 0x80220f <_ZN10ComHandler11timeFlag_msE+0x1>
     8d2:	a0 93 10 22 	sts	0x2210, r26	; 0x802210 <_ZN10ComHandler11timeFlag_msE+0x2>
     8d6:	b0 93 11 22 	sts	0x2211, r27	; 0x802211 <_ZN10ComHandler11timeFlag_msE+0x3>
     8da:	b1 c0       	rjmp	.+354    	; 0xa3e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f0>
		}
		sendAnswer();
		break;

		case CHANGE_TO_DATA_SAMPLE:
		if (state == IDLE) {
     8dc:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     8e0:	88 23       	and	r24, r24
     8e2:	d1 f0       	breq	.+52     	; 0x918 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xca>
		if (state == IDLE) {
			state = HEATING;
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
			timeFlag_ms = myTimer0->getTime_ms();
		} else {
			snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
     8e4:	6d e0       	ldi	r22, 0x0D	; 13
     8e6:	70 e2       	ldi	r23, 0x20	; 32
     8e8:	8b e3       	ldi	r24, 0x3B	; 59
     8ea:	92 e2       	ldi	r25, 0x22	; 34
     8ec:	0e 94 91 1b 	call	0x3722	; 0x3722 <strcpy>
     8f0:	a6 c0       	rjmp	.+332    	; 0xa3e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f0>
		}
		sendAnswer();
		break;

		case CHANGE_START_DATA_SAMPLE:
		if (state == IDLE) {
     8f2:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     8f6:	81 11       	cpse	r24, r1
     8f8:	f5 cf       	rjmp	.-22     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = DATA_SAMPLE;
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			TestHandler::start_test();
     900:	0e 94 c0 0a 	call	0x1580	; 0x1580 <_ZN11TestHandler10start_testEv>
     904:	9e c0       	rjmp	.+316    	; 0xa42 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f4>
			sendAnswer();
		}
		break;
		
		case CHANGE_STOP_DATA_SAMPLE:
		if (state == DATA_SAMPLE) {
     906:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     90a:	84 30       	cpi	r24, 0x04	; 4
     90c:	59 f7       	brne	.-42     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = IDLE;
     90e:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <_ZN10ComHandler5stateE>
	static void zero_chamber(uint16_t);
	
public:
	static void flow_acq();
	static void start_test();
	static void stop_test() {stopFlag = true;};
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 1b 22 	sts	0x221B, r24	; 0x80221b <_ZN11TestHandler8stopFlagE>
		sendAnswer();
		break;

		case CHANGE_TO_DATA_SAMPLE:
		if (state == IDLE) {
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     918:	6a e1       	ldi	r22, 0x1A	; 26
     91a:	70 e2       	ldi	r23, 0x20	; 32
     91c:	e5 cf       	rjmp	.-54     	; 0x8e8 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x9a>
		}
		sendAnswer();
		break;
		
		case CHANGE_TO_AUTOCAL:
		if (state == IDLE) {
     91e:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     922:	81 11       	cpse	r24, r1
     924:	df cf       	rjmp	.-66     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = AUTOCAL;
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     92c:	6a e1       	ldi	r22, 0x1A	; 26
     92e:	70 e2       	ldi	r23, 0x20	; 32
     930:	8b e3       	ldi	r24, 0x3B	; 59
     932:	92 e2       	ldi	r25, 0x22	; 34
     934:	0e 94 91 1b 	call	0x3722	; 0x3722 <strcpy>
			sendAnswer();
     938:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
			TestHandler::start_aircal();
     93c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN11TestHandler12start_aircalEv>
     940:	80 c0       	rjmp	.+256    	; 0xa42 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f4>
     942:	8e ec       	ldi	r24, 0xCE	; 206
     944:	c8 2e       	mov	r12, r24
     946:	81 e2       	ldi	r24, 0x21	; 33
     948:	d8 2e       	mov	r13, r24
     94a:	0a e3       	ldi	r16, 0x3A	; 58
     94c:	12 e2       	ldi	r17, 0x22	; 34
		break;
		
		case CHANGE_TO_GASCAL:
		while (!r) // breaks off when '\r' is received
		{
			rxBuf[index++] = fetchData(); // append to buffer
     94e:	c7 01       	movw	r24, r14
     950:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN10ComHandler9fetchDataEv>
     954:	f6 01       	movw	r30, r12
     956:	81 93       	st	Z+, r24
     958:	6f 01       	movw	r12, r30
			if (Utils::txBuf[index-1] == '\r') r = true;
     95a:	f8 01       	movw	r30, r16
     95c:	81 91       	ld	r24, Z+
     95e:	8f 01       	movw	r16, r30
			sendAnswer();
		}
		break;
		
		case CHANGE_TO_GASCAL:
		while (!r) // breaks off when '\r' is received
     960:	8d 30       	cpi	r24, 0x0D	; 13
     962:	a9 f7       	brne	.-22     	; 0x94e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x100>
		{
			rxBuf[index++] = fetchData(); // append to buffer
			if (Utils::txBuf[index-1] == '\r') r = true;
		}
		gascal_o2_pct = strtod(Utils::txBuf, endptr1); // read O2
     964:	be 01       	movw	r22, r28
     966:	6f 5e       	subi	r22, 0xEF	; 239
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	8a e3       	ldi	r24, 0x3A	; 58
     96c:	92 e2       	ldi	r25, 0x22	; 34
     96e:	0e 94 2a 19 	call	0x3254	; 0x3254 <strtod>
     972:	6b 01       	movw	r12, r22
     974:	7c 01       	movw	r14, r24
		gascal_co2_pct = strtod(*endptr1, endptr2); // read CO2
     976:	be 01       	movw	r22, r28
     978:	6f 5e       	subi	r22, 0xEF	; 239
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	89 89       	ldd	r24, Y+17	; 0x11
     97e:	9a 89       	ldd	r25, Y+18	; 0x12
     980:	0e 94 2a 19 	call	0x3254	; 0x3254 <strtod>
     984:	4b 01       	movw	r8, r22
     986:	5c 01       	movw	r10, r24
		memset(Utils::txBuf,'\0', *endptr2-Utils::txBuf); // clear buffer
     988:	49 89       	ldd	r20, Y+17	; 0x11
     98a:	5a 89       	ldd	r21, Y+18	; 0x12
     98c:	4a 53       	subi	r20, 0x3A	; 58
     98e:	52 42       	sbci	r21, 0x22	; 34
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	8a e3       	ldi	r24, 0x3A	; 58
     996:	92 e2       	ldi	r25, 0x22	; 34
     998:	0e 94 8a 1b 	call	0x3714	; 0x3714 <memset>
		if (gascal_o2_pct < 0 || gascal_o2_pct > 100 ||
			gascal_co2_pct < 0 || gascal_co2_pct > 100 ||
			gascal_o2_pct + gascal_co2_pct > 100 || state != IDLE) // error cases
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	c7 01       	movw	r24, r14
     9a4:	b6 01       	movw	r22, r12
     9a6:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
     9aa:	87 fd       	sbrc	r24, 7
     9ac:	9b cf       	rjmp	.-202    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			if (Utils::txBuf[index-1] == '\r') r = true;
		}
		gascal_o2_pct = strtod(Utils::txBuf, endptr1); // read O2
		gascal_co2_pct = strtod(*endptr1, endptr2); // read CO2
		memset(Utils::txBuf,'\0', *endptr2-Utils::txBuf); // clear buffer
		if (gascal_o2_pct < 0 || gascal_o2_pct > 100 ||
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	48 ec       	ldi	r20, 0xC8	; 200
     9b4:	52 e4       	ldi	r21, 0x42	; 66
     9b6:	c7 01       	movw	r24, r14
     9b8:	b6 01       	movw	r22, r12
     9ba:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
     9be:	18 16       	cp	r1, r24
     9c0:	0c f4       	brge	.+2      	; 0x9c4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x176>
     9c2:	90 cf       	rjmp	.-224    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	a9 01       	movw	r20, r18
     9ca:	c5 01       	movw	r24, r10
     9cc:	b4 01       	movw	r22, r8
     9ce:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
     9d2:	87 fd       	sbrc	r24, 7
     9d4:	87 cf       	rjmp	.-242    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			gascal_co2_pct < 0 || gascal_co2_pct > 100 ||
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	48 ec       	ldi	r20, 0xC8	; 200
     9dc:	52 e4       	ldi	r21, 0x42	; 66
     9de:	c5 01       	movw	r24, r10
     9e0:	b4 01       	movw	r22, r8
     9e2:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
     9e6:	18 16       	cp	r1, r24
     9e8:	0c f4       	brge	.+2      	; 0x9ec <_ZN10ComHandler13changeHandlerENS_8change_eE+0x19e>
     9ea:	7c cf       	rjmp	.-264    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
     9ec:	a5 01       	movw	r20, r10
     9ee:	94 01       	movw	r18, r8
     9f0:	c7 01       	movw	r24, r14
     9f2:	b6 01       	movw	r22, r12
     9f4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	48 ec       	ldi	r20, 0xC8	; 200
     9fe:	52 e4       	ldi	r21, 0x42	; 66
     a00:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	0c f4       	brge	.+2      	; 0xa0a <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1bc>
     a08:	6d cf       	rjmp	.-294    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			gascal_o2_pct + gascal_co2_pct > 100 || state != IDLE) // error cases
     a0a:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     a0e:	81 11       	cpse	r24, r1
     a10:	69 cf       	rjmp	.-302    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
		{
			snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
			sendAnswer();
		} else {
			//snprintf(Utils::txBuf+1, TX_LEN-1, "0 %.2f %.2f\r", gascal_o2_pct, gascal_co2_pct); // debug
			state = GASCAL;
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     a18:	6a e1       	ldi	r22, 0x1A	; 26
     a1a:	70 e2       	ldi	r23, 0x20	; 32
     a1c:	8b e3       	ldi	r24, 0x3B	; 59
     a1e:	92 e2       	ldi	r25, 0x22	; 34
     a20:	0e 94 91 1b 	call	0x3722	; 0x3722 <strcpy>
			sendAnswer();
     a24:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
			TestHandler::start_gascal();
     a28:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN11TestHandler12start_gascalEv>
     a2c:	0a c0       	rjmp	.+20     	; 0xa42 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f4>
		snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
		sendAnswer();
		break;
		
		default:
		Utils::txBuf[0] = UNKNOWN_COMMAND;
     a2e:	80 ee       	ldi	r24, 0xE0	; 224
     a30:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		Utils::txBuf[1] = '\r';
     a34:	8d e0       	ldi	r24, 0x0D	; 13
     a36:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <_ZN5Utils5txBufE+0x1>
		Utils::txBuf[2] = '\0';
     a3a:	10 92 3c 22 	sts	0x223C, r1	; 0x80223c <_ZN5Utils5txBufE+0x2>
		sendAnswer();
     a3e:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
		break;
	}
     a42:	62 96       	adiw	r28, 0x12	; 18
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	9f 90       	pop	r9
     a5e:	8f 90       	pop	r8
     a60:	08 95       	ret

00000a62 <_ZN10ComHandler6handleEcNS_5com_eE>:
//=== PUBLIC FUNCTIONS ===//
//========================//

void ComHandler::handle(char c, com_e com)
{
	ComHandler::com = com;
     a62:	40 93 00 20 	sts	0x2000, r20	; 0x802000 <_ZN10ComHandler3comE>
	if ((c >> 4) == 0x0A) questionHandler((question_e)c); // Questions commands
     a66:	26 2f       	mov	r18, r22
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	44 e0       	ldi	r20, 0x04	; 4
     a6c:	35 95       	asr	r19
     a6e:	27 95       	ror	r18
     a70:	4a 95       	dec	r20
     a72:	e1 f7       	brne	.-8      	; 0xa6c <_ZN10ComHandler6handleEcNS_5com_eE+0xa>
     a74:	2a 30       	cpi	r18, 0x0A	; 10
     a76:	31 05       	cpc	r19, r1
     a78:	11 f4       	brne	.+4      	; 0xa7e <_ZN10ComHandler6handleEcNS_5com_eE+0x1c>
     a7a:	0c 94 c1 03 	jmp	0x782	; 0x782 <_ZN10ComHandler15questionHandlerENS_10question_eE>
	else if ((c >> 4) == 0x0C) changeHandler((change_e)c); // Change states
     a7e:	2c 30       	cpi	r18, 0x0C	; 12
     a80:	31 05       	cpc	r19, r1
     a82:	11 f4       	brne	.+4      	; 0xa88 <_ZN10ComHandler6handleEcNS_5com_eE+0x26>
     a84:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN10ComHandler13changeHandlerENS_8change_eE>
	else if (c == '\r') ; // ignore
     a88:	6d 30       	cpi	r22, 0x0D	; 13
     a8a:	51 f0       	breq	.+20     	; 0xaa0 <_ZN10ComHandler6handleEcNS_5com_eE+0x3e>
	else {
		Utils::txBuf[0] = UNKNOWN_COMMAND;
     a8c:	80 ee       	ldi	r24, 0xE0	; 224
     a8e:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		Utils::txBuf[1] = '\r';
     a92:	8d e0       	ldi	r24, 0x0D	; 13
     a94:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <_ZN5Utils5txBufE+0x1>
		Utils::txBuf[2] = '\0';
     a98:	10 92 3c 22 	sts	0x223C, r1	; 0x80223c <_ZN5Utils5txBufE+0x2>
		sendAnswer();
     a9c:	0c 94 99 03 	jmp	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
     aa0:	08 95       	ret

00000aa2 <_ZN9Ms5525dso8readCoefENS_6coef_eE>:
//=========================//
//=== PRIVATE FUNCTIONS ===//
//=========================//

uint16_t Ms5525dso::readCoef(coef_e c)
{
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	a8 97       	sbiw	r28, 0x28	; 40
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	8c 01       	movw	r16, r24
     abc:	d6 2e       	mov	r13, r22
	const char err[] = "Error: could not read flow sensor PROM.";
     abe:	88 e2       	ldi	r24, 0x28	; 40
     ac0:	eb e4       	ldi	r30, 0x4B	; 75
     ac2:	f0 e2       	ldi	r31, 0x20	; 32
     ac4:	de 01       	movw	r26, r28
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	01 90       	ld	r0, Z+
     aca:	0d 92       	st	X+, r0
     acc:	8a 95       	dec	r24
     ace:	e1 f7       	brne	.-8      	; 0xac8 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x26>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	f8 01       	movw	r30, r16
     ad4:	63 81       	ldd	r22, Z+3	; 0x03
     ad6:	84 81       	ldd	r24, Z+4	; 0x04
     ad8:	95 81       	ldd	r25, Z+5	; 0x05
     ada:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     ade:	f8 01       	movw	r30, r16
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	95 81       	ldd	r25, Z+5	; 0x05
     ae4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     ae8:	f8 01       	movw	r30, r16
     aea:	24 81       	ldd	r18, Z+4	; 0x04
     aec:	35 81       	ldd	r19, Z+5	; 0x05
     aee:	81 11       	cpse	r24, r1
     af0:	2e c0       	rjmp	.+92     	; 0xb4e <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xac>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(c);
     af2:	6d 2d       	mov	r22, r13
     af4:	c9 01       	movw	r24, r18
     af6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     afa:	41 e0       	ldi	r20, 0x01	; 1
     afc:	63 e0       	ldi	r22, 0x03	; 3
     afe:	f8 01       	movw	r30, r16
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	95 81       	ldd	r25, Z+5	; 0x05
     b04:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     b08:	f8 01       	movw	r30, r16
     b0a:	84 81       	ldd	r24, Z+4	; 0x04
     b0c:	95 81       	ldd	r25, Z+5	; 0x05
     b0e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     b12:	f8 01       	movw	r30, r16
     b14:	24 81       	ldd	r18, Z+4	; 0x04
     b16:	35 81       	ldd	r19, Z+5	; 0x05
     b18:	88 23       	and	r24, r24
     b1a:	49 f0       	breq	.+18     	; 0xb2e <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x8c>
		myTwie->errorHandler(err);
     b1c:	be 01       	movw	r22, r28
     b1e:	6f 5f       	subi	r22, 0xFF	; 255
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	c9 01       	movw	r24, r18
     b24:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN4Twie12errorHandlerEPKc>
		return 0;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	5a c0       	rjmp	.+180    	; 0xbe2 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x140>
	}
	
	myTwie->setAddress(address, Twie::DIR_READ);
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	f8 01       	movw	r30, r16
     b32:	63 81       	ldd	r22, Z+3	; 0x03
     b34:	c9 01       	movw	r24, r18
     b36:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     b3a:	f8 01       	movw	r30, r16
     b3c:	84 81       	ldd	r24, Z+4	; 0x04
     b3e:	95 81       	ldd	r25, Z+5	; 0x05
     b40:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     b44:	f8 01       	movw	r30, r16
     b46:	24 81       	ldd	r18, Z+4	; 0x04
     b48:	35 81       	ldd	r19, Z+5	; 0x05
     b4a:	88 23       	and	r24, r24
     b4c:	61 f0       	breq	.+24     	; 0xb66 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xc4>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	c9 01       	movw	r24, r18
     b54:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     b58:	be 01       	movw	r22, r28
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	f8 01       	movw	r30, r16
     b60:	84 81       	ldd	r24, Z+4	; 0x04
     b62:	95 81       	ldd	r25, Z+5	; 0x05
     b64:	df cf       	rjmp	.-66     	; 0xb24 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x82>
		return 0;
	}
	uint16_t temp = myTwie->getData(Twie::AA_ACK) << 8;
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	c9 01       	movw	r24, r18
     b6a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     b6e:	e8 2e       	mov	r14, r24
     b70:	f1 2c       	mov	r15, r1
     b72:	fe 2c       	mov	r15, r14
     b74:	ee 24       	eor	r14, r14
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	f8 01       	movw	r30, r16
     b7c:	84 81       	ldd	r24, Z+4	; 0x04
     b7e:	95 81       	ldd	r25, Z+5	; 0x05
     b80:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	temp |= myTwie->getData(Twie::AA_NACK);
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	f8 01       	movw	r30, r16
     b88:	84 81       	ldd	r24, Z+4	; 0x04
     b8a:	95 81       	ldd	r25, Z+5	; 0x05
     b8c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     b90:	e8 2a       	or	r14, r24
	
	int i = (c-0xA0)/2;
     b92:	6d 2d       	mov	r22, r13
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	60 5a       	subi	r22, 0xA0	; 160
     b98:	71 09       	sbc	r23, r1
     b9a:	77 ff       	sbrs	r23, 7
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x100>
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	75 95       	asr	r23
     ba4:	67 95       	ror	r22
	snprintf(Utils::txBuf,TX_LEN,"\tC%d: %u (0x%04x)\tQ%u: %d\r\n",i,temp,temp,i,Qs[i-1]);
     ba6:	f8 01       	movw	r30, r16
     ba8:	e6 0f       	add	r30, r22
     baa:	f7 1f       	adc	r31, r23
     bac:	87 89       	ldd	r24, Z+23	; 0x17
     bae:	1f 92       	push	r1
     bb0:	8f 93       	push	r24
     bb2:	7f 93       	push	r23
     bb4:	6f 93       	push	r22
     bb6:	ff 92       	push	r15
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	ef 92       	push	r14
     bbe:	7f 93       	push	r23
     bc0:	6f 93       	push	r22
     bc2:	8f e2       	ldi	r24, 0x2F	; 47
     bc4:	90 e2       	ldi	r25, 0x20	; 32
     bc6:	9f 93       	push	r25
     bc8:	8f 93       	push	r24
     bca:	1f 92       	push	r1
     bcc:	80 e4       	ldi	r24, 0x40	; 64
     bce:	8f 93       	push	r24
     bd0:	8a e3       	ldi	r24, 0x3A	; 58
     bd2:	92 e2       	ldi	r25, 0x22	; 34
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	0e 94 df 1b 	call	0x37be	; 0x37be <snprintf>
	
	return temp;
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	c7 01       	movw	r24, r14
}
     be2:	a8 96       	adiw	r28, 0x28	; 40
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	08 95       	ret

00000bf8 <_ZN9Ms5525dso5resetEv>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

void Ms5525dso::reset()
{
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	a4 97       	sbiw	r28, 0x24	; 36
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not reset flow sensor.";
     c0c:	84 e2       	ldi	r24, 0x24	; 36
     c0e:	e3 e7       	ldi	r30, 0x73	; 115
     c10:	f0 e2       	ldi	r31, 0x20	; 32
     c12:	de 01       	movw	r26, r28
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	01 90       	ld	r0, Z+
     c18:	0d 92       	st	X+, r0
     c1a:	8a 95       	dec	r24
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <_ZN9Ms5525dso5resetEv+0x1e>
		
	myTwie->setAddress(address, Twie::DIR_WRITE);
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	f8 01       	movw	r30, r16
     c22:	63 81       	ldd	r22, Z+3	; 0x03
     c24:	84 81       	ldd	r24, Z+4	; 0x04
     c26:	95 81       	ldd	r25, Z+5	; 0x05
     c28:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     c2c:	f8 01       	movw	r30, r16
     c2e:	84 81       	ldd	r24, Z+4	; 0x04
     c30:	95 81       	ldd	r25, Z+5	; 0x05
     c32:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     c36:	f8 01       	movw	r30, r16
     c38:	24 81       	ldd	r18, Z+4	; 0x04
     c3a:	35 81       	ldd	r19, Z+5	; 0x05
     c3c:	88 23       	and	r24, r24
     c3e:	31 f0       	breq	.+12     	; 0xc4c <_ZN9Ms5525dso5resetEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	63 e0       	ldi	r22, 0x03	; 3
     c44:	c9 01       	movw	r24, r18
     c46:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     c4a:	12 c0       	rjmp	.+36     	; 0xc70 <_ZN9Ms5525dso5resetEv+0x78>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x1E);
     c4c:	6e e1       	ldi	r22, 0x1E	; 30
     c4e:	c9 01       	movw	r24, r18
     c50:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	63 e0       	ldi	r22, 0x03	; 3
     c58:	f8 01       	movw	r30, r16
     c5a:	84 81       	ldd	r24, Z+4	; 0x04
     c5c:	95 81       	ldd	r25, Z+5	; 0x05
     c5e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     c62:	f8 01       	movw	r30, r16
     c64:	84 81       	ldd	r24, Z+4	; 0x04
     c66:	95 81       	ldd	r25, Z+5	; 0x05
     c68:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     c6c:	88 23       	and	r24, r24
     c6e:	49 f0       	breq	.+18     	; 0xc82 <_ZN9Ms5525dso5resetEv+0x8a>
		myTwie->errorHandler(err);
     c70:	be 01       	movw	r22, r28
     c72:	6f 5f       	subi	r22, 0xFF	; 255
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	f8 01       	movw	r30, r16
     c78:	84 81       	ldd	r24, Z+4	; 0x04
     c7a:	95 81       	ldd	r25, Z+5	; 0x05
     c7c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN4Twie12errorHandlerEPKc>
		return;
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <_ZN9Ms5525dso5resetEv+0x92>
	}
	
	Utils::delay_ms(3);
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN5Utils8delay_msEj>
}
     c8a:	a4 96       	adiw	r28, 0x24	; 36
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret

00000c9a <_ZN9Ms5525dso8readPROMEv>:

void Ms5525dso::readPROM()
{
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ec 01       	movw	r28, r24
	C1 = readCoef(C1_addr);
     ca0:	62 ea       	ldi	r22, 0xA2	; 162
     ca2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     ca6:	8e 83       	std	Y+6, r24	; 0x06
     ca8:	9f 83       	std	Y+7, r25	; 0x07
	C2 = readCoef(C2_addr);
     caa:	64 ea       	ldi	r22, 0xA4	; 164
     cac:	ce 01       	movw	r24, r28
     cae:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cb2:	88 87       	std	Y+8, r24	; 0x08
     cb4:	99 87       	std	Y+9, r25	; 0x09
	C3 = readCoef(C3_addr);
     cb6:	66 ea       	ldi	r22, 0xA6	; 166
     cb8:	ce 01       	movw	r24, r28
     cba:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cbe:	8a 87       	std	Y+10, r24	; 0x0a
     cc0:	9b 87       	std	Y+11, r25	; 0x0b
	C4 = readCoef(C4_addr);
     cc2:	68 ea       	ldi	r22, 0xA8	; 168
     cc4:	ce 01       	movw	r24, r28
     cc6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cca:	8c 87       	std	Y+12, r24	; 0x0c
     ccc:	9d 87       	std	Y+13, r25	; 0x0d
	C5 = readCoef(C5_addr);
     cce:	6a ea       	ldi	r22, 0xAA	; 170
     cd0:	ce 01       	movw	r24, r28
     cd2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cd6:	8e 87       	std	Y+14, r24	; 0x0e
     cd8:	9f 87       	std	Y+15, r25	; 0x0f
	C6 = readCoef(C6_addr);
     cda:	6c ea       	ldi	r22, 0xAC	; 172
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     ce2:	88 8b       	std	Y+16, r24	; 0x10
     ce4:	99 8b       	std	Y+17, r25	; 0x11
}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <_ZN9Ms5525dsoC1ENS_5osr_sEhP4Twie>:
		
//===================//
//=== CONSTRUCTOR ===//
//===================//

Ms5525dso::Ms5525dso(osr_s osr, uint8_t address, Twie* myTwie)
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	ec 01       	movw	r28, r24
     cfc:	6a 01       	movw	r12, r20
     cfe:	e6 2e       	mov	r14, r22
     d00:	6e e0       	ldi	r22, 0x0E	; 14
     d02:	6a 8b       	std	Y+18, r22	; 0x12
     d04:	50 e1       	ldi	r21, 0x10	; 16
     d06:	5b 8b       	std	Y+19, r21	; 0x13
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	8c 8b       	std	Y+20, r24	; 0x14
     d0c:	35 e0       	ldi	r19, 0x05	; 5
     d0e:	3d 8b       	std	Y+21, r19	; 0x15
     d10:	8e 8b       	std	Y+22, r24	; 0x16
     d12:	95 e1       	ldi	r25, 0x15	; 21
     d14:	9f 8b       	std	Y+23, r25	; 0x17
     d16:	68 8f       	std	Y+24, r22	; 0x18
     d18:	59 8f       	std	Y+25, r21	; 0x19
     d1a:	8a 8f       	std	Y+26, r24	; 0x1a
     d1c:	3b 8f       	std	Y+27, r19	; 0x1b
     d1e:	8c 8f       	std	Y+28, r24	; 0x1c
     d20:	9d 8f       	std	Y+29, r25	; 0x1d
{
	this->osr = osr;
     d22:	c8 82       	st	Y, r12
     d24:	d9 82       	std	Y+1, r13	; 0x01
     d26:	ea 82       	std	Y+2, r14	; 0x02
	this->address = address;
     d28:	2b 83       	std	Y+3, r18	; 0x03
	this->myTwie = myTwie;
     d2a:	0c 83       	std	Y+4, r16	; 0x04
     d2c:	1d 83       	std	Y+5, r17	; 0x05
	
	reset();
     d2e:	ce 01       	movw	r24, r28
     d30:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN9Ms5525dso5resetEv>
	readPROM();
     d34:	ce 01       	movw	r24, r28
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
	this->osr = osr;
	this->address = address;
	this->myTwie = myTwie;
	
	reset();
	readPROM();
     d44:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <_ZN9Ms5525dso8readPROMEv>

00000d48 <_ZN9Ms5525dso15convertPressureEv>:
	C5 = readCoef(C5_addr);
	C6 = readCoef(C6_addr);
}

void Ms5525dso::convertPressure()
{
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	e2 97       	sbiw	r28, 0x32	; 50
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert pressure in flow sensor.";
     d5c:	82 e3       	ldi	r24, 0x32	; 50
     d5e:	e7 e9       	ldi	r30, 0x97	; 151
     d60:	f0 e2       	ldi	r31, 0x20	; 32
     d62:	de 01       	movw	r26, r28
     d64:	11 96       	adiw	r26, 0x01	; 1
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	8a 95       	dec	r24
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <_ZN9Ms5525dso15convertPressureEv+0x1e>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	f8 01       	movw	r30, r16
     d72:	63 81       	ldd	r22, Z+3	; 0x03
     d74:	84 81       	ldd	r24, Z+4	; 0x04
     d76:	95 81       	ldd	r25, Z+5	; 0x05
     d78:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     d7c:	f8 01       	movw	r30, r16
     d7e:	84 81       	ldd	r24, Z+4	; 0x04
     d80:	95 81       	ldd	r25, Z+5	; 0x05
     d82:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     d86:	f8 01       	movw	r30, r16
     d88:	24 81       	ldd	r18, Z+4	; 0x04
     d8a:	35 81       	ldd	r19, Z+5	; 0x05
     d8c:	88 23       	and	r24, r24
     d8e:	31 f0       	breq	.+12     	; 0xd9c <_ZN9Ms5525dso15convertPressureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	63 e0       	ldi	r22, 0x03	; 3
     d94:	c9 01       	movw	r24, r18
     d96:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <_ZN9Ms5525dso15convertPressureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x40 + osr.cmd);
     d9c:	f8 01       	movw	r30, r16
     d9e:	60 81       	ld	r22, Z
     da0:	60 5c       	subi	r22, 0xC0	; 192
     da2:	c9 01       	movw	r24, r18
     da4:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     da8:	41 e0       	ldi	r20, 0x01	; 1
     daa:	63 e0       	ldi	r22, 0x03	; 3
     dac:	f8 01       	movw	r30, r16
     dae:	84 81       	ldd	r24, Z+4	; 0x04
     db0:	95 81       	ldd	r25, Z+5	; 0x05
     db2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     db6:	f8 01       	movw	r30, r16
     db8:	84 81       	ldd	r24, Z+4	; 0x04
     dba:	95 81       	ldd	r25, Z+5	; 0x05
     dbc:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     dc0:	88 23       	and	r24, r24
     dc2:	49 f0       	breq	.+18     	; 0xdd6 <_ZN9Ms5525dso15convertPressureEv+0x8e>
		myTwie->errorHandler(err);
     dc4:	be 01       	movw	r22, r28
     dc6:	6f 5f       	subi	r22, 0xFF	; 255
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	f8 01       	movw	r30, r16
     dcc:	84 81       	ldd	r24, Z+4	; 0x04
     dce:	95 81       	ldd	r25, Z+5	; 0x05
     dd0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN4Twie12errorHandlerEPKc>
		return;
     dd4:	05 c0       	rjmp	.+10     	; 0xde0 <_ZN9Ms5525dso15convertPressureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     dd6:	f8 01       	movw	r30, r16
     dd8:	81 81       	ldd	r24, Z+1	; 0x01
     dda:	92 81       	ldd	r25, Z+2	; 0x02
     ddc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN5Utils8delay_usEj>
}
     de0:	e2 96       	adiw	r28, 0x32	; 50
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <_ZN9Ms5525dso18convertTemperatureEv>:

void Ms5525dso::convertTemperature()
{	
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	e5 97       	sbiw	r28, 0x35	; 53
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert temperature in flow sensor.";
     e04:	85 e3       	ldi	r24, 0x35	; 53
     e06:	e9 ec       	ldi	r30, 0xC9	; 201
     e08:	f0 e2       	ldi	r31, 0x20	; 32
     e0a:	de 01       	movw	r26, r28
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	01 90       	ld	r0, Z+
     e10:	0d 92       	st	X+, r0
     e12:	8a 95       	dec	r24
     e14:	e1 f7       	brne	.-8      	; 0xe0e <_ZN9Ms5525dso18convertTemperatureEv+0x1e>

	myTwie->setAddress(address, Twie::DIR_WRITE);
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	f8 01       	movw	r30, r16
     e1a:	63 81       	ldd	r22, Z+3	; 0x03
     e1c:	84 81       	ldd	r24, Z+4	; 0x04
     e1e:	95 81       	ldd	r25, Z+5	; 0x05
     e20:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     e24:	f8 01       	movw	r30, r16
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	95 81       	ldd	r25, Z+5	; 0x05
     e2a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     e2e:	f8 01       	movw	r30, r16
     e30:	24 81       	ldd	r18, Z+4	; 0x04
     e32:	35 81       	ldd	r19, Z+5	; 0x05
     e34:	88 23       	and	r24, r24
     e36:	31 f0       	breq	.+12     	; 0xe44 <_ZN9Ms5525dso18convertTemperatureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	63 e0       	ldi	r22, 0x03	; 3
     e3c:	c9 01       	movw	r24, r18
     e3e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     e42:	14 c0       	rjmp	.+40     	; 0xe6c <_ZN9Ms5525dso18convertTemperatureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x50 + osr.cmd);
     e44:	f8 01       	movw	r30, r16
     e46:	60 81       	ld	r22, Z
     e48:	60 5b       	subi	r22, 0xB0	; 176
     e4a:	c9 01       	movw	r24, r18
     e4c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	63 e0       	ldi	r22, 0x03	; 3
     e54:	f8 01       	movw	r30, r16
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	95 81       	ldd	r25, Z+5	; 0x05
     e5a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     e5e:	f8 01       	movw	r30, r16
     e60:	84 81       	ldd	r24, Z+4	; 0x04
     e62:	95 81       	ldd	r25, Z+5	; 0x05
     e64:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     e68:	88 23       	and	r24, r24
     e6a:	49 f0       	breq	.+18     	; 0xe7e <_ZN9Ms5525dso18convertTemperatureEv+0x8e>
		myTwie->errorHandler(err);
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	f8 01       	movw	r30, r16
     e74:	84 81       	ldd	r24, Z+4	; 0x04
     e76:	95 81       	ldd	r25, Z+5	; 0x05
     e78:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN4Twie12errorHandlerEPKc>
		return;
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <_ZN9Ms5525dso18convertTemperatureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     e7e:	f8 01       	movw	r30, r16
     e80:	81 81       	ldd	r24, Z+1	; 0x01
     e82:	92 81       	ldd	r25, Z+2	; 0x02
     e84:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN5Utils8delay_usEj>
}
     e88:	e5 96       	adiw	r28, 0x35	; 53
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <_ZN9Ms5525dso7readADCEv>:

uint32_t Ms5525dso::readADC()
{
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	aa 97       	sbiw	r28, 0x2a	; 42
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not read ADC in flow sensor.";
     eb0:	8a e2       	ldi	r24, 0x2A	; 42
     eb2:	ee ef       	ldi	r30, 0xFE	; 254
     eb4:	f0 e2       	ldi	r31, 0x20	; 32
     eb6:	de 01       	movw	r26, r28
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	01 90       	ld	r0, Z+
     ebc:	0d 92       	st	X+, r0
     ebe:	8a 95       	dec	r24
     ec0:	e1 f7       	brne	.-8      	; 0xeba <_ZN9Ms5525dso7readADCEv+0x22>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	f8 01       	movw	r30, r16
     ec6:	63 81       	ldd	r22, Z+3	; 0x03
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	95 81       	ldd	r25, Z+5	; 0x05
     ecc:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     ed0:	f8 01       	movw	r30, r16
     ed2:	84 81       	ldd	r24, Z+4	; 0x04
     ed4:	95 81       	ldd	r25, Z+5	; 0x05
     ed6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     eda:	f8 01       	movw	r30, r16
     edc:	24 81       	ldd	r18, Z+4	; 0x04
     ede:	35 81       	ldd	r19, Z+5	; 0x05
     ee0:	81 11       	cpse	r24, r1
     ee2:	2f c0       	rjmp	.+94     	; 0xf42 <_ZN9Ms5525dso7readADCEv+0xaa>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(0x00);
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	c9 01       	movw	r24, r18
     ee8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	63 e0       	ldi	r22, 0x03	; 3
     ef0:	f8 01       	movw	r30, r16
     ef2:	84 81       	ldd	r24, Z+4	; 0x04
     ef4:	95 81       	ldd	r25, Z+5	; 0x05
     ef6:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     efa:	f8 01       	movw	r30, r16
     efc:	84 81       	ldd	r24, Z+4	; 0x04
     efe:	95 81       	ldd	r25, Z+5	; 0x05
     f00:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     f04:	f8 01       	movw	r30, r16
     f06:	24 81       	ldd	r18, Z+4	; 0x04
     f08:	35 81       	ldd	r19, Z+5	; 0x05
     f0a:	88 23       	and	r24, r24
     f0c:	51 f0       	breq	.+20     	; 0xf22 <_ZN9Ms5525dso7readADCEv+0x8a>
		myTwie->errorHandler(err);
     f0e:	be 01       	movw	r22, r28
     f10:	6f 5f       	subi	r22, 0xFF	; 255
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	c9 01       	movw	r24, r18
     f16:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN4Twie12errorHandlerEPKc>
		return 0;
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	cb 01       	movw	r24, r22
     f20:	4a c0       	rjmp	.+148    	; 0xfb6 <_ZN9Ms5525dso7readADCEv+0x11e>
	}
		
	myTwie->setAddress(address, Twie::DIR_READ);
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	f8 01       	movw	r30, r16
     f26:	63 81       	ldd	r22, Z+3	; 0x03
     f28:	c9 01       	movw	r24, r18
     f2a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     f2e:	f8 01       	movw	r30, r16
     f30:	84 81       	ldd	r24, Z+4	; 0x04
     f32:	95 81       	ldd	r25, Z+5	; 0x05
     f34:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN4Twie7isErrorEv>
     f38:	f8 01       	movw	r30, r16
     f3a:	24 81       	ldd	r18, Z+4	; 0x04
     f3c:	35 81       	ldd	r19, Z+5	; 0x05
     f3e:	88 23       	and	r24, r24
     f40:	61 f0       	breq	.+24     	; 0xf5a <_ZN9Ms5525dso7readADCEv+0xc2>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	63 e0       	ldi	r22, 0x03	; 3
     f46:	c9 01       	movw	r24, r18
     f48:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     f4c:	be 01       	movw	r22, r28
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	f8 01       	movw	r30, r16
     f54:	84 81       	ldd	r24, Z+4	; 0x04
     f56:	95 81       	ldd	r25, Z+5	; 0x05
     f58:	de cf       	rjmp	.-68     	; 0xf16 <_ZN9Ms5525dso7readADCEv+0x7e>
		return 0;
	}
	
	uint32_t b1 = myTwie->getData(Twie::AA_ACK);
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	c9 01       	movw	r24, r18
     f5e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     f62:	e8 2e       	mov	r14, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	f8 01       	movw	r30, r16
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	95 81       	ldd	r25, Z+5	; 0x05
     f6e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b2 = myTwie->getData(Twie::AA_ACK);
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	f8 01       	movw	r30, r16
     f76:	84 81       	ldd	r24, Z+4	; 0x04
     f78:	95 81       	ldd	r25, Z+5	; 0x05
     f7a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     f7e:	f8 2e       	mov	r15, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	62 e0       	ldi	r22, 0x02	; 2
     f84:	f8 01       	movw	r30, r16
     f86:	84 81       	ldd	r24, Z+4	; 0x04
     f88:	95 81       	ldd	r25, Z+5	; 0x05
     f8a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b3 = myTwie->getData(Twie::AA_NACK);
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	f8 01       	movw	r30, r16
     f92:	84 81       	ldd	r24, Z+4	; 0x04
     f94:	95 81       	ldd	r25, Z+5	; 0x05
     f96:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
	
	return (b1 << 16)|(b2 << 8)|b3;
     f9a:	4f 2d       	mov	r20, r15
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	76 2f       	mov	r23, r22
     fa4:	65 2f       	mov	r22, r21
     fa6:	54 2f       	mov	r21, r20
     fa8:	44 27       	eor	r20, r20
     faa:	6e 29       	or	r22, r14
     fac:	8a 01       	movw	r16, r20
     fae:	9b 01       	movw	r18, r22
     fb0:	08 2b       	or	r16, r24
     fb2:	c9 01       	movw	r24, r18
     fb4:	b8 01       	movw	r22, r16
}
     fb6:	aa 96       	adiw	r28, 0x2a	; 42
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	08 95       	ret

00000fca <_ZN9Ms5525dso4readEv>:

Ms5525dso::data_s Ms5525dso::read()
{	
     fca:	2f 92       	push	r2
     fcc:	3f 92       	push	r3
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	6a 97       	sbiw	r28, 0x1a	; 26
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	1c 01       	movw	r2, r24
	convertPressure();
     ffa:	0e 94 a4 06 	call	0xd48	; 0xd48 <_ZN9Ms5525dso15convertPressureEv>
	uint32_t D1 = readADC();
     ffe:	c1 01       	movw	r24, r2
    1000:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN9Ms5525dso7readADCEv>
    1004:	4b 01       	movw	r8, r22
    1006:	5c 01       	movw	r10, r24
	convertTemperature();
    1008:	c1 01       	movw	r24, r2
    100a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN9Ms5525dso18convertTemperatureEv>
	uint32_t D2 = readADC();
    100e:	c1 01       	movw	r24, r2
    1010:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN9Ms5525dso7readADCEv>
    1014:	2b 01       	movw	r4, r22
    1016:	3c 01       	movw	r6, r24
			
	double dT = D2 - C5*pow(2,Q5);
    1018:	f1 01       	movw	r30, r2
    101a:	66 89       	ldd	r22, Z+22	; 0x16
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    1026:	9b 01       	movw	r18, r22
    1028:	ac 01       	movw	r20, r24
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e4       	ldi	r25, 0x40	; 64
    1032:	0e 94 af 13 	call	0x275e	; 0x275e <pow>
    1036:	6b 01       	movw	r12, r22
    1038:	7c 01       	movw	r14, r24
    103a:	c3 01       	movw	r24, r6
    103c:	b2 01       	movw	r22, r4
    103e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    1042:	2b 01       	movw	r4, r22
    1044:	3c 01       	movw	r6, r24
    1046:	f1 01       	movw	r30, r2
    1048:	66 85       	ldd	r22, Z+14	; 0x0e
    104a:	77 85       	ldd	r23, Z+15	; 0x0f
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    1054:	a7 01       	movw	r20, r14
    1056:	96 01       	movw	r18, r12
    1058:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	c3 01       	movw	r24, r6
    1062:	b2 01       	movw	r22, r4
    1064:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1068:	6b 01       	movw	r12, r22
    106a:	7c 01       	movw	r14, r24
	double TEMP = 2000 + dT*C6/pow(2,Q6);
    106c:	f1 01       	movw	r30, r2
    106e:	67 89       	ldd	r22, Z+23	; 0x17
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e4       	ldi	r25, 0x40	; 64
    1086:	0e 94 af 13 	call	0x275e	; 0x275e <pow>
    108a:	2b 01       	movw	r4, r22
    108c:	3c 01       	movw	r6, r24
		
	double OFF = C2*pow(2,Q2) + dT*C4/pow(2,Q4);
    108e:	f1 01       	movw	r30, r2
    1090:	63 89       	ldd	r22, Z+19	; 0x13
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e4       	ldi	r25, 0x40	; 64
    10a8:	0e 94 af 13 	call	0x275e	; 0x275e <pow>
    10ac:	69 87       	std	Y+9, r22	; 0x09
    10ae:	7a 87       	std	Y+10, r23	; 0x0a
    10b0:	8b 87       	std	Y+11, r24	; 0x0b
    10b2:	9c 87       	std	Y+12, r25	; 0x0c
    10b4:	f1 01       	movw	r30, r2
    10b6:	65 89       	ldd	r22, Z+21	; 0x15
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e4       	ldi	r25, 0x40	; 64
    10ce:	0e 94 af 13 	call	0x275e	; 0x275e <pow>
    10d2:	6d 87       	std	Y+13, r22	; 0x0d
    10d4:	7e 87       	std	Y+14, r23	; 0x0e
    10d6:	8f 87       	std	Y+15, r24	; 0x0f
    10d8:	98 8b       	std	Y+16, r25	; 0x10
	double SENS = C1*pow(2,Q1) + dT*C3/pow(2,Q3);
    10da:	f1 01       	movw	r30, r2
    10dc:	62 89       	ldd	r22, Z+18	; 0x12
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e4       	ldi	r25, 0x40	; 64
    10f4:	0e 94 af 13 	call	0x275e	; 0x275e <pow>
    10f8:	69 8b       	std	Y+17, r22	; 0x11
    10fa:	7a 8b       	std	Y+18, r23	; 0x12
    10fc:	8b 8b       	std	Y+19, r24	; 0x13
    10fe:	9c 8b       	std	Y+20, r25	; 0x14
    1100:	f1 01       	movw	r30, r2
    1102:	64 89       	ldd	r22, Z+20	; 0x14
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e4       	ldi	r25, 0x40	; 64
    111a:	0e 94 af 13 	call	0x275e	; 0x275e <pow>
    111e:	6d 8b       	std	Y+21, r22	; 0x15
    1120:	7e 8b       	std	Y+22, r23	; 0x16
    1122:	8f 8b       	std	Y+23, r24	; 0x17
    1124:	98 8f       	std	Y+24, r25	; 0x18
	double P = (D1*SENS/pow(2,21) - OFF)/pow(2,15);
	
	data_s data;
	data.pressure = P/100.;
	data.temperature = TEMP/100.;
    1126:	f1 01       	movw	r30, r2
    1128:	60 89       	ldd	r22, Z+16	; 0x10
    112a:	71 89       	ldd	r23, Z+17	; 0x11
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    1134:	a7 01       	movw	r20, r14
    1136:	96 01       	movw	r18, r12
    1138:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    113c:	a3 01       	movw	r20, r6
    113e:	92 01       	movw	r18, r4
    1140:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a ef       	ldi	r20, 0xFA	; 250
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	48 ec       	ldi	r20, 0xC8	; 200
    1156:	52 e4       	ldi	r21, 0x42	; 66
    1158:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    115c:	16 2f       	mov	r17, r22
    115e:	07 2f       	mov	r16, r23
    1160:	89 8f       	std	Y+25, r24	; 0x19
    1162:	9a 8f       	std	Y+26, r25	; 0x1a
	return data;
    1164:	f1 01       	movw	r30, r2
    1166:	62 85       	ldd	r22, Z+10	; 0x0a
    1168:	73 85       	ldd	r23, Z+11	; 0x0b
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    1172:	a7 01       	movw	r20, r14
    1174:	96 01       	movw	r18, r12
    1176:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    117a:	2d 89       	ldd	r18, Y+21	; 0x15
    117c:	3e 89       	ldd	r19, Y+22	; 0x16
    117e:	4f 89       	ldd	r20, Y+23	; 0x17
    1180:	58 8d       	ldd	r21, Y+24	; 0x18
    1182:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    1186:	2b 01       	movw	r4, r22
    1188:	3c 01       	movw	r6, r24
    118a:	f1 01       	movw	r30, r2
    118c:	66 81       	ldd	r22, Z+6	; 0x06
    118e:	77 81       	ldd	r23, Z+7	; 0x07
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    1198:	29 89       	ldd	r18, Y+17	; 0x11
    119a:	3a 89       	ldd	r19, Y+18	; 0x12
    119c:	4b 89       	ldd	r20, Y+19	; 0x13
    119e:	5c 89       	ldd	r21, Y+20	; 0x14
    11a0:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
    11a8:	c3 01       	movw	r24, r6
    11aa:	b2 01       	movw	r22, r4
    11ac:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    11b0:	2b 01       	movw	r4, r22
    11b2:	3c 01       	movw	r6, r24
    11b4:	c5 01       	movw	r24, r10
    11b6:	b4 01       	movw	r22, r8
    11b8:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    11bc:	9b 01       	movw	r18, r22
    11be:	ac 01       	movw	r20, r24
    11c0:	c3 01       	movw	r24, r6
    11c2:	b2 01       	movw	r22, r4
    11c4:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	55 e3       	ldi	r21, 0x35	; 53
    11d0:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    11d4:	4b 01       	movw	r8, r22
    11d6:	5c 01       	movw	r10, r24
    11d8:	f1 01       	movw	r30, r2
    11da:	64 85       	ldd	r22, Z+12	; 0x0c
    11dc:	75 85       	ldd	r23, Z+13	; 0x0d
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    11e6:	a7 01       	movw	r20, r14
    11e8:	96 01       	movw	r18, r12
    11ea:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    11ee:	2d 85       	ldd	r18, Y+13	; 0x0d
    11f0:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f2:	4f 85       	ldd	r20, Y+15	; 0x0f
    11f4:	58 89       	ldd	r21, Y+16	; 0x10
    11f6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    11fa:	6b 01       	movw	r12, r22
    11fc:	7c 01       	movw	r14, r24
    11fe:	f1 01       	movw	r30, r2
    1200:	60 85       	ldd	r22, Z+8	; 0x08
    1202:	71 85       	ldd	r23, Z+9	; 0x09
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    120c:	29 85       	ldd	r18, Y+9	; 0x09
    120e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1210:	4b 85       	ldd	r20, Y+11	; 0x0b
    1212:	5c 85       	ldd	r21, Y+12	; 0x0c
    1214:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	c7 01       	movw	r24, r14
    121e:	b6 01       	movw	r22, r12
    1220:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    1224:	9b 01       	movw	r18, r22
    1226:	ac 01       	movw	r20, r24
    1228:	c5 01       	movw	r24, r10
    122a:	b4 01       	movw	r22, r8
    122c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	58 e3       	ldi	r21, 0x38	; 56
    1238:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	48 ec       	ldi	r20, 0xC8	; 200
    1242:	52 e4       	ldi	r21, 0x42	; 66
    1244:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    1248:	9b 01       	movw	r18, r22
    124a:	ab 01       	movw	r20, r22
    124c:	bc 01       	movw	r22, r24
    124e:	49 83       	std	Y+1, r20	; 0x01
    1250:	5a 83       	std	Y+2, r21	; 0x02
    1252:	6b 83       	std	Y+3, r22	; 0x03
    1254:	7c 83       	std	Y+4, r23	; 0x04
    1256:	81 2f       	mov	r24, r17
    1258:	90 2f       	mov	r25, r16
    125a:	a9 8d       	ldd	r26, Y+25	; 0x19
    125c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    125e:	8d 83       	std	Y+5, r24	; 0x05
    1260:	9e 83       	std	Y+6, r25	; 0x06
    1262:	af 83       	std	Y+7, r26	; 0x07
    1264:	b8 87       	std	Y+8, r27	; 0x08
    1266:	3a 81       	ldd	r19, Y+2	; 0x02
    1268:	4b 81       	ldd	r20, Y+3	; 0x03
    126a:	5c 81       	ldd	r21, Y+4	; 0x04
    126c:	61 2f       	mov	r22, r17
    126e:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1270:	8f 81       	ldd	r24, Y+7	; 0x07
    1272:	98 85       	ldd	r25, Y+8	; 0x08
    1274:	6a 96       	adiw	r28, 0x1a	; 26
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	bf 90       	pop	r11
    128c:	af 90       	pop	r10
    128e:	9f 90       	pop	r9
    1290:	8f 90       	pop	r8
    1292:	7f 90       	pop	r7
    1294:	6f 90       	pop	r6
    1296:	5f 90       	pop	r5
    1298:	4f 90       	pop	r4
    129a:	3f 90       	pop	r3
    129c:	2f 90       	pop	r2
    129e:	08 95       	ret

000012a0 <_ZN4PumpC1Ev>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Pump::Pump()
    12a0:	fc 01       	movw	r30, r24
{
	PORTC_DIRSET = PIN3_bm;
    12a2:	98 e0       	ldi	r25, 0x08	; 8
    12a4:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	on = true;
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
    12a8:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
    12ac:	10 82       	st	Z, r1
    12ae:	08 95       	ret

000012b0 <_ZN4Pump6turnOnEv>:
//=== PUBLIC FUNCTIONS ===//
//========================//

void Pump::turnOn()
{
	PORTC_OUTSET = PIN3_bm;
    12b0:	28 e0       	ldi	r18, 0x08	; 8
    12b2:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	on = true;
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
    12bc:	08 95       	ret

000012be <_ZN4Pump7turnOffEv>:
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
    12be:	28 e0       	ldi	r18, 0x08	; 8
    12c0:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
    12c4:	fc 01       	movw	r30, r24
    12c6:	10 82       	st	Z, r1
    12c8:	08 95       	ret

000012ca <__vector_14>:
}

void Tcc0::enableTimerErrorInterrupt(Utils::interruptLevel_e timerErrorLevel)
{
	this->timerErrorLevel = timerErrorLevel;
	TCC0_INTCTRLA = (timerErrorLevel << TC0_ERRINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_ERRINTLVL_gm);
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	08 b6       	in	r0, 0x38	; 56
    12d6:	0f 92       	push	r0
    12d8:	18 be       	out	0x38, r1	; 56
    12da:	09 b6       	in	r0, 0x39	; 57
    12dc:	0f 92       	push	r0
    12de:	19 be       	out	0x39, r1	; 57
    12e0:	0b b6       	in	r0, 0x3b	; 59
    12e2:	0f 92       	push	r0
    12e4:	1b be       	out	0x3b, r1	; 59
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
    12fe:	60 91 13 22 	lds	r22, 0x2213	; 0x802213 <_ZN4Tcc016timeIncrement_msE>
    1302:	70 91 14 22 	lds	r23, 0x2214	; 0x802214 <_ZN4Tcc016timeIncrement_msE+0x1>
    1306:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <_ZN4Tcc016timeIncrement_msE+0x2>
    130a:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <_ZN4Tcc016timeIncrement_msE+0x3>
    130e:	20 91 17 22 	lds	r18, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1312:	30 91 18 22 	lds	r19, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1316:	40 91 19 22 	lds	r20, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    131a:	50 91 1a 22 	lds	r21, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    131e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    1322:	60 93 17 22 	sts	0x2217, r22	; 0x802217 <_ZN4Tcc07time_msE>
    1326:	70 93 18 22 	sts	0x2218, r23	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    132a:	80 93 19 22 	sts	0x2219, r24	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    132e:	90 93 1a 22 	sts	0x221A, r25	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1332:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN10ComHandler6updateEv>
    1336:	ff 91       	pop	r31
    1338:	ef 91       	pop	r30
    133a:	bf 91       	pop	r27
    133c:	af 91       	pop	r26
    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	7f 91       	pop	r23
    1344:	6f 91       	pop	r22
    1346:	5f 91       	pop	r21
    1348:	4f 91       	pop	r20
    134a:	3f 91       	pop	r19
    134c:	2f 91       	pop	r18
    134e:	0f 90       	pop	r0
    1350:	0b be       	out	0x3b, r0	; 59
    1352:	0f 90       	pop	r0
    1354:	09 be       	out	0x39, r0	; 57
    1356:	0f 90       	pop	r0
    1358:	08 be       	out	0x38, r0	; 56
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>:
}

void Tcc0::enableTimerOverflowInterrupt(Utils::interruptLevel_e timerOverflowLevel)
{
	this->timerOverflowLevel = timerOverflowLevel;
    1364:	fc 01       	movw	r30, r24
    1366:	67 87       	std	Z+15, r22	; 0x0f
	TCC0_INTCTRLA = (timerOverflowLevel << TC0_OVFINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_OVFINTLVL_gm);
    1368:	e6 e0       	ldi	r30, 0x06	; 6
    136a:	f8 e0       	ldi	r31, 0x08	; 8
    136c:	80 81       	ld	r24, Z
    136e:	8c 7f       	andi	r24, 0xFC	; 252
    1370:	68 2b       	or	r22, r24
    1372:	60 83       	st	Z, r22
    1374:	08 95       	ret

00001376 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
    1376:	0f 93       	push	r16
//=== SETTERS ===//
//===============//

void Tcc0::setClockSource(clockSource_e clockSource)
{
	this->clockSource = clockSource;
    1378:	fc 01       	movw	r30, r24
    137a:	60 83       	st	Z, r22
	TCC0_CTRLA = clockSource;
    137c:	60 93 00 08 	sts	0x0800, r22	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
    1380:	20 93 13 22 	sts	0x2213, r18	; 0x802213 <_ZN4Tcc016timeIncrement_msE>
    1384:	30 93 14 22 	sts	0x2214, r19	; 0x802214 <_ZN4Tcc016timeIncrement_msE+0x1>
    1388:	40 93 15 22 	sts	0x2215, r20	; 0x802215 <_ZN4Tcc016timeIncrement_msE+0x2>
    138c:	50 93 16 22 	sts	0x2216, r21	; 0x802216 <_ZN4Tcc016timeIncrement_msE+0x3>
	enableTimerOverflowInterrupt(level);
    1390:	60 2f       	mov	r22, r16
}
    1392:	0f 91       	pop	r16

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
	enableTimerOverflowInterrupt(level);
    1394:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>

00001398 <_ZN11TestHandlerC1EN5Utils8gascal_sEP4AdcaP9Ms5525dsoP4PumpP4Tcc0P7UsartE0P7UsartC1P5ValveSF_SF_>:
		myUsart0->sendString(Utils::txBuf);
		myUsart1->sendString(Utils::txBuf);
	}
	myUsart0->setRXC(false);
	myUsart1->setRXC(false);
}
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	28 97       	sbiw	r28, 0x08	; 8
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	09 83       	std	Y+1, r16	; 0x01
    13bc:	1a 83       	std	Y+2, r17	; 0x02
    13be:	2b 83       	std	Y+3, r18	; 0x03
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	4d 83       	std	Y+5, r20	; 0x05
    13c4:	5e 83       	std	Y+6, r21	; 0x06
    13c6:	6f 83       	std	Y+7, r22	; 0x07
    13c8:	78 87       	std	Y+8, r23	; 0x08
    13ca:	88 e0       	ldi	r24, 0x08	; 8
    13cc:	fe 01       	movw	r30, r28
    13ce:	31 96       	adiw	r30, 0x01	; 1
    13d0:	ae e2       	ldi	r26, 0x2E	; 46
    13d2:	b2 e2       	ldi	r27, 0x22	; 34
    13d4:	01 90       	ld	r0, Z+
    13d6:	0d 92       	st	X+, r0
    13d8:	8a 95       	dec	r24
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <_ZN11TestHandlerC1EN5Utils8gascal_sEP4AdcaP9Ms5525dsoP4PumpP4Tcc0P7UsartE0P7UsartC1P5ValveSF_SF_+0x3c>
    13dc:	e0 92 2c 22 	sts	0x222C, r14	; 0x80222c <_ZN11TestHandler5myAdcE>
    13e0:	f0 92 2d 22 	sts	0x222D, r15	; 0x80222d <_ZN11TestHandler5myAdcE+0x1>
    13e4:	c0 92 2a 22 	sts	0x222A, r12	; 0x80222a <_ZN11TestHandler12myFlowSensorE>
    13e8:	d0 92 2b 22 	sts	0x222B, r13	; 0x80222b <_ZN11TestHandler12myFlowSensorE+0x1>
    13ec:	a0 92 28 22 	sts	0x2228, r10	; 0x802228 <_ZN11TestHandler6myPumpE>
    13f0:	b0 92 29 22 	sts	0x2229, r11	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    13f4:	80 92 26 22 	sts	0x2226, r8	; 0x802226 <_ZN11TestHandler7myTimerE>
    13f8:	90 92 27 22 	sts	0x2227, r9	; 0x802227 <_ZN11TestHandler7myTimerE+0x1>
    13fc:	88 8d       	ldd	r24, Y+24	; 0x18
    13fe:	99 8d       	ldd	r25, Y+25	; 0x19
    1400:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <_ZN11TestHandler8myUsart0E>
    1404:	90 93 25 22 	sts	0x2225, r25	; 0x802225 <_ZN11TestHandler8myUsart0E+0x1>
    1408:	8a 8d       	ldd	r24, Y+26	; 0x1a
    140a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    140c:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <_ZN11TestHandler8myUsart1E>
    1410:	90 93 23 22 	sts	0x2223, r25	; 0x802223 <_ZN11TestHandler8myUsart1E+0x1>
    1414:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1416:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1418:	80 93 20 22 	sts	0x2220, r24	; 0x802220 <_ZN11TestHandler11gascalValveE>
    141c:	90 93 21 22 	sts	0x2221, r25	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1420:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1422:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1424:	80 93 1e 22 	sts	0x221E, r24	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1428:	90 93 1f 22 	sts	0x221F, r25	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    142c:	88 a1       	ldd	r24, Y+32	; 0x20
    142e:	99 a1       	ldd	r25, Y+33	; 0x21
    1430:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <_ZN11TestHandler11outputValveE>
    1434:	90 93 1d 22 	sts	0x221D, r25	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1438:	28 96       	adiw	r28, 0x08	; 8
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	af 90       	pop	r10
    1452:	9f 90       	pop	r9
    1454:	8f 90       	pop	r8
    1456:	08 95       	ret

00001458 <_ZN11TestHandler12oversampleO2Ej>:
    1458:	cf 92       	push	r12
    145a:	df 92       	push	r13
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	8c 01       	movw	r16, r24
    146a:	c0 e0       	ldi	r28, 0x00	; 0
    146c:	d0 e0       	ldi	r29, 0x00	; 0
    146e:	c1 2c       	mov	r12, r1
    1470:	d1 2c       	mov	r13, r1
    1472:	76 01       	movw	r14, r12
    1474:	c0 17       	cp	r28, r16
    1476:	d1 07       	cpc	r29, r17
    1478:	69 f0       	breq	.+26     	; 0x1494 <_ZN11TestHandler12oversampleO2Ej+0x3c>
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <_ZN11TestHandler5myAdcE>
    1480:	90 91 2d 22 	lds	r25, 0x222D	; 0x80222d <_ZN11TestHandler5myAdcE+0x1>
    1484:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN4Adca11readChannelENS_9channel_eE>
    1488:	c8 0e       	add	r12, r24
    148a:	d9 1e       	adc	r13, r25
    148c:	e1 1c       	adc	r14, r1
    148e:	f1 1c       	adc	r15, r1
    1490:	21 96       	adiw	r28, 0x01	; 1
    1492:	f0 cf       	rjmp	.-32     	; 0x1474 <_ZN11TestHandler12oversampleO2Ej+0x1c>
    1494:	c7 01       	movw	r24, r14
    1496:	b6 01       	movw	r22, r12
    1498:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24
    14a0:	be 01       	movw	r22, r28
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	c7 01       	movw	r24, r14
    14b0:	b6 01       	movw	r22, r12
    14b2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	08 95       	ret

000014c8 <_ZN11TestHandler13o2_counts2pctEd>:
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ce e2       	ldi	r28, 0x2E	; 46
    14ce:	d2 e2       	ldi	r29, 0x22	; 34
    14d0:	28 81       	ld	r18, Y
    14d2:	39 81       	ldd	r19, Y+1	; 0x01
    14d4:	4a 81       	ldd	r20, Y+2	; 0x02
    14d6:	5b 81       	ldd	r21, Y+3	; 0x03
    14d8:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	4e 81       	ldd	r20, Y+6	; 0x06
    14e2:	5f 81       	ldd	r21, Y+7	; 0x07
    14e4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <_ZN11TestHandler12zero_chamberEj>:
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	6c 01       	movw	r12, r24
    1508:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    150c:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1510:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1514:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1518:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    151c:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1520:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
    1524:	e1 2c       	mov	r14, r1
    1526:	f1 2c       	mov	r15, r1
    1528:	60 91 17 22 	lds	r22, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    152c:	70 91 18 22 	lds	r23, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1530:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1534:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1538:	a3 01       	movw	r20, r6
    153a:	92 01       	movw	r18, r4
    153c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1540:	4b 01       	movw	r8, r22
    1542:	5c 01       	movw	r10, r24
    1544:	c7 01       	movw	r24, r14
    1546:	b6 01       	movw	r22, r12
    1548:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    154c:	9b 01       	movw	r18, r22
    154e:	ac 01       	movw	r20, r24
    1550:	c5 01       	movw	r24, r10
    1552:	b4 01       	movw	r22, r8
    1554:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
    1558:	87 fd       	sbrc	r24, 7
    155a:	e6 cf       	rjmp	.-52     	; 0x1528 <_ZN11TestHandler12zero_chamberEj+0x3a>
    155c:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    1560:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	bf 90       	pop	r11
    156e:	af 90       	pop	r10
    1570:	9f 90       	pop	r9
    1572:	8f 90       	pop	r8
    1574:	7f 90       	pop	r7
    1576:	6f 90       	pop	r6
    1578:	5f 90       	pop	r5
    157a:	4f 90       	pop	r4
    157c:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>

00001580 <_ZN11TestHandler10start_testEv>:

void TestHandler::start_test()
{
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	4f 92       	push	r4
    1586:	5f 92       	push	r5
    1588:	6f 92       	push	r6
    158a:	7f 92       	push	r7
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	60 97       	sbiw	r28, 0x10	; 16
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	00 e1       	ldi	r16, 0x10	; 16
    15b0:	10 e0       	ldi	r17, 0x00	; 0
	const uint16_t AUTOZERO_DURATION_ms = 30000;
	const double FLOW_THRESHOLD = 0.075;
	const double VE_GAIN = 0.0741;
	
	// Zero-flow set
	double zero_press = 0;
    15b2:	19 86       	std	Y+9, r1	; 0x09
    15b4:	1a 86       	std	Y+10, r1	; 0x0a
    15b6:	1b 86       	std	Y+11, r1	; 0x0b
    15b8:	1c 86       	std	Y+12, r1	; 0x0c
	for (int i = 0; i < ZERO_FLOW_NUMBER_OF_SAMPLES; i++) {
		Ms5525dso::data_s zero = myFlowSensor->read();
    15ba:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <_ZN11TestHandler12myFlowSensorE>
    15be:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <_ZN11TestHandler12myFlowSensorE+0x1>
    15c2:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN9Ms5525dso4readEv>
    15c6:	29 83       	std	Y+1, r18	; 0x01
    15c8:	3a 83       	std	Y+2, r19	; 0x02
    15ca:	4b 83       	std	Y+3, r20	; 0x03
    15cc:	5c 83       	std	Y+4, r21	; 0x04
    15ce:	6d 83       	std	Y+5, r22	; 0x05
    15d0:	7e 83       	std	Y+6, r23	; 0x06
    15d2:	8f 83       	std	Y+7, r24	; 0x07
    15d4:	98 87       	std	Y+8, r25	; 0x08
		zero_press += zero.pressure/ZERO_FLOW_NUMBER_OF_SAMPLES;
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5d e3       	ldi	r21, 0x3D	; 61
    15de:	69 81       	ldd	r22, Y+1	; 0x01
    15e0:	7a 81       	ldd	r23, Y+2	; 0x02
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	69 85       	ldd	r22, Y+9	; 0x09
    15f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    15f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    15fa:	69 87       	std	Y+9, r22	; 0x09
    15fc:	7a 87       	std	Y+10, r23	; 0x0a
    15fe:	8b 87       	std	Y+11, r24	; 0x0b
    1600:	9c 87       	std	Y+12, r25	; 0x0c
    1602:	01 50       	subi	r16, 0x01	; 1
    1604:	11 09       	sbc	r17, r1
	const double FLOW_THRESHOLD = 0.075;
	const double VE_GAIN = 0.0741;
	
	// Zero-flow set
	double zero_press = 0;
	for (int i = 0; i < ZERO_FLOW_NUMBER_OF_SAMPLES; i++) {
    1606:	c9 f6       	brne	.-78     	; 0x15ba <_ZN11TestHandler10start_testEv+0x3a>
    1608:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    160c:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1610:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1614:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1618:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    161c:	90 91 18 22 	lds	r25, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1620:	a0 91 19 22 	lds	r26, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1624:	b0 91 1a 22 	lds	r27, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1628:	8d 87       	std	Y+13, r24	; 0x0d
    162a:	9e 87       	std	Y+14, r25	; 0x0e
    162c:	af 87       	std	Y+15, r26	; 0x0f
    162e:	b8 8b       	std	Y+16, r27	; 0x10
	
	double totalVE = 0;
	double outputTimeFlag = myTimer->getTime_ms();
	double sampleTimeFlag = myTimer->getTime_ms();
	
	sampleValve->close();
    1630:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1634:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1638:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	outputValve->open();
    163c:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    1640:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1644:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
	myPump->turnOn();
    1648:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    164c:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    1650:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN4Pump6turnOnEv>
	}

// 	snprintf(Utils::txBuf, TX_LEN, "sep=,\r\nTime [ms],O2 [%], VE [l]\r\n");
// 	ComHandler::sendAnswer();
	
	double totalVE = 0;
    1654:	81 2c       	mov	r8, r1
    1656:	91 2c       	mov	r9, r1
    1658:	54 01       	movw	r10, r8
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    165a:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <_ZN7UsartE07rxcFlagE>
	
	sampleValve->close();
	outputValve->open();
	myPump->turnOn();
	
	while (!(myUsart0->isRXC()) || !(myUsart1->isRXC()) || !(stopFlag))
    165e:	88 23       	and	r24, r24
    1660:	c9 f1       	breq	.+114    	; 0x16d4 <_ZN11TestHandler10start_testEv+0x154>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    1662:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <_ZN7UsartC17rxcFlagE>
    1666:	88 23       	and	r24, r24
    1668:	a9 f1       	breq	.+106    	; 0x16d4 <_ZN11TestHandler10start_testEv+0x154>
    166a:	80 91 1b 22 	lds	r24, 0x221B	; 0x80221b <_ZN11TestHandler8stopFlagE>
    166e:	88 23       	and	r24, r24
    1670:	89 f1       	breq	.+98     	; 0x16d4 <_ZN11TestHandler10start_testEv+0x154>
	void setRXC(bool b){rxcFlag = b;};
    1672:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <_ZN7UsartE07rxcFlagE>
	void setRXC(bool b){rxcFlag = b;};
    1676:	10 92 37 22 	sts	0x2237, r1	; 0x802237 <_ZN7UsartC17rxcFlagE>
		if (diff > FLOW_THRESHOLD) sampleValve->open();
		else sampleValve->close();
	}
	myUsart0->setRXC(false);
	myUsart1->setRXC(false);
	stopFlag = false;
    167a:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <_ZN11TestHandler8stopFlagE>
	
	sampleValve->open();
    167e:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1682:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1686:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
	zero_chamber(AUTOZERO_DURATION_ms);
    168a:	80 e3       	ldi	r24, 0x30	; 48
    168c:	95 e7       	ldi	r25, 0x75	; 117
    168e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN11TestHandler12zero_chamberEj>
	sampleValve->close();
    1692:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1696:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    169a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	myPump->turnOff();
    169e:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    16a2:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
}
    16a6:	60 96       	adiw	r28, 0x10	; 16
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	7f 90       	pop	r7
    16c6:	6f 90       	pop	r6
    16c8:	5f 90       	pop	r5
    16ca:	4f 90       	pop	r4
    16cc:	3f 90       	pop	r3
    16ce:	2f 90       	pop	r2
	stopFlag = false;
	
	sampleValve->open();
	zero_chamber(AUTOZERO_DURATION_ms);
	sampleValve->close();
	myPump->turnOff();
    16d0:	0c 94 5f 09 	jmp	0x12be	; 0x12be <_ZN4Pump7turnOffEv>
    16d4:	c0 90 17 22 	lds	r12, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    16d8:	d0 90 18 22 	lds	r13, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    16dc:	e0 90 19 22 	lds	r14, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    16e0:	f0 90 1a 22 	lds	r15, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
	while (!(myUsart0->isRXC()) || !(myUsart1->isRXC()) || !(stopFlag))
	{
		double timeNow_ms = myTimer->getTime_ms();
		
		// Handle output valve
		if (outputValve->isOpen() && timeNow_ms - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    16e4:	00 91 1c 22 	lds	r16, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    16e8:	10 91 1d 22 	lds	r17, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    16ec:	d8 01       	movw	r26, r16
    16ee:	11 96       	adiw	r26, 0x01	; 1
    16f0:	8c 91       	ld	r24, X
    16f2:	88 23       	and	r24, r24
    16f4:	81 f0       	breq	.+32     	; 0x1716 <_ZN11TestHandler10start_testEv+0x196>
    16f6:	a3 01       	movw	r20, r6
    16f8:	92 01       	movw	r18, r4
    16fa:	c7 01       	movw	r24, r14
    16fc:	b6 01       	movw	r22, r12
    16fe:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a ef       	ldi	r20, 0xFA	; 250
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    170e:	18 16       	cp	r1, r24
    1710:	0c f4       	brge	.+2      	; 0x1714 <_ZN11TestHandler10start_testEv+0x194>
    1712:	c4 c0       	rjmp	.+392    	; 0x189c <_ZN11TestHandler10start_testEv+0x31c>
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <_ZN11TestHandler10start_testEv+0x1b4>
			outputTimeFlag = timeNow_ms;
			outputValve->close();
		} else if (outputValve->isClosed() && timeNow_ms - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    1716:	a3 01       	movw	r20, r6
    1718:	92 01       	movw	r18, r4
    171a:	c7 01       	movw	r24, r14
    171c:	b6 01       	movw	r22, r12
    171e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	4a ef       	ldi	r20, 0xFA	; 250
    1728:	55 e4       	ldi	r21, 0x45	; 69
    172a:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    172e:	18 16       	cp	r1, r24
    1730:	0c f4       	brge	.+2      	; 0x1734 <_ZN11TestHandler10start_testEv+0x1b4>
    1732:	b8 c0       	rjmp	.+368    	; 0x18a4 <_ZN11TestHandler10start_testEv+0x324>
			outputTimeFlag = timeNow_ms;
			outputValve->open();
		}
		
		// Handle o2 sample
		if (timeNow_ms - sampleTimeFlag > SAMPLE_PERIOD_ms) {
    1734:	2d 85       	ldd	r18, Y+13	; 0x0d
    1736:	3e 85       	ldd	r19, Y+14	; 0x0e
    1738:	4f 85       	ldd	r20, Y+15	; 0x0f
    173a:	58 89       	ldd	r21, Y+16	; 0x10
    173c:	c7 01       	movw	r24, r14
    173e:	b6 01       	movw	r22, r12
    1740:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e4       	ldi	r19, 0x40	; 64
    1748:	4c e1       	ldi	r20, 0x1C	; 28
    174a:	56 e4       	ldi	r21, 0x46	; 70
    174c:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    1750:	18 16       	cp	r1, r24
    1752:	0c f0       	brlt	.+2      	; 0x1756 <_ZN11TestHandler10start_testEv+0x1d6>
    1754:	60 c0       	rjmp	.+192    	; 0x1816 <_ZN11TestHandler10start_testEv+0x296>
			sampleTimeFlag = timeNow_ms;
			double o2_pct = o2_counts2pct(oversampleO2(OVERSAMPLE_COEFF));
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	94 e0       	ldi	r25, 0x04	; 4
    175a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN11TestHandler12oversampleO2Ej>
    175e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN11TestHandler13o2_counts2pctEd>
    1762:	16 2f       	mov	r17, r22
    1764:	07 2f       	mov	r16, r23
    1766:	38 2e       	mov	r3, r24
    1768:	29 2e       	mov	r2, r25
			double ve_l = VE_GAIN*totalVE;
    176a:	2e eb       	ldi	r18, 0xBE	; 190
    176c:	31 ec       	ldi	r19, 0xC1	; 193
    176e:	47 e9       	ldi	r20, 0x97	; 151
    1770:	5d e3       	ldi	r21, 0x3D	; 61
    1772:	c5 01       	movw	r24, r10
    1774:	b4 01       	movw	r22, r8
    1776:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    177a:	b6 2e       	mov	r11, r22
    177c:	a7 2e       	mov	r10, r23
    177e:	98 2e       	mov	r9, r24
    1780:	89 2e       	mov	r8, r25
			snprintf(Utils::txBuf, TX_LEN, "%04d;%03d;%02.2f;%01.2f;%01.2f;%02.2f;%02.2f;%01.2f\r\n", (int)(timeNow_ms/1000), 0, ve_l, 0., 0., ve_l*6, o2_pct, 0.);
    1782:	1f 92       	push	r1
    1784:	1f 92       	push	r1
    1786:	1f 92       	push	r1
    1788:	1f 92       	push	r1
    178a:	2f 92       	push	r2
    178c:	3f 92       	push	r3
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 ec       	ldi	r20, 0xC0	; 192
    1798:	50 e4       	ldi	r21, 0x40	; 64
    179a:	d5 01       	movw	r26, r10
    179c:	f4 01       	movw	r30, r8
    179e:	6b 2f       	mov	r22, r27
    17a0:	7a 2f       	mov	r23, r26
    17a2:	8f 2f       	mov	r24, r31
    17a4:	9e 2f       	mov	r25, r30
    17a6:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    17aa:	9f 93       	push	r25
    17ac:	8f 93       	push	r24
    17ae:	7f 93       	push	r23
    17b0:	6f 93       	push	r22
    17b2:	1f 92       	push	r1
    17b4:	1f 92       	push	r1
    17b6:	1f 92       	push	r1
    17b8:	1f 92       	push	r1
    17ba:	1f 92       	push	r1
    17bc:	1f 92       	push	r1
    17be:	1f 92       	push	r1
    17c0:	1f 92       	push	r1
    17c2:	8f 92       	push	r8
    17c4:	9f 92       	push	r9
    17c6:	af 92       	push	r10
    17c8:	bf 92       	push	r11
    17ca:	1f 92       	push	r1
    17cc:	1f 92       	push	r1
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4a e7       	ldi	r20, 0x7A	; 122
    17d4:	54 e4       	ldi	r21, 0x44	; 68
    17d6:	c7 01       	movw	r24, r14
    17d8:	b6 01       	movw	r22, r12
    17da:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    17de:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixsfsi>
    17e2:	7f 93       	push	r23
    17e4:	6f 93       	push	r22
    17e6:	ae e7       	ldi	r26, 0x7E	; 126
    17e8:	b1 e2       	ldi	r27, 0x21	; 33
    17ea:	bf 93       	push	r27
    17ec:	af 93       	push	r26
    17ee:	1f 92       	push	r1
    17f0:	f0 e4       	ldi	r31, 0x40	; 64
    17f2:	ff 93       	push	r31
    17f4:	8a e3       	ldi	r24, 0x3A	; 58
    17f6:	92 e2       	ldi	r25, 0x22	; 34
    17f8:	9f 93       	push	r25
    17fa:	8f 93       	push	r24
    17fc:	0e 94 df 1b 	call	0x37be	; 0x37be <snprintf>
			ComHandler::sendAnswer();
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
			outputValve->open();
		}
		
		// Handle o2 sample
		if (timeNow_ms - sampleTimeFlag > SAMPLE_PERIOD_ms) {
			sampleTimeFlag = timeNow_ms;
    1808:	cd 86       	std	Y+13, r12	; 0x0d
    180a:	de 86       	std	Y+14, r13	; 0x0e
    180c:	ef 86       	std	Y+15, r14	; 0x0f
    180e:	f8 8a       	std	Y+16, r15	; 0x10
			double o2_pct = o2_counts2pct(oversampleO2(OVERSAMPLE_COEFF));
			double ve_l = VE_GAIN*totalVE;
			snprintf(Utils::txBuf, TX_LEN, "%04d;%03d;%02.2f;%01.2f;%01.2f;%02.2f;%02.2f;%01.2f\r\n", (int)(timeNow_ms/1000), 0, ve_l, 0., 0., ve_l*6, o2_pct, 0.);
			ComHandler::sendAnswer();
			totalVE = 0;
    1810:	81 2c       	mov	r8, r1
    1812:	91 2c       	mov	r9, r1
    1814:	54 01       	movw	r10, r8
		}
		
		// Handle sample valve
		Ms5525dso::data_s data = myFlowSensor->read();
    1816:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <_ZN11TestHandler12myFlowSensorE>
    181a:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <_ZN11TestHandler12myFlowSensorE+0x1>
    181e:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN9Ms5525dso4readEv>
    1822:	29 83       	std	Y+1, r18	; 0x01
    1824:	3a 83       	std	Y+2, r19	; 0x02
    1826:	4b 83       	std	Y+3, r20	; 0x03
    1828:	5c 83       	std	Y+4, r21	; 0x04
    182a:	6d 83       	std	Y+5, r22	; 0x05
    182c:	7e 83       	std	Y+6, r23	; 0x06
    182e:	8f 83       	std	Y+7, r24	; 0x07
    1830:	98 87       	std	Y+8, r25	; 0x08
		double diff = data.pressure - zero_press;
    1832:	29 85       	ldd	r18, Y+9	; 0x09
    1834:	3a 85       	ldd	r19, Y+10	; 0x0a
    1836:	4b 85       	ldd	r20, Y+11	; 0x0b
    1838:	5c 85       	ldd	r21, Y+12	; 0x0c
    183a:	69 81       	ldd	r22, Y+1	; 0x01
    183c:	7a 81       	ldd	r23, Y+2	; 0x02
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1846:	6b 01       	movw	r12, r22
    1848:	7c 01       	movw	r14, r24
		if (diff >= 0) totalVE += sqrt(diff);
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	a9 01       	movw	r20, r18
    1850:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    1854:	87 fd       	sbrc	r24, 7
    1856:	0c c0       	rjmp	.+24     	; 0x1870 <_ZN11TestHandler10start_testEv+0x2f0>
    1858:	c7 01       	movw	r24, r14
    185a:	b6 01       	movw	r22, r12
    185c:	0e 94 05 14 	call	0x280a	; 0x280a <sqrt>
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	c5 01       	movw	r24, r10
    1866:	b4 01       	movw	r22, r8
    1868:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    186c:	4b 01       	movw	r8, r22
    186e:	5c 01       	movw	r10, r24
		if (diff > FLOW_THRESHOLD) sampleValve->open();
    1870:	2a e9       	ldi	r18, 0x9A	; 154
    1872:	39 e9       	ldi	r19, 0x99	; 153
    1874:	49 e9       	ldi	r20, 0x99	; 153
    1876:	5d e3       	ldi	r21, 0x3D	; 61
    1878:	c7 01       	movw	r24, r14
    187a:	b6 01       	movw	r22, r12
    187c:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    1880:	20 91 1e 22 	lds	r18, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1884:	30 91 1f 22 	lds	r19, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1888:	18 16       	cp	r1, r24
    188a:	24 f4       	brge	.+8      	; 0x1894 <_ZN11TestHandler10start_testEv+0x314>
    188c:	c9 01       	movw	r24, r18
    188e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
    1892:	e3 ce       	rjmp	.-570    	; 0x165a <_ZN11TestHandler10start_testEv+0xda>
		else sampleValve->close();
    1894:	c9 01       	movw	r24, r18
    1896:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	
	sampleValve->close();
	outputValve->open();
	myPump->turnOn();
	
	while (!(myUsart0->isRXC()) || !(myUsart1->isRXC()) || !(stopFlag))
    189a:	df ce       	rjmp	.-578    	; 0x165a <_ZN11TestHandler10start_testEv+0xda>
		double timeNow_ms = myTimer->getTime_ms();
		
		// Handle output valve
		if (outputValve->isOpen() && timeNow_ms - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
			outputValve->close();
    189c:	c8 01       	movw	r24, r16
    189e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <_ZN11TestHandler10start_testEv+0x32a>
		} else if (outputValve->isClosed() && timeNow_ms - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
			outputValve->open();
    18a4:	c8 01       	movw	r24, r16
    18a6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve->isOpen() && timeNow_ms - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
			outputValve->close();
		} else if (outputValve->isClosed() && timeNow_ms - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
    18aa:	26 01       	movw	r4, r12
    18ac:	37 01       	movw	r6, r14
    18ae:	42 cf       	rjmp	.-380    	; 0x1734 <_ZN11TestHandler10start_testEv+0x1b4>

000018b0 <_ZN11TestHandler12start_gascalEv>:
	sampleValve->close();
	myPump->turnOff();
}

Utils::gascal_s TestHandler::start_gascal()
{
    18b0:	4f 92       	push	r4
    18b2:	5f 92       	push	r5
    18b4:	6f 92       	push	r6
    18b6:	7f 92       	push	r7
    18b8:	8f 92       	push	r8
    18ba:	9f 92       	push	r9
    18bc:	af 92       	push	r10
    18be:	bf 92       	push	r11
    18c0:	cf 92       	push	r12
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	2c 97       	sbiw	r28, 0x0c	; 12
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    18dc:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    18e0:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    18e4:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>

	double avgSample = 0, avgGascal = 0;
	double sampleCounts = 0, gasCounts = 0;
	double targetTimeFlag = myTimer->getTime_ms();
	
	sampleValve->open();
    18e8:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    18ec:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    18f0:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
	gascalValve->close();
    18f4:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    18f8:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    18fc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	outputValve->close();
    1900:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    1904:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1908:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	myPump->turnOn();
    190c:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    1910:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    1914:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN4Pump6turnOnEv>
	
	uint8_t i = 0;
    1918:	10 e0       	ldi	r17, 0x00	; 0
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const uint16_t FINAL_AUTOZERO_DURATION_ms = 30000;
	const double GASCAL_PCT = 17;
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0, avgGascal = 0;
    191a:	19 86       	std	Y+9, r1	; 0x09
    191c:	1a 86       	std	Y+10, r1	; 0x0a
    191e:	1b 86       	std	Y+11, r1	; 0x0b
    1920:	1c 86       	std	Y+12, r1	; 0x0c
    1922:	81 2c       	mov	r8, r1
    1924:	91 2c       	mov	r9, r1
    1926:	54 01       	movw	r10, r8
    1928:	c0 90 17 22 	lds	r12, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    192c:	d0 90 18 22 	lds	r13, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1930:	e0 90 19 22 	lds	r14, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1934:	f0 90 1a 22 	lds	r15, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1938:	e0 91 1e 22 	lds	r30, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    193c:	f0 91 1f 22 	lds	r31, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer->getTime_ms();

		// Handle sample and gascal valve
		if (sampleValve->isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
    1940:	81 81       	ldd	r24, Z+1	; 0x01
    1942:	88 23       	and	r24, r24
    1944:	79 f1       	breq	.+94     	; 0x19a4 <_ZN11TestHandler12start_gascalEv+0xf4>
    1946:	a3 01       	movw	r20, r6
    1948:	92 01       	movw	r18, r4
    194a:	c7 01       	movw	r24, r14
    194c:	b6 01       	movw	r22, r12
    194e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e8       	ldi	r19, 0x80	; 128
    1956:	4b e3       	ldi	r20, 0x3B	; 59
    1958:	56 e4       	ldi	r21, 0x46	; 70
    195a:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    195e:	18 16       	cp	r1, r24
    1960:	0c f5       	brge	.+66     	; 0x19a4 <_ZN11TestHandler12start_gascalEv+0xf4>
			
			targetTimeFlag = timeNow;
			sampleCounts = oversampleO2(OVERSAMPLE_COEFF);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	94 e0       	ldi	r25, 0x04	; 4
    1966:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN11TestHandler12oversampleO2Ej>
			avgSample += sampleCounts/NUMBER_OF_REPETITIONS;
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	5e e3       	ldi	r21, 0x3E	; 62
    1972:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	c5 01       	movw	r24, r10
    197c:	b4 01       	movw	r22, r8
    197e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    1982:	4b 01       	movw	r8, r22
    1984:	5c 01       	movw	r10, r24
			
			sampleValve->close();
    1986:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    198a:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    198e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
			zero_chamber(CHAMBER_ZERO_ms);
    1992:	88 eb       	ldi	r24, 0xB8	; 184
    1994:	9b e0       	ldi	r25, 0x0B	; 11
    1996:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN11TestHandler12zero_chamberEj>
			gascalValve->open();
    199a:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    199e:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    19a2:	a3 c0       	rjmp	.+326    	; 0x1aea <_ZN11TestHandler12start_gascalEv+0x23a>
    19a4:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    19a8:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
			
		} else if (gascalValve->isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    19ac:	81 81       	ldd	r24, Z+1	; 0x01
    19ae:	81 11       	cpse	r24, r1
    19b0:	68 c0       	rjmp	.+208    	; 0x1a82 <_ZN11TestHandler12start_gascalEv+0x1d2>
	gascalValve->close();
	outputValve->close();
	myPump->turnOn();
	
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    19b2:	18 30       	cpi	r17, 0x08	; 8
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <_ZN11TestHandler12start_gascalEv+0x108>
    19b6:	b8 cf       	rjmp	.-144    	; 0x1928 <_ZN11TestHandler12start_gascalEv+0x78>
			gascalValve->close();
			zero_chamber(CHAMBER_ZERO_ms);
			sampleValve->open();
		}
	}
	gascalValve->close();
    19b8:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    19bc:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    19c0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	sampleValve->open();
    19c4:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    19c8:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    19cc:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
	zero_chamber(FINAL_AUTOZERO_DURATION_ms);
    19d0:	80 e3       	ldi	r24, 0x30	; 48
    19d2:	95 e7       	ldi	r25, 0x75	; 117
    19d4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN11TestHandler12zero_chamberEj>
	sampleValve->close();
    19d8:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    19dc:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    19e0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	myPump->turnOff();
    19e4:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    19e8:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    19ec:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN4Pump7turnOffEv>
	
	// Output gascal coefficients
// 	snprintf(Utils::txBuf, TX_LEN, "avgSample: %.3f counts\r\navgGascal: %.3f counts\r\n", avgSample, avgGascal);
// 	ComHandler::sendAnswer();
	Utils::gascal_s result;
	result.gain = (SAMPLE_PCT - GASCAL_PCT)/(avgSample-avgGascal);
    19f0:	29 85       	ldd	r18, Y+9	; 0x09
    19f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    19f4:	4b 85       	ldd	r20, Y+11	; 0x0b
    19f6:	5c 85       	ldd	r21, Y+12	; 0x0c
    19f8:	c5 01       	movw	r24, r10
    19fa:	b4 01       	movw	r22, r8
    19fc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1a00:	9b 01       	movw	r18, r22
    1a02:	ac 01       	movw	r20, r24
    1a04:	68 e7       	ldi	r22, 0x78	; 120
    1a06:	74 e1       	ldi	r23, 0x14	; 20
    1a08:	8e e7       	ldi	r24, 0x7E	; 126
    1a0a:	90 e4       	ldi	r25, 0x40	; 64
    1a0c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    1a10:	fb 01       	movw	r30, r22
	result.offset = SAMPLE_PCT - result.gain*avgSample;
// 	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f[%%/counts]\r\nOffset: %.3f%%\r\n", result.gain, result.offset);
// 	ComHandler::sendAnswer();
	return result;
    1a12:	f6 2e       	mov	r15, r22
    1a14:	ab 01       	movw	r20, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	49 83       	std	Y+1, r20	; 0x01
    1a1a:	5a 83       	std	Y+2, r21	; 0x02
    1a1c:	6b 83       	std	Y+3, r22	; 0x03
    1a1e:	7c 83       	std	Y+4, r23	; 0x04
    1a20:	9f 01       	movw	r18, r30
    1a22:	ac 01       	movw	r20, r24
    1a24:	c5 01       	movw	r24, r10
    1a26:	b4 01       	movw	r22, r8
    1a28:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    1a2c:	9b 01       	movw	r18, r22
    1a2e:	ac 01       	movw	r20, r24
    1a30:	6f e8       	ldi	r22, 0x8F	; 143
    1a32:	72 ec       	ldi	r23, 0xC2	; 194
    1a34:	87 ea       	ldi	r24, 0xA7	; 167
    1a36:	91 e4       	ldi	r25, 0x41	; 65
    1a38:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1a3c:	e6 2f       	mov	r30, r22
    1a3e:	46 2f       	mov	r20, r22
    1a40:	57 2f       	mov	r21, r23
    1a42:	bc 01       	movw	r22, r24
    1a44:	4d 83       	std	Y+5, r20	; 0x05
    1a46:	5e 83       	std	Y+6, r21	; 0x06
    1a48:	6f 83       	std	Y+7, r22	; 0x07
    1a4a:	78 87       	std	Y+8, r23	; 0x08
    1a4c:	2f 2d       	mov	r18, r15
    1a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a50:	4b 81       	ldd	r20, Y+3	; 0x03
    1a52:	5c 81       	ldd	r21, Y+4	; 0x04
    1a54:	6e 2f       	mov	r22, r30
    1a56:	7e 81       	ldd	r23, Y+6	; 0x06
    1a58:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5a:	98 85       	ldd	r25, Y+8	; 0x08
}
    1a5c:	2c 96       	adiw	r28, 0x0c	; 12
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	ff 90       	pop	r15
    1a6a:	ef 90       	pop	r14
    1a6c:	df 90       	pop	r13
    1a6e:	cf 90       	pop	r12
    1a70:	bf 90       	pop	r11
    1a72:	af 90       	pop	r10
    1a74:	9f 90       	pop	r9
    1a76:	8f 90       	pop	r8
    1a78:	7f 90       	pop	r7
    1a7a:	6f 90       	pop	r6
    1a7c:	5f 90       	pop	r5
    1a7e:	4f 90       	pop	r4
    1a80:	08 95       	ret
			
			sampleValve->close();
			zero_chamber(CHAMBER_ZERO_ms);
			gascalValve->open();
			
		} else if (gascalValve->isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    1a82:	a3 01       	movw	r20, r6
    1a84:	92 01       	movw	r18, r4
    1a86:	c7 01       	movw	r24, r14
    1a88:	b6 01       	movw	r22, r12
    1a8a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e8       	ldi	r19, 0x80	; 128
    1a92:	4b e3       	ldi	r20, 0x3B	; 59
    1a94:	56 e4       	ldi	r21, 0x46	; 70
    1a96:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	0c f0       	brlt	.+2      	; 0x1aa0 <_ZN11TestHandler12start_gascalEv+0x1f0>
    1a9e:	89 cf       	rjmp	.-238    	; 0x19b2 <_ZN11TestHandler12start_gascalEv+0x102>
			
			targetTimeFlag = timeNow;
			gasCounts = oversampleO2(OVERSAMPLE_COEFF);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	94 e0       	ldi	r25, 0x04	; 4
    1aa4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN11TestHandler12oversampleO2Ej>
			avgGascal += gasCounts/NUMBER_OF_REPETITIONS;
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	5e e3       	ldi	r21, 0x3E	; 62
    1ab0:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	69 85       	ldd	r22, Y+9	; 0x09
    1aba:	7a 85       	ldd	r23, Y+10	; 0x0a
    1abc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1abe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac0:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    1ac4:	69 87       	std	Y+9, r22	; 0x09
    1ac6:	7a 87       	std	Y+10, r23	; 0x0a
    1ac8:	8b 87       	std	Y+11, r24	; 0x0b
    1aca:	9c 87       	std	Y+12, r25	; 0x0c
			
// 			snprintf(Utils::txBuf, TX_LEN, "Rep: %d\r\nSample: %.3f\r\nGas: %.3f", i, sampleCounts, gasCounts);
// 			ComHandler::sendAnswer();
			i++;
    1acc:	1f 5f       	subi	r17, 0xFF	; 255
			
			gascalValve->close();
    1ace:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1ad2:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1ad6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
			zero_chamber(CHAMBER_ZERO_ms);
    1ada:	88 eb       	ldi	r24, 0xB8	; 184
    1adc:	9b e0       	ldi	r25, 0x0B	; 11
    1ade:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN11TestHandler12zero_chamberEj>
			sampleValve->open();
    1ae2:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1ae6:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1aea:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
			zero_chamber(CHAMBER_ZERO_ms);
			gascalValve->open();
			
		} else if (gascalValve->isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
			
			targetTimeFlag = timeNow;
    1aee:	26 01       	movw	r4, r12
    1af0:	37 01       	movw	r6, r14
    1af2:	5f cf       	rjmp	.-322    	; 0x19b2 <_ZN11TestHandler12start_gascalEv+0x102>

00001af4 <_ZN11TestHandler12start_aircalEv>:
// 	ComHandler::sendAnswer();
	return result;
}

Utils::gascal_s TestHandler::start_aircal()
{
    1af4:	2f 92       	push	r2
    1af6:	3f 92       	push	r3
    1af8:	4f 92       	push	r4
    1afa:	5f 92       	push	r5
    1afc:	6f 92       	push	r6
    1afe:	7f 92       	push	r7
    1b00:	8f 92       	push	r8
    1b02:	9f 92       	push	r9
    1b04:	af 92       	push	r10
    1b06:	bf 92       	push	r11
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	28 97       	sbiw	r28, 0x08	; 8
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1b24:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1b28:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1b2c:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
	const double SAMPLE_PCT = 20.97;

	double avgCounts = 0, counts = 0;
	double targetTimeFlag = myTimer->getTime_ms();
	
	gascalValve->open();
    1b30:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1b34:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1b38:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
	outputValve->close();
    1b3c:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    1b40:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1b44:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	myPump->turnOn();
    1b48:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    1b4c:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    1b50:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN4Pump6turnOnEv>
	
	uint8_t i = 0;
    1b54:	10 e0       	ldi	r17, 0x00	; 0
	const uint16_t VALVE_OPEN_DURATION_ms = 12000;
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const uint16_t FINAL_AUTOZERO_DURATION_ms = 30000;
	const double SAMPLE_PCT = 20.97;

	double avgCounts = 0, counts = 0;
    1b56:	c1 2c       	mov	r12, r1
    1b58:	d1 2c       	mov	r13, r1
    1b5a:	76 01       	movw	r14, r12
	
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer->getTime_ms();
		
		if (gascalValve->isOpen() && timeNow - targetTimeFlag > VALVE_OPEN_DURATION_ms) {
    1b5c:	20 90 20 22 	lds	r2, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1b60:	30 90 21 22 	lds	r3, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
	gascalValve->open();
	outputValve->close();
	myPump->turnOn();
	
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    1b64:	18 30       	cpi	r17, 0x08	; 8
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <_ZN11TestHandler12start_aircalEv+0x76>
    1b68:	40 c0       	rjmp	.+128    	; 0x1bea <_ZN11TestHandler12start_aircalEv+0xf6>
    1b6a:	80 90 17 22 	lds	r8, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1b6e:	90 90 18 22 	lds	r9, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1b72:	a0 90 19 22 	lds	r10, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1b76:	b0 90 1a 22 	lds	r11, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
		double timeNow = myTimer->getTime_ms();
		
		if (gascalValve->isOpen() && timeNow - targetTimeFlag > VALVE_OPEN_DURATION_ms) {
    1b7a:	f1 01       	movw	r30, r2
    1b7c:	81 81       	ldd	r24, Z+1	; 0x01
    1b7e:	88 23       	and	r24, r24
    1b80:	89 f3       	breq	.-30     	; 0x1b64 <_ZN11TestHandler12start_aircalEv+0x70>
    1b82:	a3 01       	movw	r20, r6
    1b84:	92 01       	movw	r18, r4
    1b86:	c5 01       	movw	r24, r10
    1b88:	b4 01       	movw	r22, r8
    1b8a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e8       	ldi	r19, 0x80	; 128
    1b92:	4b e3       	ldi	r20, 0x3B	; 59
    1b94:	56 e4       	ldi	r21, 0x46	; 70
    1b96:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	1c f7       	brge	.-58     	; 0x1b64 <_ZN11TestHandler12start_aircalEv+0x70>
			
			targetTimeFlag = timeNow;
			counts = oversampleO2(OVERSAMPLE_COEFF);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	94 e0       	ldi	r25, 0x04	; 4
    1ba2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN11TestHandler12oversampleO2Ej>
			avgCounts += counts/NUMBER_OF_REPETITIONS;
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	5e e3       	ldi	r21, 0x3E	; 62
    1bae:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    1bb2:	9b 01       	movw	r18, r22
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	c7 01       	movw	r24, r14
    1bb8:	b6 01       	movw	r22, r12
    1bba:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    1bbe:	6b 01       	movw	r12, r22
    1bc0:	7c 01       	movw	r14, r24
			
// 			snprintf(Utils::txBuf, TX_LEN, "Rep: %d\r\nCounts: %.3f", i, counts);
// 			ComHandler::sendAnswer();
			i++;
    1bc2:	1f 5f       	subi	r17, 0xFF	; 255
			
			gascalValve->close();
    1bc4:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1bc8:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1bcc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
			zero_chamber(CHAMBER_ZERO_ms);
    1bd0:	88 eb       	ldi	r24, 0xB8	; 184
    1bd2:	9b e0       	ldi	r25, 0x0B	; 11
    1bd4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN11TestHandler12zero_chamberEj>
			gascalValve->open();
    1bd8:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1bdc:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1be0:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
    1be4:	24 01       	movw	r4, r8
    1be6:	35 01       	movw	r6, r10
    1be8:	b9 cf       	rjmp	.-142    	; 0x1b5c <_ZN11TestHandler12start_aircalEv+0x68>
		}
	}
	gascalValve->open();
    1bea:	c1 01       	movw	r24, r2
    1bec:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZN5Valve4openEv>
	zero_chamber(FINAL_AUTOZERO_DURATION_ms);
    1bf0:	80 e3       	ldi	r24, 0x30	; 48
    1bf2:	95 e7       	ldi	r25, 0x75	; 117
    1bf4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN11TestHandler12zero_chamberEj>
	gascalValve->close();
    1bf8:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1bfc:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1c00:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Valve5closeEv>
	myPump->turnOff();
    1c04:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    1c08:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    1c0c:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN4Pump7turnOffEv>
	
	// Output aircal coefficients
// 	snprintf(Utils::txBuf, TX_LEN, "avgCounts: %.3f counts\r\n", avgCounts);
// 	ComHandler::sendAnswer();
	Utils::gascal_s result;
	result.gain = gascal.gain;
    1c10:	60 91 2e 22 	lds	r22, 0x222E	; 0x80222e <_ZN11TestHandler6gascalE>
    1c14:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <_ZN11TestHandler6gascalE+0x1>
    1c18:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <_ZN11TestHandler6gascalE+0x2>
    1c1c:	70 91 31 22 	lds	r23, 0x2231	; 0x802231 <_ZN11TestHandler6gascalE+0x3>
	result.offset = SAMPLE_PCT - result.gain*avgCounts;
// 	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f[%%/counts]\r\nOffset: %.3f%%\r\n", result.gain, result.offset);
// 	ComHandler::sendAnswer();
	return result;
    1c20:	16 2f       	mov	r17, r22
    1c22:	86 2f       	mov	r24, r22
    1c24:	9f 2f       	mov	r25, r31
    1c26:	ae 2f       	mov	r26, r30
    1c28:	b7 2f       	mov	r27, r23
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	ab 83       	std	Y+3, r26	; 0x03
    1c30:	bc 83       	std	Y+4, r27	; 0x04
    1c32:	26 2f       	mov	r18, r22
    1c34:	3f 2f       	mov	r19, r31
    1c36:	4e 2f       	mov	r20, r30
    1c38:	57 2f       	mov	r21, r23
    1c3a:	c7 01       	movw	r24, r14
    1c3c:	b6 01       	movw	r22, r12
    1c3e:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    1c42:	9b 01       	movw	r18, r22
    1c44:	ac 01       	movw	r20, r24
    1c46:	6f e8       	ldi	r22, 0x8F	; 143
    1c48:	72 ec       	ldi	r23, 0xC2	; 194
    1c4a:	87 ea       	ldi	r24, 0xA7	; 167
    1c4c:	91 e4       	ldi	r25, 0x41	; 65
    1c4e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1c52:	e6 2f       	mov	r30, r22
    1c54:	46 2f       	mov	r20, r22
    1c56:	57 2f       	mov	r21, r23
    1c58:	bc 01       	movw	r22, r24
    1c5a:	4d 83       	std	Y+5, r20	; 0x05
    1c5c:	5e 83       	std	Y+6, r21	; 0x06
    1c5e:	6f 83       	std	Y+7, r22	; 0x07
    1c60:	78 87       	std	Y+8, r23	; 0x08
    1c62:	21 2f       	mov	r18, r17
    1c64:	3a 81       	ldd	r19, Y+2	; 0x02
    1c66:	4b 81       	ldd	r20, Y+3	; 0x03
    1c68:	5c 81       	ldd	r21, Y+4	; 0x04
    1c6a:	6e 2f       	mov	r22, r30
    1c6c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	98 85       	ldd	r25, Y+8	; 0x08
    1c72:	28 96       	adiw	r28, 0x08	; 8
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	bf 90       	pop	r11
    1c88:	af 90       	pop	r10
    1c8a:	9f 90       	pop	r9
    1c8c:	8f 90       	pop	r8
    1c8e:	7f 90       	pop	r7
    1c90:	6f 90       	pop	r6
    1c92:	5f 90       	pop	r5
    1c94:	4f 90       	pop	r4
    1c96:	3f 90       	pop	r3
    1c98:	2f 90       	pop	r2
    1c9a:	08 95       	ret

00001c9c <_ZN4Twie8waitReadEv>:
}

void Twie::setBaudRate(uint8_t baudRate)
{
	this->baudRate = baudRate;
	TWIE_MASTER_BAUD = baudRate;
    1c9c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
    1ca0:	87 ff       	sbrs	r24, 7
    1ca2:	fc cf       	rjmp	.-8      	; 0x1c9c <_ZN4Twie8waitReadEv>
    1ca4:	08 95       	ret

00001ca6 <_ZN4Twie9waitWriteEv>:
    1ca6:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
    1caa:	86 ff       	sbrs	r24, 6
    1cac:	fc cf       	rjmp	.-8      	; 0x1ca6 <_ZN4Twie9waitWriteEv>
    1cae:	08 95       	ret

00001cb0 <_ZN4Twie7isErrorEv>:
    1cb0:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
    1cb4:	9c 71       	andi	r25, 0x1C	; 28
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <_ZN4Twie7isErrorEv+0xc>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	08 95       	ret

00001cbe <_ZN4Twie12errorHandlerEPKc>:
    1cbe:	08 95       	ret

00001cc0 <_ZN4Twie12enableMasterEv>:
    1cc0:	21 e0       	ldi	r18, 0x01	; 1
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	25 83       	std	Z+5, r18	; 0x05
    1cc6:	e1 ea       	ldi	r30, 0xA1	; 161
    1cc8:	f4 e0       	ldi	r31, 0x04	; 4
    1cca:	80 81       	ld	r24, Z
    1ccc:	88 60       	ori	r24, 0x08	; 8
    1cce:	80 83       	st	Z, r24
    1cd0:	08 95       	ret

00001cd2 <_ZN4Twie15enableSmartModeEv>:
    1cd2:	21 e0       	ldi	r18, 0x01	; 1
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	20 87       	std	Z+8, r18	; 0x08
    1cd8:	e2 ea       	ldi	r30, 0xA2	; 162
    1cda:	f4 e0       	ldi	r31, 0x04	; 4
    1cdc:	80 81       	ld	r24, Z
    1cde:	81 60       	ori	r24, 0x01	; 1
    1ce0:	80 83       	st	Z, r24
    1ce2:	08 95       	ret

00001ce4 <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>:
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	66 83       	std	Z+6, r22	; 0x06
    1ce8:	e2 ea       	ldi	r30, 0xA2	; 162
    1cea:	f4 e0       	ldi	r31, 0x04	; 4
    1cec:	80 81       	ld	r24, Z
    1cee:	94 e0       	ldi	r25, 0x04	; 4
    1cf0:	69 9f       	mul	r22, r25
    1cf2:	b0 01       	movw	r22, r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	83 7f       	andi	r24, 0xF3	; 243
    1cf8:	68 2b       	or	r22, r24
    1cfa:	60 83       	st	Z, r22
    1cfc:	08 95       	ret

00001cfe <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>:
    1cfe:	fc 01       	movw	r30, r24
    1d00:	61 87       	std	Z+9, r22	; 0x09
    1d02:	66 23       	and	r22, r22
    1d04:	19 f0       	breq	.+6      	; 0x1d0c <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0xe>
    1d06:	61 30       	cpi	r22, 0x01	; 1
    1d08:	29 f0       	breq	.+10     	; 0x1d14 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x16>
    1d0a:	08 95       	ret
    1d0c:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d10:	8b 7f       	andi	r24, 0xFB	; 251
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x1c>
    1d14:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d18:	84 60       	ori	r24, 0x04	; 4
    1d1a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d1e:	08 95       	ret

00001d20 <_ZN4Twie7getDataENS_19acknowledgeAction_eE>:
    1d20:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
    1d24:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
    1d28:	08 95       	ret

00001d2a <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>:
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
    1d32:	16 2f       	mov	r17, r22
    1d34:	64 2f       	mov	r22, r20
    1d36:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
    1d3a:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d3e:	8c 7f       	andi	r24, 0xFC	; 252
    1d40:	81 2b       	or	r24, r17
    1d42:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d46:	12 30       	cpi	r17, 0x02	; 2
    1d48:	31 f4       	brne	.+12     	; 0x1d56 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE+0x2c>
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <_ZN4Twie8waitReadEv>
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	08 95       	ret

00001d5e <_ZN4Twie10setBusIdleEv>:
    1d5e:	e4 ea       	ldi	r30, 0xA4	; 164
    1d60:	f4 e0       	ldi	r31, 0x04	; 4
    1d62:	80 81       	ld	r24, Z
    1d64:	81 60       	ori	r24, 0x01	; 1
    1d66:	80 83       	st	Z, r24
    1d68:	08 95       	ret

00001d6a <_ZN4TwieC1EhNS_5ibt_eE>:
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	ec 01       	movw	r28, r24
    1d70:	6a 87       	std	Y+10, r22	; 0x0a
    1d72:	4e 83       	std	Y+6, r20	; 0x06
    1d74:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7004a5>
    1d78:	64 2f       	mov	r22, r20
    1d7a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>
    1d7e:	ce 01       	movw	r24, r28
    1d80:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN4Twie15enableSmartModeEv>
    1d84:	ce 01       	movw	r24, r28
    1d86:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN4Twie12enableMasterEv>
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <_ZN4Twie10setBusIdleEv>

00001d94 <_ZN4Twie10setAddressEhNS_11direction_eE>:
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
		TWIE_MASTER_ADDR = (address << 1) | 1;
    1d94:	66 0f       	add	r22, r22
	TWIE_MASTER_BAUD = baudRate;
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
    1d96:	41 30       	cpi	r20, 0x01	; 1
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <_ZN4Twie10setAddressEhNS_11direction_eE+0x10>
		TWIE_MASTER_ADDR = (address << 1) | 1;
    1d9a:	61 60       	ori	r22, 0x01	; 1
    1d9c:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitRead();
    1da0:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <_ZN4Twie8waitReadEv>
	} else {
		TWIE_MASTER_ADDR = (address << 1);
    1da4:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitWrite();
    1da8:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <_ZN4Twie9waitWriteEv>

00001dac <_ZN4Twie7setDataEh>:
	}
}

void Twie::setData(uint8_t data)
{
	TWIE_MASTER_DATA = data;
    1dac:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
	waitWrite();
    1db0:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <_ZN4Twie9waitWriteEv>

00001db4 <__vector_28>:
}

void UsartC1::setCharacterSize(characterSize_e characterSize)
{
	this->characterSize = characterSize;
	USARTC1_CTRLC = (characterSize << USART_CHSIZE_gp)|(USARTC1_CTRLC & ~USART_CHSIZE_gm);
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	08 b6       	in	r0, 0x38	; 56
    1dc0:	0f 92       	push	r0
    1dc2:	18 be       	out	0x38, r1	; 56
    1dc4:	8f 93       	push	r24
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 93 37 22 	sts	0x2237, r24	; 0x802237 <_ZN7UsartC17rxcFlagE>
    1dcc:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1dd0:	80 93 36 22 	sts	0x2236, r24	; 0x802236 <_ZN7UsartC16rxCharE>
    1dd4:	8f 91       	pop	r24
    1dd6:	0f 90       	pop	r0
    1dd8:	08 be       	out	0x38, r0	; 56
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	0f 90       	pop	r0
    1de0:	1f 90       	pop	r1
    1de2:	18 95       	reti

00001de4 <_ZN7UsartC121waitDataRegisterEmptyEv>:
    1de4:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <__TEXT_REGION_LENGTH__+0x7008b1>
    1de8:	85 ff       	sbrs	r24, 5
    1dea:	fc cf       	rjmp	.-8      	; 0x1de4 <_ZN7UsartC121waitDataRegisterEmptyEv>
    1dec:	08 95       	ret

00001dee <_ZN7UsartC18sendCharEc>:
    1dee:	cf 93       	push	r28
    1df0:	c6 2f       	mov	r28, r22
    1df2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <_ZN7UsartC121waitDataRegisterEmptyEv>
    1df6:	c0 93 b0 08 	sts	0x08B0, r28	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <_ZN7UsartC110sendStringEPKc>:
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	7c 01       	movw	r14, r24
    1e0a:	8b 01       	movw	r16, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	c1 91       	ld	r28, Z+
    1e10:	8f 01       	movw	r16, r30
    1e12:	cc 23       	and	r28, r28
    1e14:	31 f0       	breq	.+12     	; 0x1e22 <_ZN7UsartC110sendStringEPKc+0x24>
    1e16:	c7 01       	movw	r24, r14
    1e18:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <_ZN7UsartC121waitDataRegisterEmptyEv>
    1e1c:	c0 93 b0 08 	sts	0x08B0, r28	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1e20:	f5 cf       	rjmp	.-22     	; 0x1e0c <_ZN7UsartC110sendStringEPKc+0xe>
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	08 95       	ret

00001e2e <_ZN7UsartC130enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>:
    1e2e:	fc 01       	movw	r30, r24
    1e30:	60 83       	st	Z, r22
    1e32:	e3 eb       	ldi	r30, 0xB3	; 179
    1e34:	f8 e0       	ldi	r31, 0x08	; 8
    1e36:	80 81       	ld	r24, Z
    1e38:	90 e1       	ldi	r25, 0x10	; 16
    1e3a:	69 9f       	mul	r22, r25
    1e3c:	b0 01       	movw	r22, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	8f 7c       	andi	r24, 0xCF	; 207
    1e42:	68 2b       	or	r22, r24
    1e44:	60 83       	st	Z, r22
    1e46:	08 95       	ret

00001e48 <_ZN7UsartC114enableReceiverEv>:
    1e48:	21 e0       	ldi	r18, 0x01	; 1
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	23 83       	std	Z+3, r18	; 0x03
    1e4e:	e4 eb       	ldi	r30, 0xB4	; 180
    1e50:	f8 e0       	ldi	r31, 0x08	; 8
    1e52:	80 81       	ld	r24, Z
    1e54:	80 61       	ori	r24, 0x10	; 16
    1e56:	80 83       	st	Z, r24
    1e58:	08 95       	ret

00001e5a <_ZN7UsartC117enableTransmitterEv>:
    1e5a:	21 e0       	ldi	r18, 0x01	; 1
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	24 83       	std	Z+4, r18	; 0x04
    1e60:	e4 eb       	ldi	r30, 0xB4	; 180
    1e62:	f8 e0       	ldi	r31, 0x08	; 8
    1e64:	80 81       	ld	r24, Z
    1e66:	88 60       	ori	r24, 0x08	; 8
    1e68:	80 83       	st	Z, r24
    1e6a:	08 95       	ret

00001e6c <_ZN7UsartC129enableDoubleTransmissionSpeedEv>:
    1e6c:	21 e0       	ldi	r18, 0x01	; 1
    1e6e:	fc 01       	movw	r30, r24
    1e70:	25 83       	std	Z+5, r18	; 0x05
    1e72:	e4 eb       	ldi	r30, 0xB4	; 180
    1e74:	f8 e0       	ldi	r31, 0x08	; 8
    1e76:	80 81       	ld	r24, Z
    1e78:	84 60       	ori	r24, 0x04	; 4
    1e7a:	80 83       	st	Z, r24
    1e7c:	08 95       	ret

00001e7e <_ZN7UsartC17setBSELEj>:
}

void UsartC1::setBSEL(uint16_t bsel)
{
	this->bsel = bsel;
    1e7e:	fc 01       	movw	r30, r24
    1e80:	63 87       	std	Z+11, r22	; 0x0b
    1e82:	74 87       	std	Z+12, r23	; 0x0c
	USARTC1_BAUDCTRLA = bsel;
    1e84:	60 93 b6 08 	sts	0x08B6, r22	; 0x8008b6 <__TEXT_REGION_LENGTH__+0x7008b6>
	USARTC1_BAUDCTRLB = (bsel >> 8)|(USARTC1_BAUDCTRLB & 0x0F);
    1e88:	e7 eb       	ldi	r30, 0xB7	; 183
    1e8a:	f8 e0       	ldi	r31, 0x08	; 8
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8f 70       	andi	r24, 0x0F	; 15
    1e90:	78 2b       	or	r23, r24
    1e92:	70 83       	st	Z, r23
    1e94:	08 95       	ret

00001e96 <_ZN7UsartC19setBSCALEEh>:
}

void UsartC1::setBSCALE(uint8_t bscale)
{
	this->bscale = bscale;
    1e96:	fc 01       	movw	r30, r24
    1e98:	65 87       	std	Z+13, r22	; 0x0d
	USARTC1_BAUDCTRLB = (bscale << USART_BSCALE_gp)|(USARTC1_BAUDCTRLB & ~USART_BSCALE_gm);
    1e9a:	e7 eb       	ldi	r30, 0xB7	; 183
    1e9c:	f8 e0       	ldi	r31, 0x08	; 8
    1e9e:	80 81       	ld	r24, Z
    1ea0:	90 e1       	ldi	r25, 0x10	; 16
    1ea2:	69 9f       	mul	r22, r25
    1ea4:	b0 01       	movw	r22, r0
    1ea6:	11 24       	eor	r1, r1
    1ea8:	8f 70       	andi	r24, 0x0F	; 15
    1eaa:	68 2b       	or	r22, r24
    1eac:	60 83       	st	Z, r22
    1eae:	08 95       	ret

00001eb0 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

UsartC1::UsartC1(Usart::baudrate_s baudrate,Utils::interruptLevel_e receiveCompleteInterruptLevel)
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	ec 01       	movw	r28, r24
    1ebc:	f6 2e       	mov	r15, r22
    1ebe:	07 2f       	mov	r16, r23
    1ec0:	12 2f       	mov	r17, r18
{
	setBSEL(baudrate.bsel);
    1ec2:	ba 01       	movw	r22, r20
    1ec4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN7UsartC17setBSELEj>
	setBSCALE(baudrate.bscale);
    1ec8:	6f 2d       	mov	r22, r15
    1eca:	ce 01       	movw	r24, r28
    1ecc:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN7UsartC19setBSCALEEh>
	if (baudrate.clk2x) enableDoubleTransmissionSpeed();
    1ed0:	00 23       	and	r16, r16
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE+0x2a>
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_ZN7UsartC129enableDoubleTransmissionSpeedEv>
	enableReceiver();
    1eda:	ce 01       	movw	r24, r28
    1edc:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN7UsartC114enableReceiverEv>
	enableTransmitter();
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN7UsartC117enableTransmitterEv>
	enableReceiveCompleteInterrupt(receiveCompleteInterruptLevel);
    1ee6:	61 2f       	mov	r22, r17
    1ee8:	ce 01       	movw	r24, r28
    1eea:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN7UsartC130enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>
	PORTC_DIRSET = PIN7_bm;
    1eee:	80 e8       	ldi	r24, 0x80	; 128
    1ef0:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
}
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	08 95       	ret

00001f00 <__vector_58>:
}

void UsartE0::setCharacterSize(characterSize_e characterSize)
{
	this->characterSize = characterSize;
	USARTE0_CTRLC = (characterSize << USART_CHSIZE_gp)|(USARTE0_CTRLC & ~USART_CHSIZE_gm);
    1f00:	1f 92       	push	r1
    1f02:	0f 92       	push	r0
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	0f 92       	push	r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	08 b6       	in	r0, 0x38	; 56
    1f0c:	0f 92       	push	r0
    1f0e:	18 be       	out	0x38, r1	; 56
    1f10:	8f 93       	push	r24
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	80 93 39 22 	sts	0x2239, r24	; 0x802239 <_ZN7UsartE07rxcFlagE>
    1f18:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1f1c:	80 93 38 22 	sts	0x2238, r24	; 0x802238 <_ZN7UsartE06rxCharE>
    1f20:	8f 91       	pop	r24
    1f22:	0f 90       	pop	r0
    1f24:	08 be       	out	0x38, r0	; 56
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	0f 90       	pop	r0
    1f2c:	1f 90       	pop	r1
    1f2e:	18 95       	reti

00001f30 <_ZN7UsartE021waitDataRegisterEmptyEv>:
    1f30:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
    1f34:	85 ff       	sbrs	r24, 5
    1f36:	fc cf       	rjmp	.-8      	; 0x1f30 <_ZN7UsartE021waitDataRegisterEmptyEv>
    1f38:	08 95       	ret

00001f3a <_ZN7UsartE08sendCharEc>:
    1f3a:	cf 93       	push	r28
    1f3c:	c6 2f       	mov	r28, r22
    1f3e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN7UsartE021waitDataRegisterEmptyEv>
    1f42:	c0 93 a0 0a 	sts	0x0AA0, r28	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <_ZN7UsartE010sendStringEPKc>:
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	7c 01       	movw	r14, r24
    1f56:	8b 01       	movw	r16, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	c1 91       	ld	r28, Z+
    1f5c:	8f 01       	movw	r16, r30
    1f5e:	cc 23       	and	r28, r28
    1f60:	31 f0       	breq	.+12     	; 0x1f6e <_ZN7UsartE010sendStringEPKc+0x24>
    1f62:	c7 01       	movw	r24, r14
    1f64:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_ZN7UsartE021waitDataRegisterEmptyEv>
    1f68:	c0 93 a0 0a 	sts	0x0AA0, r28	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1f6c:	f5 cf       	rjmp	.-22     	; 0x1f58 <_ZN7UsartE010sendStringEPKc+0xe>
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	08 95       	ret

00001f7a <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>:
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	60 83       	st	Z, r22
    1f7e:	e3 ea       	ldi	r30, 0xA3	; 163
    1f80:	fa e0       	ldi	r31, 0x0A	; 10
    1f82:	80 81       	ld	r24, Z
    1f84:	90 e1       	ldi	r25, 0x10	; 16
    1f86:	69 9f       	mul	r22, r25
    1f88:	b0 01       	movw	r22, r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	8f 7c       	andi	r24, 0xCF	; 207
    1f8e:	68 2b       	or	r22, r24
    1f90:	60 83       	st	Z, r22
    1f92:	08 95       	ret

00001f94 <_ZN7UsartE014enableReceiverEv>:
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	fc 01       	movw	r30, r24
    1f98:	23 83       	std	Z+3, r18	; 0x03
    1f9a:	e4 ea       	ldi	r30, 0xA4	; 164
    1f9c:	fa e0       	ldi	r31, 0x0A	; 10
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 61       	ori	r24, 0x10	; 16
    1fa2:	80 83       	st	Z, r24
    1fa4:	08 95       	ret

00001fa6 <_ZN7UsartE017enableTransmitterEv>:
    1fa6:	21 e0       	ldi	r18, 0x01	; 1
    1fa8:	fc 01       	movw	r30, r24
    1faa:	24 83       	std	Z+4, r18	; 0x04
    1fac:	e4 ea       	ldi	r30, 0xA4	; 164
    1fae:	fa e0       	ldi	r31, 0x0A	; 10
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 60       	ori	r24, 0x08	; 8
    1fb4:	80 83       	st	Z, r24
    1fb6:	08 95       	ret

00001fb8 <_ZN7UsartE029enableDoubleTransmissionSpeedEv>:
    1fb8:	21 e0       	ldi	r18, 0x01	; 1
    1fba:	fc 01       	movw	r30, r24
    1fbc:	25 83       	std	Z+5, r18	; 0x05
    1fbe:	e4 ea       	ldi	r30, 0xA4	; 164
    1fc0:	fa e0       	ldi	r31, 0x0A	; 10
    1fc2:	80 81       	ld	r24, Z
    1fc4:	84 60       	ori	r24, 0x04	; 4
    1fc6:	80 83       	st	Z, r24
    1fc8:	08 95       	ret

00001fca <_ZN7UsartE07setBSELEj>:
}

void UsartE0::setBSEL(uint16_t bsel)
{
	this->bsel = bsel;
    1fca:	fc 01       	movw	r30, r24
    1fcc:	63 87       	std	Z+11, r22	; 0x0b
    1fce:	74 87       	std	Z+12, r23	; 0x0c
	USARTE0_BAUDCTRLA = bsel;
    1fd0:	60 93 a6 0a 	sts	0x0AA6, r22	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x700aa6>
	USARTE0_BAUDCTRLB = (bsel >> 8)|(USARTE0_BAUDCTRLB & 0x0F);
    1fd4:	e7 ea       	ldi	r30, 0xA7	; 167
    1fd6:	fa e0       	ldi	r31, 0x0A	; 10
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 70       	andi	r24, 0x0F	; 15
    1fdc:	78 2b       	or	r23, r24
    1fde:	70 83       	st	Z, r23
    1fe0:	08 95       	ret

00001fe2 <_ZN7UsartE09setBSCALEEh>:
}

void UsartE0::setBSCALE(uint8_t bscale)
{
	this->bscale = bscale;
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	65 87       	std	Z+13, r22	; 0x0d
	USARTE0_BAUDCTRLB = (bscale << USART_BSCALE_gp)|(USARTE0_BAUDCTRLB & ~USART_BSCALE_gm);
    1fe6:	e7 ea       	ldi	r30, 0xA7	; 167
    1fe8:	fa e0       	ldi	r31, 0x0A	; 10
    1fea:	80 81       	ld	r24, Z
    1fec:	90 e1       	ldi	r25, 0x10	; 16
    1fee:	69 9f       	mul	r22, r25
    1ff0:	b0 01       	movw	r22, r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	8f 70       	andi	r24, 0x0F	; 15
    1ff6:	68 2b       	or	r22, r24
    1ff8:	60 83       	st	Z, r22
    1ffa:	08 95       	ret

00001ffc <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

UsartE0::UsartE0(Usart::baudrate_s baudrate,Utils::interruptLevel_e receiveCompleteInterruptLevel)
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	ec 01       	movw	r28, r24
    2008:	f6 2e       	mov	r15, r22
    200a:	07 2f       	mov	r16, r23
    200c:	12 2f       	mov	r17, r18
{
	setBSEL(baudrate.bsel);
    200e:	ba 01       	movw	r22, r20
    2010:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN7UsartE07setBSELEj>
	setBSCALE(baudrate.bscale);
    2014:	6f 2d       	mov	r22, r15
    2016:	ce 01       	movw	r24, r28
    2018:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_ZN7UsartE09setBSCALEEh>
	if (baudrate.clk2x) enableDoubleTransmissionSpeed();
    201c:	00 23       	and	r16, r16
    201e:	19 f0       	breq	.+6      	; 0x2026 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE+0x2a>
    2020:	ce 01       	movw	r24, r28
    2022:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <_ZN7UsartE029enableDoubleTransmissionSpeedEv>
	enableReceiver();
    2026:	ce 01       	movw	r24, r28
    2028:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZN7UsartE014enableReceiverEv>
	enableTransmitter();
    202c:	ce 01       	movw	r24, r28
    202e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <_ZN7UsartE017enableTransmitterEv>
	enableReceiveCompleteInterrupt(receiveCompleteInterruptLevel);
    2032:	61 2f       	mov	r22, r17
    2034:	ce 01       	movw	r24, r28
    2036:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>
	PORTE_DIRSET = PIN3_bm;
    203a:	88 e0       	ldi	r24, 0x08	; 8
    203c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
}
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	08 95       	ret

0000204c <_ZN5Utils14setSystemClockENS_13systemClock_eE>:

char Utils::txBuf[TX_LEN];

void Utils::setSystemClock(systemClock_e sc)
{
	OSC_CTRL |= 1 << sc; // enable oscillator
    204c:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	08 2e       	mov	r0, r24
    2056:	02 c0       	rjmp	.+4      	; 0x205c <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x10>
    2058:	44 0f       	add	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <_ZN5Utils14setSystemClockENS_13systemClock_eE+0xc>
    2060:	94 2b       	or	r25, r20
    2062:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC_STATUS & (1 << sc))) ; // wait until oscillator is ready
    2066:	20 91 51 00 	lds	r18, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	24 23       	and	r18, r20
    206e:	35 23       	and	r19, r21
    2070:	23 2b       	or	r18, r19
    2072:	c9 f3       	breq	.-14     	; 0x2066 <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x1a>
	CCP = CCP_IOREG_gc; // trigger protection mechanism
    2074:	98 ed       	ldi	r25, 0xD8	; 216
    2076:	94 bf       	out	0x34, r25	; 52
	CLK_CTRL = sc << CLK_SCLKSEL_gp; // select system clock
    2078:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    207c:	08 95       	ret

0000207e <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>:
}

void Utils::enableInterruptLevel(interruptLevel_e il)
{
	PMIC_CTRL |= (1 << (il-1));
    207e:	e2 ea       	ldi	r30, 0xA2	; 162
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	40 81       	ld	r20, Z
    2084:	81 50       	subi	r24, 0x01	; 1
    2086:	21 e0       	ldi	r18, 0x01	; 1
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	b9 01       	movw	r22, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x14>
    208e:	66 0f       	add	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	8a 95       	dec	r24
    2094:	e2 f7       	brpl	.-8      	; 0x208e <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x10>
    2096:	cb 01       	movw	r24, r22
    2098:	84 2b       	or	r24, r20
    209a:	80 83       	st	Z, r24
    209c:	08 95       	ret

0000209e <_ZN5Utils21globalInterruptEnableEv>:
}

void Utils::globalInterruptEnable()
{
	CPU_SREG |= CPU_I_bm;
    209e:	8f b7       	in	r24, 0x3f	; 63
    20a0:	80 68       	ori	r24, 0x80	; 128
    20a2:	8f bf       	out	0x3f, r24	; 63
    20a4:	08 95       	ret

000020a6 <_ZN5Utils8delay_msEj>:
}

void Utils::delay_ms(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_ms(1);
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	28 17       	cp	r18, r24
    20ac:	39 07       	cpc	r19, r25
    20ae:	49 f0       	breq	.+18     	; 0x20c2 <_ZN5Utils8delay_msEj+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20b0:	ef e3       	ldi	r30, 0x3F	; 63
    20b2:	ff e1       	ldi	r31, 0x1F	; 31
    20b4:	31 97       	sbiw	r30, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <_ZN5Utils8delay_msEj+0xe>
    20b8:	00 c0       	rjmp	.+0      	; 0x20ba <_ZN5Utils8delay_msEj+0x14>
    20ba:	00 00       	nop
    20bc:	2f 5f       	subi	r18, 0xFF	; 255
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	f4 cf       	rjmp	.-24     	; 0x20aa <_ZN5Utils8delay_msEj+0x4>
    20c2:	08 95       	ret

000020c4 <_ZN5Utils8delay_usEj>:
}

void Utils::delay_us(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_us(1);
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	28 17       	cp	r18, r24
    20ca:	39 07       	cpc	r19, r25
    20cc:	39 f0       	breq	.+14     	; 0x20dc <_ZN5Utils8delay_usEj+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20ce:	4a e0       	ldi	r20, 0x0A	; 10
    20d0:	4a 95       	dec	r20
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <_ZN5Utils8delay_usEj+0xc>
    20d4:	00 c0       	rjmp	.+0      	; 0x20d6 <_ZN5Utils8delay_usEj+0x12>
    20d6:	2f 5f       	subi	r18, 0xFF	; 255
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	f6 cf       	rjmp	.-20     	; 0x20c8 <_ZN5Utils8delay_usEj+0x4>
    20dc:	08 95       	ret

000020de <main>:
//============//
//=== MAIN ===//
//============//

int main(void)
{
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	c2 59       	subi	r28, 0x92	; 146
    20e8:	d1 09       	sbc	r29, r1
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	de bf       	out	0x3e, r29	; 62
	Utils::setSystemClock(Utils::SC_32M); // 32MHz internal oscillator
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN5Utils14setSystemClockENS_13systemClock_eE>

	Adca myAdc(Adca::P_DIV512, Utils::IL_HIGH);
    20f4:	43 e0       	ldi	r20, 0x03	; 3
    20f6:	67 e0       	ldi	r22, 0x07	; 7
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 11 03 	call	0x622	; 0x622 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>
	Tcc0 myTimer(Tcc0::CS_DIV1, 2.048, Utils::IL_HIGH); // timeIncrement = 65536/32MHz
    2100:	03 e0       	ldi	r16, 0x03	; 3
    2102:	2f e6       	ldi	r18, 0x6F	; 111
    2104:	32 e1       	ldi	r19, 0x12	; 18
    2106:	43 e0       	ldi	r20, 0x03	; 3
    2108:	50 e4       	ldi	r21, 0x40	; 64
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	ce 01       	movw	r24, r28
    210e:	8b 5b       	subi	r24, 0xBB	; 187
    2110:	9f 4f       	sbci	r25, 0xFF	; 255
    2112:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>
	Twie myTwie(155, Twie::IBT_50US); // 155 = 100 kHz
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	6b e9       	ldi	r22, 0x9B	; 155
    211a:	ce 01       	movw	r24, r28
    211c:	89 58       	subi	r24, 0x89	; 137
    211e:	9f 4f       	sbci	r25, 0xFF	; 255
    2120:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <_ZN4TwieC1EhNS_5ibt_eE>
	UsartE0 myUsart0(Usart::BAUD_115k2, Utils::IL_MEDIUM);
    2124:	40 91 b4 21 	lds	r20, 0x21B4	; 0x8021b4 <_ZN5Usart10BAUD_115k2E>
    2128:	50 91 b5 21 	lds	r21, 0x21B5	; 0x8021b5 <_ZN5Usart10BAUD_115k2E+0x1>
    212c:	60 91 b6 21 	lds	r22, 0x21B6	; 0x8021b6 <_ZN5Usart10BAUD_115k2E+0x2>
    2130:	70 91 b7 21 	lds	r23, 0x21B7	; 0x8021b7 <_ZN5Usart10BAUD_115k2E+0x3>
    2134:	3e 01       	movw	r6, r28
    2136:	89 e6       	ldi	r24, 0x69	; 105
    2138:	68 0e       	add	r6, r24
    213a:	71 1c       	adc	r7, r1
    213c:	22 e0       	ldi	r18, 0x02	; 2
    213e:	c3 01       	movw	r24, r6
    2140:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>
	UsartC1 myUsart1(Usart::BAUD_9k6, Utils::IL_MEDIUM);
    2144:	40 91 b8 21 	lds	r20, 0x21B8	; 0x8021b8 <_ZN5Usart8BAUD_9k6E>
    2148:	50 91 b9 21 	lds	r21, 0x21B9	; 0x8021b9 <_ZN5Usart8BAUD_9k6E+0x1>
    214c:	60 91 ba 21 	lds	r22, 0x21BA	; 0x8021ba <_ZN5Usart8BAUD_9k6E+0x2>
    2150:	70 91 bb 21 	lds	r23, 0x21BB	; 0x8021bb <_ZN5Usart8BAUD_9k6E+0x3>
    2154:	2e 01       	movw	r4, r28
    2156:	9b e5       	ldi	r25, 0x5B	; 91
    2158:	49 0e       	add	r4, r25
    215a:	51 1c       	adc	r5, r1
    215c:	22 e0       	ldi	r18, 0x02	; 2
    215e:	c2 01       	movw	r24, r4
    2160:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>
	
	Pump myPump;
    2164:	ce 01       	movw	r24, r28
    2166:	8e 56       	subi	r24, 0x6E	; 110
    2168:	9f 4f       	sbci	r25, 0xFF	; 255
    216a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN4PumpC1Ev>
	Valve sampleValve(1<<1);
    216e:	6e 01       	movw	r12, r28
    2170:	8e e8       	ldi	r24, 0x8E	; 142
    2172:	c8 0e       	add	r12, r24
    2174:	d1 1c       	adc	r13, r1
    2176:	62 e0       	ldi	r22, 0x02	; 2
    2178:	c6 01       	movw	r24, r12
    217a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_ZN5ValveC1Eh>
	Valve gascalValve(1<<2);
    217e:	7e 01       	movw	r14, r28
    2180:	9c e8       	ldi	r25, 0x8C	; 140
    2182:	e9 0e       	add	r14, r25
    2184:	f1 1c       	adc	r15, r1
    2186:	64 e0       	ldi	r22, 0x04	; 4
    2188:	c7 01       	movw	r24, r14
    218a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_ZN5ValveC1Eh>
	Valve outputValve(1<<4);
    218e:	5e 01       	movw	r10, r28
    2190:	8a e8       	ldi	r24, 0x8A	; 138
    2192:	a8 0e       	add	r10, r24
    2194:	b1 1c       	adc	r11, r1
    2196:	60 e1       	ldi	r22, 0x10	; 16
    2198:	c5 01       	movw	r24, r10
    219a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_ZN5ValveC1Eh>
	
	Utils::gascal_s gascal = {0.5,-86.392}; // TODO: EEPROM saving of cal coeffs
    219e:	88 e0       	ldi	r24, 0x08	; 8
    21a0:	e1 e0       	ldi	r30, 0x01	; 1
    21a2:	f0 e2       	ldi	r31, 0x20	; 32
    21a4:	de 01       	movw	r26, r28
    21a6:	ae 57       	subi	r26, 0x7E	; 126
    21a8:	bf 4f       	sbci	r27, 0xFF	; 255
    21aa:	01 90       	ld	r0, Z+
    21ac:	0d 92       	st	X+, r0
    21ae:	8a 95       	dec	r24
    21b0:	e1 f7       	brne	.-8      	; 0x21aa <main+0xcc>
	Ms5525dso myFlowSensor(Ms5525dso::OSR4096, 0x76, &myTwie);
    21b2:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <_ZN9Ms5525dso7OSR4096E>
    21b6:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <_ZN9Ms5525dso7OSR4096E+0x1>
    21ba:	a0 91 2a 21 	lds	r26, 0x212A	; 0x80212a <_ZN9Ms5525dso7OSR4096E+0x2>
    21be:	8e 01       	movw	r16, r28
    21c0:	09 58       	subi	r16, 0x89	; 137
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	26 e7       	ldi	r18, 0x76	; 118
    21c6:	ac 01       	movw	r20, r24
    21c8:	6a 2f       	mov	r22, r26
    21ca:	ce 01       	movw	r24, r28
    21cc:	87 96       	adiw	r24, 0x27	; 39
    21ce:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN9Ms5525dsoC1ENS_5osr_sEhP4Twie>
	TestHandler myTestHandler(gascal, &myAdc, &myFlowSensor, &myPump, &myTimer, &myUsart0, &myUsart1, &gascalValve, &sampleValve, &outputValve);
    21d2:	bf 92       	push	r11
    21d4:	af 92       	push	r10
    21d6:	df 92       	push	r13
    21d8:	cf 92       	push	r12
    21da:	ff 92       	push	r15
    21dc:	ef 92       	push	r14
    21de:	5f 92       	push	r5
    21e0:	4f 92       	push	r4
    21e2:	7f 92       	push	r7
    21e4:	6f 92       	push	r6
    21e6:	ce 01       	movw	r24, r28
    21e8:	8b 5b       	subi	r24, 0xBB	; 187
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	4c 01       	movw	r8, r24
    21ee:	83 5b       	subi	r24, 0xB3	; 179
    21f0:	9f 4f       	sbci	r25, 0xFF	; 255
    21f2:	5c 01       	movw	r10, r24
    21f4:	8b 56       	subi	r24, 0x6B	; 107
    21f6:	91 09       	sbc	r25, r1
    21f8:	6c 01       	movw	r12, r24
    21fa:	86 97       	sbiw	r24, 0x26	; 38
    21fc:	7c 01       	movw	r14, r24
    21fe:	ce 57       	subi	r28, 0x7E	; 126
    2200:	df 4f       	sbci	r29, 0xFF	; 255
    2202:	08 81       	ld	r16, Y
    2204:	c2 58       	subi	r28, 0x82	; 130
    2206:	d0 40       	sbci	r29, 0x00	; 0
    2208:	cd 57       	subi	r28, 0x7D	; 125
    220a:	df 4f       	sbci	r29, 0xFF	; 255
    220c:	18 81       	ld	r17, Y
    220e:	c3 58       	subi	r28, 0x83	; 131
    2210:	d0 40       	sbci	r29, 0x00	; 0
    2212:	cc 57       	subi	r28, 0x7C	; 124
    2214:	df 4f       	sbci	r29, 0xFF	; 255
    2216:	28 81       	ld	r18, Y
    2218:	c4 58       	subi	r28, 0x84	; 132
    221a:	d0 40       	sbci	r29, 0x00	; 0
    221c:	cb 57       	subi	r28, 0x7B	; 123
    221e:	df 4f       	sbci	r29, 0xFF	; 255
    2220:	38 81       	ld	r19, Y
    2222:	c5 58       	subi	r28, 0x85	; 133
    2224:	d0 40       	sbci	r29, 0x00	; 0
    2226:	ca 57       	subi	r28, 0x7A	; 122
    2228:	df 4f       	sbci	r29, 0xFF	; 255
    222a:	48 81       	ld	r20, Y
    222c:	c6 58       	subi	r28, 0x86	; 134
    222e:	d0 40       	sbci	r29, 0x00	; 0
    2230:	c9 57       	subi	r28, 0x79	; 121
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	58 81       	ld	r21, Y
    2236:	c7 58       	subi	r28, 0x87	; 135
    2238:	d0 40       	sbci	r29, 0x00	; 0
    223a:	c8 57       	subi	r28, 0x78	; 120
    223c:	df 4f       	sbci	r29, 0xFF	; 255
    223e:	68 81       	ld	r22, Y
    2240:	c8 58       	subi	r28, 0x88	; 136
    2242:	d0 40       	sbci	r29, 0x00	; 0
    2244:	c7 57       	subi	r28, 0x77	; 119
    2246:	df 4f       	sbci	r29, 0xFF	; 255
    2248:	78 81       	ld	r23, Y
    224a:	c9 58       	subi	r28, 0x89	; 137
    224c:	d0 40       	sbci	r29, 0x00	; 0
    224e:	80 57       	subi	r24, 0x70	; 112
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN11TestHandlerC1EN5Utils8gascal_sEP4AdcaP9Ms5525dsoP4PumpP4Tcc0P7UsartE0P7UsartC1P5ValveSF_SF_>
	
	ComHandler myComHandler(ComHandler::IDLE, &myTimer, &myUsart0, &myUsart1);
    2256:	82 01       	movw	r16, r4
    2258:	93 01       	movw	r18, r6
    225a:	a4 01       	movw	r20, r8
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	ce 01       	movw	r24, r28
    2260:	80 57       	subi	r24, 0x70	; 112
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	0e 94 33 03 	call	0x666	; 0x666 <_ZN10ComHandlerC1ENS_7state_eEP4Tcc0P7UsartE0P7UsartC1>
	
	Utils::enableInterruptLevel(Utils::IL_MEDIUM);
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::enableInterruptLevel(Utils::IL_HIGH);
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	0e 94 3f 10 	call	0x207e	; 0x207e <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::globalInterruptEnable();
    2274:	0e 94 4f 10 	call	0x209e	; 0x209e <_ZN5Utils21globalInterruptEnableEv>
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	de bf       	out	0x3e, r29	; 62
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    227c:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <_ZN7UsartE07rxcFlagE>

	while (true)
	{		
		if (myUsart0.isRXC())
    2280:	88 23       	and	r24, r24
    2282:	51 f0       	breq	.+20     	; 0x2298 <main+0x1ba>
	void setRXC(bool b){rxcFlag = b;};
    2284:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <_ZN7UsartE07rxcFlagE>
	char getChar(){return rxChar;};
    2288:	60 91 38 22 	lds	r22, 0x2238	; 0x802238 <_ZN7UsartE06rxCharE>
		{
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			myComHandler.handle(c, ComHandler::USART0);
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	ce 01       	movw	r24, r28
    2290:	80 57       	subi	r24, 0x70	; 112
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN10ComHandler6handleEcNS_5com_eE>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    2298:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <_ZN7UsartC17rxcFlagE>
//  		else if (c == 'c') gascal = start_gascal(myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
//  		else if (c == 'd') gascal = start_aircal(gascal.gain, myAdc, myPump, myTimer, myUsart0, gascalValve, outputValve);
			// END OF DEBUG
		}
		
		if (myUsart1.isRXC())
    229c:	88 23       	and	r24, r24
    229e:	71 f3       	breq	.-36     	; 0x227c <main+0x19e>
	void setRXC(bool b){rxcFlag = b;};
    22a0:	10 92 37 22 	sts	0x2237, r1	; 0x802237 <_ZN7UsartC17rxcFlagE>
	char getChar(){return rxChar;};
    22a4:	60 91 36 22 	lds	r22, 0x2236	; 0x802236 <_ZN7UsartC16rxCharE>
		{
			myUsart1.setRXC(false);
			char d = myUsart1.getChar();
			myComHandler.handle(d, ComHandler::USART1);
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	ce 01       	movw	r24, r28
    22ac:	80 57       	subi	r24, 0x70	; 112
    22ae:	9f 4f       	sbci	r25, 0xFF	; 255
    22b0:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN10ComHandler6handleEcNS_5com_eE>
    22b4:	e3 cf       	rjmp	.-58     	; 0x227c <main+0x19e>

000022b6 <_ZN5ValveC1Eh>:
*/

#include "Valve.h"
#include <avr/io.h>

Valve::Valve(uint8_t pin)
    22b6:	fc 01       	movw	r30, r24
{
	this->pin = pin;
    22b8:	60 83       	st	Z, r22
	PORTC_DIRSET = pin;
    22ba:	60 93 41 06 	sts	0x0641, r22	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	open_b = true;
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    22be:	80 81       	ld	r24, Z
    22c0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    22c4:	11 82       	std	Z+1, r1	; 0x01
    22c6:	08 95       	ret

000022c8 <_ZN5Valve4openEv>:
	close();
}

void Valve::open()
{
	PORTC_OUTSET = pin;
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 81       	ld	r18, Z
    22cc:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	open_b = true;
    22d0:	21 e0       	ldi	r18, 0x01	; 1
    22d2:	21 83       	std	Z+1, r18	; 0x01
    22d4:	08 95       	ret

000022d6 <_ZN5Valve5closeEv>:
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    22d6:	fc 01       	movw	r30, r24
    22d8:	20 81       	ld	r18, Z
    22da:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    22de:	11 82       	std	Z+1, r1	; 0x01
    22e0:	08 95       	ret

000022e2 <__subsf3>:
    22e2:	50 58       	subi	r21, 0x80	; 128

000022e4 <__addsf3>:
    22e4:	bb 27       	eor	r27, r27
    22e6:	aa 27       	eor	r26, r26
    22e8:	0e 94 89 11 	call	0x2312	; 0x2312 <__addsf3x>
    22ec:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__fp_round>
    22f0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__fp_pscA>
    22f4:	38 f0       	brcs	.+14     	; 0x2304 <__addsf3+0x20>
    22f6:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__fp_pscB>
    22fa:	20 f0       	brcs	.+8      	; 0x2304 <__addsf3+0x20>
    22fc:	39 f4       	brne	.+14     	; 0x230c <__addsf3+0x28>
    22fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2300:	19 f4       	brne	.+6      	; 0x2308 <__addsf3+0x24>
    2302:	26 f4       	brtc	.+8      	; 0x230c <__addsf3+0x28>
    2304:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_nan>
    2308:	0e f4       	brtc	.+2      	; 0x230c <__addsf3+0x28>
    230a:	e0 95       	com	r30
    230c:	e7 fb       	bst	r30, 7
    230e:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>

00002312 <__addsf3x>:
    2312:	e9 2f       	mov	r30, r25
    2314:	0e 94 14 13 	call	0x2628	; 0x2628 <__fp_split3>
    2318:	58 f3       	brcs	.-42     	; 0x22f0 <__addsf3+0xc>
    231a:	ba 17       	cp	r27, r26
    231c:	62 07       	cpc	r22, r18
    231e:	73 07       	cpc	r23, r19
    2320:	84 07       	cpc	r24, r20
    2322:	95 07       	cpc	r25, r21
    2324:	20 f0       	brcs	.+8      	; 0x232e <__addsf3x+0x1c>
    2326:	79 f4       	brne	.+30     	; 0x2346 <__addsf3x+0x34>
    2328:	a6 f5       	brtc	.+104    	; 0x2392 <__addsf3x+0x80>
    232a:	0c 94 36 13 	jmp	0x266c	; 0x266c <__fp_zero>
    232e:	0e f4       	brtc	.+2      	; 0x2332 <__addsf3x+0x20>
    2330:	e0 95       	com	r30
    2332:	0b 2e       	mov	r0, r27
    2334:	ba 2f       	mov	r27, r26
    2336:	a0 2d       	mov	r26, r0
    2338:	0b 01       	movw	r0, r22
    233a:	b9 01       	movw	r22, r18
    233c:	90 01       	movw	r18, r0
    233e:	0c 01       	movw	r0, r24
    2340:	ca 01       	movw	r24, r20
    2342:	a0 01       	movw	r20, r0
    2344:	11 24       	eor	r1, r1
    2346:	ff 27       	eor	r31, r31
    2348:	59 1b       	sub	r21, r25
    234a:	99 f0       	breq	.+38     	; 0x2372 <__addsf3x+0x60>
    234c:	59 3f       	cpi	r21, 0xF9	; 249
    234e:	50 f4       	brcc	.+20     	; 0x2364 <__addsf3x+0x52>
    2350:	50 3e       	cpi	r21, 0xE0	; 224
    2352:	68 f1       	brcs	.+90     	; 0x23ae <__addsf3x+0x9c>
    2354:	1a 16       	cp	r1, r26
    2356:	f0 40       	sbci	r31, 0x00	; 0
    2358:	a2 2f       	mov	r26, r18
    235a:	23 2f       	mov	r18, r19
    235c:	34 2f       	mov	r19, r20
    235e:	44 27       	eor	r20, r20
    2360:	58 5f       	subi	r21, 0xF8	; 248
    2362:	f3 cf       	rjmp	.-26     	; 0x234a <__addsf3x+0x38>
    2364:	46 95       	lsr	r20
    2366:	37 95       	ror	r19
    2368:	27 95       	ror	r18
    236a:	a7 95       	ror	r26
    236c:	f0 40       	sbci	r31, 0x00	; 0
    236e:	53 95       	inc	r21
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__addsf3x+0x52>
    2372:	7e f4       	brtc	.+30     	; 0x2392 <__addsf3x+0x80>
    2374:	1f 16       	cp	r1, r31
    2376:	ba 0b       	sbc	r27, r26
    2378:	62 0b       	sbc	r22, r18
    237a:	73 0b       	sbc	r23, r19
    237c:	84 0b       	sbc	r24, r20
    237e:	ba f0       	brmi	.+46     	; 0x23ae <__addsf3x+0x9c>
    2380:	91 50       	subi	r25, 0x01	; 1
    2382:	a1 f0       	breq	.+40     	; 0x23ac <__addsf3x+0x9a>
    2384:	ff 0f       	add	r31, r31
    2386:	bb 1f       	adc	r27, r27
    2388:	66 1f       	adc	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	c2 f7       	brpl	.-16     	; 0x2380 <__addsf3x+0x6e>
    2390:	0e c0       	rjmp	.+28     	; 0x23ae <__addsf3x+0x9c>
    2392:	ba 0f       	add	r27, r26
    2394:	62 1f       	adc	r22, r18
    2396:	73 1f       	adc	r23, r19
    2398:	84 1f       	adc	r24, r20
    239a:	48 f4       	brcc	.+18     	; 0x23ae <__addsf3x+0x9c>
    239c:	87 95       	ror	r24
    239e:	77 95       	ror	r23
    23a0:	67 95       	ror	r22
    23a2:	b7 95       	ror	r27
    23a4:	f7 95       	ror	r31
    23a6:	9e 3f       	cpi	r25, 0xFE	; 254
    23a8:	08 f0       	brcs	.+2      	; 0x23ac <__addsf3x+0x9a>
    23aa:	b0 cf       	rjmp	.-160    	; 0x230c <__addsf3+0x28>
    23ac:	93 95       	inc	r25
    23ae:	88 0f       	add	r24, r24
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <__addsf3x+0xa2>
    23b2:	99 27       	eor	r25, r25
    23b4:	ee 0f       	add	r30, r30
    23b6:	97 95       	ror	r25
    23b8:	87 95       	ror	r24
    23ba:	08 95       	ret

000023bc <__cmpsf2>:
    23bc:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_cmp>
    23c0:	08 f4       	brcc	.+2      	; 0x23c4 <__cmpsf2+0x8>
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	08 95       	ret

000023c6 <__divsf3>:
    23c6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3x>
    23ca:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__fp_round>
    23ce:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__fp_pscB>
    23d2:	58 f0       	brcs	.+22     	; 0x23ea <__divsf3+0x24>
    23d4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__fp_pscA>
    23d8:	40 f0       	brcs	.+16     	; 0x23ea <__divsf3+0x24>
    23da:	29 f4       	brne	.+10     	; 0x23e6 <__divsf3+0x20>
    23dc:	5f 3f       	cpi	r21, 0xFF	; 255
    23de:	29 f0       	breq	.+10     	; 0x23ea <__divsf3+0x24>
    23e0:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>
    23e4:	51 11       	cpse	r21, r1
    23e6:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_szero>
    23ea:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_nan>

000023ee <__divsf3x>:
    23ee:	0e 94 14 13 	call	0x2628	; 0x2628 <__fp_split3>
    23f2:	68 f3       	brcs	.-38     	; 0x23ce <__divsf3+0x8>

000023f4 <__divsf3_pse>:
    23f4:	99 23       	and	r25, r25
    23f6:	b1 f3       	breq	.-20     	; 0x23e4 <__divsf3+0x1e>
    23f8:	55 23       	and	r21, r21
    23fa:	91 f3       	breq	.-28     	; 0x23e0 <__divsf3+0x1a>
    23fc:	95 1b       	sub	r25, r21
    23fe:	55 0b       	sbc	r21, r21
    2400:	bb 27       	eor	r27, r27
    2402:	aa 27       	eor	r26, r26
    2404:	62 17       	cp	r22, r18
    2406:	73 07       	cpc	r23, r19
    2408:	84 07       	cpc	r24, r20
    240a:	38 f0       	brcs	.+14     	; 0x241a <__divsf3_pse+0x26>
    240c:	9f 5f       	subi	r25, 0xFF	; 255
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	44 1f       	adc	r20, r20
    2416:	aa 1f       	adc	r26, r26
    2418:	a9 f3       	breq	.-22     	; 0x2404 <__divsf3_pse+0x10>
    241a:	35 d0       	rcall	.+106    	; 0x2486 <__divsf3_pse+0x92>
    241c:	0e 2e       	mov	r0, r30
    241e:	3a f0       	brmi	.+14     	; 0x242e <__divsf3_pse+0x3a>
    2420:	e0 e8       	ldi	r30, 0x80	; 128
    2422:	32 d0       	rcall	.+100    	; 0x2488 <__divsf3_pse+0x94>
    2424:	91 50       	subi	r25, 0x01	; 1
    2426:	50 40       	sbci	r21, 0x00	; 0
    2428:	e6 95       	lsr	r30
    242a:	00 1c       	adc	r0, r0
    242c:	ca f7       	brpl	.-14     	; 0x2420 <__divsf3_pse+0x2c>
    242e:	2b d0       	rcall	.+86     	; 0x2486 <__divsf3_pse+0x92>
    2430:	fe 2f       	mov	r31, r30
    2432:	29 d0       	rcall	.+82     	; 0x2486 <__divsf3_pse+0x92>
    2434:	66 0f       	add	r22, r22
    2436:	77 1f       	adc	r23, r23
    2438:	88 1f       	adc	r24, r24
    243a:	bb 1f       	adc	r27, r27
    243c:	26 17       	cp	r18, r22
    243e:	37 07       	cpc	r19, r23
    2440:	48 07       	cpc	r20, r24
    2442:	ab 07       	cpc	r26, r27
    2444:	b0 e8       	ldi	r27, 0x80	; 128
    2446:	09 f0       	breq	.+2      	; 0x244a <__divsf3_pse+0x56>
    2448:	bb 0b       	sbc	r27, r27
    244a:	80 2d       	mov	r24, r0
    244c:	bf 01       	movw	r22, r30
    244e:	ff 27       	eor	r31, r31
    2450:	93 58       	subi	r25, 0x83	; 131
    2452:	5f 4f       	sbci	r21, 0xFF	; 255
    2454:	3a f0       	brmi	.+14     	; 0x2464 <__divsf3_pse+0x70>
    2456:	9e 3f       	cpi	r25, 0xFE	; 254
    2458:	51 05       	cpc	r21, r1
    245a:	78 f0       	brcs	.+30     	; 0x247a <__divsf3_pse+0x86>
    245c:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>
    2460:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_szero>
    2464:	5f 3f       	cpi	r21, 0xFF	; 255
    2466:	e4 f3       	brlt	.-8      	; 0x2460 <__divsf3_pse+0x6c>
    2468:	98 3e       	cpi	r25, 0xE8	; 232
    246a:	d4 f3       	brlt	.-12     	; 0x2460 <__divsf3_pse+0x6c>
    246c:	86 95       	lsr	r24
    246e:	77 95       	ror	r23
    2470:	67 95       	ror	r22
    2472:	b7 95       	ror	r27
    2474:	f7 95       	ror	r31
    2476:	9f 5f       	subi	r25, 0xFF	; 255
    2478:	c9 f7       	brne	.-14     	; 0x246c <__divsf3_pse+0x78>
    247a:	88 0f       	add	r24, r24
    247c:	91 1d       	adc	r25, r1
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	97 f9       	bld	r25, 7
    2484:	08 95       	ret
    2486:	e1 e0       	ldi	r30, 0x01	; 1
    2488:	66 0f       	add	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	bb 1f       	adc	r27, r27
    2490:	62 17       	cp	r22, r18
    2492:	73 07       	cpc	r23, r19
    2494:	84 07       	cpc	r24, r20
    2496:	ba 07       	cpc	r27, r26
    2498:	20 f0       	brcs	.+8      	; 0x24a2 <__divsf3_pse+0xae>
    249a:	62 1b       	sub	r22, r18
    249c:	73 0b       	sbc	r23, r19
    249e:	84 0b       	sbc	r24, r20
    24a0:	ba 0b       	sbc	r27, r26
    24a2:	ee 1f       	adc	r30, r30
    24a4:	88 f7       	brcc	.-30     	; 0x2488 <__divsf3_pse+0x94>
    24a6:	e0 95       	com	r30
    24a8:	08 95       	ret

000024aa <__fixsfsi>:
    24aa:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__fixunssfsi>
    24ae:	68 94       	set
    24b0:	b1 11       	cpse	r27, r1
    24b2:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_szero>
    24b6:	08 95       	ret

000024b8 <__fixunssfsi>:
    24b8:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_splitA>
    24bc:	88 f0       	brcs	.+34     	; 0x24e0 <__fixunssfsi+0x28>
    24be:	9f 57       	subi	r25, 0x7F	; 127
    24c0:	98 f0       	brcs	.+38     	; 0x24e8 <__fixunssfsi+0x30>
    24c2:	b9 2f       	mov	r27, r25
    24c4:	99 27       	eor	r25, r25
    24c6:	b7 51       	subi	r27, 0x17	; 23
    24c8:	b0 f0       	brcs	.+44     	; 0x24f6 <__fixunssfsi+0x3e>
    24ca:	e1 f0       	breq	.+56     	; 0x2504 <__fixunssfsi+0x4c>
    24cc:	66 0f       	add	r22, r22
    24ce:	77 1f       	adc	r23, r23
    24d0:	88 1f       	adc	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	1a f0       	brmi	.+6      	; 0x24dc <__fixunssfsi+0x24>
    24d6:	ba 95       	dec	r27
    24d8:	c9 f7       	brne	.-14     	; 0x24cc <__fixunssfsi+0x14>
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <__fixunssfsi+0x4c>
    24dc:	b1 30       	cpi	r27, 0x01	; 1
    24de:	91 f0       	breq	.+36     	; 0x2504 <__fixunssfsi+0x4c>
    24e0:	0e 94 36 13 	call	0x266c	; 0x266c <__fp_zero>
    24e4:	b1 e0       	ldi	r27, 0x01	; 1
    24e6:	08 95       	ret
    24e8:	0c 94 36 13 	jmp	0x266c	; 0x266c <__fp_zero>
    24ec:	67 2f       	mov	r22, r23
    24ee:	78 2f       	mov	r23, r24
    24f0:	88 27       	eor	r24, r24
    24f2:	b8 5f       	subi	r27, 0xF8	; 248
    24f4:	39 f0       	breq	.+14     	; 0x2504 <__fixunssfsi+0x4c>
    24f6:	b9 3f       	cpi	r27, 0xF9	; 249
    24f8:	cc f3       	brlt	.-14     	; 0x24ec <__fixunssfsi+0x34>
    24fa:	86 95       	lsr	r24
    24fc:	77 95       	ror	r23
    24fe:	67 95       	ror	r22
    2500:	b3 95       	inc	r27
    2502:	d9 f7       	brne	.-10     	; 0x24fa <__fixunssfsi+0x42>
    2504:	3e f4       	brtc	.+14     	; 0x2514 <__fixunssfsi+0x5c>
    2506:	90 95       	com	r25
    2508:	80 95       	com	r24
    250a:	70 95       	com	r23
    250c:	61 95       	neg	r22
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	08 95       	ret

00002516 <__floatunsisf>:
    2516:	e8 94       	clt
    2518:	09 c0       	rjmp	.+18     	; 0x252c <__floatsisf+0x12>

0000251a <__floatsisf>:
    251a:	97 fb       	bst	r25, 7
    251c:	3e f4       	brtc	.+14     	; 0x252c <__floatsisf+0x12>
    251e:	90 95       	com	r25
    2520:	80 95       	com	r24
    2522:	70 95       	com	r23
    2524:	61 95       	neg	r22
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	8f 4f       	sbci	r24, 0xFF	; 255
    252a:	9f 4f       	sbci	r25, 0xFF	; 255
    252c:	99 23       	and	r25, r25
    252e:	a9 f0       	breq	.+42     	; 0x255a <__floatsisf+0x40>
    2530:	f9 2f       	mov	r31, r25
    2532:	96 e9       	ldi	r25, 0x96	; 150
    2534:	bb 27       	eor	r27, r27
    2536:	93 95       	inc	r25
    2538:	f6 95       	lsr	r31
    253a:	87 95       	ror	r24
    253c:	77 95       	ror	r23
    253e:	67 95       	ror	r22
    2540:	b7 95       	ror	r27
    2542:	f1 11       	cpse	r31, r1
    2544:	f8 cf       	rjmp	.-16     	; 0x2536 <__floatsisf+0x1c>
    2546:	fa f4       	brpl	.+62     	; 0x2586 <__floatsisf+0x6c>
    2548:	bb 0f       	add	r27, r27
    254a:	11 f4       	brne	.+4      	; 0x2550 <__floatsisf+0x36>
    254c:	60 ff       	sbrs	r22, 0
    254e:	1b c0       	rjmp	.+54     	; 0x2586 <__floatsisf+0x6c>
    2550:	6f 5f       	subi	r22, 0xFF	; 255
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	8f 4f       	sbci	r24, 0xFF	; 255
    2556:	9f 4f       	sbci	r25, 0xFF	; 255
    2558:	16 c0       	rjmp	.+44     	; 0x2586 <__floatsisf+0x6c>
    255a:	88 23       	and	r24, r24
    255c:	11 f0       	breq	.+4      	; 0x2562 <__floatsisf+0x48>
    255e:	96 e9       	ldi	r25, 0x96	; 150
    2560:	11 c0       	rjmp	.+34     	; 0x2584 <__floatsisf+0x6a>
    2562:	77 23       	and	r23, r23
    2564:	21 f0       	breq	.+8      	; 0x256e <__floatsisf+0x54>
    2566:	9e e8       	ldi	r25, 0x8E	; 142
    2568:	87 2f       	mov	r24, r23
    256a:	76 2f       	mov	r23, r22
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <__floatsisf+0x5e>
    256e:	66 23       	and	r22, r22
    2570:	71 f0       	breq	.+28     	; 0x258e <__floatsisf+0x74>
    2572:	96 e8       	ldi	r25, 0x86	; 134
    2574:	86 2f       	mov	r24, r22
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	2a f0       	brmi	.+10     	; 0x2586 <__floatsisf+0x6c>
    257c:	9a 95       	dec	r25
    257e:	66 0f       	add	r22, r22
    2580:	77 1f       	adc	r23, r23
    2582:	88 1f       	adc	r24, r24
    2584:	da f7       	brpl	.-10     	; 0x257c <__floatsisf+0x62>
    2586:	88 0f       	add	r24, r24
    2588:	96 95       	lsr	r25
    258a:	87 95       	ror	r24
    258c:	97 f9       	bld	r25, 7
    258e:	08 95       	ret

00002590 <__fp_cmp>:
    2590:	99 0f       	add	r25, r25
    2592:	00 08       	sbc	r0, r0
    2594:	55 0f       	add	r21, r21
    2596:	aa 0b       	sbc	r26, r26
    2598:	e0 e8       	ldi	r30, 0x80	; 128
    259a:	fe ef       	ldi	r31, 0xFE	; 254
    259c:	16 16       	cp	r1, r22
    259e:	17 06       	cpc	r1, r23
    25a0:	e8 07       	cpc	r30, r24
    25a2:	f9 07       	cpc	r31, r25
    25a4:	c0 f0       	brcs	.+48     	; 0x25d6 <__fp_cmp+0x46>
    25a6:	12 16       	cp	r1, r18
    25a8:	13 06       	cpc	r1, r19
    25aa:	e4 07       	cpc	r30, r20
    25ac:	f5 07       	cpc	r31, r21
    25ae:	98 f0       	brcs	.+38     	; 0x25d6 <__fp_cmp+0x46>
    25b0:	62 1b       	sub	r22, r18
    25b2:	73 0b       	sbc	r23, r19
    25b4:	84 0b       	sbc	r24, r20
    25b6:	95 0b       	sbc	r25, r21
    25b8:	39 f4       	brne	.+14     	; 0x25c8 <__fp_cmp+0x38>
    25ba:	0a 26       	eor	r0, r26
    25bc:	61 f0       	breq	.+24     	; 0x25d6 <__fp_cmp+0x46>
    25be:	23 2b       	or	r18, r19
    25c0:	24 2b       	or	r18, r20
    25c2:	25 2b       	or	r18, r21
    25c4:	21 f4       	brne	.+8      	; 0x25ce <__fp_cmp+0x3e>
    25c6:	08 95       	ret
    25c8:	0a 26       	eor	r0, r26
    25ca:	09 f4       	brne	.+2      	; 0x25ce <__fp_cmp+0x3e>
    25cc:	a1 40       	sbci	r26, 0x01	; 1
    25ce:	a6 95       	lsr	r26
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	81 1d       	adc	r24, r1
    25d4:	81 1d       	adc	r24, r1
    25d6:	08 95       	ret

000025d8 <__fp_inf>:
    25d8:	97 f9       	bld	r25, 7
    25da:	9f 67       	ori	r25, 0x7F	; 127
    25dc:	80 e8       	ldi	r24, 0x80	; 128
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	08 95       	ret

000025e4 <__fp_nan>:
    25e4:	9f ef       	ldi	r25, 0xFF	; 255
    25e6:	80 ec       	ldi	r24, 0xC0	; 192
    25e8:	08 95       	ret

000025ea <__fp_pscA>:
    25ea:	00 24       	eor	r0, r0
    25ec:	0a 94       	dec	r0
    25ee:	16 16       	cp	r1, r22
    25f0:	17 06       	cpc	r1, r23
    25f2:	18 06       	cpc	r1, r24
    25f4:	09 06       	cpc	r0, r25
    25f6:	08 95       	ret

000025f8 <__fp_pscB>:
    25f8:	00 24       	eor	r0, r0
    25fa:	0a 94       	dec	r0
    25fc:	12 16       	cp	r1, r18
    25fe:	13 06       	cpc	r1, r19
    2600:	14 06       	cpc	r1, r20
    2602:	05 06       	cpc	r0, r21
    2604:	08 95       	ret

00002606 <__fp_round>:
    2606:	09 2e       	mov	r0, r25
    2608:	03 94       	inc	r0
    260a:	00 0c       	add	r0, r0
    260c:	11 f4       	brne	.+4      	; 0x2612 <__fp_round+0xc>
    260e:	88 23       	and	r24, r24
    2610:	52 f0       	brmi	.+20     	; 0x2626 <__fp_round+0x20>
    2612:	bb 0f       	add	r27, r27
    2614:	40 f4       	brcc	.+16     	; 0x2626 <__fp_round+0x20>
    2616:	bf 2b       	or	r27, r31
    2618:	11 f4       	brne	.+4      	; 0x261e <__fp_round+0x18>
    261a:	60 ff       	sbrs	r22, 0
    261c:	04 c0       	rjmp	.+8      	; 0x2626 <__fp_round+0x20>
    261e:	6f 5f       	subi	r22, 0xFF	; 255
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	8f 4f       	sbci	r24, 0xFF	; 255
    2624:	9f 4f       	sbci	r25, 0xFF	; 255
    2626:	08 95       	ret

00002628 <__fp_split3>:
    2628:	57 fd       	sbrc	r21, 7
    262a:	90 58       	subi	r25, 0x80	; 128
    262c:	44 0f       	add	r20, r20
    262e:	55 1f       	adc	r21, r21
    2630:	59 f0       	breq	.+22     	; 0x2648 <__fp_splitA+0x10>
    2632:	5f 3f       	cpi	r21, 0xFF	; 255
    2634:	71 f0       	breq	.+28     	; 0x2652 <__fp_splitA+0x1a>
    2636:	47 95       	ror	r20

00002638 <__fp_splitA>:
    2638:	88 0f       	add	r24, r24
    263a:	97 fb       	bst	r25, 7
    263c:	99 1f       	adc	r25, r25
    263e:	61 f0       	breq	.+24     	; 0x2658 <__fp_splitA+0x20>
    2640:	9f 3f       	cpi	r25, 0xFF	; 255
    2642:	79 f0       	breq	.+30     	; 0x2662 <__fp_splitA+0x2a>
    2644:	87 95       	ror	r24
    2646:	08 95       	ret
    2648:	12 16       	cp	r1, r18
    264a:	13 06       	cpc	r1, r19
    264c:	14 06       	cpc	r1, r20
    264e:	55 1f       	adc	r21, r21
    2650:	f2 cf       	rjmp	.-28     	; 0x2636 <__fp_split3+0xe>
    2652:	46 95       	lsr	r20
    2654:	f1 df       	rcall	.-30     	; 0x2638 <__fp_splitA>
    2656:	08 c0       	rjmp	.+16     	; 0x2668 <__fp_splitA+0x30>
    2658:	16 16       	cp	r1, r22
    265a:	17 06       	cpc	r1, r23
    265c:	18 06       	cpc	r1, r24
    265e:	99 1f       	adc	r25, r25
    2660:	f1 cf       	rjmp	.-30     	; 0x2644 <__fp_splitA+0xc>
    2662:	86 95       	lsr	r24
    2664:	71 05       	cpc	r23, r1
    2666:	61 05       	cpc	r22, r1
    2668:	08 94       	sec
    266a:	08 95       	ret

0000266c <__fp_zero>:
    266c:	e8 94       	clt

0000266e <__fp_szero>:
    266e:	bb 27       	eor	r27, r27
    2670:	66 27       	eor	r22, r22
    2672:	77 27       	eor	r23, r23
    2674:	cb 01       	movw	r24, r22
    2676:	97 f9       	bld	r25, 7
    2678:	08 95       	ret

0000267a <__gesf2>:
    267a:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_cmp>
    267e:	08 f4       	brcc	.+2      	; 0x2682 <__gesf2+0x8>
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	08 95       	ret

00002684 <__mulsf3>:
    2684:	0e 94 55 13 	call	0x26aa	; 0x26aa <__mulsf3x>
    2688:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__fp_round>
    268c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__fp_pscA>
    2690:	38 f0       	brcs	.+14     	; 0x26a0 <__mulsf3+0x1c>
    2692:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__fp_pscB>
    2696:	20 f0       	brcs	.+8      	; 0x26a0 <__mulsf3+0x1c>
    2698:	95 23       	and	r25, r21
    269a:	11 f0       	breq	.+4      	; 0x26a0 <__mulsf3+0x1c>
    269c:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>
    26a0:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_nan>
    26a4:	11 24       	eor	r1, r1
    26a6:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_szero>

000026aa <__mulsf3x>:
    26aa:	0e 94 14 13 	call	0x2628	; 0x2628 <__fp_split3>
    26ae:	70 f3       	brcs	.-36     	; 0x268c <__mulsf3+0x8>

000026b0 <__mulsf3_pse>:
    26b0:	95 9f       	mul	r25, r21
    26b2:	c1 f3       	breq	.-16     	; 0x26a4 <__mulsf3+0x20>
    26b4:	95 0f       	add	r25, r21
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	55 1f       	adc	r21, r21
    26ba:	62 9f       	mul	r22, r18
    26bc:	f0 01       	movw	r30, r0
    26be:	72 9f       	mul	r23, r18
    26c0:	bb 27       	eor	r27, r27
    26c2:	f0 0d       	add	r31, r0
    26c4:	b1 1d       	adc	r27, r1
    26c6:	63 9f       	mul	r22, r19
    26c8:	aa 27       	eor	r26, r26
    26ca:	f0 0d       	add	r31, r0
    26cc:	b1 1d       	adc	r27, r1
    26ce:	aa 1f       	adc	r26, r26
    26d0:	64 9f       	mul	r22, r20
    26d2:	66 27       	eor	r22, r22
    26d4:	b0 0d       	add	r27, r0
    26d6:	a1 1d       	adc	r26, r1
    26d8:	66 1f       	adc	r22, r22
    26da:	82 9f       	mul	r24, r18
    26dc:	22 27       	eor	r18, r18
    26de:	b0 0d       	add	r27, r0
    26e0:	a1 1d       	adc	r26, r1
    26e2:	62 1f       	adc	r22, r18
    26e4:	73 9f       	mul	r23, r19
    26e6:	b0 0d       	add	r27, r0
    26e8:	a1 1d       	adc	r26, r1
    26ea:	62 1f       	adc	r22, r18
    26ec:	83 9f       	mul	r24, r19
    26ee:	a0 0d       	add	r26, r0
    26f0:	61 1d       	adc	r22, r1
    26f2:	22 1f       	adc	r18, r18
    26f4:	74 9f       	mul	r23, r20
    26f6:	33 27       	eor	r19, r19
    26f8:	a0 0d       	add	r26, r0
    26fa:	61 1d       	adc	r22, r1
    26fc:	23 1f       	adc	r18, r19
    26fe:	84 9f       	mul	r24, r20
    2700:	60 0d       	add	r22, r0
    2702:	21 1d       	adc	r18, r1
    2704:	82 2f       	mov	r24, r18
    2706:	76 2f       	mov	r23, r22
    2708:	6a 2f       	mov	r22, r26
    270a:	11 24       	eor	r1, r1
    270c:	9f 57       	subi	r25, 0x7F	; 127
    270e:	50 40       	sbci	r21, 0x00	; 0
    2710:	9a f0       	brmi	.+38     	; 0x2738 <__mulsf3_pse+0x88>
    2712:	f1 f0       	breq	.+60     	; 0x2750 <__mulsf3_pse+0xa0>
    2714:	88 23       	and	r24, r24
    2716:	4a f0       	brmi	.+18     	; 0x272a <__mulsf3_pse+0x7a>
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	bb 1f       	adc	r27, r27
    271e:	66 1f       	adc	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	88 1f       	adc	r24, r24
    2724:	91 50       	subi	r25, 0x01	; 1
    2726:	50 40       	sbci	r21, 0x00	; 0
    2728:	a9 f7       	brne	.-22     	; 0x2714 <__mulsf3_pse+0x64>
    272a:	9e 3f       	cpi	r25, 0xFE	; 254
    272c:	51 05       	cpc	r21, r1
    272e:	80 f0       	brcs	.+32     	; 0x2750 <__mulsf3_pse+0xa0>
    2730:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>
    2734:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_szero>
    2738:	5f 3f       	cpi	r21, 0xFF	; 255
    273a:	e4 f3       	brlt	.-8      	; 0x2734 <__mulsf3_pse+0x84>
    273c:	98 3e       	cpi	r25, 0xE8	; 232
    273e:	d4 f3       	brlt	.-12     	; 0x2734 <__mulsf3_pse+0x84>
    2740:	86 95       	lsr	r24
    2742:	77 95       	ror	r23
    2744:	67 95       	ror	r22
    2746:	b7 95       	ror	r27
    2748:	f7 95       	ror	r31
    274a:	e7 95       	ror	r30
    274c:	9f 5f       	subi	r25, 0xFF	; 255
    274e:	c1 f7       	brne	.-16     	; 0x2740 <__mulsf3_pse+0x90>
    2750:	fe 2b       	or	r31, r30
    2752:	88 0f       	add	r24, r24
    2754:	91 1d       	adc	r25, r1
    2756:	96 95       	lsr	r25
    2758:	87 95       	ror	r24
    275a:	97 f9       	bld	r25, 7
    275c:	08 95       	ret

0000275e <pow>:
    275e:	fa 01       	movw	r30, r20
    2760:	ee 0f       	add	r30, r30
    2762:	ff 1f       	adc	r31, r31
    2764:	30 96       	adiw	r30, 0x00	; 0
    2766:	21 05       	cpc	r18, r1
    2768:	31 05       	cpc	r19, r1
    276a:	a1 f1       	breq	.+104    	; 0x27d4 <pow+0x76>
    276c:	61 15       	cp	r22, r1
    276e:	71 05       	cpc	r23, r1
    2770:	61 f4       	brne	.+24     	; 0x278a <pow+0x2c>
    2772:	80 38       	cpi	r24, 0x80	; 128
    2774:	bf e3       	ldi	r27, 0x3F	; 63
    2776:	9b 07       	cpc	r25, r27
    2778:	49 f1       	breq	.+82     	; 0x27cc <pow+0x6e>
    277a:	68 94       	set
    277c:	90 38       	cpi	r25, 0x80	; 128
    277e:	81 05       	cpc	r24, r1
    2780:	61 f0       	breq	.+24     	; 0x279a <pow+0x3c>
    2782:	80 38       	cpi	r24, 0x80	; 128
    2784:	bf ef       	ldi	r27, 0xFF	; 255
    2786:	9b 07       	cpc	r25, r27
    2788:	41 f0       	breq	.+16     	; 0x279a <pow+0x3c>
    278a:	99 23       	and	r25, r25
    278c:	4a f5       	brpl	.+82     	; 0x27e0 <pow+0x82>
    278e:	ff 3f       	cpi	r31, 0xFF	; 255
    2790:	e1 05       	cpc	r30, r1
    2792:	31 05       	cpc	r19, r1
    2794:	21 05       	cpc	r18, r1
    2796:	19 f1       	breq	.+70     	; 0x27de <pow+0x80>
    2798:	e8 94       	clt
    279a:	08 94       	sec
    279c:	e7 95       	ror	r30
    279e:	d9 01       	movw	r26, r18
    27a0:	aa 23       	and	r26, r26
    27a2:	29 f4       	brne	.+10     	; 0x27ae <pow+0x50>
    27a4:	ab 2f       	mov	r26, r27
    27a6:	be 2f       	mov	r27, r30
    27a8:	f8 5f       	subi	r31, 0xF8	; 248
    27aa:	d0 f3       	brcs	.-12     	; 0x27a0 <pow+0x42>
    27ac:	10 c0       	rjmp	.+32     	; 0x27ce <pow+0x70>
    27ae:	ff 5f       	subi	r31, 0xFF	; 255
    27b0:	70 f4       	brcc	.+28     	; 0x27ce <pow+0x70>
    27b2:	a6 95       	lsr	r26
    27b4:	e0 f7       	brcc	.-8      	; 0x27ae <pow+0x50>
    27b6:	f7 39       	cpi	r31, 0x97	; 151
    27b8:	50 f0       	brcs	.+20     	; 0x27ce <pow+0x70>
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <pow+0x64>
    27bc:	ff 3a       	cpi	r31, 0xAF	; 175
    27be:	38 f4       	brcc	.+14     	; 0x27ce <pow+0x70>
    27c0:	9f 77       	andi	r25, 0x7F	; 127
    27c2:	9f 93       	push	r25
    27c4:	0d d0       	rcall	.+26     	; 0x27e0 <pow+0x82>
    27c6:	0f 90       	pop	r0
    27c8:	07 fc       	sbrc	r0, 7
    27ca:	90 58       	subi	r25, 0x80	; 128
    27cc:	08 95       	ret
    27ce:	46 f0       	brts	.+16     	; 0x27e0 <pow+0x82>
    27d0:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_nan>
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	80 e8       	ldi	r24, 0x80	; 128
    27da:	9f e3       	ldi	r25, 0x3F	; 63
    27dc:	08 95       	ret
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	9f 77       	andi	r25, 0x7F	; 127
    27e2:	5f 93       	push	r21
    27e4:	4f 93       	push	r20
    27e6:	3f 93       	push	r19
    27e8:	2f 93       	push	r18
    27ea:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <log>
    27ee:	2f 91       	pop	r18
    27f0:	3f 91       	pop	r19
    27f2:	4f 91       	pop	r20
    27f4:	5f 91       	pop	r21
    27f6:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    27fa:	0c 94 4d 14 	jmp	0x289a	; 0x289a <exp>
    27fe:	19 f4       	brne	.+6      	; 0x2806 <pow+0xa8>
    2800:	16 f4       	brtc	.+4      	; 0x2806 <pow+0xa8>
    2802:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_nan>
    2806:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__fp_mpack>

0000280a <sqrt>:
    280a:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_splitA>
    280e:	b8 f3       	brcs	.-18     	; 0x27fe <pow+0xa0>
    2810:	99 23       	and	r25, r25
    2812:	c9 f3       	breq	.-14     	; 0x2806 <pow+0xa8>
    2814:	b6 f3       	brts	.-20     	; 0x2802 <pow+0xa4>
    2816:	9f 57       	subi	r25, 0x7F	; 127
    2818:	55 0b       	sbc	r21, r21
    281a:	87 ff       	sbrs	r24, 7
    281c:	0e 94 8d 14 	call	0x291a	; 0x291a <__fp_norm2>
    2820:	00 24       	eor	r0, r0
    2822:	a0 e6       	ldi	r26, 0x60	; 96
    2824:	40 ea       	ldi	r20, 0xA0	; 160
    2826:	90 01       	movw	r18, r0
    2828:	80 58       	subi	r24, 0x80	; 128
    282a:	56 95       	lsr	r21
    282c:	97 95       	ror	r25
    282e:	28 f4       	brcc	.+10     	; 0x283a <sqrt+0x30>
    2830:	80 5c       	subi	r24, 0xC0	; 192
    2832:	66 0f       	add	r22, r22
    2834:	77 1f       	adc	r23, r23
    2836:	88 1f       	adc	r24, r24
    2838:	20 f0       	brcs	.+8      	; 0x2842 <sqrt+0x38>
    283a:	26 17       	cp	r18, r22
    283c:	37 07       	cpc	r19, r23
    283e:	48 07       	cpc	r20, r24
    2840:	30 f4       	brcc	.+12     	; 0x284e <sqrt+0x44>
    2842:	62 1b       	sub	r22, r18
    2844:	73 0b       	sbc	r23, r19
    2846:	84 0b       	sbc	r24, r20
    2848:	20 29       	or	r18, r0
    284a:	31 29       	or	r19, r1
    284c:	4a 2b       	or	r20, r26
    284e:	a6 95       	lsr	r26
    2850:	17 94       	ror	r1
    2852:	07 94       	ror	r0
    2854:	20 25       	eor	r18, r0
    2856:	31 25       	eor	r19, r1
    2858:	4a 27       	eor	r20, r26
    285a:	58 f7       	brcc	.-42     	; 0x2832 <sqrt+0x28>
    285c:	66 0f       	add	r22, r22
    285e:	77 1f       	adc	r23, r23
    2860:	88 1f       	adc	r24, r24
    2862:	20 f0       	brcs	.+8      	; 0x286c <sqrt+0x62>
    2864:	26 17       	cp	r18, r22
    2866:	37 07       	cpc	r19, r23
    2868:	48 07       	cpc	r20, r24
    286a:	30 f4       	brcc	.+12     	; 0x2878 <sqrt+0x6e>
    286c:	62 0b       	sbc	r22, r18
    286e:	73 0b       	sbc	r23, r19
    2870:	84 0b       	sbc	r24, r20
    2872:	20 0d       	add	r18, r0
    2874:	31 1d       	adc	r19, r1
    2876:	41 1d       	adc	r20, r1
    2878:	a0 95       	com	r26
    287a:	81 f7       	brne	.-32     	; 0x285c <sqrt+0x52>
    287c:	b9 01       	movw	r22, r18
    287e:	84 2f       	mov	r24, r20
    2880:	91 58       	subi	r25, 0x81	; 129
    2882:	88 0f       	add	r24, r24
    2884:	96 95       	lsr	r25
    2886:	87 95       	ror	r24
    2888:	08 95       	ret
    288a:	29 f4       	brne	.+10     	; 0x2896 <sqrt+0x8c>
    288c:	16 f0       	brts	.+4      	; 0x2892 <sqrt+0x88>
    288e:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>
    2892:	0c 94 36 13 	jmp	0x266c	; 0x266c <__fp_zero>
    2896:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_nan>

0000289a <exp>:
    289a:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_splitA>
    289e:	a8 f3       	brcs	.-22     	; 0x288a <sqrt+0x80>
    28a0:	96 38       	cpi	r25, 0x86	; 134
    28a2:	a0 f7       	brcc	.-24     	; 0x288c <sqrt+0x82>
    28a4:	07 f8       	bld	r0, 7
    28a6:	0f 92       	push	r0
    28a8:	e8 94       	clt
    28aa:	2b e3       	ldi	r18, 0x3B	; 59
    28ac:	3a ea       	ldi	r19, 0xAA	; 170
    28ae:	48 eb       	ldi	r20, 0xB8	; 184
    28b0:	5f e7       	ldi	r21, 0x7F	; 127
    28b2:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__mulsf3_pse>
    28b6:	0f 92       	push	r0
    28b8:	0f 92       	push	r0
    28ba:	0f 92       	push	r0
    28bc:	4d b7       	in	r20, 0x3d	; 61
    28be:	5e b7       	in	r21, 0x3e	; 62
    28c0:	0f 92       	push	r0
    28c2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <modf>
    28c6:	ec e1       	ldi	r30, 0x1C	; 28
    28c8:	f2 e0       	ldi	r31, 0x02	; 2
    28ca:	0e 94 94 14 	call	0x2928	; 0x2928 <__fp_powser>
    28ce:	4f 91       	pop	r20
    28d0:	5f 91       	pop	r21
    28d2:	ef 91       	pop	r30
    28d4:	ff 91       	pop	r31
    28d6:	e5 95       	asr	r30
    28d8:	ee 1f       	adc	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	49 f0       	breq	.+18     	; 0x28f0 <exp+0x56>
    28de:	fe 57       	subi	r31, 0x7E	; 126
    28e0:	e0 68       	ori	r30, 0x80	; 128
    28e2:	44 27       	eor	r20, r20
    28e4:	ee 0f       	add	r30, r30
    28e6:	44 1f       	adc	r20, r20
    28e8:	fa 95       	dec	r31
    28ea:	e1 f7       	brne	.-8      	; 0x28e4 <exp+0x4a>
    28ec:	41 95       	neg	r20
    28ee:	55 0b       	sbc	r21, r21
    28f0:	0e 94 c7 14 	call	0x298e	; 0x298e <ldexp>
    28f4:	0f 90       	pop	r0
    28f6:	07 fe       	sbrs	r0, 7
    28f8:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <inverse>
    28fc:	08 95       	ret

000028fe <__fp_mpack>:
    28fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2900:	31 f0       	breq	.+12     	; 0x290e <__fp_mpack_finite+0xc>

00002902 <__fp_mpack_finite>:
    2902:	91 50       	subi	r25, 0x01	; 1
    2904:	20 f4       	brcc	.+8      	; 0x290e <__fp_mpack_finite+0xc>
    2906:	87 95       	ror	r24
    2908:	77 95       	ror	r23
    290a:	67 95       	ror	r22
    290c:	b7 95       	ror	r27
    290e:	88 0f       	add	r24, r24
    2910:	91 1d       	adc	r25, r1
    2912:	96 95       	lsr	r25
    2914:	87 95       	ror	r24
    2916:	97 f9       	bld	r25, 7
    2918:	08 95       	ret

0000291a <__fp_norm2>:
    291a:	91 50       	subi	r25, 0x01	; 1
    291c:	50 40       	sbci	r21, 0x00	; 0
    291e:	66 0f       	add	r22, r22
    2920:	77 1f       	adc	r23, r23
    2922:	88 1f       	adc	r24, r24
    2924:	d2 f7       	brpl	.-12     	; 0x291a <__fp_norm2>
    2926:	08 95       	ret

00002928 <__fp_powser>:
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	1f 93       	push	r17
    292e:	0f 93       	push	r16
    2930:	ff 92       	push	r15
    2932:	ef 92       	push	r14
    2934:	df 92       	push	r13
    2936:	7b 01       	movw	r14, r22
    2938:	8c 01       	movw	r16, r24
    293a:	68 94       	set
    293c:	06 c0       	rjmp	.+12     	; 0x294a <__fp_powser+0x22>
    293e:	da 2e       	mov	r13, r26
    2940:	ef 01       	movw	r28, r30
    2942:	0e 94 55 13 	call	0x26aa	; 0x26aa <__mulsf3x>
    2946:	fe 01       	movw	r30, r28
    2948:	e8 94       	clt
    294a:	a5 91       	lpm	r26, Z+
    294c:	25 91       	lpm	r18, Z+
    294e:	35 91       	lpm	r19, Z+
    2950:	45 91       	lpm	r20, Z+
    2952:	55 91       	lpm	r21, Z+
    2954:	a6 f3       	brts	.-24     	; 0x293e <__fp_powser+0x16>
    2956:	ef 01       	movw	r28, r30
    2958:	0e 94 89 11 	call	0x2312	; 0x2312 <__addsf3x>
    295c:	fe 01       	movw	r30, r28
    295e:	97 01       	movw	r18, r14
    2960:	a8 01       	movw	r20, r16
    2962:	da 94       	dec	r13
    2964:	69 f7       	brne	.-38     	; 0x2940 <__fp_powser+0x18>
    2966:	df 90       	pop	r13
    2968:	ef 90       	pop	r14
    296a:	ff 90       	pop	r15
    296c:	0f 91       	pop	r16
    296e:	1f 91       	pop	r17
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <inverse>:
    2976:	9b 01       	movw	r18, r22
    2978:	ac 01       	movw	r20, r24
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	80 e8       	ldi	r24, 0x80	; 128
    2980:	9f e3       	ldi	r25, 0x3F	; 63
    2982:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__divsf3>
    2986:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>
    298a:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__fp_mpack>

0000298e <ldexp>:
    298e:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_splitA>
    2992:	d8 f3       	brcs	.-10     	; 0x298a <inverse+0x14>
    2994:	99 23       	and	r25, r25
    2996:	c9 f3       	breq	.-14     	; 0x298a <inverse+0x14>
    2998:	94 0f       	add	r25, r20
    299a:	51 1d       	adc	r21, r1
    299c:	a3 f3       	brvs	.-24     	; 0x2986 <inverse+0x10>
    299e:	91 50       	subi	r25, 0x01	; 1
    29a0:	50 40       	sbci	r21, 0x00	; 0
    29a2:	94 f0       	brlt	.+36     	; 0x29c8 <ldexp+0x3a>
    29a4:	59 f0       	breq	.+22     	; 0x29bc <ldexp+0x2e>
    29a6:	88 23       	and	r24, r24
    29a8:	32 f0       	brmi	.+12     	; 0x29b6 <ldexp+0x28>
    29aa:	66 0f       	add	r22, r22
    29ac:	77 1f       	adc	r23, r23
    29ae:	88 1f       	adc	r24, r24
    29b0:	91 50       	subi	r25, 0x01	; 1
    29b2:	50 40       	sbci	r21, 0x00	; 0
    29b4:	c1 f7       	brne	.-16     	; 0x29a6 <ldexp+0x18>
    29b6:	9e 3f       	cpi	r25, 0xFE	; 254
    29b8:	51 05       	cpc	r21, r1
    29ba:	2c f7       	brge	.-54     	; 0x2986 <inverse+0x10>
    29bc:	88 0f       	add	r24, r24
    29be:	91 1d       	adc	r25, r1
    29c0:	96 95       	lsr	r25
    29c2:	87 95       	ror	r24
    29c4:	97 f9       	bld	r25, 7
    29c6:	08 95       	ret
    29c8:	5f 3f       	cpi	r21, 0xFF	; 255
    29ca:	ac f0       	brlt	.+42     	; 0x29f6 <ldexp+0x68>
    29cc:	98 3e       	cpi	r25, 0xE8	; 232
    29ce:	9c f0       	brlt	.+38     	; 0x29f6 <ldexp+0x68>
    29d0:	bb 27       	eor	r27, r27
    29d2:	86 95       	lsr	r24
    29d4:	77 95       	ror	r23
    29d6:	67 95       	ror	r22
    29d8:	b7 95       	ror	r27
    29da:	08 f4       	brcc	.+2      	; 0x29de <ldexp+0x50>
    29dc:	b1 60       	ori	r27, 0x01	; 1
    29de:	93 95       	inc	r25
    29e0:	c1 f7       	brne	.-16     	; 0x29d2 <ldexp+0x44>
    29e2:	bb 0f       	add	r27, r27
    29e4:	58 f7       	brcc	.-42     	; 0x29bc <ldexp+0x2e>
    29e6:	11 f4       	brne	.+4      	; 0x29ec <ldexp+0x5e>
    29e8:	60 ff       	sbrs	r22, 0
    29ea:	e8 cf       	rjmp	.-48     	; 0x29bc <ldexp+0x2e>
    29ec:	6f 5f       	subi	r22, 0xFF	; 255
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	8f 4f       	sbci	r24, 0xFF	; 255
    29f2:	9f 4f       	sbci	r25, 0xFF	; 255
    29f4:	e3 cf       	rjmp	.-58     	; 0x29bc <ldexp+0x2e>
    29f6:	0c 94 37 13 	jmp	0x266e	; 0x266e <__fp_szero>
    29fa:	16 f0       	brts	.+4      	; 0x2a00 <ldexp+0x72>
    29fc:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__fp_mpack>
    2a00:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__fp_nan>
    2a04:	68 94       	set
    2a06:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__fp_inf>

00002a0a <log>:
    2a0a:	0e 94 1c 13 	call	0x2638	; 0x2638 <__fp_splitA>
    2a0e:	a8 f3       	brcs	.-22     	; 0x29fa <ldexp+0x6c>
    2a10:	99 23       	and	r25, r25
    2a12:	c1 f3       	breq	.-16     	; 0x2a04 <ldexp+0x76>
    2a14:	ae f3       	brts	.-22     	; 0x2a00 <ldexp+0x72>
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	1f 93       	push	r17
    2a1c:	0f 93       	push	r16
    2a1e:	ff 92       	push	r15
    2a20:	c9 2f       	mov	r28, r25
    2a22:	dd 27       	eor	r29, r29
    2a24:	88 23       	and	r24, r24
    2a26:	2a f0       	brmi	.+10     	; 0x2a32 <log+0x28>
    2a28:	21 97       	sbiw	r28, 0x01	; 1
    2a2a:	66 0f       	add	r22, r22
    2a2c:	77 1f       	adc	r23, r23
    2a2e:	88 1f       	adc	r24, r24
    2a30:	da f7       	brpl	.-10     	; 0x2a28 <log+0x1e>
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f eb       	ldi	r21, 0xBF	; 191
    2a3a:	9f e3       	ldi	r25, 0x3F	; 63
    2a3c:	88 39       	cpi	r24, 0x98	; 152
    2a3e:	20 f0       	brcs	.+8      	; 0x2a48 <log+0x3e>
    2a40:	80 3e       	cpi	r24, 0xE0	; 224
    2a42:	38 f0       	brcs	.+14     	; 0x2a52 <log+0x48>
    2a44:	21 96       	adiw	r28, 0x01	; 1
    2a46:	8f 77       	andi	r24, 0x7F	; 127
    2a48:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    2a4c:	e4 e4       	ldi	r30, 0x44	; 68
    2a4e:	f2 e0       	ldi	r31, 0x02	; 2
    2a50:	04 c0       	rjmp	.+8      	; 0x2a5a <log+0x50>
    2a52:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__addsf3>
    2a56:	e1 e7       	ldi	r30, 0x71	; 113
    2a58:	f2 e0       	ldi	r31, 0x02	; 2
    2a5a:	0e 94 94 14 	call	0x2928	; 0x2928 <__fp_powser>
    2a5e:	8b 01       	movw	r16, r22
    2a60:	be 01       	movw	r22, r28
    2a62:	ec 01       	movw	r28, r24
    2a64:	fb 2e       	mov	r15, r27
    2a66:	6f 57       	subi	r22, 0x7F	; 127
    2a68:	71 09       	sbc	r23, r1
    2a6a:	75 95       	asr	r23
    2a6c:	77 1f       	adc	r23, r23
    2a6e:	88 0b       	sbc	r24, r24
    2a70:	99 0b       	sbc	r25, r25
    2a72:	0e 94 8d 12 	call	0x251a	; 0x251a <__floatsisf>
    2a76:	28 e1       	ldi	r18, 0x18	; 24
    2a78:	32 e7       	ldi	r19, 0x72	; 114
    2a7a:	41 e3       	ldi	r20, 0x31	; 49
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 55 13 	call	0x26aa	; 0x26aa <__mulsf3x>
    2a82:	af 2d       	mov	r26, r15
    2a84:	98 01       	movw	r18, r16
    2a86:	ae 01       	movw	r20, r28
    2a88:	ff 90       	pop	r15
    2a8a:	0f 91       	pop	r16
    2a8c:	1f 91       	pop	r17
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	0e 94 89 11 	call	0x2312	; 0x2312 <__addsf3x>
    2a96:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__fp_round>

00002a9a <modf>:
    2a9a:	fa 01       	movw	r30, r20
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	aa 0f       	add	r26, r26
    2aa0:	bb 1f       	adc	r27, r27
    2aa2:	9b 01       	movw	r18, r22
    2aa4:	ac 01       	movw	r20, r24
    2aa6:	bf 57       	subi	r27, 0x7F	; 127
    2aa8:	28 f4       	brcc	.+10     	; 0x2ab4 <modf+0x1a>
    2aaa:	22 27       	eor	r18, r18
    2aac:	33 27       	eor	r19, r19
    2aae:	44 27       	eor	r20, r20
    2ab0:	50 78       	andi	r21, 0x80	; 128
    2ab2:	20 c0       	rjmp	.+64     	; 0x2af4 <modf+0x5a>
    2ab4:	b7 51       	subi	r27, 0x17	; 23
    2ab6:	90 f4       	brcc	.+36     	; 0x2adc <modf+0x42>
    2ab8:	ab 2f       	mov	r26, r27
    2aba:	00 24       	eor	r0, r0
    2abc:	46 95       	lsr	r20
    2abe:	37 95       	ror	r19
    2ac0:	27 95       	ror	r18
    2ac2:	01 1c       	adc	r0, r1
    2ac4:	a3 95       	inc	r26
    2ac6:	d2 f3       	brmi	.-12     	; 0x2abc <modf+0x22>
    2ac8:	00 20       	and	r0, r0
    2aca:	71 f0       	breq	.+28     	; 0x2ae8 <modf+0x4e>
    2acc:	22 0f       	add	r18, r18
    2ace:	33 1f       	adc	r19, r19
    2ad0:	44 1f       	adc	r20, r20
    2ad2:	b3 95       	inc	r27
    2ad4:	da f3       	brmi	.-10     	; 0x2acc <modf+0x32>
    2ad6:	0e d0       	rcall	.+28     	; 0x2af4 <modf+0x5a>
    2ad8:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__subsf3>
    2adc:	61 30       	cpi	r22, 0x01	; 1
    2ade:	71 05       	cpc	r23, r1
    2ae0:	a0 e8       	ldi	r26, 0x80	; 128
    2ae2:	8a 07       	cpc	r24, r26
    2ae4:	b9 46       	sbci	r27, 0x69	; 105
    2ae6:	30 f4       	brcc	.+12     	; 0x2af4 <modf+0x5a>
    2ae8:	9b 01       	movw	r18, r22
    2aea:	ac 01       	movw	r20, r24
    2aec:	66 27       	eor	r22, r22
    2aee:	77 27       	eor	r23, r23
    2af0:	88 27       	eor	r24, r24
    2af2:	90 78       	andi	r25, 0x80	; 128
    2af4:	30 96       	adiw	r30, 0x00	; 0
    2af6:	21 f0       	breq	.+8      	; 0x2b00 <modf+0x66>
    2af8:	20 83       	st	Z, r18
    2afa:	31 83       	std	Z+1, r19	; 0x01
    2afc:	42 83       	std	Z+2, r20	; 0x02
    2afe:	53 83       	std	Z+3, r21	; 0x03
    2b00:	08 95       	ret

00002b02 <vfprintf>:
    2b02:	2f 92       	push	r2
    2b04:	3f 92       	push	r3
    2b06:	4f 92       	push	r4
    2b08:	5f 92       	push	r5
    2b0a:	6f 92       	push	r6
    2b0c:	7f 92       	push	r7
    2b0e:	8f 92       	push	r8
    2b10:	9f 92       	push	r9
    2b12:	af 92       	push	r10
    2b14:	bf 92       	push	r11
    2b16:	cf 92       	push	r12
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	ff 92       	push	r15
    2b1e:	0f 93       	push	r16
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	60 97       	sbiw	r28, 0x10	; 16
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	7c 01       	movw	r14, r24
    2b32:	1b 01       	movw	r2, r22
    2b34:	6a 01       	movw	r12, r20
    2b36:	fc 01       	movw	r30, r24
    2b38:	16 82       	std	Z+6, r1	; 0x06
    2b3a:	17 82       	std	Z+7, r1	; 0x07
    2b3c:	83 81       	ldd	r24, Z+3	; 0x03
    2b3e:	81 ff       	sbrs	r24, 1
    2b40:	44 c3       	rjmp	.+1672   	; 0x31ca <vfprintf+0x6c8>
    2b42:	9e 01       	movw	r18, r28
    2b44:	2f 5f       	subi	r18, 0xFF	; 255
    2b46:	3f 4f       	sbci	r19, 0xFF	; 255
    2b48:	39 01       	movw	r6, r18
    2b4a:	f7 01       	movw	r30, r14
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	f1 01       	movw	r30, r2
    2b50:	93 fd       	sbrc	r25, 3
    2b52:	85 91       	lpm	r24, Z+
    2b54:	93 ff       	sbrs	r25, 3
    2b56:	81 91       	ld	r24, Z+
    2b58:	1f 01       	movw	r2, r30
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <vfprintf+0x5e>
    2b5e:	31 c3       	rjmp	.+1634   	; 0x31c2 <vfprintf+0x6c0>
    2b60:	85 32       	cpi	r24, 0x25	; 37
    2b62:	39 f4       	brne	.+14     	; 0x2b72 <vfprintf+0x70>
    2b64:	93 fd       	sbrc	r25, 3
    2b66:	85 91       	lpm	r24, Z+
    2b68:	93 ff       	sbrs	r25, 3
    2b6a:	81 91       	ld	r24, Z+
    2b6c:	1f 01       	movw	r2, r30
    2b6e:	85 32       	cpi	r24, 0x25	; 37
    2b70:	39 f4       	brne	.+14     	; 0x2b80 <vfprintf+0x7e>
    2b72:	b7 01       	movw	r22, r14
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2b7a:	56 01       	movw	r10, r12
    2b7c:	65 01       	movw	r12, r10
    2b7e:	e5 cf       	rjmp	.-54     	; 0x2b4a <vfprintf+0x48>
    2b80:	10 e0       	ldi	r17, 0x00	; 0
    2b82:	51 2c       	mov	r5, r1
    2b84:	91 2c       	mov	r9, r1
    2b86:	ff e1       	ldi	r31, 0x1F	; 31
    2b88:	f9 15       	cp	r31, r9
    2b8a:	d8 f0       	brcs	.+54     	; 0x2bc2 <vfprintf+0xc0>
    2b8c:	8b 32       	cpi	r24, 0x2B	; 43
    2b8e:	79 f0       	breq	.+30     	; 0x2bae <vfprintf+0xac>
    2b90:	38 f4       	brcc	.+14     	; 0x2ba0 <vfprintf+0x9e>
    2b92:	80 32       	cpi	r24, 0x20	; 32
    2b94:	79 f0       	breq	.+30     	; 0x2bb4 <vfprintf+0xb2>
    2b96:	83 32       	cpi	r24, 0x23	; 35
    2b98:	a1 f4       	brne	.+40     	; 0x2bc2 <vfprintf+0xc0>
    2b9a:	f9 2d       	mov	r31, r9
    2b9c:	f0 61       	ori	r31, 0x10	; 16
    2b9e:	2e c0       	rjmp	.+92     	; 0x2bfc <vfprintf+0xfa>
    2ba0:	8d 32       	cpi	r24, 0x2D	; 45
    2ba2:	61 f0       	breq	.+24     	; 0x2bbc <vfprintf+0xba>
    2ba4:	80 33       	cpi	r24, 0x30	; 48
    2ba6:	69 f4       	brne	.+26     	; 0x2bc2 <vfprintf+0xc0>
    2ba8:	29 2d       	mov	r18, r9
    2baa:	21 60       	ori	r18, 0x01	; 1
    2bac:	2d c0       	rjmp	.+90     	; 0x2c08 <vfprintf+0x106>
    2bae:	39 2d       	mov	r19, r9
    2bb0:	32 60       	ori	r19, 0x02	; 2
    2bb2:	93 2e       	mov	r9, r19
    2bb4:	89 2d       	mov	r24, r9
    2bb6:	84 60       	ori	r24, 0x04	; 4
    2bb8:	98 2e       	mov	r9, r24
    2bba:	2a c0       	rjmp	.+84     	; 0x2c10 <vfprintf+0x10e>
    2bbc:	e9 2d       	mov	r30, r9
    2bbe:	e8 60       	ori	r30, 0x08	; 8
    2bc0:	15 c0       	rjmp	.+42     	; 0x2bec <vfprintf+0xea>
    2bc2:	97 fc       	sbrc	r9, 7
    2bc4:	2d c0       	rjmp	.+90     	; 0x2c20 <vfprintf+0x11e>
    2bc6:	20 ed       	ldi	r18, 0xD0	; 208
    2bc8:	28 0f       	add	r18, r24
    2bca:	2a 30       	cpi	r18, 0x0A	; 10
    2bcc:	88 f4       	brcc	.+34     	; 0x2bf0 <vfprintf+0xee>
    2bce:	96 fe       	sbrs	r9, 6
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <vfprintf+0xdc>
    2bd2:	3a e0       	ldi	r19, 0x0A	; 10
    2bd4:	13 9f       	mul	r17, r19
    2bd6:	20 0d       	add	r18, r0
    2bd8:	11 24       	eor	r1, r1
    2bda:	12 2f       	mov	r17, r18
    2bdc:	19 c0       	rjmp	.+50     	; 0x2c10 <vfprintf+0x10e>
    2bde:	8a e0       	ldi	r24, 0x0A	; 10
    2be0:	58 9e       	mul	r5, r24
    2be2:	20 0d       	add	r18, r0
    2be4:	11 24       	eor	r1, r1
    2be6:	52 2e       	mov	r5, r18
    2be8:	e9 2d       	mov	r30, r9
    2bea:	e0 62       	ori	r30, 0x20	; 32
    2bec:	9e 2e       	mov	r9, r30
    2bee:	10 c0       	rjmp	.+32     	; 0x2c10 <vfprintf+0x10e>
    2bf0:	8e 32       	cpi	r24, 0x2E	; 46
    2bf2:	31 f4       	brne	.+12     	; 0x2c00 <vfprintf+0xfe>
    2bf4:	96 fc       	sbrc	r9, 6
    2bf6:	e5 c2       	rjmp	.+1482   	; 0x31c2 <vfprintf+0x6c0>
    2bf8:	f9 2d       	mov	r31, r9
    2bfa:	f0 64       	ori	r31, 0x40	; 64
    2bfc:	9f 2e       	mov	r9, r31
    2bfe:	08 c0       	rjmp	.+16     	; 0x2c10 <vfprintf+0x10e>
    2c00:	8c 36       	cpi	r24, 0x6C	; 108
    2c02:	21 f4       	brne	.+8      	; 0x2c0c <vfprintf+0x10a>
    2c04:	29 2d       	mov	r18, r9
    2c06:	20 68       	ori	r18, 0x80	; 128
    2c08:	92 2e       	mov	r9, r18
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <vfprintf+0x10e>
    2c0c:	88 36       	cpi	r24, 0x68	; 104
    2c0e:	41 f4       	brne	.+16     	; 0x2c20 <vfprintf+0x11e>
    2c10:	f1 01       	movw	r30, r2
    2c12:	93 fd       	sbrc	r25, 3
    2c14:	85 91       	lpm	r24, Z+
    2c16:	93 ff       	sbrs	r25, 3
    2c18:	81 91       	ld	r24, Z+
    2c1a:	1f 01       	movw	r2, r30
    2c1c:	81 11       	cpse	r24, r1
    2c1e:	b3 cf       	rjmp	.-154    	; 0x2b86 <vfprintf+0x84>
    2c20:	9b eb       	ldi	r25, 0xBB	; 187
    2c22:	98 0f       	add	r25, r24
    2c24:	93 30       	cpi	r25, 0x03	; 3
    2c26:	20 f4       	brcc	.+8      	; 0x2c30 <vfprintf+0x12e>
    2c28:	99 2d       	mov	r25, r9
    2c2a:	90 61       	ori	r25, 0x10	; 16
    2c2c:	80 5e       	subi	r24, 0xE0	; 224
    2c2e:	07 c0       	rjmp	.+14     	; 0x2c3e <vfprintf+0x13c>
    2c30:	9b e9       	ldi	r25, 0x9B	; 155
    2c32:	98 0f       	add	r25, r24
    2c34:	93 30       	cpi	r25, 0x03	; 3
    2c36:	08 f0       	brcs	.+2      	; 0x2c3a <vfprintf+0x138>
    2c38:	66 c1       	rjmp	.+716    	; 0x2f06 <vfprintf+0x404>
    2c3a:	99 2d       	mov	r25, r9
    2c3c:	9f 7e       	andi	r25, 0xEF	; 239
    2c3e:	96 ff       	sbrs	r25, 6
    2c40:	16 e0       	ldi	r17, 0x06	; 6
    2c42:	9f 73       	andi	r25, 0x3F	; 63
    2c44:	99 2e       	mov	r9, r25
    2c46:	85 36       	cpi	r24, 0x65	; 101
    2c48:	19 f4       	brne	.+6      	; 0x2c50 <vfprintf+0x14e>
    2c4a:	90 64       	ori	r25, 0x40	; 64
    2c4c:	99 2e       	mov	r9, r25
    2c4e:	08 c0       	rjmp	.+16     	; 0x2c60 <vfprintf+0x15e>
    2c50:	86 36       	cpi	r24, 0x66	; 102
    2c52:	21 f4       	brne	.+8      	; 0x2c5c <vfprintf+0x15a>
    2c54:	39 2f       	mov	r19, r25
    2c56:	30 68       	ori	r19, 0x80	; 128
    2c58:	93 2e       	mov	r9, r19
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <vfprintf+0x15e>
    2c5c:	11 11       	cpse	r17, r1
    2c5e:	11 50       	subi	r17, 0x01	; 1
    2c60:	97 fe       	sbrs	r9, 7
    2c62:	07 c0       	rjmp	.+14     	; 0x2c72 <vfprintf+0x170>
    2c64:	1c 33       	cpi	r17, 0x3C	; 60
    2c66:	50 f4       	brcc	.+20     	; 0x2c7c <vfprintf+0x17a>
    2c68:	44 24       	eor	r4, r4
    2c6a:	43 94       	inc	r4
    2c6c:	41 0e       	add	r4, r17
    2c6e:	27 e0       	ldi	r18, 0x07	; 7
    2c70:	0b c0       	rjmp	.+22     	; 0x2c88 <vfprintf+0x186>
    2c72:	18 30       	cpi	r17, 0x08	; 8
    2c74:	38 f0       	brcs	.+14     	; 0x2c84 <vfprintf+0x182>
    2c76:	27 e0       	ldi	r18, 0x07	; 7
    2c78:	17 e0       	ldi	r17, 0x07	; 7
    2c7a:	05 c0       	rjmp	.+10     	; 0x2c86 <vfprintf+0x184>
    2c7c:	27 e0       	ldi	r18, 0x07	; 7
    2c7e:	9c e3       	ldi	r25, 0x3C	; 60
    2c80:	49 2e       	mov	r4, r25
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <vfprintf+0x186>
    2c84:	21 2f       	mov	r18, r17
    2c86:	41 2c       	mov	r4, r1
    2c88:	56 01       	movw	r10, r12
    2c8a:	84 e0       	ldi	r24, 0x04	; 4
    2c8c:	a8 0e       	add	r10, r24
    2c8e:	b1 1c       	adc	r11, r1
    2c90:	f6 01       	movw	r30, r12
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	04 2d       	mov	r16, r4
    2c9c:	a3 01       	movw	r20, r6
    2c9e:	0e 94 86 1a 	call	0x350c	; 0x350c <__ftoa_engine>
    2ca2:	6c 01       	movw	r12, r24
    2ca4:	f9 81       	ldd	r31, Y+1	; 0x01
    2ca6:	fc 87       	std	Y+12, r31	; 0x0c
    2ca8:	f0 ff       	sbrs	r31, 0
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <vfprintf+0x1ae>
    2cac:	f3 ff       	sbrs	r31, 3
    2cae:	06 c0       	rjmp	.+12     	; 0x2cbc <vfprintf+0x1ba>
    2cb0:	91 fc       	sbrc	r9, 1
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <vfprintf+0x1be>
    2cb4:	92 fe       	sbrs	r9, 2
    2cb6:	06 c0       	rjmp	.+12     	; 0x2cc4 <vfprintf+0x1c2>
    2cb8:	00 e2       	ldi	r16, 0x20	; 32
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <vfprintf+0x1c4>
    2cbc:	0d e2       	ldi	r16, 0x2D	; 45
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <vfprintf+0x1c4>
    2cc0:	0b e2       	ldi	r16, 0x2B	; 43
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <vfprintf+0x1c4>
    2cc4:	00 e0       	ldi	r16, 0x00	; 0
    2cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc8:	8c 70       	andi	r24, 0x0C	; 12
    2cca:	19 f0       	breq	.+6      	; 0x2cd2 <vfprintf+0x1d0>
    2ccc:	01 11       	cpse	r16, r1
    2cce:	5a c2       	rjmp	.+1204   	; 0x3184 <vfprintf+0x682>
    2cd0:	9b c2       	rjmp	.+1334   	; 0x3208 <vfprintf+0x706>
    2cd2:	97 fe       	sbrs	r9, 7
    2cd4:	10 c0       	rjmp	.+32     	; 0x2cf6 <vfprintf+0x1f4>
    2cd6:	4c 0c       	add	r4, r12
    2cd8:	fc 85       	ldd	r31, Y+12	; 0x0c
    2cda:	f4 ff       	sbrs	r31, 4
    2cdc:	04 c0       	rjmp	.+8      	; 0x2ce6 <vfprintf+0x1e4>
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	81 33       	cpi	r24, 0x31	; 49
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <vfprintf+0x1e4>
    2ce4:	4a 94       	dec	r4
    2ce6:	14 14       	cp	r1, r4
    2ce8:	74 f5       	brge	.+92     	; 0x2d46 <vfprintf+0x244>
    2cea:	28 e0       	ldi	r18, 0x08	; 8
    2cec:	24 15       	cp	r18, r4
    2cee:	78 f5       	brcc	.+94     	; 0x2d4e <vfprintf+0x24c>
    2cf0:	88 e0       	ldi	r24, 0x08	; 8
    2cf2:	48 2e       	mov	r4, r24
    2cf4:	2c c0       	rjmp	.+88     	; 0x2d4e <vfprintf+0x24c>
    2cf6:	96 fc       	sbrc	r9, 6
    2cf8:	2a c0       	rjmp	.+84     	; 0x2d4e <vfprintf+0x24c>
    2cfa:	81 2f       	mov	r24, r17
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	8c 15       	cp	r24, r12
    2d00:	9d 05       	cpc	r25, r13
    2d02:	9c f0       	brlt	.+38     	; 0x2d2a <vfprintf+0x228>
    2d04:	3c ef       	ldi	r19, 0xFC	; 252
    2d06:	c3 16       	cp	r12, r19
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	d3 06       	cpc	r13, r19
    2d0c:	74 f0       	brlt	.+28     	; 0x2d2a <vfprintf+0x228>
    2d0e:	89 2d       	mov	r24, r9
    2d10:	80 68       	ori	r24, 0x80	; 128
    2d12:	98 2e       	mov	r9, r24
    2d14:	0a c0       	rjmp	.+20     	; 0x2d2a <vfprintf+0x228>
    2d16:	e2 e0       	ldi	r30, 0x02	; 2
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	ec 0f       	add	r30, r28
    2d1c:	fd 1f       	adc	r31, r29
    2d1e:	e1 0f       	add	r30, r17
    2d20:	f1 1d       	adc	r31, r1
    2d22:	80 81       	ld	r24, Z
    2d24:	80 33       	cpi	r24, 0x30	; 48
    2d26:	19 f4       	brne	.+6      	; 0x2d2e <vfprintf+0x22c>
    2d28:	11 50       	subi	r17, 0x01	; 1
    2d2a:	11 11       	cpse	r17, r1
    2d2c:	f4 cf       	rjmp	.-24     	; 0x2d16 <vfprintf+0x214>
    2d2e:	97 fe       	sbrs	r9, 7
    2d30:	0e c0       	rjmp	.+28     	; 0x2d4e <vfprintf+0x24c>
    2d32:	44 24       	eor	r4, r4
    2d34:	43 94       	inc	r4
    2d36:	41 0e       	add	r4, r17
    2d38:	81 2f       	mov	r24, r17
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	c8 16       	cp	r12, r24
    2d3e:	d9 06       	cpc	r13, r25
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <vfprintf+0x24a>
    2d42:	1c 19       	sub	r17, r12
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <vfprintf+0x24c>
    2d46:	44 24       	eor	r4, r4
    2d48:	43 94       	inc	r4
    2d4a:	01 c0       	rjmp	.+2      	; 0x2d4e <vfprintf+0x24c>
    2d4c:	10 e0       	ldi	r17, 0x00	; 0
    2d4e:	97 fe       	sbrs	r9, 7
    2d50:	06 c0       	rjmp	.+12     	; 0x2d5e <vfprintf+0x25c>
    2d52:	1c 14       	cp	r1, r12
    2d54:	1d 04       	cpc	r1, r13
    2d56:	34 f4       	brge	.+12     	; 0x2d64 <vfprintf+0x262>
    2d58:	c6 01       	movw	r24, r12
    2d5a:	01 96       	adiw	r24, 0x01	; 1
    2d5c:	05 c0       	rjmp	.+10     	; 0x2d68 <vfprintf+0x266>
    2d5e:	85 e0       	ldi	r24, 0x05	; 5
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <vfprintf+0x266>
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	01 11       	cpse	r16, r1
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	11 23       	and	r17, r17
    2d6e:	31 f0       	breq	.+12     	; 0x2d7c <vfprintf+0x27a>
    2d70:	21 2f       	mov	r18, r17
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	2f 5f       	subi	r18, 0xFF	; 255
    2d76:	3f 4f       	sbci	r19, 0xFF	; 255
    2d78:	82 0f       	add	r24, r18
    2d7a:	93 1f       	adc	r25, r19
    2d7c:	25 2d       	mov	r18, r5
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	82 17       	cp	r24, r18
    2d82:	93 07       	cpc	r25, r19
    2d84:	14 f4       	brge	.+4      	; 0x2d8a <vfprintf+0x288>
    2d86:	58 1a       	sub	r5, r24
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <vfprintf+0x28a>
    2d8a:	51 2c       	mov	r5, r1
    2d8c:	89 2d       	mov	r24, r9
    2d8e:	89 70       	andi	r24, 0x09	; 9
    2d90:	49 f4       	brne	.+18     	; 0x2da4 <vfprintf+0x2a2>
    2d92:	55 20       	and	r5, r5
    2d94:	39 f0       	breq	.+14     	; 0x2da4 <vfprintf+0x2a2>
    2d96:	b7 01       	movw	r22, r14
    2d98:	80 e2       	ldi	r24, 0x20	; 32
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2da0:	5a 94       	dec	r5
    2da2:	f7 cf       	rjmp	.-18     	; 0x2d92 <vfprintf+0x290>
    2da4:	00 23       	and	r16, r16
    2da6:	29 f0       	breq	.+10     	; 0x2db2 <vfprintf+0x2b0>
    2da8:	b7 01       	movw	r22, r14
    2daa:	80 2f       	mov	r24, r16
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2db2:	93 fc       	sbrc	r9, 3
    2db4:	09 c0       	rjmp	.+18     	; 0x2dc8 <vfprintf+0x2c6>
    2db6:	55 20       	and	r5, r5
    2db8:	39 f0       	breq	.+14     	; 0x2dc8 <vfprintf+0x2c6>
    2dba:	b7 01       	movw	r22, r14
    2dbc:	80 e3       	ldi	r24, 0x30	; 48
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2dc4:	5a 94       	dec	r5
    2dc6:	f7 cf       	rjmp	.-18     	; 0x2db6 <vfprintf+0x2b4>
    2dc8:	97 fe       	sbrs	r9, 7
    2dca:	4c c0       	rjmp	.+152    	; 0x2e64 <vfprintf+0x362>
    2dcc:	46 01       	movw	r8, r12
    2dce:	d7 fe       	sbrs	r13, 7
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <vfprintf+0x2d4>
    2dd2:	81 2c       	mov	r8, r1
    2dd4:	91 2c       	mov	r9, r1
    2dd6:	c6 01       	movw	r24, r12
    2dd8:	88 19       	sub	r24, r8
    2dda:	99 09       	sbc	r25, r9
    2ddc:	f3 01       	movw	r30, r6
    2dde:	e8 0f       	add	r30, r24
    2de0:	f9 1f       	adc	r31, r25
    2de2:	ed 87       	std	Y+13, r30	; 0x0d
    2de4:	fe 87       	std	Y+14, r31	; 0x0e
    2de6:	96 01       	movw	r18, r12
    2de8:	24 19       	sub	r18, r4
    2dea:	31 09       	sbc	r19, r1
    2dec:	2f 87       	std	Y+15, r18	; 0x0f
    2dee:	38 8b       	std	Y+16, r19	; 0x10
    2df0:	01 2f       	mov	r16, r17
    2df2:	10 e0       	ldi	r17, 0x00	; 0
    2df4:	11 95       	neg	r17
    2df6:	01 95       	neg	r16
    2df8:	11 09       	sbc	r17, r1
    2dfa:	3f ef       	ldi	r19, 0xFF	; 255
    2dfc:	83 16       	cp	r8, r19
    2dfe:	93 06       	cpc	r9, r19
    2e00:	29 f4       	brne	.+10     	; 0x2e0c <vfprintf+0x30a>
    2e02:	b7 01       	movw	r22, r14
    2e04:	8e e2       	ldi	r24, 0x2E	; 46
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2e0c:	c8 14       	cp	r12, r8
    2e0e:	d9 04       	cpc	r13, r9
    2e10:	4c f0       	brlt	.+18     	; 0x2e24 <vfprintf+0x322>
    2e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e14:	98 89       	ldd	r25, Y+16	; 0x10
    2e16:	88 15       	cp	r24, r8
    2e18:	99 05       	cpc	r25, r9
    2e1a:	24 f4       	brge	.+8      	; 0x2e24 <vfprintf+0x322>
    2e1c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e1e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e20:	81 81       	ldd	r24, Z+1	; 0x01
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <vfprintf+0x324>
    2e24:	80 e3       	ldi	r24, 0x30	; 48
    2e26:	f1 e0       	ldi	r31, 0x01	; 1
    2e28:	8f 1a       	sub	r8, r31
    2e2a:	91 08       	sbc	r9, r1
    2e2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e30:	2f 5f       	subi	r18, 0xFF	; 255
    2e32:	3f 4f       	sbci	r19, 0xFF	; 255
    2e34:	2d 87       	std	Y+13, r18	; 0x0d
    2e36:	3e 87       	std	Y+14, r19	; 0x0e
    2e38:	80 16       	cp	r8, r16
    2e3a:	91 06       	cpc	r9, r17
    2e3c:	2c f0       	brlt	.+10     	; 0x2e48 <vfprintf+0x346>
    2e3e:	b7 01       	movw	r22, r14
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2e46:	d9 cf       	rjmp	.-78     	; 0x2dfa <vfprintf+0x2f8>
    2e48:	c8 14       	cp	r12, r8
    2e4a:	d9 04       	cpc	r13, r9
    2e4c:	41 f4       	brne	.+16     	; 0x2e5e <vfprintf+0x35c>
    2e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e50:	96 33       	cpi	r25, 0x36	; 54
    2e52:	20 f4       	brcc	.+8      	; 0x2e5c <vfprintf+0x35a>
    2e54:	95 33       	cpi	r25, 0x35	; 53
    2e56:	19 f4       	brne	.+6      	; 0x2e5e <vfprintf+0x35c>
    2e58:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e5a:	34 ff       	sbrs	r19, 4
    2e5c:	81 e3       	ldi	r24, 0x31	; 49
    2e5e:	b7 01       	movw	r22, r14
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	4e c0       	rjmp	.+156    	; 0x2f00 <vfprintf+0x3fe>
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	81 33       	cpi	r24, 0x31	; 49
    2e68:	19 f0       	breq	.+6      	; 0x2e70 <vfprintf+0x36e>
    2e6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e6c:	9f 7e       	andi	r25, 0xEF	; 239
    2e6e:	9c 87       	std	Y+12, r25	; 0x0c
    2e70:	b7 01       	movw	r22, r14
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2e78:	11 11       	cpse	r17, r1
    2e7a:	05 c0       	rjmp	.+10     	; 0x2e86 <vfprintf+0x384>
    2e7c:	94 fc       	sbrc	r9, 4
    2e7e:	18 c0       	rjmp	.+48     	; 0x2eb0 <vfprintf+0x3ae>
    2e80:	85 e6       	ldi	r24, 0x65	; 101
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	17 c0       	rjmp	.+46     	; 0x2eb4 <vfprintf+0x3b2>
    2e86:	b7 01       	movw	r22, r14
    2e88:	8e e2       	ldi	r24, 0x2E	; 46
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2e90:	1e 5f       	subi	r17, 0xFE	; 254
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	01 e0       	ldi	r16, 0x01	; 1
    2e96:	08 0f       	add	r16, r24
    2e98:	f3 01       	movw	r30, r6
    2e9a:	e8 0f       	add	r30, r24
    2e9c:	f1 1d       	adc	r31, r1
    2e9e:	80 81       	ld	r24, Z
    2ea0:	b7 01       	movw	r22, r14
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2ea8:	80 2f       	mov	r24, r16
    2eaa:	01 13       	cpse	r16, r17
    2eac:	f3 cf       	rjmp	.-26     	; 0x2e94 <vfprintf+0x392>
    2eae:	e6 cf       	rjmp	.-52     	; 0x2e7c <vfprintf+0x37a>
    2eb0:	85 e4       	ldi	r24, 0x45	; 69
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	b7 01       	movw	r22, r14
    2eb6:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2eba:	d7 fc       	sbrc	r13, 7
    2ebc:	06 c0       	rjmp	.+12     	; 0x2eca <vfprintf+0x3c8>
    2ebe:	c1 14       	cp	r12, r1
    2ec0:	d1 04       	cpc	r13, r1
    2ec2:	41 f4       	brne	.+16     	; 0x2ed4 <vfprintf+0x3d2>
    2ec4:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ec6:	e4 ff       	sbrs	r30, 4
    2ec8:	05 c0       	rjmp	.+10     	; 0x2ed4 <vfprintf+0x3d2>
    2eca:	d1 94       	neg	r13
    2ecc:	c1 94       	neg	r12
    2ece:	d1 08       	sbc	r13, r1
    2ed0:	8d e2       	ldi	r24, 0x2D	; 45
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <vfprintf+0x3d4>
    2ed4:	8b e2       	ldi	r24, 0x2B	; 43
    2ed6:	b7 01       	movw	r22, r14
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2ede:	80 e3       	ldi	r24, 0x30	; 48
    2ee0:	2a e0       	ldi	r18, 0x0A	; 10
    2ee2:	c2 16       	cp	r12, r18
    2ee4:	d1 04       	cpc	r13, r1
    2ee6:	2c f0       	brlt	.+10     	; 0x2ef2 <vfprintf+0x3f0>
    2ee8:	8f 5f       	subi	r24, 0xFF	; 255
    2eea:	fa e0       	ldi	r31, 0x0A	; 10
    2eec:	cf 1a       	sub	r12, r31
    2eee:	d1 08       	sbc	r13, r1
    2ef0:	f7 cf       	rjmp	.-18     	; 0x2ee0 <vfprintf+0x3de>
    2ef2:	b7 01       	movw	r22, r14
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2efa:	b7 01       	movw	r22, r14
    2efc:	c6 01       	movw	r24, r12
    2efe:	c0 96       	adiw	r24, 0x30	; 48
    2f00:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2f04:	54 c1       	rjmp	.+680    	; 0x31ae <vfprintf+0x6ac>
    2f06:	83 36       	cpi	r24, 0x63	; 99
    2f08:	31 f0       	breq	.+12     	; 0x2f16 <vfprintf+0x414>
    2f0a:	83 37       	cpi	r24, 0x73	; 115
    2f0c:	79 f0       	breq	.+30     	; 0x2f2c <vfprintf+0x42a>
    2f0e:	83 35       	cpi	r24, 0x53	; 83
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <vfprintf+0x412>
    2f12:	56 c0       	rjmp	.+172    	; 0x2fc0 <vfprintf+0x4be>
    2f14:	20 c0       	rjmp	.+64     	; 0x2f56 <vfprintf+0x454>
    2f16:	56 01       	movw	r10, r12
    2f18:	32 e0       	ldi	r19, 0x02	; 2
    2f1a:	a3 0e       	add	r10, r19
    2f1c:	b1 1c       	adc	r11, r1
    2f1e:	f6 01       	movw	r30, r12
    2f20:	80 81       	ld	r24, Z
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	01 e0       	ldi	r16, 0x01	; 1
    2f26:	10 e0       	ldi	r17, 0x00	; 0
    2f28:	63 01       	movw	r12, r6
    2f2a:	12 c0       	rjmp	.+36     	; 0x2f50 <vfprintf+0x44e>
    2f2c:	56 01       	movw	r10, r12
    2f2e:	f2 e0       	ldi	r31, 0x02	; 2
    2f30:	af 0e       	add	r10, r31
    2f32:	b1 1c       	adc	r11, r1
    2f34:	f6 01       	movw	r30, r12
    2f36:	c0 80       	ld	r12, Z
    2f38:	d1 80       	ldd	r13, Z+1	; 0x01
    2f3a:	96 fe       	sbrs	r9, 6
    2f3c:	03 c0       	rjmp	.+6      	; 0x2f44 <vfprintf+0x442>
    2f3e:	61 2f       	mov	r22, r17
    2f40:	70 e0       	ldi	r23, 0x00	; 0
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <vfprintf+0x446>
    2f44:	6f ef       	ldi	r22, 0xFF	; 255
    2f46:	7f ef       	ldi	r23, 0xFF	; 255
    2f48:	c6 01       	movw	r24, r12
    2f4a:	0e 94 98 1b 	call	0x3730	; 0x3730 <strnlen>
    2f4e:	8c 01       	movw	r16, r24
    2f50:	f9 2d       	mov	r31, r9
    2f52:	ff 77       	andi	r31, 0x7F	; 127
    2f54:	14 c0       	rjmp	.+40     	; 0x2f7e <vfprintf+0x47c>
    2f56:	56 01       	movw	r10, r12
    2f58:	22 e0       	ldi	r18, 0x02	; 2
    2f5a:	a2 0e       	add	r10, r18
    2f5c:	b1 1c       	adc	r11, r1
    2f5e:	f6 01       	movw	r30, r12
    2f60:	c0 80       	ld	r12, Z
    2f62:	d1 80       	ldd	r13, Z+1	; 0x01
    2f64:	96 fe       	sbrs	r9, 6
    2f66:	03 c0       	rjmp	.+6      	; 0x2f6e <vfprintf+0x46c>
    2f68:	61 2f       	mov	r22, r17
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <vfprintf+0x470>
    2f6e:	6f ef       	ldi	r22, 0xFF	; 255
    2f70:	7f ef       	ldi	r23, 0xFF	; 255
    2f72:	c6 01       	movw	r24, r12
    2f74:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <strnlen_P>
    2f78:	8c 01       	movw	r16, r24
    2f7a:	f9 2d       	mov	r31, r9
    2f7c:	f0 68       	ori	r31, 0x80	; 128
    2f7e:	9f 2e       	mov	r9, r31
    2f80:	f3 fd       	sbrc	r31, 3
    2f82:	1a c0       	rjmp	.+52     	; 0x2fb8 <vfprintf+0x4b6>
    2f84:	85 2d       	mov	r24, r5
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	08 17       	cp	r16, r24
    2f8a:	19 07       	cpc	r17, r25
    2f8c:	a8 f4       	brcc	.+42     	; 0x2fb8 <vfprintf+0x4b6>
    2f8e:	b7 01       	movw	r22, r14
    2f90:	80 e2       	ldi	r24, 0x20	; 32
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2f98:	5a 94       	dec	r5
    2f9a:	f4 cf       	rjmp	.-24     	; 0x2f84 <vfprintf+0x482>
    2f9c:	f6 01       	movw	r30, r12
    2f9e:	97 fc       	sbrc	r9, 7
    2fa0:	85 91       	lpm	r24, Z+
    2fa2:	97 fe       	sbrs	r9, 7
    2fa4:	81 91       	ld	r24, Z+
    2fa6:	6f 01       	movw	r12, r30
    2fa8:	b7 01       	movw	r22, r14
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    2fb0:	51 10       	cpse	r5, r1
    2fb2:	5a 94       	dec	r5
    2fb4:	01 50       	subi	r16, 0x01	; 1
    2fb6:	11 09       	sbc	r17, r1
    2fb8:	01 15       	cp	r16, r1
    2fba:	11 05       	cpc	r17, r1
    2fbc:	79 f7       	brne	.-34     	; 0x2f9c <vfprintf+0x49a>
    2fbe:	f7 c0       	rjmp	.+494    	; 0x31ae <vfprintf+0x6ac>
    2fc0:	84 36       	cpi	r24, 0x64	; 100
    2fc2:	11 f0       	breq	.+4      	; 0x2fc8 <vfprintf+0x4c6>
    2fc4:	89 36       	cpi	r24, 0x69	; 105
    2fc6:	61 f5       	brne	.+88     	; 0x3020 <vfprintf+0x51e>
    2fc8:	56 01       	movw	r10, r12
    2fca:	97 fe       	sbrs	r9, 7
    2fcc:	09 c0       	rjmp	.+18     	; 0x2fe0 <vfprintf+0x4de>
    2fce:	24 e0       	ldi	r18, 0x04	; 4
    2fd0:	a2 0e       	add	r10, r18
    2fd2:	b1 1c       	adc	r11, r1
    2fd4:	f6 01       	movw	r30, r12
    2fd6:	60 81       	ld	r22, Z
    2fd8:	71 81       	ldd	r23, Z+1	; 0x01
    2fda:	82 81       	ldd	r24, Z+2	; 0x02
    2fdc:	93 81       	ldd	r25, Z+3	; 0x03
    2fde:	0a c0       	rjmp	.+20     	; 0x2ff4 <vfprintf+0x4f2>
    2fe0:	f2 e0       	ldi	r31, 0x02	; 2
    2fe2:	af 0e       	add	r10, r31
    2fe4:	b1 1c       	adc	r11, r1
    2fe6:	f6 01       	movw	r30, r12
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	07 2e       	mov	r0, r23
    2fee:	00 0c       	add	r0, r0
    2ff0:	88 0b       	sbc	r24, r24
    2ff2:	99 0b       	sbc	r25, r25
    2ff4:	f9 2d       	mov	r31, r9
    2ff6:	ff 76       	andi	r31, 0x6F	; 111
    2ff8:	9f 2e       	mov	r9, r31
    2ffa:	97 ff       	sbrs	r25, 7
    2ffc:	09 c0       	rjmp	.+18     	; 0x3010 <vfprintf+0x50e>
    2ffe:	90 95       	com	r25
    3000:	80 95       	com	r24
    3002:	70 95       	com	r23
    3004:	61 95       	neg	r22
    3006:	7f 4f       	sbci	r23, 0xFF	; 255
    3008:	8f 4f       	sbci	r24, 0xFF	; 255
    300a:	9f 4f       	sbci	r25, 0xFF	; 255
    300c:	f0 68       	ori	r31, 0x80	; 128
    300e:	9f 2e       	mov	r9, r31
    3010:	2a e0       	ldi	r18, 0x0A	; 10
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	a3 01       	movw	r20, r6
    3016:	0e 94 16 1c 	call	0x382c	; 0x382c <__ultoa_invert>
    301a:	c8 2e       	mov	r12, r24
    301c:	c6 18       	sub	r12, r6
    301e:	3f c0       	rjmp	.+126    	; 0x309e <vfprintf+0x59c>
    3020:	09 2d       	mov	r16, r9
    3022:	85 37       	cpi	r24, 0x75	; 117
    3024:	21 f4       	brne	.+8      	; 0x302e <vfprintf+0x52c>
    3026:	0f 7e       	andi	r16, 0xEF	; 239
    3028:	2a e0       	ldi	r18, 0x0A	; 10
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	1d c0       	rjmp	.+58     	; 0x3068 <vfprintf+0x566>
    302e:	09 7f       	andi	r16, 0xF9	; 249
    3030:	8f 36       	cpi	r24, 0x6F	; 111
    3032:	91 f0       	breq	.+36     	; 0x3058 <vfprintf+0x556>
    3034:	18 f4       	brcc	.+6      	; 0x303c <vfprintf+0x53a>
    3036:	88 35       	cpi	r24, 0x58	; 88
    3038:	59 f0       	breq	.+22     	; 0x3050 <vfprintf+0x54e>
    303a:	c3 c0       	rjmp	.+390    	; 0x31c2 <vfprintf+0x6c0>
    303c:	80 37       	cpi	r24, 0x70	; 112
    303e:	19 f0       	breq	.+6      	; 0x3046 <vfprintf+0x544>
    3040:	88 37       	cpi	r24, 0x78	; 120
    3042:	11 f0       	breq	.+4      	; 0x3048 <vfprintf+0x546>
    3044:	be c0       	rjmp	.+380    	; 0x31c2 <vfprintf+0x6c0>
    3046:	00 61       	ori	r16, 0x10	; 16
    3048:	04 ff       	sbrs	r16, 4
    304a:	09 c0       	rjmp	.+18     	; 0x305e <vfprintf+0x55c>
    304c:	04 60       	ori	r16, 0x04	; 4
    304e:	07 c0       	rjmp	.+14     	; 0x305e <vfprintf+0x55c>
    3050:	94 fe       	sbrs	r9, 4
    3052:	08 c0       	rjmp	.+16     	; 0x3064 <vfprintf+0x562>
    3054:	06 60       	ori	r16, 0x06	; 6
    3056:	06 c0       	rjmp	.+12     	; 0x3064 <vfprintf+0x562>
    3058:	28 e0       	ldi	r18, 0x08	; 8
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <vfprintf+0x566>
    305e:	20 e1       	ldi	r18, 0x10	; 16
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <vfprintf+0x566>
    3064:	20 e1       	ldi	r18, 0x10	; 16
    3066:	32 e0       	ldi	r19, 0x02	; 2
    3068:	56 01       	movw	r10, r12
    306a:	07 ff       	sbrs	r16, 7
    306c:	09 c0       	rjmp	.+18     	; 0x3080 <vfprintf+0x57e>
    306e:	84 e0       	ldi	r24, 0x04	; 4
    3070:	a8 0e       	add	r10, r24
    3072:	b1 1c       	adc	r11, r1
    3074:	f6 01       	movw	r30, r12
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	08 c0       	rjmp	.+16     	; 0x3090 <vfprintf+0x58e>
    3080:	f2 e0       	ldi	r31, 0x02	; 2
    3082:	af 0e       	add	r10, r31
    3084:	b1 1c       	adc	r11, r1
    3086:	f6 01       	movw	r30, r12
    3088:	60 81       	ld	r22, Z
    308a:	71 81       	ldd	r23, Z+1	; 0x01
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a3 01       	movw	r20, r6
    3092:	0e 94 16 1c 	call	0x382c	; 0x382c <__ultoa_invert>
    3096:	c8 2e       	mov	r12, r24
    3098:	c6 18       	sub	r12, r6
    309a:	0f 77       	andi	r16, 0x7F	; 127
    309c:	90 2e       	mov	r9, r16
    309e:	96 fe       	sbrs	r9, 6
    30a0:	0b c0       	rjmp	.+22     	; 0x30b8 <vfprintf+0x5b6>
    30a2:	09 2d       	mov	r16, r9
    30a4:	0e 7f       	andi	r16, 0xFE	; 254
    30a6:	c1 16       	cp	r12, r17
    30a8:	50 f4       	brcc	.+20     	; 0x30be <vfprintf+0x5bc>
    30aa:	94 fe       	sbrs	r9, 4
    30ac:	0a c0       	rjmp	.+20     	; 0x30c2 <vfprintf+0x5c0>
    30ae:	92 fc       	sbrc	r9, 2
    30b0:	08 c0       	rjmp	.+16     	; 0x30c2 <vfprintf+0x5c0>
    30b2:	09 2d       	mov	r16, r9
    30b4:	0e 7e       	andi	r16, 0xEE	; 238
    30b6:	05 c0       	rjmp	.+10     	; 0x30c2 <vfprintf+0x5c0>
    30b8:	dc 2c       	mov	r13, r12
    30ba:	09 2d       	mov	r16, r9
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <vfprintf+0x5c2>
    30be:	dc 2c       	mov	r13, r12
    30c0:	01 c0       	rjmp	.+2      	; 0x30c4 <vfprintf+0x5c2>
    30c2:	d1 2e       	mov	r13, r17
    30c4:	04 ff       	sbrs	r16, 4
    30c6:	0d c0       	rjmp	.+26     	; 0x30e2 <vfprintf+0x5e0>
    30c8:	fe 01       	movw	r30, r28
    30ca:	ec 0d       	add	r30, r12
    30cc:	f1 1d       	adc	r31, r1
    30ce:	80 81       	ld	r24, Z
    30d0:	80 33       	cpi	r24, 0x30	; 48
    30d2:	11 f4       	brne	.+4      	; 0x30d8 <vfprintf+0x5d6>
    30d4:	09 7e       	andi	r16, 0xE9	; 233
    30d6:	09 c0       	rjmp	.+18     	; 0x30ea <vfprintf+0x5e8>
    30d8:	02 ff       	sbrs	r16, 2
    30da:	06 c0       	rjmp	.+12     	; 0x30e8 <vfprintf+0x5e6>
    30dc:	d3 94       	inc	r13
    30de:	d3 94       	inc	r13
    30e0:	04 c0       	rjmp	.+8      	; 0x30ea <vfprintf+0x5e8>
    30e2:	80 2f       	mov	r24, r16
    30e4:	86 78       	andi	r24, 0x86	; 134
    30e6:	09 f0       	breq	.+2      	; 0x30ea <vfprintf+0x5e8>
    30e8:	d3 94       	inc	r13
    30ea:	03 fd       	sbrc	r16, 3
    30ec:	11 c0       	rjmp	.+34     	; 0x3110 <vfprintf+0x60e>
    30ee:	00 ff       	sbrs	r16, 0
    30f0:	06 c0       	rjmp	.+12     	; 0x30fe <vfprintf+0x5fc>
    30f2:	1c 2d       	mov	r17, r12
    30f4:	d5 14       	cp	r13, r5
    30f6:	80 f4       	brcc	.+32     	; 0x3118 <vfprintf+0x616>
    30f8:	15 0d       	add	r17, r5
    30fa:	1d 19       	sub	r17, r13
    30fc:	0d c0       	rjmp	.+26     	; 0x3118 <vfprintf+0x616>
    30fe:	d5 14       	cp	r13, r5
    3100:	58 f4       	brcc	.+22     	; 0x3118 <vfprintf+0x616>
    3102:	b7 01       	movw	r22, r14
    3104:	80 e2       	ldi	r24, 0x20	; 32
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    310c:	d3 94       	inc	r13
    310e:	f7 cf       	rjmp	.-18     	; 0x30fe <vfprintf+0x5fc>
    3110:	d5 14       	cp	r13, r5
    3112:	10 f4       	brcc	.+4      	; 0x3118 <vfprintf+0x616>
    3114:	5d 18       	sub	r5, r13
    3116:	01 c0       	rjmp	.+2      	; 0x311a <vfprintf+0x618>
    3118:	51 2c       	mov	r5, r1
    311a:	04 ff       	sbrs	r16, 4
    311c:	10 c0       	rjmp	.+32     	; 0x313e <vfprintf+0x63c>
    311e:	b7 01       	movw	r22, r14
    3120:	80 e3       	ldi	r24, 0x30	; 48
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    3128:	02 ff       	sbrs	r16, 2
    312a:	17 c0       	rjmp	.+46     	; 0x315a <vfprintf+0x658>
    312c:	01 fd       	sbrc	r16, 1
    312e:	03 c0       	rjmp	.+6      	; 0x3136 <vfprintf+0x634>
    3130:	88 e7       	ldi	r24, 0x78	; 120
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	02 c0       	rjmp	.+4      	; 0x313a <vfprintf+0x638>
    3136:	88 e5       	ldi	r24, 0x58	; 88
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	b7 01       	movw	r22, r14
    313c:	0c c0       	rjmp	.+24     	; 0x3156 <vfprintf+0x654>
    313e:	80 2f       	mov	r24, r16
    3140:	86 78       	andi	r24, 0x86	; 134
    3142:	59 f0       	breq	.+22     	; 0x315a <vfprintf+0x658>
    3144:	01 ff       	sbrs	r16, 1
    3146:	02 c0       	rjmp	.+4      	; 0x314c <vfprintf+0x64a>
    3148:	8b e2       	ldi	r24, 0x2B	; 43
    314a:	01 c0       	rjmp	.+2      	; 0x314e <vfprintf+0x64c>
    314c:	80 e2       	ldi	r24, 0x20	; 32
    314e:	07 fd       	sbrc	r16, 7
    3150:	8d e2       	ldi	r24, 0x2D	; 45
    3152:	b7 01       	movw	r22, r14
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    315a:	c1 16       	cp	r12, r17
    315c:	38 f4       	brcc	.+14     	; 0x316c <vfprintf+0x66a>
    315e:	b7 01       	movw	r22, r14
    3160:	80 e3       	ldi	r24, 0x30	; 48
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    3168:	11 50       	subi	r17, 0x01	; 1
    316a:	f7 cf       	rjmp	.-18     	; 0x315a <vfprintf+0x658>
    316c:	ca 94       	dec	r12
    316e:	f3 01       	movw	r30, r6
    3170:	ec 0d       	add	r30, r12
    3172:	f1 1d       	adc	r31, r1
    3174:	80 81       	ld	r24, Z
    3176:	b7 01       	movw	r22, r14
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    317e:	c1 10       	cpse	r12, r1
    3180:	f5 cf       	rjmp	.-22     	; 0x316c <vfprintf+0x66a>
    3182:	15 c0       	rjmp	.+42     	; 0x31ae <vfprintf+0x6ac>
    3184:	f4 e0       	ldi	r31, 0x04	; 4
    3186:	f5 15       	cp	r31, r5
    3188:	60 f5       	brcc	.+88     	; 0x31e2 <vfprintf+0x6e0>
    318a:	84 e0       	ldi	r24, 0x04	; 4
    318c:	58 1a       	sub	r5, r24
    318e:	93 fe       	sbrs	r9, 3
    3190:	1f c0       	rjmp	.+62     	; 0x31d0 <vfprintf+0x6ce>
    3192:	01 11       	cpse	r16, r1
    3194:	27 c0       	rjmp	.+78     	; 0x31e4 <vfprintf+0x6e2>
    3196:	2c 85       	ldd	r18, Y+12	; 0x0c
    3198:	23 ff       	sbrs	r18, 3
    319a:	2a c0       	rjmp	.+84     	; 0x31f0 <vfprintf+0x6ee>
    319c:	0e eb       	ldi	r16, 0xBE	; 190
    319e:	12 e0       	ldi	r17, 0x02	; 2
    31a0:	39 2d       	mov	r19, r9
    31a2:	30 71       	andi	r19, 0x10	; 16
    31a4:	93 2e       	mov	r9, r19
    31a6:	f8 01       	movw	r30, r16
    31a8:	84 91       	lpm	r24, Z
    31aa:	81 11       	cpse	r24, r1
    31ac:	24 c0       	rjmp	.+72     	; 0x31f6 <vfprintf+0x6f4>
    31ae:	55 20       	and	r5, r5
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <vfprintf+0x6b2>
    31b2:	e4 cc       	rjmp	.-1592   	; 0x2b7c <vfprintf+0x7a>
    31b4:	b7 01       	movw	r22, r14
    31b6:	80 e2       	ldi	r24, 0x20	; 32
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    31be:	5a 94       	dec	r5
    31c0:	f6 cf       	rjmp	.-20     	; 0x31ae <vfprintf+0x6ac>
    31c2:	f7 01       	movw	r30, r14
    31c4:	86 81       	ldd	r24, Z+6	; 0x06
    31c6:	97 81       	ldd	r25, Z+7	; 0x07
    31c8:	26 c0       	rjmp	.+76     	; 0x3216 <vfprintf+0x714>
    31ca:	8f ef       	ldi	r24, 0xFF	; 255
    31cc:	9f ef       	ldi	r25, 0xFF	; 255
    31ce:	23 c0       	rjmp	.+70     	; 0x3216 <vfprintf+0x714>
    31d0:	b7 01       	movw	r22, r14
    31d2:	80 e2       	ldi	r24, 0x20	; 32
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    31da:	5a 94       	dec	r5
    31dc:	51 10       	cpse	r5, r1
    31de:	f8 cf       	rjmp	.-16     	; 0x31d0 <vfprintf+0x6ce>
    31e0:	d8 cf       	rjmp	.-80     	; 0x3192 <vfprintf+0x690>
    31e2:	51 2c       	mov	r5, r1
    31e4:	b7 01       	movw	r22, r14
    31e6:	80 2f       	mov	r24, r16
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    31ee:	d3 cf       	rjmp	.-90     	; 0x3196 <vfprintf+0x694>
    31f0:	02 ec       	ldi	r16, 0xC2	; 194
    31f2:	12 e0       	ldi	r17, 0x02	; 2
    31f4:	d5 cf       	rjmp	.-86     	; 0x31a0 <vfprintf+0x69e>
    31f6:	91 10       	cpse	r9, r1
    31f8:	80 52       	subi	r24, 0x20	; 32
    31fa:	b7 01       	movw	r22, r14
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	0e 94 a3 1b 	call	0x3746	; 0x3746 <fputc>
    3202:	0f 5f       	subi	r16, 0xFF	; 255
    3204:	1f 4f       	sbci	r17, 0xFF	; 255
    3206:	cf cf       	rjmp	.-98     	; 0x31a6 <vfprintf+0x6a4>
    3208:	23 e0       	ldi	r18, 0x03	; 3
    320a:	25 15       	cp	r18, r5
    320c:	10 f4       	brcc	.+4      	; 0x3212 <vfprintf+0x710>
    320e:	83 e0       	ldi	r24, 0x03	; 3
    3210:	bd cf       	rjmp	.-134    	; 0x318c <vfprintf+0x68a>
    3212:	51 2c       	mov	r5, r1
    3214:	c0 cf       	rjmp	.-128    	; 0x3196 <vfprintf+0x694>
    3216:	60 96       	adiw	r28, 0x10	; 16
    3218:	cd bf       	out	0x3d, r28	; 61
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	1f 91       	pop	r17
    3222:	0f 91       	pop	r16
    3224:	ff 90       	pop	r15
    3226:	ef 90       	pop	r14
    3228:	df 90       	pop	r13
    322a:	cf 90       	pop	r12
    322c:	bf 90       	pop	r11
    322e:	af 90       	pop	r10
    3230:	9f 90       	pop	r9
    3232:	8f 90       	pop	r8
    3234:	7f 90       	pop	r7
    3236:	6f 90       	pop	r6
    3238:	5f 90       	pop	r5
    323a:	4f 90       	pop	r4
    323c:	3f 90       	pop	r3
    323e:	2f 90       	pop	r2
    3240:	08 95       	ret

00003242 <__tablejump2__>:
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	88 1f       	adc	r24, r24
    3248:	8b bf       	out	0x3b, r24	; 59
    324a:	07 90       	elpm	r0, Z+
    324c:	f6 91       	elpm	r31, Z
    324e:	e0 2d       	mov	r30, r0
    3250:	1b be       	out	0x3b, r1	; 59
    3252:	19 94       	eijmp

00003254 <strtod>:
    3254:	8f 92       	push	r8
    3256:	9f 92       	push	r9
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	ec 01       	movw	r28, r24
    326e:	6b 01       	movw	r12, r22
    3270:	61 15       	cp	r22, r1
    3272:	71 05       	cpc	r23, r1
    3274:	19 f0       	breq	.+6      	; 0x327c <strtod+0x28>
    3276:	fb 01       	movw	r30, r22
    3278:	80 83       	st	Z, r24
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	7e 01       	movw	r14, r28
    327e:	ff ef       	ldi	r31, 0xFF	; 255
    3280:	ef 1a       	sub	r14, r31
    3282:	ff 0a       	sbc	r15, r31
    3284:	08 81       	ld	r16, Y
    3286:	80 2f       	mov	r24, r16
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <isspace>
    328e:	89 2b       	or	r24, r25
    3290:	11 f0       	breq	.+4      	; 0x3296 <strtod+0x42>
    3292:	e7 01       	movw	r28, r14
    3294:	f3 cf       	rjmp	.-26     	; 0x327c <strtod+0x28>
    3296:	0d 32       	cpi	r16, 0x2D	; 45
    3298:	39 f4       	brne	.+14     	; 0x32a8 <strtod+0x54>
    329a:	7e 01       	movw	r14, r28
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	e8 0e       	add	r14, r24
    32a0:	f1 1c       	adc	r15, r1
    32a2:	09 81       	ldd	r16, Y+1	; 0x01
    32a4:	11 e0       	ldi	r17, 0x01	; 1
    32a6:	08 c0       	rjmp	.+16     	; 0x32b8 <strtod+0x64>
    32a8:	0b 32       	cpi	r16, 0x2B	; 43
    32aa:	29 f4       	brne	.+10     	; 0x32b6 <strtod+0x62>
    32ac:	7e 01       	movw	r14, r28
    32ae:	92 e0       	ldi	r25, 0x02	; 2
    32b0:	e9 0e       	add	r14, r25
    32b2:	f1 1c       	adc	r15, r1
    32b4:	09 81       	ldd	r16, Y+1	; 0x01
    32b6:	10 e0       	ldi	r17, 0x00	; 0
    32b8:	e7 01       	movw	r28, r14
    32ba:	21 97       	sbiw	r28, 0x01	; 1
    32bc:	43 e0       	ldi	r20, 0x03	; 3
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	6e ec       	ldi	r22, 0xCE	; 206
    32c2:	72 e0       	ldi	r23, 0x02	; 2
    32c4:	ce 01       	movw	r24, r28
    32c6:	0e 94 67 1b 	call	0x36ce	; 0x36ce <strncasecmp_P>
    32ca:	89 2b       	or	r24, r25
    32cc:	c1 f4       	brne	.+48     	; 0x32fe <strtod+0xaa>
    32ce:	23 96       	adiw	r28, 0x03	; 3
    32d0:	45 e0       	ldi	r20, 0x05	; 5
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	69 ec       	ldi	r22, 0xC9	; 201
    32d6:	72 e0       	ldi	r23, 0x02	; 2
    32d8:	ce 01       	movw	r24, r28
    32da:	0e 94 67 1b 	call	0x36ce	; 0x36ce <strncasecmp_P>
    32de:	89 2b       	or	r24, r25
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <strtod+0x90>
    32e2:	25 96       	adiw	r28, 0x05	; 5
    32e4:	c1 14       	cp	r12, r1
    32e6:	d1 04       	cpc	r13, r1
    32e8:	19 f0       	breq	.+6      	; 0x32f0 <strtod+0x9c>
    32ea:	f6 01       	movw	r30, r12
    32ec:	c0 83       	st	Z, r28
    32ee:	d1 83       	std	Z+1, r29	; 0x01
    32f0:	11 11       	cpse	r17, r1
    32f2:	f6 c0       	rjmp	.+492    	; 0x34e0 <strtod+0x28c>
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	80 e8       	ldi	r24, 0x80	; 128
    32fa:	9f e7       	ldi	r25, 0x7F	; 127
    32fc:	fa c0       	rjmp	.+500    	; 0x34f2 <strtod+0x29e>
    32fe:	43 e0       	ldi	r20, 0x03	; 3
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	66 ec       	ldi	r22, 0xC6	; 198
    3304:	72 e0       	ldi	r23, 0x02	; 2
    3306:	ce 01       	movw	r24, r28
    3308:	0e 94 67 1b 	call	0x36ce	; 0x36ce <strncasecmp_P>
    330c:	89 2b       	or	r24, r25
    330e:	59 f4       	brne	.+22     	; 0x3326 <strtod+0xd2>
    3310:	c1 14       	cp	r12, r1
    3312:	d1 04       	cpc	r13, r1
    3314:	09 f4       	brne	.+2      	; 0x3318 <strtod+0xc4>
    3316:	e9 c0       	rjmp	.+466    	; 0x34ea <strtod+0x296>
    3318:	f2 e0       	ldi	r31, 0x02	; 2
    331a:	ef 0e       	add	r14, r31
    331c:	f1 1c       	adc	r15, r1
    331e:	f6 01       	movw	r30, r12
    3320:	e0 82       	st	Z, r14
    3322:	f1 82       	std	Z+1, r15	; 0x01
    3324:	e2 c0       	rjmp	.+452    	; 0x34ea <strtod+0x296>
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	a9 01       	movw	r20, r18
    332c:	c0 e0       	ldi	r28, 0x00	; 0
    332e:	d0 e0       	ldi	r29, 0x00	; 0
    3330:	f7 01       	movw	r30, r14
    3332:	60 ed       	ldi	r22, 0xD0	; 208
    3334:	a6 2e       	mov	r10, r22
    3336:	a0 0e       	add	r10, r16
    3338:	89 e0       	ldi	r24, 0x09	; 9
    333a:	8a 15       	cp	r24, r10
    333c:	30 f1       	brcs	.+76     	; 0x338a <strtod+0x136>
    333e:	91 2f       	mov	r25, r17
    3340:	92 60       	ori	r25, 0x02	; 2
    3342:	b9 2e       	mov	r11, r25
    3344:	81 2f       	mov	r24, r17
    3346:	88 70       	andi	r24, 0x08	; 8
    3348:	12 ff       	sbrs	r17, 2
    334a:	04 c0       	rjmp	.+8      	; 0x3354 <strtod+0x100>
    334c:	81 11       	cpse	r24, r1
    334e:	24 c0       	rjmp	.+72     	; 0x3398 <strtod+0x144>
    3350:	21 96       	adiw	r28, 0x01	; 1
    3352:	22 c0       	rjmp	.+68     	; 0x3398 <strtod+0x144>
    3354:	81 11       	cpse	r24, r1
    3356:	21 97       	sbiw	r28, 0x01	; 1
    3358:	a5 e0       	ldi	r26, 0x05	; 5
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__muluhisi3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	aa 1f       	adc	r26, r26
    336a:	bb 1f       	adc	r27, r27
    336c:	9c 01       	movw	r18, r24
    336e:	ad 01       	movw	r20, r26
    3370:	2a 0d       	add	r18, r10
    3372:	31 1d       	adc	r19, r1
    3374:	41 1d       	adc	r20, r1
    3376:	51 1d       	adc	r21, r1
    3378:	28 39       	cpi	r18, 0x98	; 152
    337a:	89 e9       	ldi	r24, 0x99	; 153
    337c:	38 07       	cpc	r19, r24
    337e:	48 07       	cpc	r20, r24
    3380:	89 e1       	ldi	r24, 0x19	; 25
    3382:	58 07       	cpc	r21, r24
    3384:	48 f0       	brcs	.+18     	; 0x3398 <strtod+0x144>
    3386:	16 60       	ori	r17, 0x06	; 6
    3388:	06 c0       	rjmp	.+12     	; 0x3396 <strtod+0x142>
    338a:	9e ef       	ldi	r25, 0xFE	; 254
    338c:	a9 12       	cpse	r10, r25
    338e:	0a c0       	rjmp	.+20     	; 0x33a4 <strtod+0x150>
    3390:	13 fd       	sbrc	r17, 3
    3392:	40 c0       	rjmp	.+128    	; 0x3414 <strtod+0x1c0>
    3394:	18 60       	ori	r17, 0x08	; 8
    3396:	b1 2e       	mov	r11, r17
    3398:	8f ef       	ldi	r24, 0xFF	; 255
    339a:	e8 1a       	sub	r14, r24
    339c:	f8 0a       	sbc	r15, r24
    339e:	00 81       	ld	r16, Z
    33a0:	1b 2d       	mov	r17, r11
    33a2:	c6 cf       	rjmp	.-116    	; 0x3330 <strtod+0xdc>
    33a4:	80 2f       	mov	r24, r16
    33a6:	8f 7d       	andi	r24, 0xDF	; 223
    33a8:	85 34       	cpi	r24, 0x45	; 69
    33aa:	a1 f5       	brne	.+104    	; 0x3414 <strtod+0x1c0>
    33ac:	80 81       	ld	r24, Z
    33ae:	8d 32       	cpi	r24, 0x2D	; 45
    33b0:	11 f4       	brne	.+4      	; 0x33b6 <strtod+0x162>
    33b2:	10 61       	ori	r17, 0x10	; 16
    33b4:	06 c0       	rjmp	.+12     	; 0x33c2 <strtod+0x16e>
    33b6:	8b 32       	cpi	r24, 0x2B	; 43
    33b8:	21 f0       	breq	.+8      	; 0x33c2 <strtod+0x16e>
    33ba:	31 96       	adiw	r30, 0x01	; 1
    33bc:	61 e0       	ldi	r22, 0x01	; 1
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	04 c0       	rjmp	.+8      	; 0x33ca <strtod+0x176>
    33c2:	81 81       	ldd	r24, Z+1	; 0x01
    33c4:	32 96       	adiw	r30, 0x02	; 2
    33c6:	62 e0       	ldi	r22, 0x02	; 2
    33c8:	70 e0       	ldi	r23, 0x00	; 0
    33ca:	80 53       	subi	r24, 0x30	; 48
    33cc:	8a 30       	cpi	r24, 0x0A	; 10
    33ce:	18 f0       	brcs	.+6      	; 0x33d6 <strtod+0x182>
    33d0:	e6 1b       	sub	r30, r22
    33d2:	f7 0b       	sbc	r31, r23
    33d4:	1f c0       	rjmp	.+62     	; 0x3414 <strtod+0x1c0>
    33d6:	60 e0       	ldi	r22, 0x00	; 0
    33d8:	70 e0       	ldi	r23, 0x00	; 0
    33da:	60 38       	cpi	r22, 0x80	; 128
    33dc:	9c e0       	ldi	r25, 0x0C	; 12
    33de:	79 07       	cpc	r23, r25
    33e0:	5c f4       	brge	.+22     	; 0x33f8 <strtod+0x1a4>
    33e2:	db 01       	movw	r26, r22
    33e4:	aa 0f       	add	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	aa 0f       	add	r26, r26
    33ea:	bb 1f       	adc	r27, r27
    33ec:	6a 0f       	add	r22, r26
    33ee:	7b 1f       	adc	r23, r27
    33f0:	66 0f       	add	r22, r22
    33f2:	77 1f       	adc	r23, r23
    33f4:	68 0f       	add	r22, r24
    33f6:	71 1d       	adc	r23, r1
    33f8:	31 96       	adiw	r30, 0x01	; 1
    33fa:	df 01       	movw	r26, r30
    33fc:	11 97       	sbiw	r26, 0x01	; 1
    33fe:	8c 91       	ld	r24, X
    3400:	80 53       	subi	r24, 0x30	; 48
    3402:	8a 30       	cpi	r24, 0x0A	; 10
    3404:	50 f3       	brcs	.-44     	; 0x33da <strtod+0x186>
    3406:	14 ff       	sbrs	r17, 4
    3408:	03 c0       	rjmp	.+6      	; 0x3410 <strtod+0x1bc>
    340a:	71 95       	neg	r23
    340c:	61 95       	neg	r22
    340e:	71 09       	sbc	r23, r1
    3410:	c6 0f       	add	r28, r22
    3412:	d7 1f       	adc	r29, r23
    3414:	11 ff       	sbrs	r17, 1
    3416:	08 c0       	rjmp	.+16     	; 0x3428 <strtod+0x1d4>
    3418:	c1 14       	cp	r12, r1
    341a:	d1 04       	cpc	r13, r1
    341c:	29 f0       	breq	.+10     	; 0x3428 <strtod+0x1d4>
    341e:	cf 01       	movw	r24, r30
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f6 01       	movw	r30, r12
    3424:	80 83       	st	Z, r24
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	ca 01       	movw	r24, r20
    342a:	b9 01       	movw	r22, r18
    342c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
    3430:	21 2f       	mov	r18, r17
    3432:	23 70       	andi	r18, 0x03	; 3
    3434:	23 30       	cpi	r18, 0x03	; 3
    3436:	19 f0       	breq	.+6      	; 0x343e <strtod+0x1ea>
    3438:	4b 01       	movw	r8, r22
    343a:	5c 01       	movw	r10, r24
    343c:	06 c0       	rjmp	.+12     	; 0x344a <strtod+0x1f6>
    343e:	4b 01       	movw	r8, r22
    3440:	5c 01       	movw	r10, r24
    3442:	b7 fa       	bst	r11, 7
    3444:	b0 94       	com	r11
    3446:	b7 f8       	bld	r11, 7
    3448:	b0 94       	com	r11
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	a9 01       	movw	r20, r18
    3450:	c5 01       	movw	r24, r10
    3452:	b4 01       	movw	r22, r8
    3454:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
    3458:	88 23       	and	r24, r24
    345a:	09 f4       	brne	.+2      	; 0x345e <strtod+0x20a>
    345c:	3e c0       	rjmp	.+124    	; 0x34da <strtod+0x286>
    345e:	d7 ff       	sbrs	r29, 7
    3460:	06 c0       	rjmp	.+12     	; 0x346e <strtod+0x21a>
    3462:	d1 95       	neg	r29
    3464:	c1 95       	neg	r28
    3466:	d1 09       	sbc	r29, r1
    3468:	05 ee       	ldi	r16, 0xE5	; 229
    346a:	12 e0       	ldi	r17, 0x02	; 2
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <strtod+0x21e>
    346e:	0d ef       	ldi	r16, 0xFD	; 253
    3470:	12 e0       	ldi	r17, 0x02	; 2
    3472:	68 01       	movw	r12, r16
    3474:	f8 e1       	ldi	r31, 0x18	; 24
    3476:	cf 1a       	sub	r12, r31
    3478:	d1 08       	sbc	r13, r1
    347a:	90 e2       	ldi	r25, 0x20	; 32
    347c:	e9 2e       	mov	r14, r25
    347e:	f1 2c       	mov	r15, r1
    3480:	ce 15       	cp	r28, r14
    3482:	df 05       	cpc	r29, r15
    3484:	74 f0       	brlt	.+28     	; 0x34a2 <strtod+0x24e>
    3486:	f8 01       	movw	r30, r16
    3488:	25 91       	lpm	r18, Z+
    348a:	35 91       	lpm	r19, Z+
    348c:	45 91       	lpm	r20, Z+
    348e:	54 91       	lpm	r21, Z
    3490:	c5 01       	movw	r24, r10
    3492:	b4 01       	movw	r22, r8
    3494:	0e 94 42 13 	call	0x2684	; 0x2684 <__mulsf3>
    3498:	4b 01       	movw	r8, r22
    349a:	5c 01       	movw	r10, r24
    349c:	ce 19       	sub	r28, r14
    349e:	df 09       	sbc	r29, r15
    34a0:	ef cf       	rjmp	.-34     	; 0x3480 <strtod+0x22c>
    34a2:	04 50       	subi	r16, 0x04	; 4
    34a4:	11 09       	sbc	r17, r1
    34a6:	f5 94       	asr	r15
    34a8:	e7 94       	ror	r14
    34aa:	0c 15       	cp	r16, r12
    34ac:	1d 05       	cpc	r17, r13
    34ae:	41 f7       	brne	.-48     	; 0x3480 <strtod+0x22c>
    34b0:	8a 2d       	mov	r24, r10
    34b2:	88 0f       	add	r24, r24
    34b4:	8b 2d       	mov	r24, r11
    34b6:	88 1f       	adc	r24, r24
    34b8:	8f 3f       	cpi	r24, 0xFF	; 255
    34ba:	49 f0       	breq	.+18     	; 0x34ce <strtod+0x27a>
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	a9 01       	movw	r20, r18
    34c2:	c5 01       	movw	r24, r10
    34c4:	b4 01       	movw	r22, r8
    34c6:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
    34ca:	81 11       	cpse	r24, r1
    34cc:	06 c0       	rjmp	.+12     	; 0x34da <strtod+0x286>
    34ce:	82 e2       	ldi	r24, 0x22	; 34
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	80 93 7a 22 	sts	0x227A, r24	; 0x80227a <errno>
    34d6:	90 93 7b 22 	sts	0x227B, r25	; 0x80227b <errno+0x1>
    34da:	c5 01       	movw	r24, r10
    34dc:	b4 01       	movw	r22, r8
    34de:	09 c0       	rjmp	.+18     	; 0x34f2 <strtod+0x29e>
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	80 e8       	ldi	r24, 0x80	; 128
    34e6:	9f ef       	ldi	r25, 0xFF	; 255
    34e8:	04 c0       	rjmp	.+8      	; 0x34f2 <strtod+0x29e>
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	70 e0       	ldi	r23, 0x00	; 0
    34ee:	80 ec       	ldi	r24, 0xC0	; 192
    34f0:	9f e7       	ldi	r25, 0x7F	; 127
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	df 90       	pop	r13
    3500:	cf 90       	pop	r12
    3502:	bf 90       	pop	r11
    3504:	af 90       	pop	r10
    3506:	9f 90       	pop	r9
    3508:	8f 90       	pop	r8
    350a:	08 95       	ret

0000350c <__ftoa_engine>:
    350c:	28 30       	cpi	r18, 0x08	; 8
    350e:	08 f0       	brcs	.+2      	; 0x3512 <__ftoa_engine+0x6>
    3510:	27 e0       	ldi	r18, 0x07	; 7
    3512:	33 27       	eor	r19, r19
    3514:	da 01       	movw	r26, r20
    3516:	99 0f       	add	r25, r25
    3518:	31 1d       	adc	r19, r1
    351a:	87 fd       	sbrc	r24, 7
    351c:	91 60       	ori	r25, 0x01	; 1
    351e:	00 96       	adiw	r24, 0x00	; 0
    3520:	61 05       	cpc	r22, r1
    3522:	71 05       	cpc	r23, r1
    3524:	39 f4       	brne	.+14     	; 0x3534 <__ftoa_engine+0x28>
    3526:	32 60       	ori	r19, 0x02	; 2
    3528:	2e 5f       	subi	r18, 0xFE	; 254
    352a:	3d 93       	st	X+, r19
    352c:	30 e3       	ldi	r19, 0x30	; 48
    352e:	2a 95       	dec	r18
    3530:	e1 f7       	brne	.-8      	; 0x352a <__ftoa_engine+0x1e>
    3532:	08 95       	ret
    3534:	9f 3f       	cpi	r25, 0xFF	; 255
    3536:	30 f0       	brcs	.+12     	; 0x3544 <__ftoa_engine+0x38>
    3538:	80 38       	cpi	r24, 0x80	; 128
    353a:	71 05       	cpc	r23, r1
    353c:	61 05       	cpc	r22, r1
    353e:	09 f0       	breq	.+2      	; 0x3542 <__ftoa_engine+0x36>
    3540:	3c 5f       	subi	r19, 0xFC	; 252
    3542:	3c 5f       	subi	r19, 0xFC	; 252
    3544:	3d 93       	st	X+, r19
    3546:	91 30       	cpi	r25, 0x01	; 1
    3548:	08 f0       	brcs	.+2      	; 0x354c <__ftoa_engine+0x40>
    354a:	80 68       	ori	r24, 0x80	; 128
    354c:	91 1d       	adc	r25, r1
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	1f 93       	push	r17
    3554:	0f 93       	push	r16
    3556:	ff 92       	push	r15
    3558:	ef 92       	push	r14
    355a:	19 2f       	mov	r17, r25
    355c:	98 7f       	andi	r25, 0xF8	; 248
    355e:	96 95       	lsr	r25
    3560:	e9 2f       	mov	r30, r25
    3562:	96 95       	lsr	r25
    3564:	96 95       	lsr	r25
    3566:	e9 0f       	add	r30, r25
    3568:	ff 27       	eor	r31, r31
    356a:	e5 5a       	subi	r30, 0xA5	; 165
    356c:	fc 4f       	sbci	r31, 0xFC	; 252
    356e:	99 27       	eor	r25, r25
    3570:	33 27       	eor	r19, r19
    3572:	ee 24       	eor	r14, r14
    3574:	ff 24       	eor	r15, r15
    3576:	a7 01       	movw	r20, r14
    3578:	e7 01       	movw	r28, r14
    357a:	05 90       	lpm	r0, Z+
    357c:	08 94       	sec
    357e:	07 94       	ror	r0
    3580:	28 f4       	brcc	.+10     	; 0x358c <__ftoa_engine+0x80>
    3582:	36 0f       	add	r19, r22
    3584:	e7 1e       	adc	r14, r23
    3586:	f8 1e       	adc	r15, r24
    3588:	49 1f       	adc	r20, r25
    358a:	51 1d       	adc	r21, r1
    358c:	66 0f       	add	r22, r22
    358e:	77 1f       	adc	r23, r23
    3590:	88 1f       	adc	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	06 94       	lsr	r0
    3596:	a1 f7       	brne	.-24     	; 0x3580 <__ftoa_engine+0x74>
    3598:	05 90       	lpm	r0, Z+
    359a:	07 94       	ror	r0
    359c:	28 f4       	brcc	.+10     	; 0x35a8 <__ftoa_engine+0x9c>
    359e:	e7 0e       	add	r14, r23
    35a0:	f8 1e       	adc	r15, r24
    35a2:	49 1f       	adc	r20, r25
    35a4:	56 1f       	adc	r21, r22
    35a6:	c1 1d       	adc	r28, r1
    35a8:	77 0f       	add	r23, r23
    35aa:	88 1f       	adc	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	66 1f       	adc	r22, r22
    35b0:	06 94       	lsr	r0
    35b2:	a1 f7       	brne	.-24     	; 0x359c <__ftoa_engine+0x90>
    35b4:	05 90       	lpm	r0, Z+
    35b6:	07 94       	ror	r0
    35b8:	28 f4       	brcc	.+10     	; 0x35c4 <__ftoa_engine+0xb8>
    35ba:	f8 0e       	add	r15, r24
    35bc:	49 1f       	adc	r20, r25
    35be:	56 1f       	adc	r21, r22
    35c0:	c7 1f       	adc	r28, r23
    35c2:	d1 1d       	adc	r29, r1
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	66 1f       	adc	r22, r22
    35ca:	77 1f       	adc	r23, r23
    35cc:	06 94       	lsr	r0
    35ce:	a1 f7       	brne	.-24     	; 0x35b8 <__ftoa_engine+0xac>
    35d0:	05 90       	lpm	r0, Z+
    35d2:	07 94       	ror	r0
    35d4:	20 f4       	brcc	.+8      	; 0x35de <__ftoa_engine+0xd2>
    35d6:	49 0f       	add	r20, r25
    35d8:	56 1f       	adc	r21, r22
    35da:	c7 1f       	adc	r28, r23
    35dc:	d8 1f       	adc	r29, r24
    35de:	99 0f       	add	r25, r25
    35e0:	66 1f       	adc	r22, r22
    35e2:	77 1f       	adc	r23, r23
    35e4:	88 1f       	adc	r24, r24
    35e6:	06 94       	lsr	r0
    35e8:	a9 f7       	brne	.-22     	; 0x35d4 <__ftoa_engine+0xc8>
    35ea:	84 91       	lpm	r24, Z
    35ec:	10 95       	com	r17
    35ee:	17 70       	andi	r17, 0x07	; 7
    35f0:	41 f0       	breq	.+16     	; 0x3602 <__ftoa_engine+0xf6>
    35f2:	d6 95       	lsr	r29
    35f4:	c7 95       	ror	r28
    35f6:	57 95       	ror	r21
    35f8:	47 95       	ror	r20
    35fa:	f7 94       	ror	r15
    35fc:	e7 94       	ror	r14
    35fe:	1a 95       	dec	r17
    3600:	c1 f7       	brne	.-16     	; 0x35f2 <__ftoa_engine+0xe6>
    3602:	e1 e0       	ldi	r30, 0x01	; 1
    3604:	f3 e0       	ldi	r31, 0x03	; 3
    3606:	68 94       	set
    3608:	15 90       	lpm	r1, Z+
    360a:	15 91       	lpm	r17, Z+
    360c:	35 91       	lpm	r19, Z+
    360e:	65 91       	lpm	r22, Z+
    3610:	95 91       	lpm	r25, Z+
    3612:	05 90       	lpm	r0, Z+
    3614:	7f e2       	ldi	r23, 0x2F	; 47
    3616:	73 95       	inc	r23
    3618:	e1 18       	sub	r14, r1
    361a:	f1 0a       	sbc	r15, r17
    361c:	43 0b       	sbc	r20, r19
    361e:	56 0b       	sbc	r21, r22
    3620:	c9 0b       	sbc	r28, r25
    3622:	d0 09       	sbc	r29, r0
    3624:	c0 f7       	brcc	.-16     	; 0x3616 <__ftoa_engine+0x10a>
    3626:	e1 0c       	add	r14, r1
    3628:	f1 1e       	adc	r15, r17
    362a:	43 1f       	adc	r20, r19
    362c:	56 1f       	adc	r21, r22
    362e:	c9 1f       	adc	r28, r25
    3630:	d0 1d       	adc	r29, r0
    3632:	7e f4       	brtc	.+30     	; 0x3652 <__ftoa_engine+0x146>
    3634:	70 33       	cpi	r23, 0x30	; 48
    3636:	11 f4       	brne	.+4      	; 0x363c <__ftoa_engine+0x130>
    3638:	8a 95       	dec	r24
    363a:	e6 cf       	rjmp	.-52     	; 0x3608 <__ftoa_engine+0xfc>
    363c:	e8 94       	clt
    363e:	01 50       	subi	r16, 0x01	; 1
    3640:	30 f0       	brcs	.+12     	; 0x364e <__ftoa_engine+0x142>
    3642:	08 0f       	add	r16, r24
    3644:	0a f4       	brpl	.+2      	; 0x3648 <__ftoa_engine+0x13c>
    3646:	00 27       	eor	r16, r16
    3648:	02 17       	cp	r16, r18
    364a:	08 f4       	brcc	.+2      	; 0x364e <__ftoa_engine+0x142>
    364c:	20 2f       	mov	r18, r16
    364e:	23 95       	inc	r18
    3650:	02 2f       	mov	r16, r18
    3652:	7a 33       	cpi	r23, 0x3A	; 58
    3654:	28 f0       	brcs	.+10     	; 0x3660 <__ftoa_engine+0x154>
    3656:	79 e3       	ldi	r23, 0x39	; 57
    3658:	7d 93       	st	X+, r23
    365a:	2a 95       	dec	r18
    365c:	e9 f7       	brne	.-6      	; 0x3658 <__ftoa_engine+0x14c>
    365e:	10 c0       	rjmp	.+32     	; 0x3680 <__ftoa_engine+0x174>
    3660:	7d 93       	st	X+, r23
    3662:	2a 95       	dec	r18
    3664:	89 f6       	brne	.-94     	; 0x3608 <__ftoa_engine+0xfc>
    3666:	06 94       	lsr	r0
    3668:	97 95       	ror	r25
    366a:	67 95       	ror	r22
    366c:	37 95       	ror	r19
    366e:	17 95       	ror	r17
    3670:	17 94       	ror	r1
    3672:	e1 18       	sub	r14, r1
    3674:	f1 0a       	sbc	r15, r17
    3676:	43 0b       	sbc	r20, r19
    3678:	56 0b       	sbc	r21, r22
    367a:	c9 0b       	sbc	r28, r25
    367c:	d0 09       	sbc	r29, r0
    367e:	98 f0       	brcs	.+38     	; 0x36a6 <__ftoa_engine+0x19a>
    3680:	23 95       	inc	r18
    3682:	7e 91       	ld	r23, -X
    3684:	73 95       	inc	r23
    3686:	7a 33       	cpi	r23, 0x3A	; 58
    3688:	08 f0       	brcs	.+2      	; 0x368c <__ftoa_engine+0x180>
    368a:	70 e3       	ldi	r23, 0x30	; 48
    368c:	7c 93       	st	X, r23
    368e:	20 13       	cpse	r18, r16
    3690:	b8 f7       	brcc	.-18     	; 0x3680 <__ftoa_engine+0x174>
    3692:	7e 91       	ld	r23, -X
    3694:	70 61       	ori	r23, 0x10	; 16
    3696:	7d 93       	st	X+, r23
    3698:	30 f0       	brcs	.+12     	; 0x36a6 <__ftoa_engine+0x19a>
    369a:	83 95       	inc	r24
    369c:	71 e3       	ldi	r23, 0x31	; 49
    369e:	7d 93       	st	X+, r23
    36a0:	70 e3       	ldi	r23, 0x30	; 48
    36a2:	2a 95       	dec	r18
    36a4:	e1 f7       	brne	.-8      	; 0x369e <__ftoa_engine+0x192>
    36a6:	11 24       	eor	r1, r1
    36a8:	ef 90       	pop	r14
    36aa:	ff 90       	pop	r15
    36ac:	0f 91       	pop	r16
    36ae:	1f 91       	pop	r17
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	99 27       	eor	r25, r25
    36b6:	87 fd       	sbrc	r24, 7
    36b8:	90 95       	com	r25
    36ba:	08 95       	ret

000036bc <isspace>:
    36bc:	91 11       	cpse	r25, r1
    36be:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__ctype_isfalse>
    36c2:	80 32       	cpi	r24, 0x20	; 32
    36c4:	19 f0       	breq	.+6      	; 0x36cc <isspace+0x10>
    36c6:	89 50       	subi	r24, 0x09	; 9
    36c8:	85 50       	subi	r24, 0x05	; 5
    36ca:	c8 f7       	brcc	.-14     	; 0x36be <isspace+0x2>
    36cc:	08 95       	ret

000036ce <strncasecmp_P>:
    36ce:	fb 01       	movw	r30, r22
    36d0:	dc 01       	movw	r26, r24
    36d2:	41 50       	subi	r20, 0x01	; 1
    36d4:	50 40       	sbci	r21, 0x00	; 0
    36d6:	88 f0       	brcs	.+34     	; 0x36fa <strncasecmp_P+0x2c>
    36d8:	8d 91       	ld	r24, X+
    36da:	81 34       	cpi	r24, 0x41	; 65
    36dc:	1c f0       	brlt	.+6      	; 0x36e4 <strncasecmp_P+0x16>
    36de:	8b 35       	cpi	r24, 0x5B	; 91
    36e0:	0c f4       	brge	.+2      	; 0x36e4 <strncasecmp_P+0x16>
    36e2:	80 5e       	subi	r24, 0xE0	; 224
    36e4:	65 91       	lpm	r22, Z+
    36e6:	61 34       	cpi	r22, 0x41	; 65
    36e8:	1c f0       	brlt	.+6      	; 0x36f0 <strncasecmp_P+0x22>
    36ea:	6b 35       	cpi	r22, 0x5B	; 91
    36ec:	0c f4       	brge	.+2      	; 0x36f0 <strncasecmp_P+0x22>
    36ee:	60 5e       	subi	r22, 0xE0	; 224
    36f0:	86 1b       	sub	r24, r22
    36f2:	61 11       	cpse	r22, r1
    36f4:	71 f3       	breq	.-36     	; 0x36d2 <strncasecmp_P+0x4>
    36f6:	99 0b       	sbc	r25, r25
    36f8:	08 95       	ret
    36fa:	88 1b       	sub	r24, r24
    36fc:	fc cf       	rjmp	.-8      	; 0x36f6 <strncasecmp_P+0x28>

000036fe <strnlen_P>:
    36fe:	fc 01       	movw	r30, r24
    3700:	05 90       	lpm	r0, Z+
    3702:	61 50       	subi	r22, 0x01	; 1
    3704:	70 40       	sbci	r23, 0x00	; 0
    3706:	01 10       	cpse	r0, r1
    3708:	d8 f7       	brcc	.-10     	; 0x3700 <strnlen_P+0x2>
    370a:	80 95       	com	r24
    370c:	90 95       	com	r25
    370e:	8e 0f       	add	r24, r30
    3710:	9f 1f       	adc	r25, r31
    3712:	08 95       	ret

00003714 <memset>:
    3714:	dc 01       	movw	r26, r24
    3716:	01 c0       	rjmp	.+2      	; 0x371a <memset+0x6>
    3718:	6d 93       	st	X+, r22
    371a:	41 50       	subi	r20, 0x01	; 1
    371c:	50 40       	sbci	r21, 0x00	; 0
    371e:	e0 f7       	brcc	.-8      	; 0x3718 <memset+0x4>
    3720:	08 95       	ret

00003722 <strcpy>:
    3722:	fb 01       	movw	r30, r22
    3724:	dc 01       	movw	r26, r24
    3726:	01 90       	ld	r0, Z+
    3728:	0d 92       	st	X+, r0
    372a:	00 20       	and	r0, r0
    372c:	e1 f7       	brne	.-8      	; 0x3726 <strcpy+0x4>
    372e:	08 95       	ret

00003730 <strnlen>:
    3730:	fc 01       	movw	r30, r24
    3732:	61 50       	subi	r22, 0x01	; 1
    3734:	70 40       	sbci	r23, 0x00	; 0
    3736:	01 90       	ld	r0, Z+
    3738:	01 10       	cpse	r0, r1
    373a:	d8 f7       	brcc	.-10     	; 0x3732 <strnlen+0x2>
    373c:	80 95       	com	r24
    373e:	90 95       	com	r25
    3740:	8e 0f       	add	r24, r30
    3742:	9f 1f       	adc	r25, r31
    3744:	08 95       	ret

00003746 <fputc>:
    3746:	0f 93       	push	r16
    3748:	1f 93       	push	r17
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	fb 01       	movw	r30, r22
    3750:	23 81       	ldd	r18, Z+3	; 0x03
    3752:	21 fd       	sbrc	r18, 1
    3754:	03 c0       	rjmp	.+6      	; 0x375c <fputc+0x16>
    3756:	8f ef       	ldi	r24, 0xFF	; 255
    3758:	9f ef       	ldi	r25, 0xFF	; 255
    375a:	2c c0       	rjmp	.+88     	; 0x37b4 <fputc+0x6e>
    375c:	22 ff       	sbrs	r18, 2
    375e:	16 c0       	rjmp	.+44     	; 0x378c <fputc+0x46>
    3760:	46 81       	ldd	r20, Z+6	; 0x06
    3762:	57 81       	ldd	r21, Z+7	; 0x07
    3764:	24 81       	ldd	r18, Z+4	; 0x04
    3766:	35 81       	ldd	r19, Z+5	; 0x05
    3768:	42 17       	cp	r20, r18
    376a:	53 07       	cpc	r21, r19
    376c:	44 f4       	brge	.+16     	; 0x377e <fputc+0x38>
    376e:	a0 81       	ld	r26, Z
    3770:	b1 81       	ldd	r27, Z+1	; 0x01
    3772:	9d 01       	movw	r18, r26
    3774:	2f 5f       	subi	r18, 0xFF	; 255
    3776:	3f 4f       	sbci	r19, 0xFF	; 255
    3778:	20 83       	st	Z, r18
    377a:	31 83       	std	Z+1, r19	; 0x01
    377c:	8c 93       	st	X, r24
    377e:	26 81       	ldd	r18, Z+6	; 0x06
    3780:	37 81       	ldd	r19, Z+7	; 0x07
    3782:	2f 5f       	subi	r18, 0xFF	; 255
    3784:	3f 4f       	sbci	r19, 0xFF	; 255
    3786:	26 83       	std	Z+6, r18	; 0x06
    3788:	37 83       	std	Z+7, r19	; 0x07
    378a:	14 c0       	rjmp	.+40     	; 0x37b4 <fputc+0x6e>
    378c:	8b 01       	movw	r16, r22
    378e:	ec 01       	movw	r28, r24
    3790:	fb 01       	movw	r30, r22
    3792:	00 84       	ldd	r0, Z+8	; 0x08
    3794:	f1 85       	ldd	r31, Z+9	; 0x09
    3796:	e0 2d       	mov	r30, r0
    3798:	19 95       	eicall
    379a:	89 2b       	or	r24, r25
    379c:	e1 f6       	brne	.-72     	; 0x3756 <fputc+0x10>
    379e:	d8 01       	movw	r26, r16
    37a0:	16 96       	adiw	r26, 0x06	; 6
    37a2:	8d 91       	ld	r24, X+
    37a4:	9c 91       	ld	r25, X
    37a6:	17 97       	sbiw	r26, 0x07	; 7
    37a8:	01 96       	adiw	r24, 0x01	; 1
    37aa:	16 96       	adiw	r26, 0x06	; 6
    37ac:	8d 93       	st	X+, r24
    37ae:	9c 93       	st	X, r25
    37b0:	17 97       	sbiw	r26, 0x07	; 7
    37b2:	ce 01       	movw	r24, r28
    37b4:	df 91       	pop	r29
    37b6:	cf 91       	pop	r28
    37b8:	1f 91       	pop	r17
    37ba:	0f 91       	pop	r16
    37bc:	08 95       	ret

000037be <snprintf>:
    37be:	0f 93       	push	r16
    37c0:	1f 93       	push	r17
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	2e 97       	sbiw	r28, 0x0e	; 14
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	de bf       	out	0x3e, r29	; 62
    37d0:	0e 89       	ldd	r16, Y+22	; 0x16
    37d2:	1f 89       	ldd	r17, Y+23	; 0x17
    37d4:	88 8d       	ldd	r24, Y+24	; 0x18
    37d6:	99 8d       	ldd	r25, Y+25	; 0x19
    37d8:	26 e0       	ldi	r18, 0x06	; 6
    37da:	2c 83       	std	Y+4, r18	; 0x04
    37dc:	09 83       	std	Y+1, r16	; 0x01
    37de:	1a 83       	std	Y+2, r17	; 0x02
    37e0:	97 ff       	sbrs	r25, 7
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <snprintf+0x2a>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e8       	ldi	r25, 0x80	; 128
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    37ec:	9e 83       	std	Y+6, r25	; 0x06
    37ee:	ae 01       	movw	r20, r28
    37f0:	44 5e       	subi	r20, 0xE4	; 228
    37f2:	5f 4f       	sbci	r21, 0xFF	; 255
    37f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    37f6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    37f8:	ce 01       	movw	r24, r28
    37fa:	01 96       	adiw	r24, 0x01	; 1
    37fc:	0e 94 81 15 	call	0x2b02	; 0x2b02 <vfprintf>
    3800:	4d 81       	ldd	r20, Y+5	; 0x05
    3802:	5e 81       	ldd	r21, Y+6	; 0x06
    3804:	57 fd       	sbrc	r21, 7
    3806:	0a c0       	rjmp	.+20     	; 0x381c <snprintf+0x5e>
    3808:	2f 81       	ldd	r18, Y+7	; 0x07
    380a:	38 85       	ldd	r19, Y+8	; 0x08
    380c:	42 17       	cp	r20, r18
    380e:	53 07       	cpc	r21, r19
    3810:	0c f4       	brge	.+2      	; 0x3814 <snprintf+0x56>
    3812:	9a 01       	movw	r18, r20
    3814:	f8 01       	movw	r30, r16
    3816:	e2 0f       	add	r30, r18
    3818:	f3 1f       	adc	r31, r19
    381a:	10 82       	st	Z, r1
    381c:	2e 96       	adiw	r28, 0x0e	; 14
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	df 91       	pop	r29
    3824:	cf 91       	pop	r28
    3826:	1f 91       	pop	r17
    3828:	0f 91       	pop	r16
    382a:	08 95       	ret

0000382c <__ultoa_invert>:
    382c:	fa 01       	movw	r30, r20
    382e:	aa 27       	eor	r26, r26
    3830:	28 30       	cpi	r18, 0x08	; 8
    3832:	51 f1       	breq	.+84     	; 0x3888 <__ultoa_invert+0x5c>
    3834:	20 31       	cpi	r18, 0x10	; 16
    3836:	81 f1       	breq	.+96     	; 0x3898 <__ultoa_invert+0x6c>
    3838:	e8 94       	clt
    383a:	6f 93       	push	r22
    383c:	6e 7f       	andi	r22, 0xFE	; 254
    383e:	6e 5f       	subi	r22, 0xFE	; 254
    3840:	7f 4f       	sbci	r23, 0xFF	; 255
    3842:	8f 4f       	sbci	r24, 0xFF	; 255
    3844:	9f 4f       	sbci	r25, 0xFF	; 255
    3846:	af 4f       	sbci	r26, 0xFF	; 255
    3848:	b1 e0       	ldi	r27, 0x01	; 1
    384a:	3e d0       	rcall	.+124    	; 0x38c8 <__ultoa_invert+0x9c>
    384c:	b4 e0       	ldi	r27, 0x04	; 4
    384e:	3c d0       	rcall	.+120    	; 0x38c8 <__ultoa_invert+0x9c>
    3850:	67 0f       	add	r22, r23
    3852:	78 1f       	adc	r23, r24
    3854:	89 1f       	adc	r24, r25
    3856:	9a 1f       	adc	r25, r26
    3858:	a1 1d       	adc	r26, r1
    385a:	68 0f       	add	r22, r24
    385c:	79 1f       	adc	r23, r25
    385e:	8a 1f       	adc	r24, r26
    3860:	91 1d       	adc	r25, r1
    3862:	a1 1d       	adc	r26, r1
    3864:	6a 0f       	add	r22, r26
    3866:	71 1d       	adc	r23, r1
    3868:	81 1d       	adc	r24, r1
    386a:	91 1d       	adc	r25, r1
    386c:	a1 1d       	adc	r26, r1
    386e:	20 d0       	rcall	.+64     	; 0x38b0 <__ultoa_invert+0x84>
    3870:	09 f4       	brne	.+2      	; 0x3874 <__ultoa_invert+0x48>
    3872:	68 94       	set
    3874:	3f 91       	pop	r19
    3876:	2a e0       	ldi	r18, 0x0A	; 10
    3878:	26 9f       	mul	r18, r22
    387a:	11 24       	eor	r1, r1
    387c:	30 19       	sub	r19, r0
    387e:	30 5d       	subi	r19, 0xD0	; 208
    3880:	31 93       	st	Z+, r19
    3882:	de f6       	brtc	.-74     	; 0x383a <__ultoa_invert+0xe>
    3884:	cf 01       	movw	r24, r30
    3886:	08 95       	ret
    3888:	46 2f       	mov	r20, r22
    388a:	47 70       	andi	r20, 0x07	; 7
    388c:	40 5d       	subi	r20, 0xD0	; 208
    388e:	41 93       	st	Z+, r20
    3890:	b3 e0       	ldi	r27, 0x03	; 3
    3892:	0f d0       	rcall	.+30     	; 0x38b2 <__ultoa_invert+0x86>
    3894:	c9 f7       	brne	.-14     	; 0x3888 <__ultoa_invert+0x5c>
    3896:	f6 cf       	rjmp	.-20     	; 0x3884 <__ultoa_invert+0x58>
    3898:	46 2f       	mov	r20, r22
    389a:	4f 70       	andi	r20, 0x0F	; 15
    389c:	40 5d       	subi	r20, 0xD0	; 208
    389e:	4a 33       	cpi	r20, 0x3A	; 58
    38a0:	18 f0       	brcs	.+6      	; 0x38a8 <__ultoa_invert+0x7c>
    38a2:	49 5d       	subi	r20, 0xD9	; 217
    38a4:	31 fd       	sbrc	r19, 1
    38a6:	40 52       	subi	r20, 0x20	; 32
    38a8:	41 93       	st	Z+, r20
    38aa:	02 d0       	rcall	.+4      	; 0x38b0 <__ultoa_invert+0x84>
    38ac:	a9 f7       	brne	.-22     	; 0x3898 <__ultoa_invert+0x6c>
    38ae:	ea cf       	rjmp	.-44     	; 0x3884 <__ultoa_invert+0x58>
    38b0:	b4 e0       	ldi	r27, 0x04	; 4
    38b2:	a6 95       	lsr	r26
    38b4:	97 95       	ror	r25
    38b6:	87 95       	ror	r24
    38b8:	77 95       	ror	r23
    38ba:	67 95       	ror	r22
    38bc:	ba 95       	dec	r27
    38be:	c9 f7       	brne	.-14     	; 0x38b2 <__ultoa_invert+0x86>
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	61 05       	cpc	r22, r1
    38c4:	71 05       	cpc	r23, r1
    38c6:	08 95       	ret
    38c8:	9b 01       	movw	r18, r22
    38ca:	ac 01       	movw	r20, r24
    38cc:	0a 2e       	mov	r0, r26
    38ce:	06 94       	lsr	r0
    38d0:	57 95       	ror	r21
    38d2:	47 95       	ror	r20
    38d4:	37 95       	ror	r19
    38d6:	27 95       	ror	r18
    38d8:	ba 95       	dec	r27
    38da:	c9 f7       	brne	.-14     	; 0x38ce <__ultoa_invert+0xa2>
    38dc:	62 0f       	add	r22, r18
    38de:	73 1f       	adc	r23, r19
    38e0:	84 1f       	adc	r24, r20
    38e2:	95 1f       	adc	r25, r21
    38e4:	a0 1d       	adc	r26, r0
    38e6:	08 95       	ret

000038e8 <__ctype_isfalse>:
    38e8:	99 27       	eor	r25, r25
    38ea:	88 27       	eor	r24, r24

000038ec <__ctype_istrue>:
    38ec:	08 95       	ret

000038ee <__muluhisi3>:
    38ee:	0e 94 82 1c 	call	0x3904	; 0x3904 <__umulhisi3>
    38f2:	a5 9f       	mul	r26, r21
    38f4:	90 0d       	add	r25, r0
    38f6:	b4 9f       	mul	r27, r20
    38f8:	90 0d       	add	r25, r0
    38fa:	a4 9f       	mul	r26, r20
    38fc:	80 0d       	add	r24, r0
    38fe:	91 1d       	adc	r25, r1
    3900:	11 24       	eor	r1, r1
    3902:	08 95       	ret

00003904 <__umulhisi3>:
    3904:	a2 9f       	mul	r26, r18
    3906:	b0 01       	movw	r22, r0
    3908:	b3 9f       	mul	r27, r19
    390a:	c0 01       	movw	r24, r0
    390c:	a3 9f       	mul	r26, r19
    390e:	70 0d       	add	r23, r0
    3910:	81 1d       	adc	r24, r1
    3912:	11 24       	eor	r1, r1
    3914:	91 1d       	adc	r25, r1
    3916:	b2 9f       	mul	r27, r18
    3918:	70 0d       	add	r23, r0
    391a:	81 1d       	adc	r24, r1
    391c:	11 24       	eor	r1, r1
    391e:	91 1d       	adc	r25, r1
    3920:	08 95       	ret

00003922 <_exit>:
    3922:	f8 94       	cli

00003924 <__stop_program>:
    3924:	ff cf       	rjmp	.-2      	; 0x3924 <__stop_program>
