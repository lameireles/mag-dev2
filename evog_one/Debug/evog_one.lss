
evog_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000328e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000248  00802000  0000328e  00003322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  00802248  00802248  0000356a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000356a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000788  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fc61  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041a2  00000000  00000000  000139f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fb9  00000000  00000000  00017b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001248  00000000  00000000  0001ab4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000685a  00000000  00000000  0001bd94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059c9  00000000  00000000  000225ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000778  00000000  00000000  00027fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c0 01 	jmp	0x380	; 0x380 <__ctors_end>
       4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      30:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      38:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_14>
      3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      40:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      54:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      68:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      6c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      70:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_28>
      74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      7c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      84:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      8c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      90:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      94:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      98:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      9c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      ac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      b0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      b4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      b8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      bc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      c0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      c4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      cc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      d0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      d4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      d8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      dc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      e0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      e4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      e8:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_58>
      ec:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      f0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      f4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      f8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      fc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     100:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     104:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     108:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     10c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     110:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     114:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     118:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     11c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_71>
     120:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_72>
     124:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_73>
     128:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_74>
     12c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     130:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     134:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     138:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     13c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     140:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     144:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     148:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     14c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     150:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     154:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     158:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     15c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     160:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     164:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     168:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     16c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     170:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     174:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     178:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     17c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     180:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     184:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     188:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     18c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     190:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     194:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     198:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     19c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1a0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1a4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1a8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1ac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1b0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1b4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1b8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1bc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1c0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1c4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1cc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1d0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1d4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1d8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1dc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1e0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1e4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1e8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1ec:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1f0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1f4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1f8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <_ZN9Ms5525dso7readADCEv+0x4a>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	6e 61       	ori	r22, 0x1E	; 30
     280:	6e 00       	.word	0x006e	; ????

00000282 <__c.2332>:
     282:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     292:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2a2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2b2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2c2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2d2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2e2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2f2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     302:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     312:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     322:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     332:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     342:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     352:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     362:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     372:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000380 <__ctors_end>:
     380:	11 24       	eor	r1, r1
     382:	1f be       	out	0x3f, r1	; 63
     384:	cf ef       	ldi	r28, 0xFF	; 255
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df e3       	ldi	r29, 0x3F	; 63
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	0c bf       	out	0x3c, r16	; 60
     390:	18 be       	out	0x38, r1	; 56
     392:	19 be       	out	0x39, r1	; 57
     394:	1a be       	out	0x3a, r1	; 58
     396:	1b be       	out	0x3b, r1	; 59

00000398 <__do_copy_data>:
     398:	12 e2       	ldi	r17, 0x22	; 34
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e2       	ldi	r27, 0x20	; 32
     39e:	ee e8       	ldi	r30, 0x8E	; 142
     3a0:	f2 e3       	ldi	r31, 0x32	; 50
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0b bf       	out	0x3b, r16	; 59
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <__do_copy_data+0x14>
     3a8:	07 90       	elpm	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	a8 34       	cpi	r26, 0x48	; 72
     3ae:	b1 07       	cpc	r27, r17
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <__do_copy_data+0x10>
     3b2:	1b be       	out	0x3b, r1	; 59

000003b4 <__do_clear_bss>:
     3b4:	22 e2       	ldi	r18, 0x22	; 34
     3b6:	a8 e4       	ldi	r26, 0x48	; 72
     3b8:	b2 e2       	ldi	r27, 0x22	; 34
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	a0 3a       	cpi	r26, 0xA0	; 160
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <main>
     3c8:	0c 94 45 19 	jmp	0x328a	; 0x328a <_exit>

000003cc <__bad_interrupt>:
     3cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d0 <__vector_71>:
	}
}

void Adca::flush()
{
	ADCA_CTRLA |= ADC_FLUSH_bm;
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	08 b6       	in	r0, 0x38	; 56
     3dc:	0f 92       	push	r0
     3de:	18 be       	out	0x38, r1	; 56
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 93 53 22 	sts	0x2253, r24	; 0x802253 <_ZN4Adca7ch0flagE>
     3ea:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     3ee:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     3f2:	80 93 4e 22 	sts	0x224E, r24	; 0x80224e <_ZN4Adca3ch0E>
     3f6:	90 93 4f 22 	sts	0x224F, r25	; 0x80224f <_ZN4Adca3ch0E+0x1>
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	0f 90       	pop	r0
     400:	08 be       	out	0x38, r0	; 56
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_72>:
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	08 b6       	in	r0, 0x38	; 56
     418:	0f 92       	push	r0
     41a:	18 be       	out	0x38, r1	; 56
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	80 93 52 22 	sts	0x2252, r24	; 0x802252 <_ZN4Adca7ch1flagE>
     426:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     42a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     42e:	80 93 4c 22 	sts	0x224C, r24	; 0x80224c <_ZN4Adca3ch1E>
     432:	90 93 4d 22 	sts	0x224D, r25	; 0x80224d <_ZN4Adca3ch1E+0x1>
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	0f 90       	pop	r0
     43c:	08 be       	out	0x38, r0	; 56
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_73>:
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	08 b6       	in	r0, 0x38	; 56
     454:	0f 92       	push	r0
     456:	18 be       	out	0x38, r1	; 56
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 51 22 	sts	0x2251, r24	; 0x802251 <_ZN4Adca7ch2flagE>
     462:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     466:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     46a:	80 93 4a 22 	sts	0x224A, r24	; 0x80224a <_ZN4Adca3ch2E>
     46e:	90 93 4b 22 	sts	0x224B, r25	; 0x80224b <_ZN4Adca3ch2E+0x1>
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	08 be       	out	0x38, r0	; 56
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_74>:
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1
     48e:	08 b6       	in	r0, 0x38	; 56
     490:	0f 92       	push	r0
     492:	18 be       	out	0x38, r1	; 56
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 50 22 	sts	0x2250, r24	; 0x802250 <_ZN4Adca7ch3flagE>
     49e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     4a2:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     4a6:	80 93 48 22 	sts	0x2248, r24	; 0x802248 <__data_end>
     4aa:	90 93 49 22 	sts	0x2249, r25	; 0x802249 <__data_end+0x1>
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	0f 90       	pop	r0
     4b4:	08 be       	out	0x38, r0	; 56
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <_ZN4Adca21startSingleConversionENS_9channel_eE>:
     4c0:	61 30       	cpi	r22, 0x01	; 1
     4c2:	61 f0       	breq	.+24     	; 0x4dc <_ZN4Adca21startSingleConversionENS_9channel_eE+0x1c>
     4c4:	28 f0       	brcs	.+10     	; 0x4d0 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x10>
     4c6:	62 30       	cpi	r22, 0x02	; 2
     4c8:	79 f0       	breq	.+30     	; 0x4e8 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x28>
     4ca:	63 30       	cpi	r22, 0x03	; 3
     4cc:	99 f0       	breq	.+38     	; 0x4f4 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x34>
     4ce:	08 95       	ret
     4d0:	10 92 53 22 	sts	0x2253, r1	; 0x802253 <_ZN4Adca7ch0flagE>
     4d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4d8:	84 60       	ori	r24, 0x04	; 4
     4da:	11 c0       	rjmp	.+34     	; 0x4fe <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     4dc:	10 92 52 22 	sts	0x2252, r1	; 0x802252 <_ZN4Adca7ch1flagE>
     4e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4e4:	88 60       	ori	r24, 0x08	; 8
     4e6:	0b c0       	rjmp	.+22     	; 0x4fe <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     4e8:	10 92 51 22 	sts	0x2251, r1	; 0x802251 <_ZN4Adca7ch2flagE>
     4ec:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4f0:	80 61       	ori	r24, 0x10	; 16
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     4f4:	10 92 50 22 	sts	0x2250, r1	; 0x802250 <_ZN4Adca7ch3flagE>
     4f8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4fc:	80 62       	ori	r24, 0x20	; 32
     4fe:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     502:	08 95       	ret

00000504 <_ZN4Adca14waitConversionENS_9channel_eE>:
}

void Adca::waitConversion(channel_e channel)
{
	switch (channel) {
     504:	61 30       	cpi	r22, 0x01	; 1
     506:	59 f0       	breq	.+22     	; 0x51e <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     508:	28 f0       	brcs	.+10     	; 0x514 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     50a:	62 30       	cpi	r22, 0x02	; 2
     50c:	69 f0       	breq	.+26     	; 0x528 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     50e:	63 30       	cpi	r22, 0x03	; 3
     510:	81 f0       	breq	.+32     	; 0x532 <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     512:	08 95       	ret
		case CH_0: while (!ch0flag) ; break;
     514:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <_ZN4Adca7ch0flagE>
     518:	88 23       	and	r24, r24
     51a:	e1 f3       	breq	.-8      	; 0x514 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     51c:	08 95       	ret
		case CH_1: while (!ch1flag) ; break;
     51e:	80 91 52 22 	lds	r24, 0x2252	; 0x802252 <_ZN4Adca7ch1flagE>
     522:	88 23       	and	r24, r24
     524:	e1 f3       	breq	.-8      	; 0x51e <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     526:	08 95       	ret
		case CH_2: while (!ch2flag) ; break;
     528:	80 91 51 22 	lds	r24, 0x2251	; 0x802251 <_ZN4Adca7ch2flagE>
     52c:	88 23       	and	r24, r24
     52e:	e1 f3       	breq	.-8      	; 0x528 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     530:	08 95       	ret
		case CH_3: while (!ch3flag) ; break;
     532:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <_ZN4Adca7ch3flagE>
     536:	88 23       	and	r24, r24
     538:	e1 f3       	breq	.-8      	; 0x532 <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     53a:	08 95       	ret

0000053c <_ZN4Adca11readChannelENS_9channel_eE>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

uint16_t Adca::readChannel(channel_e channel)
{
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	8c 01       	movw	r16, r24
     544:	c6 2f       	mov	r28, r22
	startSingleConversion(channel);
     546:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN4Adca21startSingleConversionENS_9channel_eE>
	waitConversion(channel);
     54a:	6c 2f       	mov	r22, r28
     54c:	c8 01       	movw	r24, r16
     54e:	0e 94 82 02 	call	0x504	; 0x504 <_ZN4Adca14waitConversionENS_9channel_eE>
	switch (channel) {
     552:	c1 30       	cpi	r28, 0x01	; 1
     554:	79 f0       	breq	.+30     	; 0x574 <_ZN4Adca11readChannelENS_9channel_eE+0x38>
     556:	48 f0       	brcs	.+18     	; 0x56a <_ZN4Adca11readChannelENS_9channel_eE+0x2e>
     558:	c2 30       	cpi	r28, 0x02	; 2
     55a:	89 f0       	breq	.+34     	; 0x57e <_ZN4Adca11readChannelENS_9channel_eE+0x42>
     55c:	c3 30       	cpi	r28, 0x03	; 3
     55e:	a1 f4       	brne	.+40     	; 0x588 <_ZN4Adca11readChannelENS_9channel_eE+0x4c>
		case CH_0: return ADCA_CH0RES;
		case CH_1: return ADCA_CH1RES;
		case CH_2: return ADCA_CH2RES;
		case CH_3: return ADCA_CH3RES;
     560:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     564:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     568:	11 c0       	rjmp	.+34     	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
uint16_t Adca::readChannel(channel_e channel)
{
	startSingleConversion(channel);
	waitConversion(channel);
	switch (channel) {
		case CH_0: return ADCA_CH0RES;
     56a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     56e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     572:	0c c0       	rjmp	.+24     	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_1: return ADCA_CH1RES;
     574:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     578:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     57c:	07 c0       	rjmp	.+14     	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_2: return ADCA_CH2RES;
     57e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     582:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     586:	02 c0       	rjmp	.+4      	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_3: return ADCA_CH3RES;
	}
	return 0;
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
}
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <_ZN4Adca9enableADCEv>:
//=== ENABLERS ===//
//================//

void Adca::enableADC()
{
	adc = true;
     594:	21 e0       	ldi	r18, 0x01	; 1
     596:	fc 01       	movw	r30, r24
     598:	21 83       	std	Z+1, r18	; 0x01
	ADCA_CTRLA |= ADC_ENABLE_bm;
     59a:	e0 e0       	ldi	r30, 0x00	; 0
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	80 81       	ld	r24, Z
     5a0:	81 60       	ori	r24, 0x01	; 1
     5a2:	80 83       	st	Z, r24
     5a4:	08 95       	ret

000005a6 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

Adca::Adca(prescaler_e prescaler, Utils::interruptLevel_e interruptLevel)
     5a6:	fc 01       	movw	r30, r24
	ADCA_EVCTRL = (eventMode << ADC_EVACT_gp)|(ADCA_EVCTRL & ~ADC_EVACT_gm);
}

void Adca::setPrescaler(prescaler_e prescaler)
{
	this->prescaler = prescaler;
     5a8:	65 87       	std	Z+13, r22	; 0x0d
	ADCA_PRESCALER = prescaler;
     5aa:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
	ADCA_CTRLB = (currentLimitation << ADC_CURRLIMIT_gp)|(ADCA_CTRLB & ~ADC_CURRLIMIT_gm);
}

void Adca::setConversionMode(conversionMode_e conversionMode)
{
	this->conversionMode = conversionMode;
     5ae:	14 82       	std	Z+4, r1	; 0x04
	switch(conversionMode) {
		case CM_UNSIGNED: ADCA_CTRLB &= ~ADC_CONMODE_bm; break;
     5b0:	a1 e0       	ldi	r26, 0x01	; 1
     5b2:	b2 e0       	ldi	r27, 0x02	; 2
     5b4:	8c 91       	ld	r24, X
     5b6:	8f 7e       	andi	r24, 0xEF	; 239
     5b8:	8c 93       	st	X, r24

void Adca::setChannelInputMode(channel_e channel, cim_e cim)
{
	switch (channel) {
		case CH_0:
			cim0 = cim;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	82 8b       	std	Z+18, r24	; 0x12
			ADCA_CH0_CTRL = (cim << ADC_CH_INPUTMODE_gp)|(ADCA_CH0_CTRL & ~ADC_CH_INPUTMODE_gm);
     5be:	a0 e2       	ldi	r26, 0x20	; 32
     5c0:	b2 e0       	ldi	r27, 0x02	; 2
     5c2:	8c 91       	ld	r24, X
     5c4:	8c 7f       	andi	r24, 0xFC	; 252
     5c6:	81 60       	ori	r24, 0x01	; 1
     5c8:	8c 93       	st	X, r24

void Adca::setMuxSelectionPositiveInput(channel_e channel, mspi_e mspi)
{
	switch (channel) {
		case CH_0:
			mspi0 = mspi;
     5ca:	16 8a       	std	Z+22, r1	; 0x16
			ADCA_CH0_MUXCTRL = ((mspi&0x0f) << ADC_CH_MUXPOS_gp)|(ADCA_CH0_MUXCTRL & ~ADC_CH_MUXPOS_gm);
     5cc:	a1 e2       	ldi	r26, 0x21	; 33
     5ce:	b2 e0       	ldi	r27, 0x02	; 2
     5d0:	8c 91       	ld	r24, X
     5d2:	87 78       	andi	r24, 0x87	; 135
     5d4:	8c 93       	st	X, r24

void Adca::enableInterrupt(channel_e channel, Utils::interruptLevel_e il)
{
	switch (channel) {
		case CH_0:
			il0 = il;
     5d6:	42 a3       	std	Z+34, r20	; 0x22
			ADCA_CH0_INTCTRL = (il << ADC_CH_INTLVL_gp)|(ADCA_CH0_INTCTRL & ~ADC_CH_INTLVL_gm);
     5d8:	a2 e2       	ldi	r26, 0x22	; 34
     5da:	b2 e0       	ldi	r27, 0x02	; 2
     5dc:	8c 91       	ld	r24, X
     5de:	8c 7f       	andi	r24, 0xFC	; 252
     5e0:	48 2b       	or	r20, r24
     5e2:	4c 93       	st	X, r20
	setPrescaler(prescaler);
	setConversionMode(CM_UNSIGNED);
	setChannelInputMode(CH_0, CIM_SINGLEENDED);
	setMuxSelectionPositiveInput(CH_0, MSPI_PIN0);
	enableInterrupt(CH_0, interruptLevel);
	enableADC();
     5e4:	cf 01       	movw	r24, r30
     5e6:	0c 94 ca 02 	jmp	0x594	; 0x594 <_ZN4Adca9enableADCEv>

000005ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>:
//=========================//
//=== PRIVATE FUNCTIONS ===//
//=========================//

uint16_t Ms5525dso::readCoef(coef_e c)
{
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	a8 97       	sbiw	r28, 0x28	; 40
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	de bf       	out	0x3e, r29	; 62
     602:	8c 01       	movw	r16, r24
     604:	f6 2e       	mov	r15, r22
	const char err[] = "Error: could not read flow sensor PROM.";
     606:	88 e2       	ldi	r24, 0x28	; 40
     608:	e4 e2       	ldi	r30, 0x24	; 36
     60a:	f0 e2       	ldi	r31, 0x20	; 32
     60c:	de 01       	movw	r26, r28
     60e:	11 96       	adiw	r26, 0x01	; 1
     610:	01 90       	ld	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x26>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	f8 01       	movw	r30, r16
     61c:	63 81       	ldd	r22, Z+3	; 0x03
     61e:	84 81       	ldd	r24, Z+4	; 0x04
     620:	95 81       	ldd	r25, Z+5	; 0x05
     622:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     626:	f8 01       	movw	r30, r16
     628:	84 81       	ldd	r24, Z+4	; 0x04
     62a:	95 81       	ldd	r25, Z+5	; 0x05
     62c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     630:	f8 01       	movw	r30, r16
     632:	24 81       	ldd	r18, Z+4	; 0x04
     634:	35 81       	ldd	r19, Z+5	; 0x05
     636:	81 11       	cpse	r24, r1
     638:	2e c0       	rjmp	.+92     	; 0x696 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xac>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(c);
     63a:	6f 2d       	mov	r22, r15
     63c:	c9 01       	movw	r24, r18
     63e:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     642:	41 e0       	ldi	r20, 0x01	; 1
     644:	63 e0       	ldi	r22, 0x03	; 3
     646:	f8 01       	movw	r30, r16
     648:	84 81       	ldd	r24, Z+4	; 0x04
     64a:	95 81       	ldd	r25, Z+5	; 0x05
     64c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     650:	f8 01       	movw	r30, r16
     652:	84 81       	ldd	r24, Z+4	; 0x04
     654:	95 81       	ldd	r25, Z+5	; 0x05
     656:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     65a:	f8 01       	movw	r30, r16
     65c:	24 81       	ldd	r18, Z+4	; 0x04
     65e:	35 81       	ldd	r19, Z+5	; 0x05
     660:	88 23       	and	r24, r24
     662:	49 f0       	breq	.+18     	; 0x676 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x8c>
		myTwie->errorHandler(err);
     664:	be 01       	movw	r22, r28
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	c9 01       	movw	r24, r18
     66c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4Twie12errorHandlerEPKc>
		return 0;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	61 c0       	rjmp	.+194    	; 0x738 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x14e>
	}
	
	myTwie->setAddress(address, Twie::DIR_READ);
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	f8 01       	movw	r30, r16
     67a:	63 81       	ldd	r22, Z+3	; 0x03
     67c:	c9 01       	movw	r24, r18
     67e:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     682:	f8 01       	movw	r30, r16
     684:	84 81       	ldd	r24, Z+4	; 0x04
     686:	95 81       	ldd	r25, Z+5	; 0x05
     688:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     68c:	f8 01       	movw	r30, r16
     68e:	24 81       	ldd	r18, Z+4	; 0x04
     690:	35 81       	ldd	r19, Z+5	; 0x05
     692:	88 23       	and	r24, r24
     694:	61 f0       	breq	.+24     	; 0x6ae <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xc4>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	63 e0       	ldi	r22, 0x03	; 3
     69a:	c9 01       	movw	r24, r18
     69c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	f8 01       	movw	r30, r16
     6a8:	84 81       	ldd	r24, Z+4	; 0x04
     6aa:	95 81       	ldd	r25, Z+5	; 0x05
     6ac:	df cf       	rjmp	.-66     	; 0x66c <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x82>
		return 0;
	}
	uint16_t temp = myTwie->getData(Twie::AA_ACK) << 8;
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	c9 01       	movw	r24, r18
     6b2:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     6b6:	c8 2e       	mov	r12, r24
     6b8:	d1 2c       	mov	r13, r1
     6ba:	dc 2c       	mov	r13, r12
     6bc:	cc 24       	eor	r12, r12
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	62 e0       	ldi	r22, 0x02	; 2
     6c2:	f8 01       	movw	r30, r16
     6c4:	84 81       	ldd	r24, Z+4	; 0x04
     6c6:	95 81       	ldd	r25, Z+5	; 0x05
     6c8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	temp |= myTwie->getData(Twie::AA_NACK);
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	f8 01       	movw	r30, r16
     6d0:	84 81       	ldd	r24, Z+4	; 0x04
     6d2:	95 81       	ldd	r25, Z+5	; 0x05
     6d4:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     6d8:	c8 2a       	or	r12, r24
	
	int i = (c-0xA0)/2;
     6da:	6f 2d       	mov	r22, r15
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	60 5a       	subi	r22, 0xA0	; 160
     6e0:	71 09       	sbc	r23, r1
     6e2:	77 ff       	sbrs	r23, 7
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x100>
     6e6:	6f 5f       	subi	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	75 95       	asr	r23
     6ec:	67 95       	ror	r22
	snprintf(Utils::txBuf,TX_LEN,"\tC%d: %u (0x%04x)\tQ%u: %d\r\n",i,temp,temp,i,Qs[i-1]);
     6ee:	f8 01       	movw	r30, r16
     6f0:	e6 0f       	add	r30, r22
     6f2:	f7 1f       	adc	r31, r23
     6f4:	81 8d       	ldd	r24, Z+25	; 0x19
     6f6:	1f 92       	push	r1
     6f8:	8f 93       	push	r24
     6fa:	7f 93       	push	r23
     6fc:	6f 93       	push	r22
     6fe:	df 92       	push	r13
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	cf 92       	push	r12
     706:	7f 93       	push	r23
     708:	6f 93       	push	r22
     70a:	88 e0       	ldi	r24, 0x08	; 8
     70c:	90 e2       	ldi	r25, 0x20	; 32
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	1f 92       	push	r1
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	8f 93       	push	r24
     718:	80 e6       	ldi	r24, 0x60	; 96
     71a:	92 e2       	ldi	r25, 0x22	; 34
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	0e 94 b0 18 	call	0x3160	; 0x3160 <snprintf>
	myUsart->sendString(Utils::txBuf);
     724:	60 e6       	ldi	r22, 0x60	; 96
     726:	72 e2       	ldi	r23, 0x22	; 34
     728:	f8 01       	movw	r30, r16
     72a:	86 81       	ldd	r24, Z+6	; 0x06
     72c:	97 81       	ldd	r25, Z+7	; 0x07
     72e:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	
	return temp;
     732:	cd bf       	out	0x3d, r28	; 61
     734:	de bf       	out	0x3e, r29	; 62
     736:	c6 01       	movw	r24, r12
}
     738:	a8 96       	adiw	r28, 0x28	; 40
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret

0000074e <_ZN9Ms5525dso5resetEv>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

void Ms5525dso::reset()
{
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	a4 97       	sbiw	r28, 0x24	; 36
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	de bf       	out	0x3e, r29	; 62
     760:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not reset flow sensor.";
     762:	84 e2       	ldi	r24, 0x24	; 36
     764:	e7 e6       	ldi	r30, 0x67	; 103
     766:	f0 e2       	ldi	r31, 0x20	; 32
     768:	de 01       	movw	r26, r28
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	01 90       	ld	r0, Z+
     76e:	0d 92       	st	X+, r0
     770:	8a 95       	dec	r24
     772:	e1 f7       	brne	.-8      	; 0x76c <_ZN9Ms5525dso5resetEv+0x1e>
	
	myUsart->sendString("\tResetting Flow Sensor... ");
     774:	6c e4       	ldi	r22, 0x4C	; 76
     776:	70 e2       	ldi	r23, 0x20	; 32
     778:	f8 01       	movw	r30, r16
     77a:	86 81       	ldd	r24, Z+6	; 0x06
     77c:	97 81       	ldd	r25, Z+7	; 0x07
     77e:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	f8 01       	movw	r30, r16
     786:	63 81       	ldd	r22, Z+3	; 0x03
     788:	84 81       	ldd	r24, Z+4	; 0x04
     78a:	95 81       	ldd	r25, Z+5	; 0x05
     78c:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     790:	f8 01       	movw	r30, r16
     792:	84 81       	ldd	r24, Z+4	; 0x04
     794:	95 81       	ldd	r25, Z+5	; 0x05
     796:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     79a:	f8 01       	movw	r30, r16
     79c:	24 81       	ldd	r18, Z+4	; 0x04
     79e:	35 81       	ldd	r19, Z+5	; 0x05
     7a0:	88 23       	and	r24, r24
     7a2:	31 f0       	breq	.+12     	; 0x7b0 <_ZN9Ms5525dso5resetEv+0x62>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	63 e0       	ldi	r22, 0x03	; 3
     7a8:	c9 01       	movw	r24, r18
     7aa:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <_ZN9Ms5525dso5resetEv+0x86>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x1E);
     7b0:	6e e1       	ldi	r22, 0x1E	; 30
     7b2:	c9 01       	movw	r24, r18
     7b4:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	f8 01       	movw	r30, r16
     7be:	84 81       	ldd	r24, Z+4	; 0x04
     7c0:	95 81       	ldd	r25, Z+5	; 0x05
     7c2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     7c6:	f8 01       	movw	r30, r16
     7c8:	84 81       	ldd	r24, Z+4	; 0x04
     7ca:	95 81       	ldd	r25, Z+5	; 0x05
     7cc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     7d0:	88 23       	and	r24, r24
     7d2:	49 f0       	breq	.+18     	; 0x7e6 <_ZN9Ms5525dso5resetEv+0x98>
		myTwie->errorHandler(err);
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	f8 01       	movw	r30, r16
     7dc:	84 81       	ldd	r24, Z+4	; 0x04
     7de:	95 81       	ldd	r25, Z+5	; 0x05
     7e0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4Twie12errorHandlerEPKc>
		return;
     7e4:	0b c0       	rjmp	.+22     	; 0x7fc <_ZN9Ms5525dso5resetEv+0xae>
	}
	Utils::delay_ms(3);
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 6d 09 	call	0x12da	; 0x12da <_ZN5Utils8delay_msEj>
	
	myUsart->sendString("DONE!\r\n");
     7ee:	6b ea       	ldi	r22, 0xAB	; 171
     7f0:	70 e2       	ldi	r23, 0x20	; 32
     7f2:	f8 01       	movw	r30, r16
     7f4:	86 81       	ldd	r24, Z+6	; 0x06
     7f6:	97 81       	ldd	r25, Z+7	; 0x07
     7f8:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
}
     7fc:	a4 96       	adiw	r28, 0x24	; 36
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <_ZN9Ms5525dso8readPROMEv>:

void Ms5525dso::readPROM()
{
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	ec 01       	movw	r28, r24
	myUsart->sendString("\tReading Flow Sensor PROM...\r\n");
     812:	6b e8       	ldi	r22, 0x8B	; 139
     814:	70 e2       	ldi	r23, 0x20	; 32
     816:	8e 81       	ldd	r24, Y+6	; 0x06
     818:	9f 81       	ldd	r25, Y+7	; 0x07
     81a:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	
	C1 = readCoef(C1_addr);
     81e:	62 ea       	ldi	r22, 0xA2	; 162
     820:	ce 01       	movw	r24, r28
     822:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     826:	88 87       	std	Y+8, r24	; 0x08
     828:	99 87       	std	Y+9, r25	; 0x09
	C2 = readCoef(C2_addr);
     82a:	64 ea       	ldi	r22, 0xA4	; 164
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     832:	8a 87       	std	Y+10, r24	; 0x0a
     834:	9b 87       	std	Y+11, r25	; 0x0b
	C3 = readCoef(C3_addr);
     836:	66 ea       	ldi	r22, 0xA6	; 166
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     83e:	8c 87       	std	Y+12, r24	; 0x0c
     840:	9d 87       	std	Y+13, r25	; 0x0d
	C4 = readCoef(C4_addr);
     842:	68 ea       	ldi	r22, 0xA8	; 168
     844:	ce 01       	movw	r24, r28
     846:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     84a:	8e 87       	std	Y+14, r24	; 0x0e
     84c:	9f 87       	std	Y+15, r25	; 0x0f
	C5 = readCoef(C5_addr);
     84e:	6a ea       	ldi	r22, 0xAA	; 170
     850:	ce 01       	movw	r24, r28
     852:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     856:	88 8b       	std	Y+16, r24	; 0x10
     858:	99 8b       	std	Y+17, r25	; 0x11
	C6 = readCoef(C6_addr);
     85a:	6c ea       	ldi	r22, 0xAC	; 172
     85c:	ce 01       	movw	r24, r28
     85e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     862:	8a 8b       	std	Y+18, r24	; 0x12
     864:	9b 8b       	std	Y+19, r25	; 0x13
	
	myUsart->sendString("\tDONE!\r\n");
     866:	6a ea       	ldi	r22, 0xAA	; 170
     868:	70 e2       	ldi	r23, 0x20	; 32
     86a:	8e 81       	ldd	r24, Y+6	; 0x06
     86c:	9f 81       	ldd	r25, Y+7	; 0x07
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
	C3 = readCoef(C3_addr);
	C4 = readCoef(C4_addr);
	C5 = readCoef(C5_addr);
	C6 = readCoef(C6_addr);
	
	myUsart->sendString("\tDONE!\r\n");
     872:	0c 94 bf 08 	jmp	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>

00000876 <_ZN9Ms5525dsoC1ENS_5osr_sEhP4TwieP7UsartE0>:
		
//===================//
//=== CONSTRUCTOR ===//
//===================//

Ms5525dso::Ms5525dso(osr_s osr, uint8_t address, Twie* myTwie, UsartE0* myUsart)
     876:	6f 92       	push	r6
     878:	7f 92       	push	r7
     87a:	8f 92       	push	r8
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	3a 01       	movw	r6, r20
     88c:	86 2e       	mov	r8, r22
     88e:	6e e0       	ldi	r22, 0x0E	; 14
     890:	6c 8b       	std	Y+20, r22	; 0x14
     892:	50 e1       	ldi	r21, 0x10	; 16
     894:	5d 8b       	std	Y+21, r21	; 0x15
     896:	87 e0       	ldi	r24, 0x07	; 7
     898:	8e 8b       	std	Y+22, r24	; 0x16
     89a:	35 e0       	ldi	r19, 0x05	; 5
     89c:	3f 8b       	std	Y+23, r19	; 0x17
     89e:	88 8f       	std	Y+24, r24	; 0x18
     8a0:	95 e1       	ldi	r25, 0x15	; 21
     8a2:	99 8f       	std	Y+25, r25	; 0x19
     8a4:	6a 8f       	std	Y+26, r22	; 0x1a
     8a6:	5b 8f       	std	Y+27, r21	; 0x1b
     8a8:	8c 8f       	std	Y+28, r24	; 0x1c
     8aa:	3d 8f       	std	Y+29, r19	; 0x1d
     8ac:	8e 8f       	std	Y+30, r24	; 0x1e
     8ae:	9f 8f       	std	Y+31, r25	; 0x1f
{
	this->osr = osr;
     8b0:	68 82       	st	Y, r6
     8b2:	79 82       	std	Y+1, r7	; 0x01
     8b4:	8a 82       	std	Y+2, r8	; 0x02
	this->address = address;
     8b6:	2b 83       	std	Y+3, r18	; 0x03
	this->myTwie = myTwie;
     8b8:	0c 83       	std	Y+4, r16	; 0x04
     8ba:	1d 83       	std	Y+5, r17	; 0x05
	this->myUsart = myUsart;
     8bc:	ee 82       	std	Y+6, r14	; 0x06
     8be:	ff 82       	std	Y+7, r15	; 0x07
	
	reset();
     8c0:	ce 01       	movw	r24, r28
     8c2:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN9Ms5525dso5resetEv>
	readPROM();
     8c6:	ce 01       	movw	r24, r28
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	8f 90       	pop	r8
     8d6:	7f 90       	pop	r7
     8d8:	6f 90       	pop	r6
	this->address = address;
	this->myTwie = myTwie;
	this->myUsart = myUsart;
	
	reset();
	readPROM();
     8da:	0c 94 06 04 	jmp	0x80c	; 0x80c <_ZN9Ms5525dso8readPROMEv>

000008de <_ZN9Ms5525dso15convertPressureEv>:
	
	myUsart->sendString("\tDONE!\r\n");
}

void Ms5525dso::convertPressure()
{
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	e2 97       	sbiw	r28, 0x32	; 50
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert pressure in flow sensor.";
     8f2:	82 e3       	ldi	r24, 0x32	; 50
     8f4:	e3 eb       	ldi	r30, 0xB3	; 179
     8f6:	f0 e2       	ldi	r31, 0x20	; 32
     8f8:	de 01       	movw	r26, r28
     8fa:	11 96       	adiw	r26, 0x01	; 1
     8fc:	01 90       	ld	r0, Z+
     8fe:	0d 92       	st	X+, r0
     900:	8a 95       	dec	r24
     902:	e1 f7       	brne	.-8      	; 0x8fc <_ZN9Ms5525dso15convertPressureEv+0x1e>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	f8 01       	movw	r30, r16
     908:	63 81       	ldd	r22, Z+3	; 0x03
     90a:	84 81       	ldd	r24, Z+4	; 0x04
     90c:	95 81       	ldd	r25, Z+5	; 0x05
     90e:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     912:	f8 01       	movw	r30, r16
     914:	84 81       	ldd	r24, Z+4	; 0x04
     916:	95 81       	ldd	r25, Z+5	; 0x05
     918:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     91c:	f8 01       	movw	r30, r16
     91e:	24 81       	ldd	r18, Z+4	; 0x04
     920:	35 81       	ldd	r19, Z+5	; 0x05
     922:	88 23       	and	r24, r24
     924:	31 f0       	breq	.+12     	; 0x932 <_ZN9Ms5525dso15convertPressureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	63 e0       	ldi	r22, 0x03	; 3
     92a:	c9 01       	movw	r24, r18
     92c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     930:	14 c0       	rjmp	.+40     	; 0x95a <_ZN9Ms5525dso15convertPressureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x40 + osr.cmd);
     932:	f8 01       	movw	r30, r16
     934:	60 81       	ld	r22, Z
     936:	60 5c       	subi	r22, 0xC0	; 192
     938:	c9 01       	movw	r24, r18
     93a:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	63 e0       	ldi	r22, 0x03	; 3
     942:	f8 01       	movw	r30, r16
     944:	84 81       	ldd	r24, Z+4	; 0x04
     946:	95 81       	ldd	r25, Z+5	; 0x05
     948:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     94c:	f8 01       	movw	r30, r16
     94e:	84 81       	ldd	r24, Z+4	; 0x04
     950:	95 81       	ldd	r25, Z+5	; 0x05
     952:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     956:	88 23       	and	r24, r24
     958:	49 f0       	breq	.+18     	; 0x96c <_ZN9Ms5525dso15convertPressureEv+0x8e>
		myTwie->errorHandler(err);
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	f8 01       	movw	r30, r16
     962:	84 81       	ldd	r24, Z+4	; 0x04
     964:	95 81       	ldd	r25, Z+5	; 0x05
     966:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4Twie12errorHandlerEPKc>
		return;
     96a:	05 c0       	rjmp	.+10     	; 0x976 <_ZN9Ms5525dso15convertPressureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     96c:	f8 01       	movw	r30, r16
     96e:	81 81       	ldd	r24, Z+1	; 0x01
     970:	92 81       	ldd	r25, Z+2	; 0x02
     972:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN5Utils8delay_usEj>
}
     976:	e2 96       	adiw	r28, 0x32	; 50
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <_ZN9Ms5525dso18convertTemperatureEv>:

void Ms5525dso::convertTemperature()
{	
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	e5 97       	sbiw	r28, 0x35	; 53
     994:	cd bf       	out	0x3d, r28	; 61
     996:	de bf       	out	0x3e, r29	; 62
     998:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert temperature in flow sensor.";
     99a:	85 e3       	ldi	r24, 0x35	; 53
     99c:	e5 ee       	ldi	r30, 0xE5	; 229
     99e:	f0 e2       	ldi	r31, 0x20	; 32
     9a0:	de 01       	movw	r26, r28
     9a2:	11 96       	adiw	r26, 0x01	; 1
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <_ZN9Ms5525dso18convertTemperatureEv+0x1e>

	myTwie->setAddress(address, Twie::DIR_WRITE);
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	f8 01       	movw	r30, r16
     9b0:	63 81       	ldd	r22, Z+3	; 0x03
     9b2:	84 81       	ldd	r24, Z+4	; 0x04
     9b4:	95 81       	ldd	r25, Z+5	; 0x05
     9b6:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     9ba:	f8 01       	movw	r30, r16
     9bc:	84 81       	ldd	r24, Z+4	; 0x04
     9be:	95 81       	ldd	r25, Z+5	; 0x05
     9c0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     9c4:	f8 01       	movw	r30, r16
     9c6:	24 81       	ldd	r18, Z+4	; 0x04
     9c8:	35 81       	ldd	r19, Z+5	; 0x05
     9ca:	88 23       	and	r24, r24
     9cc:	31 f0       	breq	.+12     	; 0x9da <_ZN9Ms5525dso18convertTemperatureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	63 e0       	ldi	r22, 0x03	; 3
     9d2:	c9 01       	movw	r24, r18
     9d4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <_ZN9Ms5525dso18convertTemperatureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x50 + osr.cmd);
     9da:	f8 01       	movw	r30, r16
     9dc:	60 81       	ld	r22, Z
     9de:	60 5b       	subi	r22, 0xB0	; 176
     9e0:	c9 01       	movw	r24, r18
     9e2:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	63 e0       	ldi	r22, 0x03	; 3
     9ea:	f8 01       	movw	r30, r16
     9ec:	84 81       	ldd	r24, Z+4	; 0x04
     9ee:	95 81       	ldd	r25, Z+5	; 0x05
     9f0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     9f4:	f8 01       	movw	r30, r16
     9f6:	84 81       	ldd	r24, Z+4	; 0x04
     9f8:	95 81       	ldd	r25, Z+5	; 0x05
     9fa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     9fe:	88 23       	and	r24, r24
     a00:	49 f0       	breq	.+18     	; 0xa14 <_ZN9Ms5525dso18convertTemperatureEv+0x8e>
		myTwie->errorHandler(err);
     a02:	be 01       	movw	r22, r28
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	f8 01       	movw	r30, r16
     a0a:	84 81       	ldd	r24, Z+4	; 0x04
     a0c:	95 81       	ldd	r25, Z+5	; 0x05
     a0e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4Twie12errorHandlerEPKc>
		return;
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <_ZN9Ms5525dso18convertTemperatureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     a14:	f8 01       	movw	r30, r16
     a16:	81 81       	ldd	r24, Z+1	; 0x01
     a18:	92 81       	ldd	r25, Z+2	; 0x02
     a1a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN5Utils8delay_usEj>
}
     a1e:	e5 96       	adiw	r28, 0x35	; 53
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

00000a2e <_ZN9Ms5525dso7readADCEv>:

uint32_t Ms5525dso::readADC()
{
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	aa 97       	sbiw	r28, 0x2a	; 42
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not read ADC in flow sensor.";
     a46:	8a e2       	ldi	r24, 0x2A	; 42
     a48:	ea e1       	ldi	r30, 0x1A	; 26
     a4a:	f1 e2       	ldi	r31, 0x21	; 33
     a4c:	de 01       	movw	r26, r28
     a4e:	11 96       	adiw	r26, 0x01	; 1
     a50:	01 90       	ld	r0, Z+
     a52:	0d 92       	st	X+, r0
     a54:	8a 95       	dec	r24
     a56:	e1 f7       	brne	.-8      	; 0xa50 <_ZN9Ms5525dso7readADCEv+0x22>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	f8 01       	movw	r30, r16
     a5c:	63 81       	ldd	r22, Z+3	; 0x03
     a5e:	84 81       	ldd	r24, Z+4	; 0x04
     a60:	95 81       	ldd	r25, Z+5	; 0x05
     a62:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     a66:	f8 01       	movw	r30, r16
     a68:	84 81       	ldd	r24, Z+4	; 0x04
     a6a:	95 81       	ldd	r25, Z+5	; 0x05
     a6c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     a70:	f8 01       	movw	r30, r16
     a72:	24 81       	ldd	r18, Z+4	; 0x04
     a74:	35 81       	ldd	r19, Z+5	; 0x05
     a76:	81 11       	cpse	r24, r1
     a78:	2f c0       	rjmp	.+94     	; 0xad8 <_ZN9Ms5525dso7readADCEv+0xaa>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(0x00);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	c9 01       	movw	r24, r18
     a7e:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	f8 01       	movw	r30, r16
     a88:	84 81       	ldd	r24, Z+4	; 0x04
     a8a:	95 81       	ldd	r25, Z+5	; 0x05
     a8c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     a90:	f8 01       	movw	r30, r16
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	95 81       	ldd	r25, Z+5	; 0x05
     a96:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     a9a:	f8 01       	movw	r30, r16
     a9c:	24 81       	ldd	r18, Z+4	; 0x04
     a9e:	35 81       	ldd	r19, Z+5	; 0x05
     aa0:	88 23       	and	r24, r24
     aa2:	51 f0       	breq	.+20     	; 0xab8 <_ZN9Ms5525dso7readADCEv+0x8a>
		myTwie->errorHandler(err);
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c9 01       	movw	r24, r18
     aac:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4Twie12errorHandlerEPKc>
		return 0;
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	cb 01       	movw	r24, r22
     ab6:	4a c0       	rjmp	.+148    	; 0xb4c <_ZN9Ms5525dso7readADCEv+0x11e>
	}
		
	myTwie->setAddress(address, Twie::DIR_READ);
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	f8 01       	movw	r30, r16
     abc:	63 81       	ldd	r22, Z+3	; 0x03
     abe:	c9 01       	movw	r24, r18
     ac0:	0e 94 11 08 	call	0x1022	; 0x1022 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     ac4:	f8 01       	movw	r30, r16
     ac6:	84 81       	ldd	r24, Z+4	; 0x04
     ac8:	95 81       	ldd	r25, Z+5	; 0x05
     aca:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     ace:	f8 01       	movw	r30, r16
     ad0:	24 81       	ldd	r18, Z+4	; 0x04
     ad2:	35 81       	ldd	r19, Z+5	; 0x05
     ad4:	88 23       	and	r24, r24
     ad6:	61 f0       	breq	.+24     	; 0xaf0 <_ZN9Ms5525dso7readADCEv+0xc2>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	63 e0       	ldi	r22, 0x03	; 3
     adc:	c9 01       	movw	r24, r18
     ade:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     ae2:	be 01       	movw	r22, r28
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	f8 01       	movw	r30, r16
     aea:	84 81       	ldd	r24, Z+4	; 0x04
     aec:	95 81       	ldd	r25, Z+5	; 0x05
     aee:	de cf       	rjmp	.-68     	; 0xaac <_ZN9Ms5525dso7readADCEv+0x7e>
		return 0;
	}
	
	uint32_t b1 = myTwie->getData(Twie::AA_ACK);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	c9 01       	movw	r24, r18
     af4:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     af8:	e8 2e       	mov	r14, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	62 e0       	ldi	r22, 0x02	; 2
     afe:	f8 01       	movw	r30, r16
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	95 81       	ldd	r25, Z+5	; 0x05
     b04:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b2 = myTwie->getData(Twie::AA_ACK);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	f8 01       	movw	r30, r16
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	95 81       	ldd	r25, Z+5	; 0x05
     b10:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     b14:	f8 2e       	mov	r15, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	f8 01       	movw	r30, r16
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	95 81       	ldd	r25, Z+5	; 0x05
     b20:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b3 = myTwie->getData(Twie::AA_NACK);
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	f8 01       	movw	r30, r16
     b28:	84 81       	ldd	r24, Z+4	; 0x04
     b2a:	95 81       	ldd	r25, Z+5	; 0x05
     b2c:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
	
	return (b1 << 16)|(b2 << 8)|b3;
     b30:	4f 2d       	mov	r20, r15
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	76 2f       	mov	r23, r22
     b3a:	65 2f       	mov	r22, r21
     b3c:	54 2f       	mov	r21, r20
     b3e:	44 27       	eor	r20, r20
     b40:	6e 29       	or	r22, r14
     b42:	8a 01       	movw	r16, r20
     b44:	9b 01       	movw	r18, r22
     b46:	08 2b       	or	r16, r24
     b48:	c9 01       	movw	r24, r18
     b4a:	b8 01       	movw	r22, r16
}
     b4c:	aa 96       	adiw	r28, 0x2a	; 42
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	08 95       	ret

00000b60 <_ZN9Ms5525dso4readEv>:

Ms5525dso::data_s Ms5525dso::read()
{	
     b60:	2f 92       	push	r2
     b62:	3f 92       	push	r3
     b64:	4f 92       	push	r4
     b66:	5f 92       	push	r5
     b68:	6f 92       	push	r6
     b6a:	7f 92       	push	r7
     b6c:	8f 92       	push	r8
     b6e:	9f 92       	push	r9
     b70:	af 92       	push	r10
     b72:	bf 92       	push	r11
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	6a 97       	sbiw	r28, 0x1a	; 26
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	1c 01       	movw	r2, r24
	convertPressure();
     b90:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN9Ms5525dso15convertPressureEv>
	uint32_t D1 = readADC();
     b94:	c1 01       	movw	r24, r2
     b96:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN9Ms5525dso7readADCEv>
     b9a:	4b 01       	movw	r8, r22
     b9c:	5c 01       	movw	r10, r24
	convertTemperature();
     b9e:	c1 01       	movw	r24, r2
     ba0:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN9Ms5525dso18convertTemperatureEv>
	uint32_t D2 = readADC();
     ba4:	c1 01       	movw	r24, r2
     ba6:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN9Ms5525dso7readADCEv>
     baa:	2b 01       	movw	r4, r22
     bac:	3c 01       	movw	r6, r24
			
	double dT = D2 - C5*pow(2,Q5);
     bae:	f1 01       	movw	r30, r2
     bb0:	60 8d       	ldd	r22, Z+24	; 0x18
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e4       	ldi	r25, 0x40	; 64
     bc8:	0e 94 14 12 	call	0x2428	; 0x2428 <pow>
     bcc:	6b 01       	movw	r12, r22
     bce:	7c 01       	movw	r14, r24
     bd0:	c3 01       	movw	r24, r6
     bd2:	b2 01       	movw	r22, r4
     bd4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     bd8:	2b 01       	movw	r4, r22
     bda:	3c 01       	movw	r6, r24
     bdc:	f1 01       	movw	r30, r2
     bde:	60 89       	ldd	r22, Z+16	; 0x10
     be0:	71 89       	ldd	r23, Z+17	; 0x11
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     bea:	a7 01       	movw	r20, r14
     bec:	96 01       	movw	r18, r12
     bee:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	c3 01       	movw	r24, r6
     bf8:	b2 01       	movw	r22, r4
     bfa:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
     bfe:	6b 01       	movw	r12, r22
     c00:	7c 01       	movw	r14, r24
	double TEMP = 2000 + dT*C6/pow(2,Q6);
     c02:	f1 01       	movw	r30, r2
     c04:	61 8d       	ldd	r22, Z+25	; 0x19
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e4       	ldi	r25, 0x40	; 64
     c1c:	0e 94 14 12 	call	0x2428	; 0x2428 <pow>
     c20:	2b 01       	movw	r4, r22
     c22:	3c 01       	movw	r6, r24
		
	double OFF = C2*pow(2,Q2) + dT*C4/pow(2,Q4);
     c24:	f1 01       	movw	r30, r2
     c26:	65 89       	ldd	r22, Z+21	; 0x15
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e4       	ldi	r25, 0x40	; 64
     c3e:	0e 94 14 12 	call	0x2428	; 0x2428 <pow>
     c42:	69 87       	std	Y+9, r22	; 0x09
     c44:	7a 87       	std	Y+10, r23	; 0x0a
     c46:	8b 87       	std	Y+11, r24	; 0x0b
     c48:	9c 87       	std	Y+12, r25	; 0x0c
     c4a:	f1 01       	movw	r30, r2
     c4c:	67 89       	ldd	r22, Z+23	; 0x17
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e4       	ldi	r25, 0x40	; 64
     c64:	0e 94 14 12 	call	0x2428	; 0x2428 <pow>
     c68:	6d 87       	std	Y+13, r22	; 0x0d
     c6a:	7e 87       	std	Y+14, r23	; 0x0e
     c6c:	8f 87       	std	Y+15, r24	; 0x0f
     c6e:	98 8b       	std	Y+16, r25	; 0x10
	double SENS = C1*pow(2,Q1) + dT*C3/pow(2,Q3);
     c70:	f1 01       	movw	r30, r2
     c72:	64 89       	ldd	r22, Z+20	; 0x14
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e4       	ldi	r25, 0x40	; 64
     c8a:	0e 94 14 12 	call	0x2428	; 0x2428 <pow>
     c8e:	69 8b       	std	Y+17, r22	; 0x11
     c90:	7a 8b       	std	Y+18, r23	; 0x12
     c92:	8b 8b       	std	Y+19, r24	; 0x13
     c94:	9c 8b       	std	Y+20, r25	; 0x14
     c96:	f1 01       	movw	r30, r2
     c98:	66 89       	ldd	r22, Z+22	; 0x16
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e4       	ldi	r25, 0x40	; 64
     cb0:	0e 94 14 12 	call	0x2428	; 0x2428 <pow>
     cb4:	6d 8b       	std	Y+21, r22	; 0x15
     cb6:	7e 8b       	std	Y+22, r23	; 0x16
     cb8:	8f 8b       	std	Y+23, r24	; 0x17
     cba:	98 8f       	std	Y+24, r25	; 0x18
	double P = (D1*SENS/pow(2,21) - OFF)/pow(2,15);
	
	data_s data;
	data.pressure = P/100.;
	data.temperature = TEMP/100.;
     cbc:	f1 01       	movw	r30, r2
     cbe:	62 89       	ldd	r22, Z+18	; 0x12
     cc0:	73 89       	ldd	r23, Z+19	; 0x13
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     cca:	a7 01       	movw	r20, r14
     ccc:	96 01       	movw	r18, r12
     cce:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     cd2:	a3 01       	movw	r20, r6
     cd4:	92 01       	movw	r18, r4
     cd6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divsf3>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a ef       	ldi	r20, 0xFA	; 250
     ce0:	54 e4       	ldi	r21, 0x44	; 68
     ce2:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	48 ec       	ldi	r20, 0xC8	; 200
     cec:	52 e4       	ldi	r21, 0x42	; 66
     cee:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divsf3>
     cf2:	16 2f       	mov	r17, r22
     cf4:	07 2f       	mov	r16, r23
     cf6:	89 8f       	std	Y+25, r24	; 0x19
     cf8:	9a 8f       	std	Y+26, r25	; 0x1a
	return data;
     cfa:	f1 01       	movw	r30, r2
     cfc:	64 85       	ldd	r22, Z+12	; 0x0c
     cfe:	75 85       	ldd	r23, Z+13	; 0x0d
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     d10:	2d 89       	ldd	r18, Y+21	; 0x15
     d12:	3e 89       	ldd	r19, Y+22	; 0x16
     d14:	4f 89       	ldd	r20, Y+23	; 0x17
     d16:	58 8d       	ldd	r21, Y+24	; 0x18
     d18:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divsf3>
     d1c:	2b 01       	movw	r4, r22
     d1e:	3c 01       	movw	r6, r24
     d20:	f1 01       	movw	r30, r2
     d22:	60 85       	ldd	r22, Z+8	; 0x08
     d24:	71 85       	ldd	r23, Z+9	; 0x09
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     d2e:	29 89       	ldd	r18, Y+17	; 0x11
     d30:	3a 89       	ldd	r19, Y+18	; 0x12
     d32:	4b 89       	ldd	r20, Y+19	; 0x13
     d34:	5c 89       	ldd	r21, Y+20	; 0x14
     d36:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     d3a:	9b 01       	movw	r18, r22
     d3c:	ac 01       	movw	r20, r24
     d3e:	c3 01       	movw	r24, r6
     d40:	b2 01       	movw	r22, r4
     d42:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
     d46:	2b 01       	movw	r4, r22
     d48:	3c 01       	movw	r6, r24
     d4a:	c5 01       	movw	r24, r10
     d4c:	b4 01       	movw	r22, r8
     d4e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     d52:	9b 01       	movw	r18, r22
     d54:	ac 01       	movw	r20, r24
     d56:	c3 01       	movw	r24, r6
     d58:	b2 01       	movw	r22, r4
     d5a:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	55 e3       	ldi	r21, 0x35	; 53
     d66:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     d6a:	4b 01       	movw	r8, r22
     d6c:	5c 01       	movw	r10, r24
     d6e:	f1 01       	movw	r30, r2
     d70:	66 85       	ldd	r22, Z+14	; 0x0e
     d72:	77 85       	ldd	r23, Z+15	; 0x0f
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     d7c:	a7 01       	movw	r20, r14
     d7e:	96 01       	movw	r18, r12
     d80:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     d84:	2d 85       	ldd	r18, Y+13	; 0x0d
     d86:	3e 85       	ldd	r19, Y+14	; 0x0e
     d88:	4f 85       	ldd	r20, Y+15	; 0x0f
     d8a:	58 89       	ldd	r21, Y+16	; 0x10
     d8c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divsf3>
     d90:	6b 01       	movw	r12, r22
     d92:	7c 01       	movw	r14, r24
     d94:	f1 01       	movw	r30, r2
     d96:	62 85       	ldd	r22, Z+10	; 0x0a
     d98:	73 85       	ldd	r23, Z+11	; 0x0b
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
     da2:	29 85       	ldd	r18, Y+9	; 0x09
     da4:	3a 85       	ldd	r19, Y+10	; 0x0a
     da6:	4b 85       	ldd	r20, Y+11	; 0x0b
     da8:	5c 85       	ldd	r21, Y+12	; 0x0c
     daa:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c7 01       	movw	r24, r14
     db4:	b6 01       	movw	r22, r12
     db6:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	c5 01       	movw	r24, r10
     dc0:	b4 01       	movw	r22, r8
     dc2:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	58 e3       	ldi	r21, 0x38	; 56
     dce:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	48 ec       	ldi	r20, 0xC8	; 200
     dd8:	52 e4       	ldi	r21, 0x42	; 66
     dda:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divsf3>
     dde:	9b 01       	movw	r18, r22
     de0:	ab 01       	movw	r20, r22
     de2:	bc 01       	movw	r22, r24
     de4:	49 83       	std	Y+1, r20	; 0x01
     de6:	5a 83       	std	Y+2, r21	; 0x02
     de8:	6b 83       	std	Y+3, r22	; 0x03
     dea:	7c 83       	std	Y+4, r23	; 0x04
     dec:	81 2f       	mov	r24, r17
     dee:	90 2f       	mov	r25, r16
     df0:	a9 8d       	ldd	r26, Y+25	; 0x19
     df2:	ba 8d       	ldd	r27, Y+26	; 0x1a
     df4:	8d 83       	std	Y+5, r24	; 0x05
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	af 83       	std	Y+7, r26	; 0x07
     dfa:	b8 87       	std	Y+8, r27	; 0x08
     dfc:	3a 81       	ldd	r19, Y+2	; 0x02
     dfe:	4b 81       	ldd	r20, Y+3	; 0x03
     e00:	5c 81       	ldd	r21, Y+4	; 0x04
     e02:	61 2f       	mov	r22, r17
     e04:	7e 81       	ldd	r23, Y+6	; 0x06
}
     e06:	8f 81       	ldd	r24, Y+7	; 0x07
     e08:	98 85       	ldd	r25, Y+8	; 0x08
     e0a:	6a 96       	adiw	r28, 0x1a	; 26
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	7f 90       	pop	r7
     e2a:	6f 90       	pop	r6
     e2c:	5f 90       	pop	r5
     e2e:	4f 90       	pop	r4
     e30:	3f 90       	pop	r3
     e32:	2f 90       	pop	r2
     e34:	08 95       	ret

00000e36 <_ZN4PumpC1Ev>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Pump::Pump()
     e36:	fc 01       	movw	r30, r24
{
	PORTC_DIRSET = PIN3_bm;
     e38:	98 e0       	ldi	r25, 0x08	; 8
     e3a:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	on = true;
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
     e3e:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
     e42:	10 82       	st	Z, r1
     e44:	08 95       	ret

00000e46 <_ZN4Pump6turnOnEv>:
//=== PUBLIC FUNCTIONS ===//
//========================//

void Pump::turnOn()
{
	PORTC_OUTSET = PIN3_bm;
     e46:	28 e0       	ldi	r18, 0x08	; 8
     e48:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	on = true;
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
     e52:	08 95       	ret

00000e54 <_ZN4Pump7turnOffEv>:
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
     e54:	28 e0       	ldi	r18, 0x08	; 8
     e56:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
     e5a:	fc 01       	movw	r30, r24
     e5c:	10 82       	st	Z, r1
     e5e:	08 95       	ret

00000e60 <__vector_14>:
}

void Tcc0::enableTimerErrorInterrupt(Utils::interruptLevel_e timerErrorLevel)
{
	this->timerErrorLevel = timerErrorLevel;
	TCC0_INTCTRLA = (timerErrorLevel << TC0_ERRINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_ERRINTLVL_gm);
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	08 b6       	in	r0, 0x38	; 56
     e6c:	0f 92       	push	r0
     e6e:	18 be       	out	0x38, r1	; 56
     e70:	09 b6       	in	r0, 0x39	; 57
     e72:	0f 92       	push	r0
     e74:	19 be       	out	0x39, r1	; 57
     e76:	0b b6       	in	r0, 0x3b	; 59
     e78:	0f 92       	push	r0
     e7a:	1b be       	out	0x3b, r1	; 59
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	60 91 54 22 	lds	r22, 0x2254	; 0x802254 <_ZN4Tcc016timeIncrement_msE>
     e98:	70 91 55 22 	lds	r23, 0x2255	; 0x802255 <_ZN4Tcc016timeIncrement_msE+0x1>
     e9c:	80 91 56 22 	lds	r24, 0x2256	; 0x802256 <_ZN4Tcc016timeIncrement_msE+0x2>
     ea0:	90 91 57 22 	lds	r25, 0x2257	; 0x802257 <_ZN4Tcc016timeIncrement_msE+0x3>
     ea4:	20 91 58 22 	lds	r18, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
     ea8:	30 91 59 22 	lds	r19, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
     eac:	40 91 5a 22 	lds	r20, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
     eb0:	50 91 5b 22 	lds	r21, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
     eb4:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
     eb8:	60 93 58 22 	sts	0x2258, r22	; 0x802258 <_ZN4Tcc07time_msE>
     ebc:	70 93 59 22 	sts	0x2259, r23	; 0x802259 <_ZN4Tcc07time_msE+0x1>
     ec0:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <_ZN4Tcc07time_msE+0x2>
     ec4:	90 93 5b 22 	sts	0x225B, r25	; 0x80225b <_ZN4Tcc07time_msE+0x3>
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0b be       	out	0x3b, r0	; 59
     ee4:	0f 90       	pop	r0
     ee6:	09 be       	out	0x39, r0	; 57
     ee8:	0f 90       	pop	r0
     eea:	08 be       	out	0x38, r0	; 56
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>:
}

void Tcc0::enableTimerOverflowInterrupt(Utils::interruptLevel_e timerOverflowLevel)
{
	this->timerOverflowLevel = timerOverflowLevel;
     ef6:	fc 01       	movw	r30, r24
     ef8:	67 87       	std	Z+15, r22	; 0x0f
	TCC0_INTCTRLA = (timerOverflowLevel << TC0_OVFINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_OVFINTLVL_gm);
     efa:	e6 e0       	ldi	r30, 0x06	; 6
     efc:	f8 e0       	ldi	r31, 0x08	; 8
     efe:	80 81       	ld	r24, Z
     f00:	8c 7f       	andi	r24, 0xFC	; 252
     f02:	68 2b       	or	r22, r24
     f04:	60 83       	st	Z, r22
     f06:	08 95       	ret

00000f08 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
     f08:	0f 93       	push	r16
//=== SETTERS ===//
//===============//

void Tcc0::setClockSource(clockSource_e clockSource)
{
	this->clockSource = clockSource;
     f0a:	fc 01       	movw	r30, r24
     f0c:	60 83       	st	Z, r22
	TCC0_CTRLA = clockSource;
     f0e:	60 93 00 08 	sts	0x0800, r22	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
     f12:	20 93 54 22 	sts	0x2254, r18	; 0x802254 <_ZN4Tcc016timeIncrement_msE>
     f16:	30 93 55 22 	sts	0x2255, r19	; 0x802255 <_ZN4Tcc016timeIncrement_msE+0x1>
     f1a:	40 93 56 22 	sts	0x2256, r20	; 0x802256 <_ZN4Tcc016timeIncrement_msE+0x2>
     f1e:	50 93 57 22 	sts	0x2257, r21	; 0x802257 <_ZN4Tcc016timeIncrement_msE+0x3>
	enableTimerOverflowInterrupt(level);
     f22:	60 2f       	mov	r22, r16
}
     f24:	0f 91       	pop	r16

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
	enableTimerOverflowInterrupt(level);
     f26:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>

00000f2a <_ZN4Twie8waitReadEv>:
}

void Twie::setBaudRate(uint8_t baudRate)
{
	this->baudRate = baudRate;
	TWIE_MASTER_BAUD = baudRate;
     f2a:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f2e:	87 ff       	sbrs	r24, 7
     f30:	fc cf       	rjmp	.-8      	; 0xf2a <_ZN4Twie8waitReadEv>
     f32:	08 95       	ret

00000f34 <_ZN4Twie9waitWriteEv>:
     f34:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f38:	86 ff       	sbrs	r24, 6
     f3a:	fc cf       	rjmp	.-8      	; 0xf34 <_ZN4Twie9waitWriteEv>
     f3c:	08 95       	ret

00000f3e <_ZN4Twie7isErrorEv>:
     f3e:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f42:	9c 71       	andi	r25, 0x1C	; 28
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	09 f4       	brne	.+2      	; 0xf4a <_ZN4Twie7isErrorEv+0xc>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	08 95       	ret

00000f4c <_ZN4Twie12errorHandlerEPKc>:
     f4c:	08 95       	ret

00000f4e <_ZN4Twie12enableMasterEv>:
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	fc 01       	movw	r30, r24
     f52:	25 83       	std	Z+5, r18	; 0x05
     f54:	e1 ea       	ldi	r30, 0xA1	; 161
     f56:	f4 e0       	ldi	r31, 0x04	; 4
     f58:	80 81       	ld	r24, Z
     f5a:	88 60       	ori	r24, 0x08	; 8
     f5c:	80 83       	st	Z, r24
     f5e:	08 95       	ret

00000f60 <_ZN4Twie15enableSmartModeEv>:
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	fc 01       	movw	r30, r24
     f64:	20 87       	std	Z+8, r18	; 0x08
     f66:	e2 ea       	ldi	r30, 0xA2	; 162
     f68:	f4 e0       	ldi	r31, 0x04	; 4
     f6a:	80 81       	ld	r24, Z
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	80 83       	st	Z, r24
     f70:	08 95       	ret

00000f72 <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>:
     f72:	fc 01       	movw	r30, r24
     f74:	66 83       	std	Z+6, r22	; 0x06
     f76:	e2 ea       	ldi	r30, 0xA2	; 162
     f78:	f4 e0       	ldi	r31, 0x04	; 4
     f7a:	80 81       	ld	r24, Z
     f7c:	94 e0       	ldi	r25, 0x04	; 4
     f7e:	69 9f       	mul	r22, r25
     f80:	b0 01       	movw	r22, r0
     f82:	11 24       	eor	r1, r1
     f84:	83 7f       	andi	r24, 0xF3	; 243
     f86:	68 2b       	or	r22, r24
     f88:	60 83       	st	Z, r22
     f8a:	08 95       	ret

00000f8c <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>:
     f8c:	fc 01       	movw	r30, r24
     f8e:	61 87       	std	Z+9, r22	; 0x09
     f90:	66 23       	and	r22, r22
     f92:	19 f0       	breq	.+6      	; 0xf9a <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0xe>
     f94:	61 30       	cpi	r22, 0x01	; 1
     f96:	29 f0       	breq	.+10     	; 0xfa2 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x16>
     f98:	08 95       	ret
     f9a:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     f9e:	8b 7f       	andi	r24, 0xFB	; 251
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x1c>
     fa2:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fa6:	84 60       	ori	r24, 0x04	; 4
     fa8:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fac:	08 95       	ret

00000fae <_ZN4Twie7getDataENS_19acknowledgeAction_eE>:
     fae:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
     fb2:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
     fb6:	08 95       	ret

00000fb8 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>:
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ec 01       	movw	r28, r24
     fc0:	16 2f       	mov	r17, r22
     fc2:	64 2f       	mov	r22, r20
     fc4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
     fc8:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fcc:	8c 7f       	andi	r24, 0xFC	; 252
     fce:	81 2b       	or	r24, r17
     fd0:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
     fd4:	12 30       	cpi	r17, 0x02	; 2
     fd6:	31 f4       	brne	.+12     	; 0xfe4 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE+0x2c>
     fd8:	ce 01       	movw	r24, r28
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <_ZN4Twie8waitReadEv>
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	08 95       	ret

00000fec <_ZN4Twie10setBusIdleEv>:
     fec:	e4 ea       	ldi	r30, 0xA4	; 164
     fee:	f4 e0       	ldi	r31, 0x04	; 4
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	80 83       	st	Z, r24
     ff6:	08 95       	ret

00000ff8 <_ZN4TwieC1EhNS_5ibt_eE>:
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	ec 01       	movw	r28, r24
     ffe:	6a 87       	std	Y+10, r22	; 0x0a
    1000:	4e 83       	std	Y+6, r20	; 0x06
    1002:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7004a5>
    1006:	64 2f       	mov	r22, r20
    1008:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN4Twie15enableSmartModeEv>
    1012:	ce 01       	movw	r24, r28
    1014:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN4Twie12enableMasterEv>
    1018:	ce 01       	movw	r24, r28
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_ZN4Twie10setBusIdleEv>

00001022 <_ZN4Twie10setAddressEhNS_11direction_eE>:
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
		TWIE_MASTER_ADDR = (address << 1) | 1;
    1022:	66 0f       	add	r22, r22
	TWIE_MASTER_BAUD = baudRate;
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
    1024:	41 30       	cpi	r20, 0x01	; 1
    1026:	29 f4       	brne	.+10     	; 0x1032 <_ZN4Twie10setAddressEhNS_11direction_eE+0x10>
		TWIE_MASTER_ADDR = (address << 1) | 1;
    1028:	61 60       	ori	r22, 0x01	; 1
    102a:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitRead();
    102e:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <_ZN4Twie8waitReadEv>
	} else {
		TWIE_MASTER_ADDR = (address << 1);
    1032:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitWrite();
    1036:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <_ZN4Twie9waitWriteEv>

0000103a <_ZN4Twie7setDataEh>:
	}
}

void Twie::setData(uint8_t data)
{
	TWIE_MASTER_DATA = data;
    103a:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
	waitWrite();
    103e:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <_ZN4Twie9waitWriteEv>

00001042 <__vector_28>:
}

void UsartC1::setCharacterSize(characterSize_e characterSize)
{
	this->characterSize = characterSize;
	USARTC1_CTRLC = (characterSize << USART_CHSIZE_gp)|(USARTC1_CTRLC & ~USART_CHSIZE_gm);
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	08 b6       	in	r0, 0x38	; 56
    104e:	0f 92       	push	r0
    1050:	18 be       	out	0x38, r1	; 56
    1052:	8f 93       	push	r24
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <_ZN7UsartC17rxcFlagE>
    105a:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    105e:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <_ZN7UsartC16rxCharE>
    1062:	8f 91       	pop	r24
    1064:	0f 90       	pop	r0
    1066:	08 be       	out	0x38, r0	; 56
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <_ZN7UsartC130enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>:
    1072:	fc 01       	movw	r30, r24
    1074:	60 83       	st	Z, r22
    1076:	e3 eb       	ldi	r30, 0xB3	; 179
    1078:	f8 e0       	ldi	r31, 0x08	; 8
    107a:	80 81       	ld	r24, Z
    107c:	90 e1       	ldi	r25, 0x10	; 16
    107e:	69 9f       	mul	r22, r25
    1080:	b0 01       	movw	r22, r0
    1082:	11 24       	eor	r1, r1
    1084:	8f 7c       	andi	r24, 0xCF	; 207
    1086:	68 2b       	or	r22, r24
    1088:	60 83       	st	Z, r22
    108a:	08 95       	ret

0000108c <_ZN7UsartC114enableReceiverEv>:
    108c:	21 e0       	ldi	r18, 0x01	; 1
    108e:	fc 01       	movw	r30, r24
    1090:	23 83       	std	Z+3, r18	; 0x03
    1092:	e4 eb       	ldi	r30, 0xB4	; 180
    1094:	f8 e0       	ldi	r31, 0x08	; 8
    1096:	80 81       	ld	r24, Z
    1098:	80 61       	ori	r24, 0x10	; 16
    109a:	80 83       	st	Z, r24
    109c:	08 95       	ret

0000109e <_ZN7UsartC117enableTransmitterEv>:
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	fc 01       	movw	r30, r24
    10a2:	24 83       	std	Z+4, r18	; 0x04
    10a4:	e4 eb       	ldi	r30, 0xB4	; 180
    10a6:	f8 e0       	ldi	r31, 0x08	; 8
    10a8:	80 81       	ld	r24, Z
    10aa:	88 60       	ori	r24, 0x08	; 8
    10ac:	80 83       	st	Z, r24
    10ae:	08 95       	ret

000010b0 <_ZN7UsartC129enableDoubleTransmissionSpeedEv>:
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	fc 01       	movw	r30, r24
    10b4:	25 83       	std	Z+5, r18	; 0x05
    10b6:	e4 eb       	ldi	r30, 0xB4	; 180
    10b8:	f8 e0       	ldi	r31, 0x08	; 8
    10ba:	80 81       	ld	r24, Z
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	80 83       	st	Z, r24
    10c0:	08 95       	ret

000010c2 <_ZN7UsartC17setBSELEj>:
}

void UsartC1::setBSEL(uint16_t bsel)
{
	this->bsel = bsel;
    10c2:	fc 01       	movw	r30, r24
    10c4:	63 87       	std	Z+11, r22	; 0x0b
    10c6:	74 87       	std	Z+12, r23	; 0x0c
	USARTC1_BAUDCTRLA = bsel;
    10c8:	60 93 b6 08 	sts	0x08B6, r22	; 0x8008b6 <__TEXT_REGION_LENGTH__+0x7008b6>
	USARTC1_BAUDCTRLB = (bsel >> 8)|(USARTC1_BAUDCTRLB & 0x0F);
    10cc:	e7 eb       	ldi	r30, 0xB7	; 183
    10ce:	f8 e0       	ldi	r31, 0x08	; 8
    10d0:	80 81       	ld	r24, Z
    10d2:	8f 70       	andi	r24, 0x0F	; 15
    10d4:	78 2b       	or	r23, r24
    10d6:	70 83       	st	Z, r23
    10d8:	08 95       	ret

000010da <_ZN7UsartC19setBSCALEEh>:
}

void UsartC1::setBSCALE(uint8_t bscale)
{
	this->bscale = bscale;
    10da:	fc 01       	movw	r30, r24
    10dc:	65 87       	std	Z+13, r22	; 0x0d
	USARTC1_BAUDCTRLB = (bscale << USART_BSCALE_gp)|(USARTC1_BAUDCTRLB & ~USART_BSCALE_gm);
    10de:	e7 eb       	ldi	r30, 0xB7	; 183
    10e0:	f8 e0       	ldi	r31, 0x08	; 8
    10e2:	80 81       	ld	r24, Z
    10e4:	90 e1       	ldi	r25, 0x10	; 16
    10e6:	69 9f       	mul	r22, r25
    10e8:	b0 01       	movw	r22, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	8f 70       	andi	r24, 0x0F	; 15
    10ee:	68 2b       	or	r22, r24
    10f0:	60 83       	st	Z, r22
    10f2:	08 95       	ret

000010f4 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

UsartC1::UsartC1(Usart::baudrate_s baudrate,Utils::interruptLevel_e receiveCompleteInterruptLevel)
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	ec 01       	movw	r28, r24
    1100:	f6 2e       	mov	r15, r22
    1102:	07 2f       	mov	r16, r23
    1104:	12 2f       	mov	r17, r18
{
	setBSEL(baudrate.bsel);
    1106:	ba 01       	movw	r22, r20
    1108:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN7UsartC17setBSELEj>
	setBSCALE(baudrate.bscale);
    110c:	6f 2d       	mov	r22, r15
    110e:	ce 01       	movw	r24, r28
    1110:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN7UsartC19setBSCALEEh>
	if (baudrate.clk2x) enableDoubleTransmissionSpeed();
    1114:	00 23       	and	r16, r16
    1116:	19 f0       	breq	.+6      	; 0x111e <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE+0x2a>
    1118:	ce 01       	movw	r24, r28
    111a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN7UsartC129enableDoubleTransmissionSpeedEv>
	enableReceiver();
    111e:	ce 01       	movw	r24, r28
    1120:	0e 94 46 08 	call	0x108c	; 0x108c <_ZN7UsartC114enableReceiverEv>
	enableTransmitter();
    1124:	ce 01       	movw	r24, r28
    1126:	0e 94 4f 08 	call	0x109e	; 0x109e <_ZN7UsartC117enableTransmitterEv>
	enableReceiveCompleteInterrupt(receiveCompleteInterruptLevel);
    112a:	61 2f       	mov	r22, r17
    112c:	ce 01       	movw	r24, r28
    112e:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN7UsartC130enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>
	PORTC_DIRSET = PIN7_bm;
    1132:	80 e8       	ldi	r24, 0x80	; 128
    1134:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	08 95       	ret

00001144 <__vector_58>:
}

void UsartE0::setCharacterSize(characterSize_e characterSize)
{
	this->characterSize = characterSize;
	USARTE0_CTRLC = (characterSize << USART_CHSIZE_gp)|(USARTE0_CTRLC & ~USART_CHSIZE_gm);
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	08 b6       	in	r0, 0x38	; 56
    1150:	0f 92       	push	r0
    1152:	18 be       	out	0x38, r1	; 56
    1154:	8f 93       	push	r24
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <_ZN7UsartE07rxcFlagE>
    115c:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1160:	80 93 5e 22 	sts	0x225E, r24	; 0x80225e <_ZN7UsartE06rxCharE>
    1164:	8f 91       	pop	r24
    1166:	0f 90       	pop	r0
    1168:	08 be       	out	0x38, r0	; 56
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <_ZN7UsartE021waitDataRegisterEmptyEv>:
    1174:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
    1178:	85 ff       	sbrs	r24, 5
    117a:	fc cf       	rjmp	.-8      	; 0x1174 <_ZN7UsartE021waitDataRegisterEmptyEv>
    117c:	08 95       	ret

0000117e <_ZN7UsartE010sendStringEPKc>:
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	7c 01       	movw	r14, r24
    118a:	8b 01       	movw	r16, r22
    118c:	f8 01       	movw	r30, r16
    118e:	c1 91       	ld	r28, Z+
    1190:	8f 01       	movw	r16, r30
    1192:	cc 23       	and	r28, r28
    1194:	31 f0       	breq	.+12     	; 0x11a2 <_ZN7UsartE010sendStringEPKc+0x24>
    1196:	c7 01       	movw	r24, r14
    1198:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7UsartE021waitDataRegisterEmptyEv>
    119c:	c0 93 a0 0a 	sts	0x0AA0, r28	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    11a0:	f5 cf       	rjmp	.-22     	; 0x118c <_ZN7UsartE010sendStringEPKc+0xe>
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>:
    11ae:	fc 01       	movw	r30, r24
    11b0:	60 83       	st	Z, r22
    11b2:	e3 ea       	ldi	r30, 0xA3	; 163
    11b4:	fa e0       	ldi	r31, 0x0A	; 10
    11b6:	80 81       	ld	r24, Z
    11b8:	90 e1       	ldi	r25, 0x10	; 16
    11ba:	69 9f       	mul	r22, r25
    11bc:	b0 01       	movw	r22, r0
    11be:	11 24       	eor	r1, r1
    11c0:	8f 7c       	andi	r24, 0xCF	; 207
    11c2:	68 2b       	or	r22, r24
    11c4:	60 83       	st	Z, r22
    11c6:	08 95       	ret

000011c8 <_ZN7UsartE014enableReceiverEv>:
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	fc 01       	movw	r30, r24
    11cc:	23 83       	std	Z+3, r18	; 0x03
    11ce:	e4 ea       	ldi	r30, 0xA4	; 164
    11d0:	fa e0       	ldi	r31, 0x0A	; 10
    11d2:	80 81       	ld	r24, Z
    11d4:	80 61       	ori	r24, 0x10	; 16
    11d6:	80 83       	st	Z, r24
    11d8:	08 95       	ret

000011da <_ZN7UsartE017enableTransmitterEv>:
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	fc 01       	movw	r30, r24
    11de:	24 83       	std	Z+4, r18	; 0x04
    11e0:	e4 ea       	ldi	r30, 0xA4	; 164
    11e2:	fa e0       	ldi	r31, 0x0A	; 10
    11e4:	80 81       	ld	r24, Z
    11e6:	88 60       	ori	r24, 0x08	; 8
    11e8:	80 83       	st	Z, r24
    11ea:	08 95       	ret

000011ec <_ZN7UsartE029enableDoubleTransmissionSpeedEv>:
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	fc 01       	movw	r30, r24
    11f0:	25 83       	std	Z+5, r18	; 0x05
    11f2:	e4 ea       	ldi	r30, 0xA4	; 164
    11f4:	fa e0       	ldi	r31, 0x0A	; 10
    11f6:	80 81       	ld	r24, Z
    11f8:	84 60       	ori	r24, 0x04	; 4
    11fa:	80 83       	st	Z, r24
    11fc:	08 95       	ret

000011fe <_ZN7UsartE07setBSELEj>:
}

void UsartE0::setBSEL(uint16_t bsel)
{
	this->bsel = bsel;
    11fe:	fc 01       	movw	r30, r24
    1200:	63 87       	std	Z+11, r22	; 0x0b
    1202:	74 87       	std	Z+12, r23	; 0x0c
	USARTE0_BAUDCTRLA = bsel;
    1204:	60 93 a6 0a 	sts	0x0AA6, r22	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x700aa6>
	USARTE0_BAUDCTRLB = (bsel >> 8)|(USARTE0_BAUDCTRLB & 0x0F);
    1208:	e7 ea       	ldi	r30, 0xA7	; 167
    120a:	fa e0       	ldi	r31, 0x0A	; 10
    120c:	80 81       	ld	r24, Z
    120e:	8f 70       	andi	r24, 0x0F	; 15
    1210:	78 2b       	or	r23, r24
    1212:	70 83       	st	Z, r23
    1214:	08 95       	ret

00001216 <_ZN7UsartE09setBSCALEEh>:
}

void UsartE0::setBSCALE(uint8_t bscale)
{
	this->bscale = bscale;
    1216:	fc 01       	movw	r30, r24
    1218:	65 87       	std	Z+13, r22	; 0x0d
	USARTE0_BAUDCTRLB = (bscale << USART_BSCALE_gp)|(USARTE0_BAUDCTRLB & ~USART_BSCALE_gm);
    121a:	e7 ea       	ldi	r30, 0xA7	; 167
    121c:	fa e0       	ldi	r31, 0x0A	; 10
    121e:	80 81       	ld	r24, Z
    1220:	90 e1       	ldi	r25, 0x10	; 16
    1222:	69 9f       	mul	r22, r25
    1224:	b0 01       	movw	r22, r0
    1226:	11 24       	eor	r1, r1
    1228:	8f 70       	andi	r24, 0x0F	; 15
    122a:	68 2b       	or	r22, r24
    122c:	60 83       	st	Z, r22
    122e:	08 95       	ret

00001230 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

UsartE0::UsartE0(Usart::baudrate_s baudrate,Utils::interruptLevel_e receiveCompleteInterruptLevel)
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
    123c:	f6 2e       	mov	r15, r22
    123e:	07 2f       	mov	r16, r23
    1240:	12 2f       	mov	r17, r18
{
	setBSEL(baudrate.bsel);
    1242:	ba 01       	movw	r22, r20
    1244:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN7UsartE07setBSELEj>
	setBSCALE(baudrate.bscale);
    1248:	6f 2d       	mov	r22, r15
    124a:	ce 01       	movw	r24, r28
    124c:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN7UsartE09setBSCALEEh>
	if (baudrate.clk2x) enableDoubleTransmissionSpeed();
    1250:	00 23       	and	r16, r16
    1252:	19 f0       	breq	.+6      	; 0x125a <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE+0x2a>
    1254:	ce 01       	movw	r24, r28
    1256:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_ZN7UsartE029enableDoubleTransmissionSpeedEv>
	enableReceiver();
    125a:	ce 01       	movw	r24, r28
    125c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN7UsartE014enableReceiverEv>
	enableTransmitter();
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN7UsartE017enableTransmitterEv>
	enableReceiveCompleteInterrupt(receiveCompleteInterruptLevel);
    1266:	61 2f       	mov	r22, r17
    1268:	ce 01       	movw	r24, r28
    126a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>
	PORTE_DIRSET = PIN3_bm;
    126e:	88 e0       	ldi	r24, 0x08	; 8
    1270:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	08 95       	ret

00001280 <_ZN5Utils14setSystemClockENS_13systemClock_eE>:

char Utils::txBuf[TX_LEN];

void Utils::setSystemClock(systemClock_e sc)
{
	OSC_CTRL |= 1 << sc; // enable oscillator
    1280:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	08 2e       	mov	r0, r24
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x10>
    128c:	44 0f       	add	r20, r20
    128e:	55 1f       	adc	r21, r21
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <_ZN5Utils14setSystemClockENS_13systemClock_eE+0xc>
    1294:	94 2b       	or	r25, r20
    1296:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC_STATUS & (1 << sc))) ; // wait until oscillator is ready
    129a:	20 91 51 00 	lds	r18, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	24 23       	and	r18, r20
    12a2:	35 23       	and	r19, r21
    12a4:	23 2b       	or	r18, r19
    12a6:	c9 f3       	breq	.-14     	; 0x129a <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x1a>
	CCP = CCP_IOREG_gc; // trigger protection mechanism
    12a8:	98 ed       	ldi	r25, 0xD8	; 216
    12aa:	94 bf       	out	0x34, r25	; 52
	CLK_CTRL = sc << CLK_SCLKSEL_gp; // select system clock
    12ac:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    12b0:	08 95       	ret

000012b2 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>:
}

void Utils::enableInterruptLevel(interruptLevel_e il)
{
	PMIC_CTRL |= (1 << (il-1));
    12b2:	e2 ea       	ldi	r30, 0xA2	; 162
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	40 81       	ld	r20, Z
    12b8:	81 50       	subi	r24, 0x01	; 1
    12ba:	21 e0       	ldi	r18, 0x01	; 1
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	b9 01       	movw	r22, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x14>
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x10>
    12ca:	cb 01       	movw	r24, r22
    12cc:	84 2b       	or	r24, r20
    12ce:	80 83       	st	Z, r24
    12d0:	08 95       	ret

000012d2 <_ZN5Utils21globalInterruptEnableEv>:
}

void Utils::globalInterruptEnable()
{
	CPU_SREG |= CPU_I_bm;
    12d2:	8f b7       	in	r24, 0x3f	; 63
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	8f bf       	out	0x3f, r24	; 63
    12d8:	08 95       	ret

000012da <_ZN5Utils8delay_msEj>:
}

void Utils::delay_ms(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_ms(1);
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	28 17       	cp	r18, r24
    12e0:	39 07       	cpc	r19, r25
    12e2:	49 f0       	breq	.+18     	; 0x12f6 <_ZN5Utils8delay_msEj+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e4:	ef e3       	ldi	r30, 0x3F	; 63
    12e6:	ff e1       	ldi	r31, 0x1F	; 31
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <_ZN5Utils8delay_msEj+0xe>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <_ZN5Utils8delay_msEj+0x14>
    12ee:	00 00       	nop
    12f0:	2f 5f       	subi	r18, 0xFF	; 255
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	f4 cf       	rjmp	.-24     	; 0x12de <_ZN5Utils8delay_msEj+0x4>
    12f6:	08 95       	ret

000012f8 <_ZN5Utils8delay_usEj>:
}

void Utils::delay_us(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_us(1);
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	28 17       	cp	r18, r24
    12fe:	39 07       	cpc	r19, r25
    1300:	39 f0       	breq	.+14     	; 0x1310 <_ZN5Utils8delay_usEj+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1302:	4a e0       	ldi	r20, 0x0A	; 10
    1304:	4a 95       	dec	r20
    1306:	f1 f7       	brne	.-4      	; 0x1304 <_ZN5Utils8delay_usEj+0xc>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <_ZN5Utils8delay_usEj+0x12>
    130a:	2f 5f       	subi	r18, 0xFF	; 255
    130c:	3f 4f       	sbci	r19, 0xFF	; 255
    130e:	f6 cf       	rjmp	.-20     	; 0x12fc <_ZN5Utils8delay_usEj+0x4>
    1310:	08 95       	ret

00001312 <_Z12oversampleO2jR4Adca>:
}

double o2_counts2pct(double counts, Utils::gascal_s gascal)
{
	return counts*gascal.gain + gascal.offset;
}
    1312:	af 92       	push	r10
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	5c 01       	movw	r10, r24
    1328:	8b 01       	movw	r16, r22
    132a:	c0 e0       	ldi	r28, 0x00	; 0
    132c:	d0 e0       	ldi	r29, 0x00	; 0
    132e:	c1 2c       	mov	r12, r1
    1330:	d1 2c       	mov	r13, r1
    1332:	76 01       	movw	r14, r12
    1334:	ca 15       	cp	r28, r10
    1336:	db 05       	cpc	r29, r11
    1338:	51 f0       	breq	.+20     	; 0x134e <_Z12oversampleO2jR4Adca+0x3c>
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	c8 01       	movw	r24, r16
    133e:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4Adca11readChannelENS_9channel_eE>
    1342:	c8 0e       	add	r12, r24
    1344:	d9 1e       	adc	r13, r25
    1346:	e1 1c       	adc	r14, r1
    1348:	f1 1c       	adc	r15, r1
    134a:	21 96       	adiw	r28, 0x01	; 1
    134c:	f3 cf       	rjmp	.-26     	; 0x1334 <_Z12oversampleO2jR4Adca+0x22>
    134e:	c7 01       	movw	r24, r14
    1350:	b6 01       	movw	r22, r12
    1352:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
    1356:	6b 01       	movw	r12, r22
    1358:	7c 01       	movw	r14, r24
    135a:	be 01       	movw	r22, r28
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatunsisf>
    1364:	9b 01       	movw	r18, r22
    1366:	ac 01       	movw	r20, r24
    1368:	c7 01       	movw	r24, r14
    136a:	b6 01       	movw	r22, r12
    136c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divsf3>
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	08 95       	ret

00001386 <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0>:

void flow_acq(Ms5525dso & myFlowSensor, Adca & myAdc, Tcc0 & myTimer, UsartE0 & myUsart)
{
    1386:	7f 92       	push	r7
    1388:	8f 92       	push	r8
    138a:	9f 92       	push	r9
    138c:	af 92       	push	r10
    138e:	bf 92       	push	r11
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	28 97       	sbiw	r28, 0x08	; 8
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	4c 01       	movw	r8, r24
    13ac:	5b 01       	movw	r10, r22
    13ae:	89 01       	movw	r16, r18
	myUsart.sendString("sep=,\r\nTime [ms],Pressure [psi],Temperature [oC],O2 [counts]\r\n");
    13b0:	67 e4       	ldi	r22, 0x47	; 71
    13b2:	71 e2       	ldi	r23, 0x21	; 33
    13b4:	c9 01       	movw	r24, r18
    13b6:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	while (!(myUsart.isRXC()))
	{
		Ms5525dso::data_s flowData = myFlowSensor.read();
		uint16_t o2_counts = myAdc.readChannel(Adca::CH_0);
		snprintf(Utils::txBuf, TX_LEN, "%.3f,%.4f,%.2f,%d\r\n", myTimer.getTime_ms(), flowData.pressure, flowData.temperature, o2_counts);
    13ba:	86 e8       	ldi	r24, 0x86	; 134
    13bc:	c8 2e       	mov	r12, r24
    13be:	81 e2       	ldi	r24, 0x21	; 33
    13c0:	d8 2e       	mov	r13, r24
    13c2:	90 e4       	ldi	r25, 0x40	; 64
    13c4:	79 2e       	mov	r7, r25
    13c6:	20 e6       	ldi	r18, 0x60	; 96
    13c8:	e2 2e       	mov	r14, r18
    13ca:	22 e2       	ldi	r18, 0x22	; 34
    13cc:	f2 2e       	mov	r15, r18
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    13ce:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <_ZN7UsartE07rxcFlagE>
}

void flow_acq(Ms5525dso & myFlowSensor, Adca & myAdc, Tcc0 & myTimer, UsartE0 & myUsart)
{
	myUsart.sendString("sep=,\r\nTime [ms],Pressure [psi],Temperature [oC],O2 [counts]\r\n");
	while (!(myUsart.isRXC()))
    13d2:	81 11       	cpse	r24, r1
    13d4:	3d c0       	rjmp	.+122    	; 0x1450 <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0+0xca>
	{
		Ms5525dso::data_s flowData = myFlowSensor.read();
    13d6:	c4 01       	movw	r24, r8
    13d8:	0e 94 b0 05 	call	0xb60	; 0xb60 <_ZN9Ms5525dso4readEv>
    13dc:	29 83       	std	Y+1, r18	; 0x01
    13de:	3a 83       	std	Y+2, r19	; 0x02
    13e0:	4b 83       	std	Y+3, r20	; 0x03
    13e2:	5c 83       	std	Y+4, r21	; 0x04
    13e4:	6d 83       	std	Y+5, r22	; 0x05
    13e6:	7e 83       	std	Y+6, r23	; 0x06
    13e8:	8f 83       	std	Y+7, r24	; 0x07
    13ea:	98 87       	std	Y+8, r25	; 0x08
		uint16_t o2_counts = myAdc.readChannel(Adca::CH_0);
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	c5 01       	movw	r24, r10
    13f0:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4Adca11readChannelENS_9channel_eE>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile double time_ms;
	static volatile double timeIncrement_ms;
	double getTime_ms(){return time_ms;};
    13f4:	40 91 58 22 	lds	r20, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    13f8:	50 91 59 22 	lds	r21, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    13fc:	60 91 5a 22 	lds	r22, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    1400:	70 91 5b 22 	lds	r23, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
		snprintf(Utils::txBuf, TX_LEN, "%.3f,%.4f,%.2f,%d\r\n", myTimer.getTime_ms(), flowData.pressure, flowData.temperature, o2_counts);
    1404:	9f 93       	push	r25
    1406:	8f 93       	push	r24
    1408:	88 85       	ldd	r24, Y+8	; 0x08
    140a:	8f 93       	push	r24
    140c:	8f 81       	ldd	r24, Y+7	; 0x07
    140e:	8f 93       	push	r24
    1410:	8e 81       	ldd	r24, Y+6	; 0x06
    1412:	8f 93       	push	r24
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	8f 93       	push	r24
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	8f 93       	push	r24
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	8f 93       	push	r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	8f 93       	push	r24
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	8f 93       	push	r24
    1428:	7f 93       	push	r23
    142a:	6f 93       	push	r22
    142c:	5f 93       	push	r21
    142e:	4f 93       	push	r20
    1430:	df 92       	push	r13
    1432:	cf 92       	push	r12
    1434:	1f 92       	push	r1
    1436:	7f 92       	push	r7
    1438:	ff 92       	push	r15
    143a:	ef 92       	push	r14
    143c:	0e 94 b0 18 	call	0x3160	; 0x3160 <snprintf>
		myUsart.sendString(Utils::txBuf);
    1440:	60 e6       	ldi	r22, 0x60	; 96
    1442:	72 e2       	ldi	r23, 0x22	; 34
    1444:	c8 01       	movw	r24, r16
    1446:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
}

void flow_acq(Ms5525dso & myFlowSensor, Adca & myAdc, Tcc0 & myTimer, UsartE0 & myUsart)
{
	myUsart.sendString("sep=,\r\nTime [ms],Pressure [psi],Temperature [oC],O2 [counts]\r\n");
	while (!(myUsart.isRXC()))
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	bf cf       	rjmp	.-130    	; 0x13ce <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0+0x48>
	void setRXC(bool b){rxcFlag = b;};
    1450:	10 92 5f 22 	sts	0x225F, r1	; 0x80225f <_ZN7UsartE07rxcFlagE>
		uint16_t o2_counts = myAdc.readChannel(Adca::CH_0);
		snprintf(Utils::txBuf, TX_LEN, "%.3f,%.4f,%.2f,%d\r\n", myTimer.getTime_ms(), flowData.pressure, flowData.temperature, o2_counts);
		myUsart.sendString(Utils::txBuf);
	}
	myUsart.setRXC(false);
}
    1454:	28 96       	adiw	r28, 0x08	; 8
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	9f 90       	pop	r9
    1470:	8f 90       	pop	r8
    1472:	7f 90       	pop	r7
    1474:	08 95       	ret

00001476 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_>:
	Pump & myPump,
	Tcc0 & myTimer,
	UsartE0 & myUsart,
	Valve & sampleValve,
	Valve & outputValve)
{
    1476:	2f 92       	push	r2
    1478:	3f 92       	push	r3
    147a:	4f 92       	push	r4
    147c:	5f 92       	push	r5
    147e:	6f 92       	push	r6
    1480:	7f 92       	push	r7
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	a0 97       	sbiw	r28, 0x20	; 32
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	29 87       	std	Y+9, r18	; 0x09
    14a6:	3a 87       	std	Y+10, r19	; 0x0a
    14a8:	4b 87       	std	Y+11, r20	; 0x0b
    14aa:	5c 87       	std	Y+12, r21	; 0x0c
    14ac:	6d 87       	std	Y+13, r22	; 0x0d
    14ae:	7e 87       	std	Y+14, r23	; 0x0e
    14b0:	8f 87       	std	Y+15, r24	; 0x0f
    14b2:	98 8b       	std	Y+16, r25	; 0x10
    14b4:	0f 8f       	std	Y+31, r16	; 0x1f
    14b6:	18 a3       	std	Y+32, r17	; 0x20
    14b8:	e9 8e       	std	Y+25, r14	; 0x19
    14ba:	fa 8e       	std	Y+26, r15	; 0x1a
    14bc:	cb 8e       	std	Y+27, r12	; 0x1b
    14be:	dc 8e       	std	Y+28, r13	; 0x1c
    14c0:	8d 8e       	std	Y+29, r8	; 0x1d
    14c2:	9e 8e       	std	Y+30, r9	; 0x1e
    14c4:	2e a8       	ldd	r2, Y+54	; 0x36
    14c6:	3f a8       	ldd	r3, Y+55	; 0x37
    14c8:	88 ac       	ldd	r8, Y+56	; 0x38
    14ca:	99 ac       	ldd	r9, Y+57	; 0x39
    14cc:	00 e1       	ldi	r16, 0x10	; 16
    14ce:	10 e0       	ldi	r17, 0x00	; 0
	const uint8_t ZERO_FLOW_NUMBER_OF_SAMPLES = 16;
	const double FLOW_THRESHOLD = 0.075;
	const double VE_GAIN = 1;
	
	// Zero-flow set
	double zero_press = 0;
    14d0:	19 8a       	std	Y+17, r1	; 0x11
    14d2:	1a 8a       	std	Y+18, r1	; 0x12
    14d4:	1b 8a       	std	Y+19, r1	; 0x13
    14d6:	1c 8a       	std	Y+20, r1	; 0x14
	for (int i = 0; i < ZERO_FLOW_NUMBER_OF_SAMPLES; i++) {
		Ms5525dso::data_s zero = myFlowSensor.read();
    14d8:	89 8d       	ldd	r24, Y+25	; 0x19
    14da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14dc:	0e 94 b0 05 	call	0xb60	; 0xb60 <_ZN9Ms5525dso4readEv>
    14e0:	29 83       	std	Y+1, r18	; 0x01
    14e2:	3a 83       	std	Y+2, r19	; 0x02
    14e4:	4b 83       	std	Y+3, r20	; 0x03
    14e6:	5c 83       	std	Y+4, r21	; 0x04
    14e8:	6d 83       	std	Y+5, r22	; 0x05
    14ea:	7e 83       	std	Y+6, r23	; 0x06
    14ec:	8f 83       	std	Y+7, r24	; 0x07
    14ee:	98 87       	std	Y+8, r25	; 0x08
		zero_press += zero.pressure/ZERO_FLOW_NUMBER_OF_SAMPLES;
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5d e3       	ldi	r21, 0x3D	; 61
    14f8:	69 81       	ldd	r22, Y+1	; 0x01
    14fa:	7a 81       	ldd	r23, Y+2	; 0x02
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    1504:	9b 01       	movw	r18, r22
    1506:	ac 01       	movw	r20, r24
    1508:	69 89       	ldd	r22, Y+17	; 0x11
    150a:	7a 89       	ldd	r23, Y+18	; 0x12
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    1514:	69 8b       	std	Y+17, r22	; 0x11
    1516:	7a 8b       	std	Y+18, r23	; 0x12
    1518:	8b 8b       	std	Y+19, r24	; 0x13
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	01 50       	subi	r16, 0x01	; 1
    151e:	11 09       	sbc	r17, r1
	const double FLOW_THRESHOLD = 0.075;
	const double VE_GAIN = 1;
	
	// Zero-flow set
	double zero_press = 0;
	for (int i = 0; i < ZERO_FLOW_NUMBER_OF_SAMPLES; i++) {
    1520:	d9 f6       	brne	.-74     	; 0x14d8 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x62>
		Ms5525dso::data_s zero = myFlowSensor.read();
		zero_press += zero.pressure/ZERO_FLOW_NUMBER_OF_SAMPLES;
	}

	myUsart.sendString("sep=,\r\nTime [ms],O2 [%], VE [l]\r\n");
    1522:	6a e9       	ldi	r22, 0x9A	; 154
    1524:	71 e2       	ldi	r23, 0x21	; 33
    1526:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1528:	9e 8d       	ldd	r25, Y+30	; 0x1e
    152a:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
    152e:	40 90 58 22 	lds	r4, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1532:	50 90 59 22 	lds	r5, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    1536:	60 90 5a 22 	lds	r6, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    153a:	70 90 5b 22 	lds	r7, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
    153e:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1542:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    1546:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    154a:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
    154e:	8d 8b       	std	Y+21, r24	; 0x15
    1550:	9e 8b       	std	Y+22, r25	; 0x16
    1552:	af 8b       	std	Y+23, r26	; 0x17
    1554:	b8 8f       	std	Y+24, r27	; 0x18
	double totalVE = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double sampleTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
    1556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    155a:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN4Pump6turnOnEv>
		Ms5525dso::data_s zero = myFlowSensor.read();
		zero_press += zero.pressure/ZERO_FLOW_NUMBER_OF_SAMPLES;
	}

	myUsart.sendString("sep=,\r\nTime [ms],O2 [%], VE [l]\r\n");
	double totalVE = 0;
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	00 e0       	ldi	r16, 0x00	; 0
    1562:	b1 2c       	mov	r11, r1
    1564:	a1 2c       	mov	r10, r1
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    1566:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <_ZN7UsartE07rxcFlagE>
	double outputTimeFlag = myTimer.getTime_ms();
	double sampleTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
	while (!(myUsart.isRXC()))
    156a:	81 11       	cpse	r24, r1
    156c:	af c0       	rjmp	.+350    	; 0x16cc <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x256>
    156e:	c0 90 58 22 	lds	r12, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1572:	d0 90 59 22 	lds	r13, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    1576:	e0 90 5a 22 	lds	r14, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    157a:	f0 90 5b 22 	lds	r15, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
	{
		double timeNow = myTimer.getTime_ms();
								
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    157e:	d4 01       	movw	r26, r8
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	8c 91       	ld	r24, X
    1584:	a3 01       	movw	r20, r6
    1586:	92 01       	movw	r18, r4
    1588:	88 23       	and	r24, r24
    158a:	71 f0       	breq	.+28     	; 0x15a8 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x132>
    158c:	c7 01       	movw	r24, r14
    158e:	b6 01       	movw	r22, r12
    1590:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e4       	ldi	r19, 0x40	; 64
    1598:	4c e1       	ldi	r20, 0x1C	; 28
    159a:	55 e4       	ldi	r21, 0x45	; 69
    159c:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	0c f4       	brge	.+2      	; 0x15a6 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x130>
    15a4:	b2 c0       	rjmp	.+356    	; 0x170a <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x294>
    15a6:	0d c0       	rjmp	.+26     	; 0x15c2 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x14c>
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    15a8:	c7 01       	movw	r24, r14
    15aa:	b6 01       	movw	r22, r12
    15ac:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e4       	ldi	r19, 0x40	; 64
    15b4:	4c e1       	ldi	r20, 0x1C	; 28
    15b6:	55 e4       	ldi	r21, 0x45	; 69
    15b8:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    15bc:	18 16       	cp	r1, r24
    15be:	0c f4       	brge	.+2      	; 0x15c2 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x14c>
    15c0:	a8 c0       	rjmp	.+336    	; 0x1712 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x29c>
			outputTimeFlag = timeNow;
			outputValve.open();
		}
		
		// Handle o2 sample
		if (timeNow - sampleTimeFlag > SAMPLE_PERIOD_ms) {
    15c2:	2d 89       	ldd	r18, Y+21	; 0x15
    15c4:	3e 89       	ldd	r19, Y+22	; 0x16
    15c6:	4f 89       	ldd	r20, Y+23	; 0x17
    15c8:	58 8d       	ldd	r21, Y+24	; 0x18
    15ca:	c7 01       	movw	r24, r14
    15cc:	b6 01       	movw	r22, r12
    15ce:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e4       	ldi	r19, 0x40	; 64
    15d6:	4c e9       	ldi	r20, 0x9C	; 156
    15d8:	55 e4       	ldi	r21, 0x45	; 69
    15da:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    15de:	18 16       	cp	r1, r24
    15e0:	dc f5       	brge	.+118    	; 0x1658 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x1e2>
			sampleTimeFlag = timeNow;
			double o2_pct = o2_counts2pct(oversampleO2(OVERSAMPLE_COEFF, myAdc),gascal);
    15e2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15e4:	78 a1       	ldd	r23, Y+32	; 0x20
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	94 e0       	ldi	r25, 0x04	; 4
    15ea:	0e 94 89 09 	call	0x1312	; 0x1312 <_Z12oversampleO2jR4Adca>
			double ve_l = VE_GAIN*totalVE;
 			snprintf(Utils::txBuf, TX_LEN, "%.3f,%.3f,%.3f\r\n", timeNow, o2_pct, ve_l);
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	29 85       	ldd	r18, Y+9	; 0x09
    15f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    15fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    15fc:	5c 85       	ldd	r21, Y+12	; 0x0c
    15fe:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    1602:	2d 85       	ldd	r18, Y+13	; 0x0d
    1604:	3e 85       	ldd	r19, Y+14	; 0x0e
    1606:	4f 85       	ldd	r20, Y+15	; 0x0f
    1608:	58 89       	ldd	r21, Y+16	; 0x10
    160a:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    160e:	9f 93       	push	r25
    1610:	8f 93       	push	r24
    1612:	7f 93       	push	r23
    1614:	6f 93       	push	r22
    1616:	ff 92       	push	r15
    1618:	ef 92       	push	r14
    161a:	df 92       	push	r13
    161c:	cf 92       	push	r12
    161e:	ec eb       	ldi	r30, 0xBC	; 188
    1620:	f1 e2       	ldi	r31, 0x21	; 33
    1622:	ff 93       	push	r31
    1624:	ef 93       	push	r30
    1626:	1f 92       	push	r1
    1628:	80 e4       	ldi	r24, 0x40	; 64
    162a:	8f 93       	push	r24
    162c:	a0 e6       	ldi	r26, 0x60	; 96
    162e:	b2 e2       	ldi	r27, 0x22	; 34
    1630:	bf 93       	push	r27
    1632:	af 93       	push	r26
    1634:	0e 94 b0 18 	call	0x3160	; 0x3160 <snprintf>
 			myUsart.sendString(Utils::txBuf);
    1638:	60 e6       	ldi	r22, 0x60	; 96
    163a:	72 e2       	ldi	r23, 0x22	; 34
    163c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1640:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	de bf       	out	0x3e, r29	; 62
			outputValve.open();
		}
		
		// Handle o2 sample
		if (timeNow - sampleTimeFlag > SAMPLE_PERIOD_ms) {
			sampleTimeFlag = timeNow;
    1648:	cd 8a       	std	Y+21, r12	; 0x15
    164a:	de 8a       	std	Y+22, r13	; 0x16
    164c:	ef 8a       	std	Y+23, r14	; 0x17
    164e:	f8 8e       	std	Y+24, r15	; 0x18
			double o2_pct = o2_counts2pct(oversampleO2(OVERSAMPLE_COEFF, myAdc),gascal);
			double ve_l = VE_GAIN*totalVE;
 			snprintf(Utils::txBuf, TX_LEN, "%.3f,%.3f,%.3f\r\n", timeNow, o2_pct, ve_l);
 			myUsart.sendString(Utils::txBuf);
			totalVE = 0;
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	00 e0       	ldi	r16, 0x00	; 0
    1654:	b1 2c       	mov	r11, r1
    1656:	a1 2c       	mov	r10, r1
		}
		
		// Handle sample valve
 		Ms5525dso::data_s data = myFlowSensor.read();
    1658:	89 8d       	ldd	r24, Y+25	; 0x19
    165a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    165c:	0e 94 b0 05 	call	0xb60	; 0xb60 <_ZN9Ms5525dso4readEv>
    1660:	29 83       	std	Y+1, r18	; 0x01
    1662:	3a 83       	std	Y+2, r19	; 0x02
    1664:	4b 83       	std	Y+3, r20	; 0x03
    1666:	5c 83       	std	Y+4, r21	; 0x04
    1668:	6d 83       	std	Y+5, r22	; 0x05
    166a:	7e 83       	std	Y+6, r23	; 0x06
    166c:	8f 83       	std	Y+7, r24	; 0x07
    166e:	98 87       	std	Y+8, r25	; 0x08
		totalVE += sqrt(data.pressure-zero_press);
    1670:	29 89       	ldd	r18, Y+17	; 0x11
    1672:	3a 89       	ldd	r19, Y+18	; 0x12
    1674:	4b 89       	ldd	r20, Y+19	; 0x13
    1676:	5c 89       	ldd	r21, Y+20	; 0x14
    1678:	69 81       	ldd	r22, Y+1	; 0x01
    167a:	7a 81       	ldd	r23, Y+2	; 0x02
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    1684:	6b 01       	movw	r12, r22
    1686:	7c 01       	movw	r14, r24
    1688:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <sqrt>
    168c:	9b 01       	movw	r18, r22
    168e:	ac 01       	movw	r20, r24
    1690:	d8 01       	movw	r26, r16
    1692:	f5 01       	movw	r30, r10
    1694:	6b 2f       	mov	r22, r27
    1696:	70 2f       	mov	r23, r16
    1698:	8f 2f       	mov	r24, r31
    169a:	9a 2d       	mov	r25, r10
    169c:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    16a0:	16 2f       	mov	r17, r22
    16a2:	07 2f       	mov	r16, r23
    16a4:	b8 2e       	mov	r11, r24
    16a6:	a9 2e       	mov	r10, r25
		if (data.pressure-zero_press> FLOW_THRESHOLD) sampleValve.open();
    16a8:	2a e9       	ldi	r18, 0x9A	; 154
    16aa:	39 e9       	ldi	r19, 0x99	; 153
    16ac:	49 e9       	ldi	r20, 0x99	; 153
    16ae:	5d e3       	ldi	r21, 0x3D	; 61
    16b0:	c7 01       	movw	r24, r14
    16b2:	b6 01       	movw	r22, r12
    16b4:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    16b8:	18 16       	cp	r1, r24
    16ba:	24 f4       	brge	.+8      	; 0x16c4 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x24e>
    16bc:	c1 01       	movw	r24, r2
    16be:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN5Valve4openEv>
    16c2:	51 cf       	rjmp	.-350    	; 0x1566 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0xf0>
		else sampleValve.close();
    16c4:	c1 01       	movw	r24, r2
    16c6:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	myUsart.sendString("sep=,\r\nTime [ms],O2 [%], VE [l]\r\n");
	double totalVE = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double sampleTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
	while (!(myUsart.isRXC()))
    16ca:	4d cf       	rjmp	.-358    	; 0x1566 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0xf0>
 		Ms5525dso::data_s data = myFlowSensor.read();
		totalVE += sqrt(data.pressure-zero_press);
		if (data.pressure-zero_press> FLOW_THRESHOLD) sampleValve.open();
		else sampleValve.close();
	}
	myPump.turnOff();
    16cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d0:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN4Pump7turnOffEv>
	sampleValve.close();
    16d4:	c1 01       	movw	r24, r2
    16d6:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	outputValve.close();
    16da:	c4 01       	movw	r24, r8
}
    16dc:	a0 96       	adiw	r28, 0x20	; 32
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	7f 90       	pop	r7
    16fc:	6f 90       	pop	r6
    16fe:	5f 90       	pop	r5
    1700:	4f 90       	pop	r4
    1702:	3f 90       	pop	r3
    1704:	2f 90       	pop	r2
		if (data.pressure-zero_press> FLOW_THRESHOLD) sampleValve.open();
		else sampleValve.close();
	}
	myPump.turnOff();
	sampleValve.close();
	outputValve.close();
    1706:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <_ZN5Valve5closeEv>
		double timeNow = myTimer.getTime_ms();
								
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
    170a:	c4 01       	movw	r24, r8
    170c:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x2a2>
		} else if (!outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.open();
    1712:	c4 01       	movw	r24, r8
    1714:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
    1718:	26 01       	movw	r4, r12
    171a:	37 01       	movw	r6, r14
    171c:	52 cf       	rjmp	.-348    	; 0x15c2 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x14c>

0000171e <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>:
	Tcc0 & myTimer,
	UsartE0 & myUsart,
	Valve & sampleValve,
	Valve & gascalValve,
	Valve & outputValve)
{
    171e:	2f 92       	push	r2
    1720:	3f 92       	push	r3
    1722:	4f 92       	push	r4
    1724:	5f 92       	push	r5
    1726:	6f 92       	push	r6
    1728:	7f 92       	push	r7
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	69 97       	sbiw	r28, 0x19	; 25
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	8c 8b       	std	Y+20, r24	; 0x14
    174e:	9d 8b       	std	Y+21, r25	; 0x15
    1750:	6e 8b       	std	Y+22, r22	; 0x16
    1752:	7f 8b       	std	Y+23, r23	; 0x17
    1754:	28 8f       	std	Y+24, r18	; 0x18
    1756:	39 8f       	std	Y+25, r19	; 0x19
    1758:	57 01       	movw	r10, r14
    175a:	46 01       	movw	r8, r12
    175c:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1760:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    1764:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    1768:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
    176c:	89 87       	std	Y+9, r24	; 0x09
    176e:	9a 87       	std	Y+10, r25	; 0x0a
    1770:	ab 87       	std	Y+11, r26	; 0x0b
    1772:	bc 87       	std	Y+12, r27	; 0x0c
    1774:	20 90 58 22 	lds	r2, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1778:	30 90 59 22 	lds	r3, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    177c:	40 90 5a 22 	lds	r4, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    1780:	50 90 5b 22 	lds	r5, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0, avgGascal = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double targetTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
    1784:	cb 01       	movw	r24, r22
    1786:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN4Pump6turnOnEv>
	sampleValve.open();
    178a:	c8 01       	movw	r24, r16
    178c:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN5Valve4openEv>
	gascalValve.close();
    1790:	c7 01       	movw	r24, r14
    1792:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	outputValve.close();
    1796:	c6 01       	movw	r24, r12
    1798:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	uint8_t i = 0;
    179c:	1b 8a       	std	Y+19, r1	; 0x13
	const uint16_t GASCAL_OPEN_DURATION_ms = 5000;
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const double GASCAL_PCT = 17;
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0, avgGascal = 0;
    179e:	1d 86       	std	Y+13, r1	; 0x0d
    17a0:	1e 86       	std	Y+14, r1	; 0x0e
    17a2:	1f 86       	std	Y+15, r1	; 0x0f
    17a4:	61 2c       	mov	r6, r1
    17a6:	18 8a       	std	Y+16, r1	; 0x10
    17a8:	19 8a       	std	Y+17, r1	; 0x11
    17aa:	1a 8a       	std	Y+18, r1	; 0x12
    17ac:	71 2c       	mov	r7, r1
    17ae:	c0 90 58 22 	lds	r12, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    17b2:	d0 90 59 22 	lds	r13, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    17b6:	e0 90 5a 22 	lds	r14, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    17ba:	f0 90 5b 22 	lds	r15, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    17be:	d4 01       	movw	r26, r8
    17c0:	11 96       	adiw	r26, 0x01	; 1
    17c2:	8c 91       	ld	r24, X
    17c4:	29 85       	ldd	r18, Y+9	; 0x09
    17c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    17c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    17ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    17cc:	88 23       	and	r24, r24
    17ce:	71 f0       	breq	.+28     	; 0x17ec <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xce>
    17d0:	c7 01       	movw	r24, r14
    17d2:	b6 01       	movw	r22, r12
    17d4:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e4       	ldi	r19, 0x40	; 64
    17dc:	4c e1       	ldi	r20, 0x1C	; 28
    17de:	55 e4       	ldi	r21, 0x45	; 69
    17e0:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	0c f4       	brge	.+2      	; 0x17ea <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xcc>
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x14a>
    17ea:	0c c0       	rjmp	.+24     	; 0x1804 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xe6>
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (outputValve.isClosed() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    17ec:	c7 01       	movw	r24, r14
    17ee:	b6 01       	movw	r22, r12
    17f0:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e4       	ldi	r19, 0x40	; 64
    17f8:	4c e1       	ldi	r20, 0x1C	; 28
    17fa:	55 e4       	ldi	r21, 0x45	; 69
    17fc:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    1800:	18 16       	cp	r1, r24
    1802:	b4 f1       	brlt	.+108    	; 0x1870 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x152>
			outputTimeFlag = timeNow;
			outputValve.open();
		}
		
		// Handle sample and gascal valve
		if (sampleValve.isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
    1804:	f8 01       	movw	r30, r16
    1806:	81 81       	ldd	r24, Z+1	; 0x01
    1808:	88 23       	and	r24, r24
    180a:	d1 f1       	breq	.+116    	; 0x1880 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x162>
    180c:	a2 01       	movw	r20, r4
    180e:	91 01       	movw	r18, r2
    1810:	c7 01       	movw	r24, r14
    1812:	b6 01       	movw	r22, r12
    1814:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e4       	ldi	r19, 0x40	; 64
    181c:	4c e9       	ldi	r20, 0x9C	; 156
    181e:	55 e4       	ldi	r21, 0x45	; 69
    1820:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    1824:	18 16       	cp	r1, r24
    1826:	64 f5       	brge	.+88     	; 0x1880 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x162>
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
    1828:	6c 89       	ldd	r22, Y+20	; 0x14
    182a:	7d 89       	ldd	r23, Y+21	; 0x15
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	94 e0       	ldi	r25, 0x04	; 4
    1830:	0e 94 89 09 	call	0x1312	; 0x1312 <_Z12oversampleO2jR4Adca>
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	5e e3       	ldi	r21, 0x3E	; 62
    183c:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    1840:	9b 01       	movw	r18, r22
    1842:	ac 01       	movw	r20, r24
    1844:	b8 89       	ldd	r27, Y+16	; 0x10
    1846:	a9 89       	ldd	r26, Y+17	; 0x11
    1848:	fa 89       	ldd	r31, Y+18	; 0x12
    184a:	6b 2f       	mov	r22, r27
    184c:	7a 2f       	mov	r23, r26
    184e:	8f 2f       	mov	r24, r31
    1850:	97 2d       	mov	r25, r7
    1852:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    1856:	68 8b       	std	Y+16, r22	; 0x10
    1858:	79 8b       	std	Y+17, r23	; 0x11
    185a:	8a 8b       	std	Y+18, r24	; 0x12
    185c:	79 2e       	mov	r7, r25
			sampleValve.close();
    185e:	c8 01       	movw	r24, r16
    1860:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
			gascalValve.open();
    1864:	c5 01       	movw	r24, r10
    1866:	ed c0       	rjmp	.+474    	; 0x1a42 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x324>
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
    1868:	c4 01       	movw	r24, r8
    186a:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x158>
		} else if (outputValve.isClosed() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.open();
    1870:	c4 01       	movw	r24, r8
    1872:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (outputValve.isClosed() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
    1876:	c9 86       	std	Y+9, r12	; 0x09
    1878:	da 86       	std	Y+10, r13	; 0x0a
    187a:	eb 86       	std	Y+11, r14	; 0x0b
    187c:	fc 86       	std	Y+12, r15	; 0x0c
    187e:	c2 cf       	rjmp	.-124    	; 0x1804 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xe6>
		if (sampleValve.isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			sampleValve.close();
			gascalValve.open();
		} else if (gascalValve.isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    1880:	f5 01       	movw	r30, r10
    1882:	81 81       	ldd	r24, Z+1	; 0x01
    1884:	81 11       	cpse	r24, r1
    1886:	ac c0       	rjmp	.+344    	; 0x19e0 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x2c2>
	myPump.turnOn();
	sampleValve.open();
	gascalValve.close();
	outputValve.close();
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    1888:	9b 89       	ldd	r25, Y+19	; 0x13
    188a:	98 30       	cpi	r25, 0x08	; 8
    188c:	09 f0       	breq	.+2      	; 0x1890 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x172>
    188e:	8f cf       	rjmp	.-226    	; 0x17ae <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x90>
			i++;
			gascalValve.close();
			sampleValve.open();
		}
	}
	myPump.turnOff();
    1890:	8e 89       	ldd	r24, Y+22	; 0x16
    1892:	9f 89       	ldd	r25, Y+23	; 0x17
    1894:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN4Pump7turnOffEv>
	sampleValve.close();
    1898:	c8 01       	movw	r24, r16
    189a:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	gascalValve.close();
    189e:	c5 01       	movw	r24, r10
    18a0:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	outputValve.close();
    18a4:	c4 01       	movw	r24, r8
    18a6:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>

	// Output gascal coefficients
	snprintf(Utils::txBuf, TX_LEN, "avgSample: %.3f counts\r\navgGascal: %.3f counts\r\n", avgSample, avgGascal);
    18aa:	6f 92       	push	r6
    18ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    18ae:	ff 93       	push	r31
    18b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    18b2:	8f 93       	push	r24
    18b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b6:	9f 93       	push	r25
    18b8:	7f 92       	push	r7
    18ba:	aa 89       	ldd	r26, Y+18	; 0x12
    18bc:	af 93       	push	r26
    18be:	b9 89       	ldd	r27, Y+17	; 0x11
    18c0:	bf 93       	push	r27
    18c2:	e8 89       	ldd	r30, Y+16	; 0x10
    18c4:	ef 93       	push	r30
    18c6:	8d ec       	ldi	r24, 0xCD	; 205
    18c8:	91 e2       	ldi	r25, 0x21	; 33
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	1f 92       	push	r1
    18d0:	80 e4       	ldi	r24, 0x40	; 64
    18d2:	c8 2e       	mov	r12, r24
    18d4:	cf 92       	push	r12
    18d6:	90 e6       	ldi	r25, 0x60	; 96
    18d8:	e9 2e       	mov	r14, r25
    18da:	92 e2       	ldi	r25, 0x22	; 34
    18dc:	f9 2e       	mov	r15, r25
    18de:	ff 92       	push	r15
    18e0:	ef 92       	push	r14
    18e2:	0e 94 b0 18 	call	0x3160	; 0x3160 <snprintf>
	myUsart.sendString(Utils::txBuf);
    18e6:	b7 01       	movw	r22, r14
    18e8:	88 8d       	ldd	r24, Y+24	; 0x18
    18ea:	99 8d       	ldd	r25, Y+25	; 0x19
    18ec:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	Utils::gascal_s result;
	result.gain = (SAMPLE_PCT - GASCAL_PCT)/(avgSample-avgGascal);
    18f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    18f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    18f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    18f6:	27 2f       	mov	r18, r23
    18f8:	36 2f       	mov	r19, r22
    18fa:	49 2f       	mov	r20, r25
    18fc:	56 2d       	mov	r21, r6
    18fe:	48 88       	ldd	r4, Y+16	; 0x10
    1900:	59 88       	ldd	r5, Y+17	; 0x11
    1902:	6a 88       	ldd	r6, Y+18	; 0x12
    1904:	b2 01       	movw	r22, r4
    1906:	86 2d       	mov	r24, r6
    1908:	97 2d       	mov	r25, r7
    190a:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    190e:	9b 01       	movw	r18, r22
    1910:	ac 01       	movw	r20, r24
    1912:	68 e7       	ldi	r22, 0x78	; 120
    1914:	74 e1       	ldi	r23, 0x14	; 20
    1916:	8e e7       	ldi	r24, 0x7E	; 126
    1918:	90 e4       	ldi	r25, 0x40	; 64
    191a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__divsf3>
    191e:	a6 2e       	mov	r10, r22
    1920:	d7 2e       	mov	r13, r23
    1922:	8c 01       	movw	r16, r24
	result.offset = SAMPLE_PCT - result.gain*avgSample;
    1924:	76 2f       	mov	r23, r22
    1926:	27 2f       	mov	r18, r23
    1928:	3d 2d       	mov	r19, r13
    192a:	40 2f       	mov	r20, r16
    192c:	51 2f       	mov	r21, r17
    192e:	64 2d       	mov	r22, r4
    1930:	75 2d       	mov	r23, r5
    1932:	86 2d       	mov	r24, r6
    1934:	97 2d       	mov	r25, r7
    1936:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    193a:	9b 01       	movw	r18, r22
    193c:	ac 01       	movw	r20, r24
    193e:	6f e8       	ldi	r22, 0x8F	; 143
    1940:	72 ec       	ldi	r23, 0xC2	; 194
    1942:	87 ea       	ldi	r24, 0xA7	; 167
    1944:	91 e4       	ldi	r25, 0x41	; 65
    1946:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    194a:	76 2e       	mov	r7, r22
    194c:	87 2e       	mov	r8, r23
    194e:	98 2e       	mov	r9, r24
    1950:	b9 2e       	mov	r11, r25
	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f[%%/counts]\r\nOffset: %.3f%%\r\n", result.gain, result.offset);
    1952:	9f 93       	push	r25
    1954:	8f 93       	push	r24
    1956:	7f 93       	push	r23
    1958:	6f 93       	push	r22
    195a:	1f 93       	push	r17
    195c:	0f 93       	push	r16
    195e:	df 92       	push	r13
    1960:	af 92       	push	r10
    1962:	8e ef       	ldi	r24, 0xFE	; 254
    1964:	91 e2       	ldi	r25, 0x21	; 33
    1966:	9f 93       	push	r25
    1968:	8f 93       	push	r24
    196a:	1f 92       	push	r1
    196c:	cf 92       	push	r12
    196e:	ff 92       	push	r15
    1970:	ef 92       	push	r14
    1972:	0e 94 b0 18 	call	0x3160	; 0x3160 <snprintf>
	myUsart.sendString(Utils::txBuf);
    1976:	b7 01       	movw	r22, r14
    1978:	88 8d       	ldd	r24, Y+24	; 0x18
    197a:	99 8d       	ldd	r25, Y+25	; 0x19
    197c:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	return result;
    1980:	2a 2d       	mov	r18, r10
    1982:	8a 2d       	mov	r24, r10
    1984:	9d 2d       	mov	r25, r13
    1986:	a0 2f       	mov	r26, r16
    1988:	b1 2f       	mov	r27, r17
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	ab 83       	std	Y+3, r26	; 0x03
    1990:	bc 83       	std	Y+4, r27	; 0x04
    1992:	67 2d       	mov	r22, r7
    1994:	87 2d       	mov	r24, r7
    1996:	98 2d       	mov	r25, r8
    1998:	a9 2d       	mov	r26, r9
    199a:	bb 2d       	mov	r27, r11
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	af 83       	std	Y+7, r26	; 0x07
    19a2:	b8 87       	std	Y+8, r27	; 0x08
    19a4:	3a 81       	ldd	r19, Y+2	; 0x02
    19a6:	4b 81       	ldd	r20, Y+3	; 0x03
    19a8:	5c 81       	ldd	r21, Y+4	; 0x04
    19aa:	7e 81       	ldd	r23, Y+6	; 0x06
    19ac:	8f 81       	ldd	r24, Y+7	; 0x07
    19ae:	98 85       	ldd	r25, Y+8	; 0x08
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	de bf       	out	0x3e, r29	; 62
}
    19b4:	69 96       	adiw	r28, 0x19	; 25
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	df 90       	pop	r13
    19c8:	cf 90       	pop	r12
    19ca:	bf 90       	pop	r11
    19cc:	af 90       	pop	r10
    19ce:	9f 90       	pop	r9
    19d0:	8f 90       	pop	r8
    19d2:	7f 90       	pop	r7
    19d4:	6f 90       	pop	r6
    19d6:	5f 90       	pop	r5
    19d8:	4f 90       	pop	r4
    19da:	3f 90       	pop	r3
    19dc:	2f 90       	pop	r2
    19de:	08 95       	ret
		if (sampleValve.isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			sampleValve.close();
			gascalValve.open();
		} else if (gascalValve.isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    19e0:	a2 01       	movw	r20, r4
    19e2:	91 01       	movw	r18, r2
    19e4:	c7 01       	movw	r24, r14
    19e6:	b6 01       	movw	r22, r12
    19e8:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e4       	ldi	r19, 0x40	; 64
    19f0:	4c e9       	ldi	r20, 0x9C	; 156
    19f2:	55 e4       	ldi	r21, 0x45	; 69
    19f4:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	0c f0       	brlt	.+2      	; 0x19fe <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x2e0>
    19fc:	45 cf       	rjmp	.-374    	; 0x1888 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x16a>
			targetTimeFlag = timeNow;
			avgGascal += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
    19fe:	6c 89       	ldd	r22, Y+20	; 0x14
    1a00:	7d 89       	ldd	r23, Y+21	; 0x15
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	94 e0       	ldi	r25, 0x04	; 4
    1a06:	0e 94 89 09 	call	0x1312	; 0x1312 <_Z12oversampleO2jR4Adca>
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	5e e3       	ldi	r21, 0x3E	; 62
    1a12:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a1c:	ae 85       	ldd	r26, Y+14	; 0x0e
    1a1e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a20:	6b 2f       	mov	r22, r27
    1a22:	7a 2f       	mov	r23, r26
    1a24:	8f 2f       	mov	r24, r31
    1a26:	96 2d       	mov	r25, r6
    1a28:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    1a2c:	6d 87       	std	Y+13, r22	; 0x0d
    1a2e:	7e 87       	std	Y+14, r23	; 0x0e
    1a30:	8f 87       	std	Y+15, r24	; 0x0f
    1a32:	69 2e       	mov	r6, r25
			i++;
    1a34:	fb 89       	ldd	r31, Y+19	; 0x13
    1a36:	ff 5f       	subi	r31, 0xFF	; 255
    1a38:	fb 8b       	std	Y+19, r31	; 0x13
			gascalValve.close();
    1a3a:	c5 01       	movw	r24, r10
    1a3c:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
			sampleValve.open();
    1a40:	c8 01       	movw	r24, r16
    1a42:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN5Valve4openEv>
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			sampleValve.close();
			gascalValve.open();
		} else if (gascalValve.isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
			targetTimeFlag = timeNow;
    1a46:	16 01       	movw	r2, r12
    1a48:	27 01       	movw	r4, r14
    1a4a:	1e cf       	rjmp	.-452    	; 0x1888 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x16a>

00001a4c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>:
	Tcc0 & myTimer,
	UsartE0 & myUsart,
	Valve & sampleValve,
	Valve & gascalValve,
	Valve & outputValve)
{
    1a4c:	2f 92       	push	r2
    1a4e:	3f 92       	push	r3
    1a50:	4f 92       	push	r4
    1a52:	5f 92       	push	r5
    1a54:	6f 92       	push	r6
    1a56:	7f 92       	push	r7
    1a58:	8f 92       	push	r8
    1a5a:	9f 92       	push	r9
    1a5c:	af 92       	push	r10
    1a5e:	bf 92       	push	r11
    1a60:	cf 92       	push	r12
    1a62:	df 92       	push	r13
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	67 97       	sbiw	r28, 0x17	; 23
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	6c 8b       	std	Y+20, r22	; 0x14
    1a7c:	7d 8b       	std	Y+21, r23	; 0x15
    1a7e:	8e 8b       	std	Y+22, r24	; 0x16
    1a80:	9f 8b       	std	Y+23, r25	; 0x17
    1a82:	4a 8b       	std	Y+18, r20	; 0x12
    1a84:	5b 8b       	std	Y+19, r21	; 0x13
    1a86:	19 01       	movw	r2, r18
    1a88:	ee 86       	std	Y+14, r14	; 0x0e
    1a8a:	ff 86       	std	Y+15, r15	; 0x0f
    1a8c:	c8 8a       	std	Y+16, r12	; 0x10
    1a8e:	d9 8a       	std	Y+17, r13	; 0x11
    1a90:	40 90 58 22 	lds	r4, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1a94:	50 90 59 22 	lds	r5, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    1a98:	60 90 5a 22 	lds	r6, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    1a9c:	70 90 5b 22 	lds	r7, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
    1aa0:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1aa4:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    1aa8:	a0 91 5a 22 	lds	r26, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    1aac:	b0 91 5b 22 	lds	r27, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
    1ab0:	8a 87       	std	Y+10, r24	; 0x0a
    1ab2:	9b 87       	std	Y+11, r25	; 0x0b
    1ab4:	ac 87       	std	Y+12, r26	; 0x0c
    1ab6:	bd 87       	std	Y+13, r27	; 0x0d
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double targetTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
    1ab8:	c9 01       	movw	r24, r18
    1aba:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN4Pump6turnOnEv>
	sampleValve.open();
    1abe:	88 89       	ldd	r24, Y+16	; 0x10
    1ac0:	99 89       	ldd	r25, Y+17	; 0x11
    1ac2:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN5Valve4openEv>
	outputValve.close();
    1ac6:	c4 01       	movw	r24, r8
    1ac8:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	uint8_t i = 0;
    1acc:	19 86       	std	Y+9, r1	; 0x09
	const uint16_t OUTPUT_CLOSE_DURATION_ms = 2500;
	const uint16_t SAMPLE_PERIOD_ms = 5000;
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0;
    1ace:	10 e0       	ldi	r17, 0x00	; 0
    1ad0:	00 e0       	ldi	r16, 0x00	; 0
    1ad2:	b1 2c       	mov	r11, r1
    1ad4:	a1 2c       	mov	r10, r1
    1ad6:	c0 90 58 22 	lds	r12, 0x2258	; 0x802258 <_ZN4Tcc07time_msE>
    1ada:	d0 90 59 22 	lds	r13, 0x2259	; 0x802259 <_ZN4Tcc07time_msE+0x1>
    1ade:	e0 90 5a 22 	lds	r14, 0x225A	; 0x80225a <_ZN4Tcc07time_msE+0x2>
    1ae2:	f0 90 5b 22 	lds	r15, 0x225B	; 0x80225b <_ZN4Tcc07time_msE+0x3>
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    1ae6:	d4 01       	movw	r26, r8
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	8c 91       	ld	r24, X
    1aec:	a3 01       	movw	r20, r6
    1aee:	92 01       	movw	r18, r4
    1af0:	88 23       	and	r24, r24
    1af2:	71 f0       	breq	.+28     	; 0x1b10 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xc4>
    1af4:	c7 01       	movw	r24, r14
    1af6:	b6 01       	movw	r22, r12
    1af8:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e4       	ldi	r19, 0x40	; 64
    1b00:	4c e1       	ldi	r20, 0x1C	; 28
    1b02:	55 e4       	ldi	r21, 0x45	; 69
    1b04:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	0c f4       	brge	.+2      	; 0x1b0e <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xc2>
    1b0c:	c7 c0       	rjmp	.+398    	; 0x1c9c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x250>
    1b0e:	0d c0       	rjmp	.+26     	; 0x1b2a <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xde>
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (outputValve.isClosed() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    1b10:	c7 01       	movw	r24, r14
    1b12:	b6 01       	movw	r22, r12
    1b14:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e4       	ldi	r19, 0x40	; 64
    1b1c:	4c e1       	ldi	r20, 0x1C	; 28
    1b1e:	55 e4       	ldi	r21, 0x45	; 69
    1b20:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	0c f4       	brge	.+2      	; 0x1b2a <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xde>
    1b28:	bd c0       	rjmp	.+378    	; 0x1ca4 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x258>
			outputTimeFlag = timeNow;
			outputValve.open();
		}
		
		// Handle sample
		if (timeNow - targetTimeFlag > SAMPLE_PERIOD_ms) {
    1b2a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b2c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b2e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b30:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b32:	c7 01       	movw	r24, r14
    1b34:	b6 01       	movw	r22, r12
    1b36:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e4       	ldi	r19, 0x40	; 64
    1b3e:	4c e9       	ldi	r20, 0x9C	; 156
    1b40:	55 e4       	ldi	r21, 0x45	; 69
    1b42:	0e 94 a2 11 	call	0x2344	; 0x2344 <__gesf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	0c f4       	brge	.+2      	; 0x1b4c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x100>
    1b4a:	86 c0       	rjmp	.+268    	; 0x1c58 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x20c>
	double targetTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
	sampleValve.open();
	outputValve.close();
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    1b4c:	99 85       	ldd	r25, Y+9	; 0x09
    1b4e:	98 30       	cpi	r25, 0x08	; 8
    1b50:	08 f4       	brcc	.+2      	; 0x1b54 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x108>
    1b52:	c1 cf       	rjmp	.-126    	; 0x1ad6 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x8a>
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			i++;
		}
	}
	myPump.turnOff();
    1b54:	c1 01       	movw	r24, r2
    1b56:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN4Pump7turnOffEv>
	sampleValve.close();
    1b5a:	88 89       	ldd	r24, Y+16	; 0x10
    1b5c:	99 89       	ldd	r25, Y+17	; 0x11
    1b5e:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
	outputValve.close();
    1b62:	c4 01       	movw	r24, r8
    1b64:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>

	// Output aircal coefficients
	snprintf(Utils::txBuf, TX_LEN, "avgSample: %.3f counts\r\n", avgSample);
    1b68:	af 92       	push	r10
    1b6a:	bf 92       	push	r11
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	86 e2       	ldi	r24, 0x26	; 38
    1b72:	92 e2       	ldi	r25, 0x22	; 34
    1b74:	9f 93       	push	r25
    1b76:	8f 93       	push	r24
    1b78:	1f 92       	push	r1
    1b7a:	80 e4       	ldi	r24, 0x40	; 64
    1b7c:	78 2e       	mov	r7, r24
    1b7e:	7f 92       	push	r7
    1b80:	90 e6       	ldi	r25, 0x60	; 96
    1b82:	e9 2e       	mov	r14, r25
    1b84:	92 e2       	ldi	r25, 0x22	; 34
    1b86:	f9 2e       	mov	r15, r25
    1b88:	ff 92       	push	r15
    1b8a:	ef 92       	push	r14
    1b8c:	0e 94 b0 18 	call	0x3160	; 0x3160 <snprintf>
	myUsart.sendString(Utils::txBuf);
    1b90:	b7 01       	movw	r22, r14
    1b92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b94:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b96:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	Utils::gascal_s result;
	result.gain = gascal_gain;
	result.offset = SAMPLE_PCT - result.gain*avgSample;
    1b9a:	8c 88       	ldd	r8, Y+20	; 0x14
    1b9c:	9d 88       	ldd	r9, Y+21	; 0x15
    1b9e:	ce 88       	ldd	r12, Y+22	; 0x16
    1ba0:	df 88       	ldd	r13, Y+23	; 0x17
    1ba2:	94 01       	movw	r18, r8
    1ba4:	a6 01       	movw	r20, r12
    1ba6:	d8 01       	movw	r26, r16
    1ba8:	f5 01       	movw	r30, r10
    1baa:	6b 2f       	mov	r22, r27
    1bac:	70 2f       	mov	r23, r16
    1bae:	8f 2f       	mov	r24, r31
    1bb0:	9a 2d       	mov	r25, r10
    1bb2:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    1bb6:	9b 01       	movw	r18, r22
    1bb8:	ac 01       	movw	r20, r24
    1bba:	6f e8       	ldi	r22, 0x8F	; 143
    1bbc:	72 ec       	ldi	r23, 0xC2	; 194
    1bbe:	87 ea       	ldi	r24, 0xA7	; 167
    1bc0:	91 e4       	ldi	r25, 0x41	; 65
    1bc2:	0e 94 11 10 	call	0x2022	; 0x2022 <__subsf3>
    1bc6:	5b 01       	movw	r10, r22
    1bc8:	8c 01       	movw	r16, r24
	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f[%%/counts]\r\nOffset: %.3f%%\r\n", result.gain, result.offset);
    1bca:	1f 93       	push	r17
    1bcc:	8f 93       	push	r24
    1bce:	bf 92       	push	r11
    1bd0:	6f 93       	push	r22
    1bd2:	df 92       	push	r13
    1bd4:	cf 92       	push	r12
    1bd6:	9f 92       	push	r9
    1bd8:	8f 92       	push	r8
    1bda:	8e ef       	ldi	r24, 0xFE	; 254
    1bdc:	91 e2       	ldi	r25, 0x21	; 33
    1bde:	9f 93       	push	r25
    1be0:	8f 93       	push	r24
    1be2:	1f 92       	push	r1
    1be4:	7f 92       	push	r7
    1be6:	ff 92       	push	r15
    1be8:	ef 92       	push	r14
    1bea:	0e 94 b0 18 	call	0x3160	; 0x3160 <snprintf>
	myUsart.sendString(Utils::txBuf);
    1bee:	b7 01       	movw	r22, r14
    1bf0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf4:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7UsartE010sendStringEPKc>
	return result;
    1bf8:	28 2d       	mov	r18, r8
    1bfa:	88 2d       	mov	r24, r8
    1bfc:	99 2d       	mov	r25, r9
    1bfe:	ac 2d       	mov	r26, r12
    1c00:	bd 2d       	mov	r27, r13
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	ab 83       	std	Y+3, r26	; 0x03
    1c08:	bc 83       	std	Y+4, r27	; 0x04
    1c0a:	6a 2d       	mov	r22, r10
    1c0c:	8a 2d       	mov	r24, r10
    1c0e:	9b 2d       	mov	r25, r11
    1c10:	a0 2f       	mov	r26, r16
    1c12:	b1 2f       	mov	r27, r17
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	af 83       	std	Y+7, r26	; 0x07
    1c1a:	b8 87       	std	Y+8, r27	; 0x08
    1c1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c1e:	4b 81       	ldd	r20, Y+3	; 0x03
    1c20:	5c 81       	ldd	r21, Y+4	; 0x04
    1c22:	7e 81       	ldd	r23, Y+6	; 0x06
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	98 85       	ldd	r25, Y+8	; 0x08
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	de bf       	out	0x3e, r29	; 62
}
    1c2c:	67 96       	adiw	r28, 0x17	; 23
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	5f 90       	pop	r5
    1c50:	4f 90       	pop	r4
    1c52:	3f 90       	pop	r3
    1c54:	2f 90       	pop	r2
    1c56:	08 95       	ret
		}
		
		// Handle sample
		if (timeNow - targetTimeFlag > SAMPLE_PERIOD_ms) {
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
    1c58:	6a 89       	ldd	r22, Y+18	; 0x12
    1c5a:	7b 89       	ldd	r23, Y+19	; 0x13
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	94 e0       	ldi	r25, 0x04	; 4
    1c60:	0e 94 89 09 	call	0x1312	; 0x1312 <_Z12oversampleO2jR4Adca>
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	5e e3       	ldi	r21, 0x3E	; 62
    1c6c:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	d8 01       	movw	r26, r16
    1c76:	f5 01       	movw	r30, r10
    1c78:	6b 2f       	mov	r22, r27
    1c7a:	70 2f       	mov	r23, r16
    1c7c:	8f 2f       	mov	r24, r31
    1c7e:	9a 2d       	mov	r25, r10
    1c80:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    1c84:	16 2f       	mov	r17, r22
    1c86:	07 2f       	mov	r16, r23
    1c88:	b8 2e       	mov	r11, r24
    1c8a:	a9 2e       	mov	r10, r25
			i++;
    1c8c:	b9 85       	ldd	r27, Y+9	; 0x09
    1c8e:	bf 5f       	subi	r27, 0xFF	; 255
    1c90:	b9 87       	std	Y+9, r27	; 0x09
			outputValve.open();
		}
		
		// Handle sample
		if (timeNow - targetTimeFlag > SAMPLE_PERIOD_ms) {
			targetTimeFlag = timeNow;
    1c92:	ca 86       	std	Y+10, r12	; 0x0a
    1c94:	db 86       	std	Y+11, r13	; 0x0b
    1c96:	ec 86       	std	Y+12, r14	; 0x0c
    1c98:	fd 86       	std	Y+13, r15	; 0x0d
    1c9a:	58 cf       	rjmp	.-336    	; 0x1b4c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x100>
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
    1c9c:	c4 01       	movw	r24, r8
    1c9e:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Valve5closeEv>
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x25e>
		} else if (outputValve.isClosed() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.open();
    1ca4:	c4 01       	movw	r24, r8
    1ca6:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (outputValve.isClosed() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
    1caa:	26 01       	movw	r4, r12
    1cac:	37 01       	movw	r6, r14
    1cae:	3d cf       	rjmp	.-390    	; 0x1b2a <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xde>

00001cb0 <main>:
//============//
//=== MAIN ===//
//============//

int main(void)
{
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	c2 5a       	subi	r28, 0xA2	; 162
    1cba:	d1 09       	sbc	r29, r1
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	de bf       	out	0x3e, r29	; 62
	Utils::setSystemClock(Utils::SC_32M); // 32MHz internal oscillator
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	0e 94 40 09 	call	0x1280	; 0x1280 <_ZN5Utils14setSystemClockENS_13systemClock_eE>

	UsartE0 myUsart0(Usart::BAUD_115k2, Utils::IL_MEDIUM);
    1cc6:	40 91 3f 22 	lds	r20, 0x223F	; 0x80223f <_ZN5Usart10BAUD_115k2E>
    1cca:	50 91 40 22 	lds	r21, 0x2240	; 0x802240 <_ZN5Usart10BAUD_115k2E+0x1>
    1cce:	60 91 41 22 	lds	r22, 0x2241	; 0x802241 <_ZN5Usart10BAUD_115k2E+0x2>
    1cd2:	70 91 42 22 	lds	r23, 0x2242	; 0x802242 <_ZN5Usart10BAUD_115k2E+0x3>
    1cd6:	22 e0       	ldi	r18, 0x02	; 2
    1cd8:	ce 01       	movw	r24, r28
    1cda:	85 59       	subi	r24, 0x95	; 149
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>
	UsartC1 myUsart1(Usart::BAUD_9k6, Utils::IL_MEDIUM);
    1ce2:	40 91 43 22 	lds	r20, 0x2243	; 0x802243 <_ZN5Usart8BAUD_9k6E>
    1ce6:	50 91 44 22 	lds	r21, 0x2244	; 0x802244 <_ZN5Usart8BAUD_9k6E+0x1>
    1cea:	60 91 45 22 	lds	r22, 0x2245	; 0x802245 <_ZN5Usart8BAUD_9k6E+0x2>
    1cee:	70 91 46 22 	lds	r23, 0x2246	; 0x802246 <_ZN5Usart8BAUD_9k6E+0x3>
    1cf2:	22 e0       	ldi	r18, 0x02	; 2
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	83 5a       	subi	r24, 0xA3	; 163
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>
	
	Utils::enableInterruptLevel(Utils::IL_MEDIUM);
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::enableInterruptLevel(Utils::IL_HIGH);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::globalInterruptEnable();
    1d0a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_ZN5Utils21globalInterruptEnableEv>

	Tcc0 myTimer(Tcc0::CS_DIV1, 2.048, Utils::IL_HIGH); // timeIncrement = 65536/32MHz
    1d0e:	03 e0       	ldi	r16, 0x03	; 3
    1d10:	2f e6       	ldi	r18, 0x6F	; 111
    1d12:	32 e1       	ldi	r19, 0x12	; 18
    1d14:	43 e0       	ldi	r20, 0x03	; 3
    1d16:	50 e4       	ldi	r21, 0x40	; 64
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	89 5b       	subi	r24, 0xB9	; 185
    1d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d20:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>
	Twie myTwie(155, Twie::IBT_50US); // 155 = 100 kHz
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	6b e9       	ldi	r22, 0x9B	; 155
    1d28:	ce 01       	movw	r24, r28
    1d2a:	87 58       	subi	r24, 0x87	; 135
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN4TwieC1EhNS_5ibt_eE>
	Adca myAdc(Adca::P_DIV512, Utils::IL_HIGH);
    1d32:	43 e0       	ldi	r20, 0x03	; 3
    1d34:	67 e0       	ldi	r22, 0x07	; 7
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>
	Ms5525dso myFlowSensor(Ms5525dso::OSR4096, 0x76, &myTwie, &myUsart0);
    1d3e:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <_ZN9Ms5525dso7OSR4096E>
    1d42:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <_ZN9Ms5525dso7OSR4096E+0x1>
    1d46:	a0 91 46 21 	lds	r26, 0x2146	; 0x802146 <_ZN9Ms5525dso7OSR4096E+0x2>
    1d4a:	9e 01       	movw	r18, r28
    1d4c:	25 59       	subi	r18, 0x95	; 149
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	79 01       	movw	r14, r18
    1d52:	8e 01       	movw	r16, r28
    1d54:	07 58       	subi	r16, 0x87	; 135
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	26 e7       	ldi	r18, 0x76	; 118
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	6a 2f       	mov	r22, r26
    1d5e:	ce 01       	movw	r24, r28
    1d60:	87 96       	adiw	r24, 0x27	; 39
    1d62:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN9Ms5525dsoC1ENS_5osr_sEhP4TwieP7UsartE0>
	Pump myPump;
    1d66:	ce 01       	movw	r24, r28
    1d68:	8e 56       	subi	r24, 0x6E	; 110
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	cd 56       	subi	r28, 0x6D	; 109
    1d6e:	df 4f       	sbci	r29, 0xFF	; 255
    1d70:	88 83       	st	Y, r24
    1d72:	99 83       	std	Y+1, r25	; 0x01
    1d74:	c3 59       	subi	r28, 0x93	; 147
    1d76:	d0 40       	sbci	r29, 0x00	; 0
    1d78:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN4PumpC1Ev>
	Valve sampleValve(1<<1);
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e0 57       	subi	r30, 0x70	; 112
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	cb 56       	subi	r28, 0x6B	; 107
    1d84:	df 4f       	sbci	r29, 0xFF	; 255
    1d86:	e8 83       	st	Y, r30
    1d88:	f9 83       	std	Y+1, r31	; 0x01
    1d8a:	c5 59       	subi	r28, 0x95	; 149
    1d8c:	d0 40       	sbci	r29, 0x00	; 0
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	cf 01       	movw	r24, r30
    1d92:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN5ValveC1Eh>
	Valve gascalValve(1<<2);
    1d96:	9e 01       	movw	r18, r28
    1d98:	22 57       	subi	r18, 0x72	; 114
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	c9 56       	subi	r28, 0x69	; 105
    1d9e:	df 4f       	sbci	r29, 0xFF	; 255
    1da0:	28 83       	st	Y, r18
    1da2:	39 83       	std	Y+1, r19	; 0x01
    1da4:	c7 59       	subi	r28, 0x97	; 151
    1da6:	d0 40       	sbci	r29, 0x00	; 0
    1da8:	64 e0       	ldi	r22, 0x04	; 4
    1daa:	c9 01       	movw	r24, r18
    1dac:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN5ValveC1Eh>
	Valve outputValve(1<<4);
    1db0:	ce 01       	movw	r24, r28
    1db2:	84 57       	subi	r24, 0x74	; 116
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	c7 56       	subi	r28, 0x67	; 103
    1db8:	df 4f       	sbci	r29, 0xFF	; 255
    1dba:	88 83       	st	Y, r24
    1dbc:	99 83       	std	Y+1, r25	; 0x01
    1dbe:	c9 59       	subi	r28, 0x99	; 153
    1dc0:	d0 40       	sbci	r29, 0x00	; 0
    1dc2:	60 e1       	ldi	r22, 0x10	; 16
    1dc4:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN5ValveC1Eh>

	Utils::gascal_s gascal = {0.415,-67.522};
    1dc8:	3e 01       	movw	r6, r28
    1dca:	94 e8       	ldi	r25, 0x84	; 132
    1dcc:	69 0e       	add	r6, r25
    1dce:	71 1c       	adc	r7, r1
    1dd0:	88 e0       	ldi	r24, 0x08	; 8
    1dd2:	e0 e0       	ldi	r30, 0x00	; 0
    1dd4:	f0 e2       	ldi	r31, 0x20	; 32
    1dd6:	d3 01       	movw	r26, r6
    1dd8:	01 90       	ld	r0, Z+
    1dda:	0d 92       	st	X+, r0
    1ddc:	8a 95       	dec	r24
    1dde:	e1 f7       	brne	.-8      	; 0x1dd8 <main+0x128>
    1de0:	81 ee       	ldi	r24, 0xE1	; 225
    1de2:	28 2e       	mov	r2, r24
    1de4:	8a e7       	ldi	r24, 0x7A	; 122
    1de6:	38 2e       	mov	r3, r24
    1de8:	84 ed       	ldi	r24, 0xD4	; 212
    1dea:	48 2e       	mov	r4, r24
    1dec:	8e e3       	ldi	r24, 0x3E	; 62
    1dee:	58 2e       	mov	r5, r24
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			if (c == 'a') flow_acq(myFlowSensor, myAdc, myTimer, myUsart0);
			else if (c == 'b') start_test(gascal, myAdc, myFlowSensor, myPump, myTimer, myUsart0, sampleValve, outputValve);
			else if (c == 'c') gascal = start_gascal(myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
			else if (c == 'd') gascal = start_aircal(gascal.gain, myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
    1df0:	c7 56       	subi	r28, 0x67	; 103
    1df2:	df 4f       	sbci	r29, 0xFF	; 255
    1df4:	e8 81       	ld	r30, Y
    1df6:	c9 59       	subi	r28, 0x99	; 153
    1df8:	d0 40       	sbci	r29, 0x00	; 0
    1dfa:	c5 56       	subi	r28, 0x65	; 101
    1dfc:	df 4f       	sbci	r29, 0xFF	; 255
    1dfe:	e8 83       	st	Y, r30
    1e00:	cb 59       	subi	r28, 0x9B	; 155
    1e02:	d0 40       	sbci	r29, 0x00	; 0
    1e04:	c6 56       	subi	r28, 0x66	; 102
    1e06:	df 4f       	sbci	r29, 0xFF	; 255
    1e08:	f8 81       	ld	r31, Y
    1e0a:	ca 59       	subi	r28, 0x9A	; 154
    1e0c:	d0 40       	sbci	r29, 0x00	; 0
    1e0e:	c4 56       	subi	r28, 0x64	; 100
    1e10:	df 4f       	sbci	r29, 0xFF	; 255
    1e12:	f8 83       	st	Y, r31
    1e14:	cc 59       	subi	r28, 0x9C	; 156
    1e16:	d0 40       	sbci	r29, 0x00	; 0
    1e18:	c9 56       	subi	r28, 0x69	; 105
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	28 81       	ld	r18, Y
    1e1e:	c7 59       	subi	r28, 0x97	; 151
    1e20:	d0 40       	sbci	r29, 0x00	; 0
    1e22:	c3 56       	subi	r28, 0x63	; 99
    1e24:	df 4f       	sbci	r29, 0xFF	; 255
    1e26:	28 83       	st	Y, r18
    1e28:	cd 59       	subi	r28, 0x9D	; 157
    1e2a:	d0 40       	sbci	r29, 0x00	; 0
    1e2c:	c8 56       	subi	r28, 0x68	; 104
    1e2e:	df 4f       	sbci	r29, 0xFF	; 255
    1e30:	38 81       	ld	r19, Y
    1e32:	c8 59       	subi	r28, 0x98	; 152
    1e34:	d0 40       	sbci	r29, 0x00	; 0
    1e36:	c2 56       	subi	r28, 0x62	; 98
    1e38:	df 4f       	sbci	r29, 0xFF	; 255
    1e3a:	38 83       	st	Y, r19
    1e3c:	ce 59       	subi	r28, 0x9E	; 158
    1e3e:	d0 40       	sbci	r29, 0x00	; 0
		if (myUsart0.isRXC())
		{
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			if (c == 'a') flow_acq(myFlowSensor, myAdc, myTimer, myUsart0);
			else if (c == 'b') start_test(gascal, myAdc, myFlowSensor, myPump, myTimer, myUsart0, sampleValve, outputValve);
    1e40:	cd 56       	subi	r28, 0x6D	; 109
    1e42:	df 4f       	sbci	r29, 0xFF	; 255
    1e44:	88 81       	ld	r24, Y
    1e46:	c3 59       	subi	r28, 0x93	; 147
    1e48:	d0 40       	sbci	r29, 0x00	; 0
    1e4a:	c1 56       	subi	r28, 0x61	; 97
    1e4c:	df 4f       	sbci	r29, 0xFF	; 255
    1e4e:	88 83       	st	Y, r24
    1e50:	cf 59       	subi	r28, 0x9F	; 159
    1e52:	d0 40       	sbci	r29, 0x00	; 0
    1e54:	cc 56       	subi	r28, 0x6C	; 108
    1e56:	df 4f       	sbci	r29, 0xFF	; 255
    1e58:	98 81       	ld	r25, Y
    1e5a:	c4 59       	subi	r28, 0x94	; 148
    1e5c:	d0 40       	sbci	r29, 0x00	; 0
    1e5e:	c0 56       	subi	r28, 0x60	; 96
    1e60:	df 4f       	sbci	r29, 0xFF	; 255
    1e62:	98 83       	st	Y, r25
    1e64:	c0 5a       	subi	r28, 0xA0	; 160
    1e66:	d0 40       	sbci	r29, 0x00	; 0
    1e68:	cb 56       	subi	r28, 0x6B	; 107
    1e6a:	df 4f       	sbci	r29, 0xFF	; 255
    1e6c:	e8 81       	ld	r30, Y
    1e6e:	c5 59       	subi	r28, 0x95	; 149
    1e70:	d0 40       	sbci	r29, 0x00	; 0
    1e72:	cf 55       	subi	r28, 0x5F	; 95
    1e74:	df 4f       	sbci	r29, 0xFF	; 255
    1e76:	e8 83       	st	Y, r30
    1e78:	c1 5a       	subi	r28, 0xA1	; 161
    1e7a:	d0 40       	sbci	r29, 0x00	; 0
    1e7c:	ca 56       	subi	r28, 0x6A	; 106
    1e7e:	df 4f       	sbci	r29, 0xFF	; 255
    1e80:	f8 81       	ld	r31, Y
    1e82:	c6 59       	subi	r28, 0x96	; 150
    1e84:	d0 40       	sbci	r29, 0x00	; 0
    1e86:	ce 55       	subi	r28, 0x5E	; 94
    1e88:	df 4f       	sbci	r29, 0xFF	; 255
    1e8a:	f8 83       	st	Y, r31
    1e8c:	c2 5a       	subi	r28, 0xA2	; 162
    1e8e:	d0 40       	sbci	r29, 0x00	; 0
    1e90:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <_ZN7UsartE07rxcFlagE>
	Valve outputValve(1<<4);

	Utils::gascal_s gascal = {0.415,-67.522};
	while (true)
	{
		if (myUsart0.isRXC())
    1e94:	88 23       	and	r24, r24
    1e96:	e1 f3       	breq	.-8      	; 0x1e90 <main+0x1e0>
	void setRXC(bool b){rxcFlag = b;};
    1e98:	10 92 5f 22 	sts	0x225F, r1	; 0x80225f <_ZN7UsartE07rxcFlagE>
	char getChar(){return rxChar;};
    1e9c:	80 91 5e 22 	lds	r24, 0x225E	; 0x80225e <_ZN7UsartE06rxCharE>
		{
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			if (c == 'a') flow_acq(myFlowSensor, myAdc, myTimer, myUsart0);
    1ea0:	81 36       	cpi	r24, 0x61	; 97
    1ea2:	71 f4       	brne	.+28     	; 0x1ec0 <main+0x210>
    1ea4:	9e 01       	movw	r18, r28
    1ea6:	25 59       	subi	r18, 0x95	; 149
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	ae 01       	movw	r20, r28
    1eac:	49 5b       	subi	r20, 0xB9	; 185
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	be 01       	movw	r22, r28
    1eb2:	6f 5f       	subi	r22, 0xFF	; 255
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	87 96       	adiw	r24, 0x27	; 39
    1eba:	0e 94 c3 09 	call	0x1386	; 0x1386 <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0>
    1ebe:	e8 cf       	rjmp	.-48     	; 0x1e90 <main+0x1e0>
			else if (c == 'b') start_test(gascal, myAdc, myFlowSensor, myPump, myTimer, myUsart0, sampleValve, outputValve);
    1ec0:	82 36       	cpi	r24, 0x62	; 98
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <main+0x216>
    1ec4:	45 c0       	rjmp	.+138    	; 0x1f50 <main+0x2a0>
    1ec6:	f3 01       	movw	r30, r6
    1ec8:	20 82       	st	Z, r2
    1eca:	31 82       	std	Z+1, r3	; 0x01
    1ecc:	42 82       	std	Z+2, r4	; 0x02
    1ece:	53 82       	std	Z+3, r5	; 0x03
    1ed0:	c4 56       	subi	r28, 0x64	; 100
    1ed2:	df 4f       	sbci	r29, 0xFF	; 255
    1ed4:	f8 81       	ld	r31, Y
    1ed6:	cc 59       	subi	r28, 0x9C	; 156
    1ed8:	d0 40       	sbci	r29, 0x00	; 0
    1eda:	ff 93       	push	r31
    1edc:	c5 56       	subi	r28, 0x65	; 101
    1ede:	df 4f       	sbci	r29, 0xFF	; 255
    1ee0:	28 81       	ld	r18, Y
    1ee2:	cb 59       	subi	r28, 0x9B	; 155
    1ee4:	d0 40       	sbci	r29, 0x00	; 0
    1ee6:	2f 93       	push	r18
    1ee8:	ce 55       	subi	r28, 0x5E	; 94
    1eea:	df 4f       	sbci	r29, 0xFF	; 255
    1eec:	38 81       	ld	r19, Y
    1eee:	c2 5a       	subi	r28, 0xA2	; 162
    1ef0:	d0 40       	sbci	r29, 0x00	; 0
    1ef2:	3f 93       	push	r19
    1ef4:	cf 55       	subi	r28, 0x5F	; 95
    1ef6:	df 4f       	sbci	r29, 0xFF	; 255
    1ef8:	88 81       	ld	r24, Y
    1efa:	c1 5a       	subi	r28, 0xA1	; 161
    1efc:	d0 40       	sbci	r29, 0x00	; 0
    1efe:	8f 93       	push	r24
    1f00:	fe 01       	movw	r30, r28
    1f02:	e5 59       	subi	r30, 0x95	; 149
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	4f 01       	movw	r8, r30
    1f08:	9e 01       	movw	r18, r28
    1f0a:	29 5b       	subi	r18, 0xB9	; 185
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	59 01       	movw	r10, r18
    1f10:	c1 56       	subi	r28, 0x61	; 97
    1f12:	df 4f       	sbci	r29, 0xFF	; 255
    1f14:	c8 80       	ld	r12, Y
    1f16:	cf 59       	subi	r28, 0x9F	; 159
    1f18:	d0 40       	sbci	r29, 0x00	; 0
    1f1a:	c0 56       	subi	r28, 0x60	; 96
    1f1c:	df 4f       	sbci	r29, 0xFF	; 255
    1f1e:	d8 80       	ld	r13, Y
    1f20:	c0 5a       	subi	r28, 0xA0	; 160
    1f22:	d0 40       	sbci	r29, 0x00	; 0
    1f24:	ce 01       	movw	r24, r28
    1f26:	87 96       	adiw	r24, 0x27	; 39
    1f28:	7c 01       	movw	r14, r24
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	0f 5f       	subi	r16, 0xFF	; 255
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	f3 01       	movw	r30, r6
    1f32:	20 81       	ld	r18, Z
    1f34:	31 81       	ldd	r19, Z+1	; 0x01
    1f36:	42 81       	ldd	r20, Z+2	; 0x02
    1f38:	53 81       	ldd	r21, Z+3	; 0x03
    1f3a:	64 81       	ldd	r22, Z+4	; 0x04
    1f3c:	75 81       	ldd	r23, Z+5	; 0x05
    1f3e:	86 81       	ldd	r24, Z+6	; 0x06
    1f40:	97 81       	ldd	r25, Z+7	; 0x07
    1f42:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_>
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	a0 cf       	rjmp	.-192    	; 0x1e90 <main+0x1e0>
			else if (c == 'c') gascal = start_gascal(myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
    1f50:	83 36       	cpi	r24, 0x63	; 99
    1f52:	c1 f4       	brne	.+48     	; 0x1f84 <main+0x2d4>
    1f54:	9e 01       	movw	r18, r28
    1f56:	24 57       	subi	r18, 0x74	; 116
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	69 01       	movw	r12, r18
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	82 57       	subi	r24, 0x72	; 114
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	7c 01       	movw	r14, r24
    1f64:	8e 01       	movw	r16, r28
    1f66:	00 57       	subi	r16, 0x70	; 112
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	21 52       	subi	r18, 0x21	; 33
    1f6c:	31 09       	sbc	r19, r1
    1f6e:	ae 01       	movw	r20, r28
    1f70:	49 5b       	subi	r20, 0xB9	; 185
    1f72:	5f 4f       	sbci	r21, 0xFF	; 255
    1f74:	be 01       	movw	r22, r28
    1f76:	6e 56       	subi	r22, 0x6E	; 110
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8d 58       	subi	r24, 0x8D	; 141
    1f7c:	91 09       	sbc	r25, r1
    1f7e:	0e 94 8f 0b 	call	0x171e	; 0x171e <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>
    1f82:	2b c0       	rjmp	.+86     	; 0x1fda <main+0x32a>
			else if (c == 'd') gascal = start_aircal(gascal.gain, myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
    1f84:	84 36       	cpi	r24, 0x64	; 100
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <main+0x2da>
    1f88:	83 cf       	rjmp	.-250    	; 0x1e90 <main+0x1e0>
    1f8a:	c5 56       	subi	r28, 0x65	; 101
    1f8c:	df 4f       	sbci	r29, 0xFF	; 255
    1f8e:	88 80       	ld	r8, Y
    1f90:	cb 59       	subi	r28, 0x9B	; 155
    1f92:	d0 40       	sbci	r29, 0x00	; 0
    1f94:	c4 56       	subi	r28, 0x64	; 100
    1f96:	df 4f       	sbci	r29, 0xFF	; 255
    1f98:	98 80       	ld	r9, Y
    1f9a:	cc 59       	subi	r28, 0x9C	; 156
    1f9c:	d0 40       	sbci	r29, 0x00	; 0
    1f9e:	c3 56       	subi	r28, 0x63	; 99
    1fa0:	df 4f       	sbci	r29, 0xFF	; 255
    1fa2:	a8 80       	ld	r10, Y
    1fa4:	cd 59       	subi	r28, 0x9D	; 157
    1fa6:	d0 40       	sbci	r29, 0x00	; 0
    1fa8:	c2 56       	subi	r28, 0x62	; 98
    1faa:	df 4f       	sbci	r29, 0xFF	; 255
    1fac:	b8 80       	ld	r11, Y
    1fae:	ce 59       	subi	r28, 0x9E	; 158
    1fb0:	d0 40       	sbci	r29, 0x00	; 0
    1fb2:	9e 01       	movw	r18, r28
    1fb4:	20 57       	subi	r18, 0x70	; 112
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	69 01       	movw	r12, r18
    1fba:	ce 01       	movw	r24, r28
    1fbc:	85 59       	subi	r24, 0x95	; 149
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	7c 01       	movw	r14, r24
    1fc2:	8e 01       	movw	r16, r28
    1fc4:	09 5b       	subi	r16, 0xB9	; 185
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	2e 5f       	subi	r18, 0xFE	; 254
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	ae 01       	movw	r20, r28
    1fce:	4f 5f       	subi	r20, 0xFF	; 255
    1fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd2:	c2 01       	movw	r24, r4
    1fd4:	b1 01       	movw	r22, r2
    1fd6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>
    1fda:	f3 01       	movw	r30, r6
    1fdc:	20 83       	st	Z, r18
    1fde:	31 83       	std	Z+1, r19	; 0x01
    1fe0:	42 83       	std	Z+2, r20	; 0x02
    1fe2:	53 83       	std	Z+3, r21	; 0x03
    1fe4:	64 83       	std	Z+4, r22	; 0x04
    1fe6:	75 83       	std	Z+5, r23	; 0x05
    1fe8:	86 83       	std	Z+6, r24	; 0x06
    1fea:	97 83       	std	Z+7, r25	; 0x07
    1fec:	20 80       	ld	r2, Z
    1fee:	31 80       	ldd	r3, Z+1	; 0x01
    1ff0:	42 80       	ldd	r4, Z+2	; 0x02
    1ff2:	53 80       	ldd	r5, Z+3	; 0x03
    1ff4:	4d cf       	rjmp	.-358    	; 0x1e90 <main+0x1e0>

00001ff6 <_ZN5ValveC1Eh>:
*/

#include "Valve.h"
#include <avr/io.h>

Valve::Valve(uint8_t pin)
    1ff6:	fc 01       	movw	r30, r24
{
	this->pin = pin;
    1ff8:	60 83       	st	Z, r22
	PORTC_DIRSET = pin;
    1ffa:	60 93 41 06 	sts	0x0641, r22	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	open_b = true;
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    1ffe:	80 81       	ld	r24, Z
    2000:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    2004:	11 82       	std	Z+1, r1	; 0x01
    2006:	08 95       	ret

00002008 <_ZN5Valve4openEv>:
	close();
}

void Valve::open()
{
	PORTC_OUTSET = pin;
    2008:	fc 01       	movw	r30, r24
    200a:	20 81       	ld	r18, Z
    200c:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	open_b = true;
    2010:	21 e0       	ldi	r18, 0x01	; 1
    2012:	21 83       	std	Z+1, r18	; 0x01
    2014:	08 95       	ret

00002016 <_ZN5Valve5closeEv>:
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    2016:	fc 01       	movw	r30, r24
    2018:	20 81       	ld	r18, Z
    201a:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    201e:	11 82       	std	Z+1, r1	; 0x01
    2020:	08 95       	ret

00002022 <__subsf3>:
    2022:	50 58       	subi	r21, 0x80	; 128

00002024 <__addsf3>:
    2024:	bb 27       	eor	r27, r27
    2026:	aa 27       	eor	r26, r26
    2028:	0e 94 29 10 	call	0x2052	; 0x2052 <__addsf3x>
    202c:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_round>
    2030:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fp_pscA>
    2034:	38 f0       	brcs	.+14     	; 0x2044 <__addsf3+0x20>
    2036:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__fp_pscB>
    203a:	20 f0       	brcs	.+8      	; 0x2044 <__addsf3+0x20>
    203c:	39 f4       	brne	.+14     	; 0x204c <__addsf3+0x28>
    203e:	9f 3f       	cpi	r25, 0xFF	; 255
    2040:	19 f4       	brne	.+6      	; 0x2048 <__addsf3+0x24>
    2042:	26 f4       	brtc	.+8      	; 0x204c <__addsf3+0x28>
    2044:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_nan>
    2048:	0e f4       	brtc	.+2      	; 0x204c <__addsf3+0x28>
    204a:	e0 95       	com	r30
    204c:	e7 fb       	bst	r30, 7
    204e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>

00002052 <__addsf3x>:
    2052:	e9 2f       	mov	r30, r25
    2054:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__fp_split3>
    2058:	58 f3       	brcs	.-42     	; 0x2030 <__addsf3+0xc>
    205a:	ba 17       	cp	r27, r26
    205c:	62 07       	cpc	r22, r18
    205e:	73 07       	cpc	r23, r19
    2060:	84 07       	cpc	r24, r20
    2062:	95 07       	cpc	r25, r21
    2064:	20 f0       	brcs	.+8      	; 0x206e <__addsf3x+0x1c>
    2066:	79 f4       	brne	.+30     	; 0x2086 <__addsf3x+0x34>
    2068:	a6 f5       	brtc	.+104    	; 0x20d2 <__addsf3x+0x80>
    206a:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_zero>
    206e:	0e f4       	brtc	.+2      	; 0x2072 <__addsf3x+0x20>
    2070:	e0 95       	com	r30
    2072:	0b 2e       	mov	r0, r27
    2074:	ba 2f       	mov	r27, r26
    2076:	a0 2d       	mov	r26, r0
    2078:	0b 01       	movw	r0, r22
    207a:	b9 01       	movw	r22, r18
    207c:	90 01       	movw	r18, r0
    207e:	0c 01       	movw	r0, r24
    2080:	ca 01       	movw	r24, r20
    2082:	a0 01       	movw	r20, r0
    2084:	11 24       	eor	r1, r1
    2086:	ff 27       	eor	r31, r31
    2088:	59 1b       	sub	r21, r25
    208a:	99 f0       	breq	.+38     	; 0x20b2 <__addsf3x+0x60>
    208c:	59 3f       	cpi	r21, 0xF9	; 249
    208e:	50 f4       	brcc	.+20     	; 0x20a4 <__addsf3x+0x52>
    2090:	50 3e       	cpi	r21, 0xE0	; 224
    2092:	68 f1       	brcs	.+90     	; 0x20ee <__addsf3x+0x9c>
    2094:	1a 16       	cp	r1, r26
    2096:	f0 40       	sbci	r31, 0x00	; 0
    2098:	a2 2f       	mov	r26, r18
    209a:	23 2f       	mov	r18, r19
    209c:	34 2f       	mov	r19, r20
    209e:	44 27       	eor	r20, r20
    20a0:	58 5f       	subi	r21, 0xF8	; 248
    20a2:	f3 cf       	rjmp	.-26     	; 0x208a <__addsf3x+0x38>
    20a4:	46 95       	lsr	r20
    20a6:	37 95       	ror	r19
    20a8:	27 95       	ror	r18
    20aa:	a7 95       	ror	r26
    20ac:	f0 40       	sbci	r31, 0x00	; 0
    20ae:	53 95       	inc	r21
    20b0:	c9 f7       	brne	.-14     	; 0x20a4 <__addsf3x+0x52>
    20b2:	7e f4       	brtc	.+30     	; 0x20d2 <__addsf3x+0x80>
    20b4:	1f 16       	cp	r1, r31
    20b6:	ba 0b       	sbc	r27, r26
    20b8:	62 0b       	sbc	r22, r18
    20ba:	73 0b       	sbc	r23, r19
    20bc:	84 0b       	sbc	r24, r20
    20be:	ba f0       	brmi	.+46     	; 0x20ee <__addsf3x+0x9c>
    20c0:	91 50       	subi	r25, 0x01	; 1
    20c2:	a1 f0       	breq	.+40     	; 0x20ec <__addsf3x+0x9a>
    20c4:	ff 0f       	add	r31, r31
    20c6:	bb 1f       	adc	r27, r27
    20c8:	66 1f       	adc	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	88 1f       	adc	r24, r24
    20ce:	c2 f7       	brpl	.-16     	; 0x20c0 <__addsf3x+0x6e>
    20d0:	0e c0       	rjmp	.+28     	; 0x20ee <__addsf3x+0x9c>
    20d2:	ba 0f       	add	r27, r26
    20d4:	62 1f       	adc	r22, r18
    20d6:	73 1f       	adc	r23, r19
    20d8:	84 1f       	adc	r24, r20
    20da:	48 f4       	brcc	.+18     	; 0x20ee <__addsf3x+0x9c>
    20dc:	87 95       	ror	r24
    20de:	77 95       	ror	r23
    20e0:	67 95       	ror	r22
    20e2:	b7 95       	ror	r27
    20e4:	f7 95       	ror	r31
    20e6:	9e 3f       	cpi	r25, 0xFE	; 254
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <__addsf3x+0x9a>
    20ea:	b0 cf       	rjmp	.-160    	; 0x204c <__addsf3+0x28>
    20ec:	93 95       	inc	r25
    20ee:	88 0f       	add	r24, r24
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__addsf3x+0xa2>
    20f2:	99 27       	eor	r25, r25
    20f4:	ee 0f       	add	r30, r30
    20f6:	97 95       	ror	r25
    20f8:	87 95       	ror	r24
    20fa:	08 95       	ret

000020fc <__divsf3>:
    20fc:	0e 94 92 10 	call	0x2124	; 0x2124 <__divsf3x>
    2100:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_round>
    2104:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__fp_pscB>
    2108:	58 f0       	brcs	.+22     	; 0x2120 <__divsf3+0x24>
    210a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fp_pscA>
    210e:	40 f0       	brcs	.+16     	; 0x2120 <__divsf3+0x24>
    2110:	29 f4       	brne	.+10     	; 0x211c <__divsf3+0x20>
    2112:	5f 3f       	cpi	r21, 0xFF	; 255
    2114:	29 f0       	breq	.+10     	; 0x2120 <__divsf3+0x24>
    2116:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>
    211a:	51 11       	cpse	r21, r1
    211c:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__fp_szero>
    2120:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_nan>

00002124 <__divsf3x>:
    2124:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__fp_split3>
    2128:	68 f3       	brcs	.-38     	; 0x2104 <__divsf3+0x8>

0000212a <__divsf3_pse>:
    212a:	99 23       	and	r25, r25
    212c:	b1 f3       	breq	.-20     	; 0x211a <__divsf3+0x1e>
    212e:	55 23       	and	r21, r21
    2130:	91 f3       	breq	.-28     	; 0x2116 <__divsf3+0x1a>
    2132:	95 1b       	sub	r25, r21
    2134:	55 0b       	sbc	r21, r21
    2136:	bb 27       	eor	r27, r27
    2138:	aa 27       	eor	r26, r26
    213a:	62 17       	cp	r22, r18
    213c:	73 07       	cpc	r23, r19
    213e:	84 07       	cpc	r24, r20
    2140:	38 f0       	brcs	.+14     	; 0x2150 <__divsf3_pse+0x26>
    2142:	9f 5f       	subi	r25, 0xFF	; 255
    2144:	5f 4f       	sbci	r21, 0xFF	; 255
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	44 1f       	adc	r20, r20
    214c:	aa 1f       	adc	r26, r26
    214e:	a9 f3       	breq	.-22     	; 0x213a <__divsf3_pse+0x10>
    2150:	35 d0       	rcall	.+106    	; 0x21bc <__divsf3_pse+0x92>
    2152:	0e 2e       	mov	r0, r30
    2154:	3a f0       	brmi	.+14     	; 0x2164 <__divsf3_pse+0x3a>
    2156:	e0 e8       	ldi	r30, 0x80	; 128
    2158:	32 d0       	rcall	.+100    	; 0x21be <__divsf3_pse+0x94>
    215a:	91 50       	subi	r25, 0x01	; 1
    215c:	50 40       	sbci	r21, 0x00	; 0
    215e:	e6 95       	lsr	r30
    2160:	00 1c       	adc	r0, r0
    2162:	ca f7       	brpl	.-14     	; 0x2156 <__divsf3_pse+0x2c>
    2164:	2b d0       	rcall	.+86     	; 0x21bc <__divsf3_pse+0x92>
    2166:	fe 2f       	mov	r31, r30
    2168:	29 d0       	rcall	.+82     	; 0x21bc <__divsf3_pse+0x92>
    216a:	66 0f       	add	r22, r22
    216c:	77 1f       	adc	r23, r23
    216e:	88 1f       	adc	r24, r24
    2170:	bb 1f       	adc	r27, r27
    2172:	26 17       	cp	r18, r22
    2174:	37 07       	cpc	r19, r23
    2176:	48 07       	cpc	r20, r24
    2178:	ab 07       	cpc	r26, r27
    217a:	b0 e8       	ldi	r27, 0x80	; 128
    217c:	09 f0       	breq	.+2      	; 0x2180 <__divsf3_pse+0x56>
    217e:	bb 0b       	sbc	r27, r27
    2180:	80 2d       	mov	r24, r0
    2182:	bf 01       	movw	r22, r30
    2184:	ff 27       	eor	r31, r31
    2186:	93 58       	subi	r25, 0x83	; 131
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	3a f0       	brmi	.+14     	; 0x219a <__divsf3_pse+0x70>
    218c:	9e 3f       	cpi	r25, 0xFE	; 254
    218e:	51 05       	cpc	r21, r1
    2190:	78 f0       	brcs	.+30     	; 0x21b0 <__divsf3_pse+0x86>
    2192:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>
    2196:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__fp_szero>
    219a:	5f 3f       	cpi	r21, 0xFF	; 255
    219c:	e4 f3       	brlt	.-8      	; 0x2196 <__divsf3_pse+0x6c>
    219e:	98 3e       	cpi	r25, 0xE8	; 232
    21a0:	d4 f3       	brlt	.-12     	; 0x2196 <__divsf3_pse+0x6c>
    21a2:	86 95       	lsr	r24
    21a4:	77 95       	ror	r23
    21a6:	67 95       	ror	r22
    21a8:	b7 95       	ror	r27
    21aa:	f7 95       	ror	r31
    21ac:	9f 5f       	subi	r25, 0xFF	; 255
    21ae:	c9 f7       	brne	.-14     	; 0x21a2 <__divsf3_pse+0x78>
    21b0:	88 0f       	add	r24, r24
    21b2:	91 1d       	adc	r25, r1
    21b4:	96 95       	lsr	r25
    21b6:	87 95       	ror	r24
    21b8:	97 f9       	bld	r25, 7
    21ba:	08 95       	ret
    21bc:	e1 e0       	ldi	r30, 0x01	; 1
    21be:	66 0f       	add	r22, r22
    21c0:	77 1f       	adc	r23, r23
    21c2:	88 1f       	adc	r24, r24
    21c4:	bb 1f       	adc	r27, r27
    21c6:	62 17       	cp	r22, r18
    21c8:	73 07       	cpc	r23, r19
    21ca:	84 07       	cpc	r24, r20
    21cc:	ba 07       	cpc	r27, r26
    21ce:	20 f0       	brcs	.+8      	; 0x21d8 <__divsf3_pse+0xae>
    21d0:	62 1b       	sub	r22, r18
    21d2:	73 0b       	sbc	r23, r19
    21d4:	84 0b       	sbc	r24, r20
    21d6:	ba 0b       	sbc	r27, r26
    21d8:	ee 1f       	adc	r30, r30
    21da:	88 f7       	brcc	.-30     	; 0x21be <__divsf3_pse+0x94>
    21dc:	e0 95       	com	r30
    21de:	08 95       	ret

000021e0 <__floatunsisf>:
    21e0:	e8 94       	clt
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <__floatsisf+0x12>

000021e4 <__floatsisf>:
    21e4:	97 fb       	bst	r25, 7
    21e6:	3e f4       	brtc	.+14     	; 0x21f6 <__floatsisf+0x12>
    21e8:	90 95       	com	r25
    21ea:	80 95       	com	r24
    21ec:	70 95       	com	r23
    21ee:	61 95       	neg	r22
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	8f 4f       	sbci	r24, 0xFF	; 255
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	99 23       	and	r25, r25
    21f8:	a9 f0       	breq	.+42     	; 0x2224 <__floatsisf+0x40>
    21fa:	f9 2f       	mov	r31, r25
    21fc:	96 e9       	ldi	r25, 0x96	; 150
    21fe:	bb 27       	eor	r27, r27
    2200:	93 95       	inc	r25
    2202:	f6 95       	lsr	r31
    2204:	87 95       	ror	r24
    2206:	77 95       	ror	r23
    2208:	67 95       	ror	r22
    220a:	b7 95       	ror	r27
    220c:	f1 11       	cpse	r31, r1
    220e:	f8 cf       	rjmp	.-16     	; 0x2200 <__floatsisf+0x1c>
    2210:	fa f4       	brpl	.+62     	; 0x2250 <__floatsisf+0x6c>
    2212:	bb 0f       	add	r27, r27
    2214:	11 f4       	brne	.+4      	; 0x221a <__floatsisf+0x36>
    2216:	60 ff       	sbrs	r22, 0
    2218:	1b c0       	rjmp	.+54     	; 0x2250 <__floatsisf+0x6c>
    221a:	6f 5f       	subi	r22, 0xFF	; 255
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	8f 4f       	sbci	r24, 0xFF	; 255
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	16 c0       	rjmp	.+44     	; 0x2250 <__floatsisf+0x6c>
    2224:	88 23       	and	r24, r24
    2226:	11 f0       	breq	.+4      	; 0x222c <__floatsisf+0x48>
    2228:	96 e9       	ldi	r25, 0x96	; 150
    222a:	11 c0       	rjmp	.+34     	; 0x224e <__floatsisf+0x6a>
    222c:	77 23       	and	r23, r23
    222e:	21 f0       	breq	.+8      	; 0x2238 <__floatsisf+0x54>
    2230:	9e e8       	ldi	r25, 0x8E	; 142
    2232:	87 2f       	mov	r24, r23
    2234:	76 2f       	mov	r23, r22
    2236:	05 c0       	rjmp	.+10     	; 0x2242 <__floatsisf+0x5e>
    2238:	66 23       	and	r22, r22
    223a:	71 f0       	breq	.+28     	; 0x2258 <__floatsisf+0x74>
    223c:	96 e8       	ldi	r25, 0x86	; 134
    223e:	86 2f       	mov	r24, r22
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	2a f0       	brmi	.+10     	; 0x2250 <__floatsisf+0x6c>
    2246:	9a 95       	dec	r25
    2248:	66 0f       	add	r22, r22
    224a:	77 1f       	adc	r23, r23
    224c:	88 1f       	adc	r24, r24
    224e:	da f7       	brpl	.-10     	; 0x2246 <__floatsisf+0x62>
    2250:	88 0f       	add	r24, r24
    2252:	96 95       	lsr	r25
    2254:	87 95       	ror	r24
    2256:	97 f9       	bld	r25, 7
    2258:	08 95       	ret

0000225a <__fp_cmp>:
    225a:	99 0f       	add	r25, r25
    225c:	00 08       	sbc	r0, r0
    225e:	55 0f       	add	r21, r21
    2260:	aa 0b       	sbc	r26, r26
    2262:	e0 e8       	ldi	r30, 0x80	; 128
    2264:	fe ef       	ldi	r31, 0xFE	; 254
    2266:	16 16       	cp	r1, r22
    2268:	17 06       	cpc	r1, r23
    226a:	e8 07       	cpc	r30, r24
    226c:	f9 07       	cpc	r31, r25
    226e:	c0 f0       	brcs	.+48     	; 0x22a0 <__fp_cmp+0x46>
    2270:	12 16       	cp	r1, r18
    2272:	13 06       	cpc	r1, r19
    2274:	e4 07       	cpc	r30, r20
    2276:	f5 07       	cpc	r31, r21
    2278:	98 f0       	brcs	.+38     	; 0x22a0 <__fp_cmp+0x46>
    227a:	62 1b       	sub	r22, r18
    227c:	73 0b       	sbc	r23, r19
    227e:	84 0b       	sbc	r24, r20
    2280:	95 0b       	sbc	r25, r21
    2282:	39 f4       	brne	.+14     	; 0x2292 <__fp_cmp+0x38>
    2284:	0a 26       	eor	r0, r26
    2286:	61 f0       	breq	.+24     	; 0x22a0 <__fp_cmp+0x46>
    2288:	23 2b       	or	r18, r19
    228a:	24 2b       	or	r18, r20
    228c:	25 2b       	or	r18, r21
    228e:	21 f4       	brne	.+8      	; 0x2298 <__fp_cmp+0x3e>
    2290:	08 95       	ret
    2292:	0a 26       	eor	r0, r26
    2294:	09 f4       	brne	.+2      	; 0x2298 <__fp_cmp+0x3e>
    2296:	a1 40       	sbci	r26, 0x01	; 1
    2298:	a6 95       	lsr	r26
    229a:	8f ef       	ldi	r24, 0xFF	; 255
    229c:	81 1d       	adc	r24, r1
    229e:	81 1d       	adc	r24, r1
    22a0:	08 95       	ret

000022a2 <__fp_inf>:
    22a2:	97 f9       	bld	r25, 7
    22a4:	9f 67       	ori	r25, 0x7F	; 127
    22a6:	80 e8       	ldi	r24, 0x80	; 128
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	08 95       	ret

000022ae <__fp_nan>:
    22ae:	9f ef       	ldi	r25, 0xFF	; 255
    22b0:	80 ec       	ldi	r24, 0xC0	; 192
    22b2:	08 95       	ret

000022b4 <__fp_pscA>:
    22b4:	00 24       	eor	r0, r0
    22b6:	0a 94       	dec	r0
    22b8:	16 16       	cp	r1, r22
    22ba:	17 06       	cpc	r1, r23
    22bc:	18 06       	cpc	r1, r24
    22be:	09 06       	cpc	r0, r25
    22c0:	08 95       	ret

000022c2 <__fp_pscB>:
    22c2:	00 24       	eor	r0, r0
    22c4:	0a 94       	dec	r0
    22c6:	12 16       	cp	r1, r18
    22c8:	13 06       	cpc	r1, r19
    22ca:	14 06       	cpc	r1, r20
    22cc:	05 06       	cpc	r0, r21
    22ce:	08 95       	ret

000022d0 <__fp_round>:
    22d0:	09 2e       	mov	r0, r25
    22d2:	03 94       	inc	r0
    22d4:	00 0c       	add	r0, r0
    22d6:	11 f4       	brne	.+4      	; 0x22dc <__fp_round+0xc>
    22d8:	88 23       	and	r24, r24
    22da:	52 f0       	brmi	.+20     	; 0x22f0 <__fp_round+0x20>
    22dc:	bb 0f       	add	r27, r27
    22de:	40 f4       	brcc	.+16     	; 0x22f0 <__fp_round+0x20>
    22e0:	bf 2b       	or	r27, r31
    22e2:	11 f4       	brne	.+4      	; 0x22e8 <__fp_round+0x18>
    22e4:	60 ff       	sbrs	r22, 0
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <__fp_round+0x20>
    22e8:	6f 5f       	subi	r22, 0xFF	; 255
    22ea:	7f 4f       	sbci	r23, 0xFF	; 255
    22ec:	8f 4f       	sbci	r24, 0xFF	; 255
    22ee:	9f 4f       	sbci	r25, 0xFF	; 255
    22f0:	08 95       	ret

000022f2 <__fp_split3>:
    22f2:	57 fd       	sbrc	r21, 7
    22f4:	90 58       	subi	r25, 0x80	; 128
    22f6:	44 0f       	add	r20, r20
    22f8:	55 1f       	adc	r21, r21
    22fa:	59 f0       	breq	.+22     	; 0x2312 <__fp_splitA+0x10>
    22fc:	5f 3f       	cpi	r21, 0xFF	; 255
    22fe:	71 f0       	breq	.+28     	; 0x231c <__fp_splitA+0x1a>
    2300:	47 95       	ror	r20

00002302 <__fp_splitA>:
    2302:	88 0f       	add	r24, r24
    2304:	97 fb       	bst	r25, 7
    2306:	99 1f       	adc	r25, r25
    2308:	61 f0       	breq	.+24     	; 0x2322 <__fp_splitA+0x20>
    230a:	9f 3f       	cpi	r25, 0xFF	; 255
    230c:	79 f0       	breq	.+30     	; 0x232c <__fp_splitA+0x2a>
    230e:	87 95       	ror	r24
    2310:	08 95       	ret
    2312:	12 16       	cp	r1, r18
    2314:	13 06       	cpc	r1, r19
    2316:	14 06       	cpc	r1, r20
    2318:	55 1f       	adc	r21, r21
    231a:	f2 cf       	rjmp	.-28     	; 0x2300 <__fp_split3+0xe>
    231c:	46 95       	lsr	r20
    231e:	f1 df       	rcall	.-30     	; 0x2302 <__fp_splitA>
    2320:	08 c0       	rjmp	.+16     	; 0x2332 <__fp_splitA+0x30>
    2322:	16 16       	cp	r1, r22
    2324:	17 06       	cpc	r1, r23
    2326:	18 06       	cpc	r1, r24
    2328:	99 1f       	adc	r25, r25
    232a:	f1 cf       	rjmp	.-30     	; 0x230e <__fp_splitA+0xc>
    232c:	86 95       	lsr	r24
    232e:	71 05       	cpc	r23, r1
    2330:	61 05       	cpc	r22, r1
    2332:	08 94       	sec
    2334:	08 95       	ret

00002336 <__fp_zero>:
    2336:	e8 94       	clt

00002338 <__fp_szero>:
    2338:	bb 27       	eor	r27, r27
    233a:	66 27       	eor	r22, r22
    233c:	77 27       	eor	r23, r23
    233e:	cb 01       	movw	r24, r22
    2340:	97 f9       	bld	r25, 7
    2342:	08 95       	ret

00002344 <__gesf2>:
    2344:	0e 94 2d 11 	call	0x225a	; 0x225a <__fp_cmp>
    2348:	08 f4       	brcc	.+2      	; 0x234c <__gesf2+0x8>
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	08 95       	ret

0000234e <__mulsf3>:
    234e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__mulsf3x>
    2352:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_round>
    2356:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fp_pscA>
    235a:	38 f0       	brcs	.+14     	; 0x236a <__mulsf3+0x1c>
    235c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__fp_pscB>
    2360:	20 f0       	brcs	.+8      	; 0x236a <__mulsf3+0x1c>
    2362:	95 23       	and	r25, r21
    2364:	11 f0       	breq	.+4      	; 0x236a <__mulsf3+0x1c>
    2366:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>
    236a:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_nan>
    236e:	11 24       	eor	r1, r1
    2370:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__fp_szero>

00002374 <__mulsf3x>:
    2374:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__fp_split3>
    2378:	70 f3       	brcs	.-36     	; 0x2356 <__mulsf3+0x8>

0000237a <__mulsf3_pse>:
    237a:	95 9f       	mul	r25, r21
    237c:	c1 f3       	breq	.-16     	; 0x236e <__mulsf3+0x20>
    237e:	95 0f       	add	r25, r21
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	55 1f       	adc	r21, r21
    2384:	62 9f       	mul	r22, r18
    2386:	f0 01       	movw	r30, r0
    2388:	72 9f       	mul	r23, r18
    238a:	bb 27       	eor	r27, r27
    238c:	f0 0d       	add	r31, r0
    238e:	b1 1d       	adc	r27, r1
    2390:	63 9f       	mul	r22, r19
    2392:	aa 27       	eor	r26, r26
    2394:	f0 0d       	add	r31, r0
    2396:	b1 1d       	adc	r27, r1
    2398:	aa 1f       	adc	r26, r26
    239a:	64 9f       	mul	r22, r20
    239c:	66 27       	eor	r22, r22
    239e:	b0 0d       	add	r27, r0
    23a0:	a1 1d       	adc	r26, r1
    23a2:	66 1f       	adc	r22, r22
    23a4:	82 9f       	mul	r24, r18
    23a6:	22 27       	eor	r18, r18
    23a8:	b0 0d       	add	r27, r0
    23aa:	a1 1d       	adc	r26, r1
    23ac:	62 1f       	adc	r22, r18
    23ae:	73 9f       	mul	r23, r19
    23b0:	b0 0d       	add	r27, r0
    23b2:	a1 1d       	adc	r26, r1
    23b4:	62 1f       	adc	r22, r18
    23b6:	83 9f       	mul	r24, r19
    23b8:	a0 0d       	add	r26, r0
    23ba:	61 1d       	adc	r22, r1
    23bc:	22 1f       	adc	r18, r18
    23be:	74 9f       	mul	r23, r20
    23c0:	33 27       	eor	r19, r19
    23c2:	a0 0d       	add	r26, r0
    23c4:	61 1d       	adc	r22, r1
    23c6:	23 1f       	adc	r18, r19
    23c8:	84 9f       	mul	r24, r20
    23ca:	60 0d       	add	r22, r0
    23cc:	21 1d       	adc	r18, r1
    23ce:	82 2f       	mov	r24, r18
    23d0:	76 2f       	mov	r23, r22
    23d2:	6a 2f       	mov	r22, r26
    23d4:	11 24       	eor	r1, r1
    23d6:	9f 57       	subi	r25, 0x7F	; 127
    23d8:	50 40       	sbci	r21, 0x00	; 0
    23da:	9a f0       	brmi	.+38     	; 0x2402 <__mulsf3_pse+0x88>
    23dc:	f1 f0       	breq	.+60     	; 0x241a <__mulsf3_pse+0xa0>
    23de:	88 23       	and	r24, r24
    23e0:	4a f0       	brmi	.+18     	; 0x23f4 <__mulsf3_pse+0x7a>
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	bb 1f       	adc	r27, r27
    23e8:	66 1f       	adc	r22, r22
    23ea:	77 1f       	adc	r23, r23
    23ec:	88 1f       	adc	r24, r24
    23ee:	91 50       	subi	r25, 0x01	; 1
    23f0:	50 40       	sbci	r21, 0x00	; 0
    23f2:	a9 f7       	brne	.-22     	; 0x23de <__mulsf3_pse+0x64>
    23f4:	9e 3f       	cpi	r25, 0xFE	; 254
    23f6:	51 05       	cpc	r21, r1
    23f8:	80 f0       	brcs	.+32     	; 0x241a <__mulsf3_pse+0xa0>
    23fa:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>
    23fe:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__fp_szero>
    2402:	5f 3f       	cpi	r21, 0xFF	; 255
    2404:	e4 f3       	brlt	.-8      	; 0x23fe <__mulsf3_pse+0x84>
    2406:	98 3e       	cpi	r25, 0xE8	; 232
    2408:	d4 f3       	brlt	.-12     	; 0x23fe <__mulsf3_pse+0x84>
    240a:	86 95       	lsr	r24
    240c:	77 95       	ror	r23
    240e:	67 95       	ror	r22
    2410:	b7 95       	ror	r27
    2412:	f7 95       	ror	r31
    2414:	e7 95       	ror	r30
    2416:	9f 5f       	subi	r25, 0xFF	; 255
    2418:	c1 f7       	brne	.-16     	; 0x240a <__mulsf3_pse+0x90>
    241a:	fe 2b       	or	r31, r30
    241c:	88 0f       	add	r24, r24
    241e:	91 1d       	adc	r25, r1
    2420:	96 95       	lsr	r25
    2422:	87 95       	ror	r24
    2424:	97 f9       	bld	r25, 7
    2426:	08 95       	ret

00002428 <pow>:
    2428:	fa 01       	movw	r30, r20
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	30 96       	adiw	r30, 0x00	; 0
    2430:	21 05       	cpc	r18, r1
    2432:	31 05       	cpc	r19, r1
    2434:	a1 f1       	breq	.+104    	; 0x249e <pow+0x76>
    2436:	61 15       	cp	r22, r1
    2438:	71 05       	cpc	r23, r1
    243a:	61 f4       	brne	.+24     	; 0x2454 <pow+0x2c>
    243c:	80 38       	cpi	r24, 0x80	; 128
    243e:	bf e3       	ldi	r27, 0x3F	; 63
    2440:	9b 07       	cpc	r25, r27
    2442:	49 f1       	breq	.+82     	; 0x2496 <pow+0x6e>
    2444:	68 94       	set
    2446:	90 38       	cpi	r25, 0x80	; 128
    2448:	81 05       	cpc	r24, r1
    244a:	61 f0       	breq	.+24     	; 0x2464 <pow+0x3c>
    244c:	80 38       	cpi	r24, 0x80	; 128
    244e:	bf ef       	ldi	r27, 0xFF	; 255
    2450:	9b 07       	cpc	r25, r27
    2452:	41 f0       	breq	.+16     	; 0x2464 <pow+0x3c>
    2454:	99 23       	and	r25, r25
    2456:	4a f5       	brpl	.+82     	; 0x24aa <pow+0x82>
    2458:	ff 3f       	cpi	r31, 0xFF	; 255
    245a:	e1 05       	cpc	r30, r1
    245c:	31 05       	cpc	r19, r1
    245e:	21 05       	cpc	r18, r1
    2460:	19 f1       	breq	.+70     	; 0x24a8 <pow+0x80>
    2462:	e8 94       	clt
    2464:	08 94       	sec
    2466:	e7 95       	ror	r30
    2468:	d9 01       	movw	r26, r18
    246a:	aa 23       	and	r26, r26
    246c:	29 f4       	brne	.+10     	; 0x2478 <pow+0x50>
    246e:	ab 2f       	mov	r26, r27
    2470:	be 2f       	mov	r27, r30
    2472:	f8 5f       	subi	r31, 0xF8	; 248
    2474:	d0 f3       	brcs	.-12     	; 0x246a <pow+0x42>
    2476:	10 c0       	rjmp	.+32     	; 0x2498 <pow+0x70>
    2478:	ff 5f       	subi	r31, 0xFF	; 255
    247a:	70 f4       	brcc	.+28     	; 0x2498 <pow+0x70>
    247c:	a6 95       	lsr	r26
    247e:	e0 f7       	brcc	.-8      	; 0x2478 <pow+0x50>
    2480:	f7 39       	cpi	r31, 0x97	; 151
    2482:	50 f0       	brcs	.+20     	; 0x2498 <pow+0x70>
    2484:	19 f0       	breq	.+6      	; 0x248c <pow+0x64>
    2486:	ff 3a       	cpi	r31, 0xAF	; 175
    2488:	38 f4       	brcc	.+14     	; 0x2498 <pow+0x70>
    248a:	9f 77       	andi	r25, 0x7F	; 127
    248c:	9f 93       	push	r25
    248e:	0d d0       	rcall	.+26     	; 0x24aa <pow+0x82>
    2490:	0f 90       	pop	r0
    2492:	07 fc       	sbrc	r0, 7
    2494:	90 58       	subi	r25, 0x80	; 128
    2496:	08 95       	ret
    2498:	46 f0       	brts	.+16     	; 0x24aa <pow+0x82>
    249a:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_nan>
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	80 e8       	ldi	r24, 0x80	; 128
    24a4:	9f e3       	ldi	r25, 0x3F	; 63
    24a6:	08 95       	ret
    24a8:	4f e7       	ldi	r20, 0x7F	; 127
    24aa:	9f 77       	andi	r25, 0x7F	; 127
    24ac:	5f 93       	push	r21
    24ae:	4f 93       	push	r20
    24b0:	3f 93       	push	r19
    24b2:	2f 93       	push	r18
    24b4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <log>
    24b8:	2f 91       	pop	r18
    24ba:	3f 91       	pop	r19
    24bc:	4f 91       	pop	r20
    24be:	5f 91       	pop	r21
    24c0:	0e 94 a7 11 	call	0x234e	; 0x234e <__mulsf3>
    24c4:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <exp>
    24c8:	19 f4       	brne	.+6      	; 0x24d0 <pow+0xa8>
    24ca:	16 f4       	brtc	.+4      	; 0x24d0 <pow+0xa8>
    24cc:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_nan>
    24d0:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_mpack>

000024d4 <sqrt>:
    24d4:	0e 94 81 11 	call	0x2302	; 0x2302 <__fp_splitA>
    24d8:	b8 f3       	brcs	.-18     	; 0x24c8 <pow+0xa0>
    24da:	99 23       	and	r25, r25
    24dc:	c9 f3       	breq	.-14     	; 0x24d0 <pow+0xa8>
    24de:	b6 f3       	brts	.-20     	; 0x24cc <pow+0xa4>
    24e0:	9f 57       	subi	r25, 0x7F	; 127
    24e2:	55 0b       	sbc	r21, r21
    24e4:	87 ff       	sbrs	r24, 7
    24e6:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fp_norm2>
    24ea:	00 24       	eor	r0, r0
    24ec:	a0 e6       	ldi	r26, 0x60	; 96
    24ee:	40 ea       	ldi	r20, 0xA0	; 160
    24f0:	90 01       	movw	r18, r0
    24f2:	80 58       	subi	r24, 0x80	; 128
    24f4:	56 95       	lsr	r21
    24f6:	97 95       	ror	r25
    24f8:	28 f4       	brcc	.+10     	; 0x2504 <sqrt+0x30>
    24fa:	80 5c       	subi	r24, 0xC0	; 192
    24fc:	66 0f       	add	r22, r22
    24fe:	77 1f       	adc	r23, r23
    2500:	88 1f       	adc	r24, r24
    2502:	20 f0       	brcs	.+8      	; 0x250c <sqrt+0x38>
    2504:	26 17       	cp	r18, r22
    2506:	37 07       	cpc	r19, r23
    2508:	48 07       	cpc	r20, r24
    250a:	30 f4       	brcc	.+12     	; 0x2518 <sqrt+0x44>
    250c:	62 1b       	sub	r22, r18
    250e:	73 0b       	sbc	r23, r19
    2510:	84 0b       	sbc	r24, r20
    2512:	20 29       	or	r18, r0
    2514:	31 29       	or	r19, r1
    2516:	4a 2b       	or	r20, r26
    2518:	a6 95       	lsr	r26
    251a:	17 94       	ror	r1
    251c:	07 94       	ror	r0
    251e:	20 25       	eor	r18, r0
    2520:	31 25       	eor	r19, r1
    2522:	4a 27       	eor	r20, r26
    2524:	58 f7       	brcc	.-42     	; 0x24fc <sqrt+0x28>
    2526:	66 0f       	add	r22, r22
    2528:	77 1f       	adc	r23, r23
    252a:	88 1f       	adc	r24, r24
    252c:	20 f0       	brcs	.+8      	; 0x2536 <sqrt+0x62>
    252e:	26 17       	cp	r18, r22
    2530:	37 07       	cpc	r19, r23
    2532:	48 07       	cpc	r20, r24
    2534:	30 f4       	brcc	.+12     	; 0x2542 <sqrt+0x6e>
    2536:	62 0b       	sbc	r22, r18
    2538:	73 0b       	sbc	r23, r19
    253a:	84 0b       	sbc	r24, r20
    253c:	20 0d       	add	r18, r0
    253e:	31 1d       	adc	r19, r1
    2540:	41 1d       	adc	r20, r1
    2542:	a0 95       	com	r26
    2544:	81 f7       	brne	.-32     	; 0x2526 <sqrt+0x52>
    2546:	b9 01       	movw	r22, r18
    2548:	84 2f       	mov	r24, r20
    254a:	91 58       	subi	r25, 0x81	; 129
    254c:	88 0f       	add	r24, r24
    254e:	96 95       	lsr	r25
    2550:	87 95       	ror	r24
    2552:	08 95       	ret
    2554:	29 f4       	brne	.+10     	; 0x2560 <sqrt+0x8c>
    2556:	16 f0       	brts	.+4      	; 0x255c <sqrt+0x88>
    2558:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>
    255c:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__fp_zero>
    2560:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_nan>

00002564 <exp>:
    2564:	0e 94 81 11 	call	0x2302	; 0x2302 <__fp_splitA>
    2568:	a8 f3       	brcs	.-22     	; 0x2554 <sqrt+0x80>
    256a:	96 38       	cpi	r25, 0x86	; 134
    256c:	a0 f7       	brcc	.-24     	; 0x2556 <sqrt+0x82>
    256e:	07 f8       	bld	r0, 7
    2570:	0f 92       	push	r0
    2572:	e8 94       	clt
    2574:	2b e3       	ldi	r18, 0x3B	; 59
    2576:	3a ea       	ldi	r19, 0xAA	; 170
    2578:	48 eb       	ldi	r20, 0xB8	; 184
    257a:	5f e7       	ldi	r21, 0x7F	; 127
    257c:	0e 94 bd 11 	call	0x237a	; 0x237a <__mulsf3_pse>
    2580:	0f 92       	push	r0
    2582:	0f 92       	push	r0
    2584:	0f 92       	push	r0
    2586:	4d b7       	in	r20, 0x3d	; 61
    2588:	5e b7       	in	r21, 0x3e	; 62
    258a:	0f 92       	push	r0
    258c:	0e 94 b2 13 	call	0x2764	; 0x2764 <modf>
    2590:	ec ef       	ldi	r30, 0xFC	; 252
    2592:	f1 e0       	ldi	r31, 0x01	; 1
    2594:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fp_powser>
    2598:	4f 91       	pop	r20
    259a:	5f 91       	pop	r21
    259c:	ef 91       	pop	r30
    259e:	ff 91       	pop	r31
    25a0:	e5 95       	asr	r30
    25a2:	ee 1f       	adc	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	49 f0       	breq	.+18     	; 0x25ba <exp+0x56>
    25a8:	fe 57       	subi	r31, 0x7E	; 126
    25aa:	e0 68       	ori	r30, 0x80	; 128
    25ac:	44 27       	eor	r20, r20
    25ae:	ee 0f       	add	r30, r30
    25b0:	44 1f       	adc	r20, r20
    25b2:	fa 95       	dec	r31
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <exp+0x4a>
    25b6:	41 95       	neg	r20
    25b8:	55 0b       	sbc	r21, r21
    25ba:	0e 94 2c 13 	call	0x2658	; 0x2658 <ldexp>
    25be:	0f 90       	pop	r0
    25c0:	07 fe       	sbrs	r0, 7
    25c2:	0c 94 20 13 	jmp	0x2640	; 0x2640 <inverse>
    25c6:	08 95       	ret

000025c8 <__fp_mpack>:
    25c8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ca:	31 f0       	breq	.+12     	; 0x25d8 <__fp_mpack_finite+0xc>

000025cc <__fp_mpack_finite>:
    25cc:	91 50       	subi	r25, 0x01	; 1
    25ce:	20 f4       	brcc	.+8      	; 0x25d8 <__fp_mpack_finite+0xc>
    25d0:	87 95       	ror	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	b7 95       	ror	r27
    25d8:	88 0f       	add	r24, r24
    25da:	91 1d       	adc	r25, r1
    25dc:	96 95       	lsr	r25
    25de:	87 95       	ror	r24
    25e0:	97 f9       	bld	r25, 7
    25e2:	08 95       	ret

000025e4 <__fp_norm2>:
    25e4:	91 50       	subi	r25, 0x01	; 1
    25e6:	50 40       	sbci	r21, 0x00	; 0
    25e8:	66 0f       	add	r22, r22
    25ea:	77 1f       	adc	r23, r23
    25ec:	88 1f       	adc	r24, r24
    25ee:	d2 f7       	brpl	.-12     	; 0x25e4 <__fp_norm2>
    25f0:	08 95       	ret

000025f2 <__fp_powser>:
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	1f 93       	push	r17
    25f8:	0f 93       	push	r16
    25fa:	ff 92       	push	r15
    25fc:	ef 92       	push	r14
    25fe:	df 92       	push	r13
    2600:	7b 01       	movw	r14, r22
    2602:	8c 01       	movw	r16, r24
    2604:	68 94       	set
    2606:	06 c0       	rjmp	.+12     	; 0x2614 <__fp_powser+0x22>
    2608:	da 2e       	mov	r13, r26
    260a:	ef 01       	movw	r28, r30
    260c:	0e 94 ba 11 	call	0x2374	; 0x2374 <__mulsf3x>
    2610:	fe 01       	movw	r30, r28
    2612:	e8 94       	clt
    2614:	a5 91       	lpm	r26, Z+
    2616:	25 91       	lpm	r18, Z+
    2618:	35 91       	lpm	r19, Z+
    261a:	45 91       	lpm	r20, Z+
    261c:	55 91       	lpm	r21, Z+
    261e:	a6 f3       	brts	.-24     	; 0x2608 <__fp_powser+0x16>
    2620:	ef 01       	movw	r28, r30
    2622:	0e 94 29 10 	call	0x2052	; 0x2052 <__addsf3x>
    2626:	fe 01       	movw	r30, r28
    2628:	97 01       	movw	r18, r14
    262a:	a8 01       	movw	r20, r16
    262c:	da 94       	dec	r13
    262e:	69 f7       	brne	.-38     	; 0x260a <__fp_powser+0x18>
    2630:	df 90       	pop	r13
    2632:	ef 90       	pop	r14
    2634:	ff 90       	pop	r15
    2636:	0f 91       	pop	r16
    2638:	1f 91       	pop	r17
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <inverse>:
    2640:	9b 01       	movw	r18, r22
    2642:	ac 01       	movw	r20, r24
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	80 e8       	ldi	r24, 0x80	; 128
    264a:	9f e3       	ldi	r25, 0x3F	; 63
    264c:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__divsf3>
    2650:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>
    2654:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_mpack>

00002658 <ldexp>:
    2658:	0e 94 81 11 	call	0x2302	; 0x2302 <__fp_splitA>
    265c:	d8 f3       	brcs	.-10     	; 0x2654 <inverse+0x14>
    265e:	99 23       	and	r25, r25
    2660:	c9 f3       	breq	.-14     	; 0x2654 <inverse+0x14>
    2662:	94 0f       	add	r25, r20
    2664:	51 1d       	adc	r21, r1
    2666:	a3 f3       	brvs	.-24     	; 0x2650 <inverse+0x10>
    2668:	91 50       	subi	r25, 0x01	; 1
    266a:	50 40       	sbci	r21, 0x00	; 0
    266c:	94 f0       	brlt	.+36     	; 0x2692 <ldexp+0x3a>
    266e:	59 f0       	breq	.+22     	; 0x2686 <ldexp+0x2e>
    2670:	88 23       	and	r24, r24
    2672:	32 f0       	brmi	.+12     	; 0x2680 <ldexp+0x28>
    2674:	66 0f       	add	r22, r22
    2676:	77 1f       	adc	r23, r23
    2678:	88 1f       	adc	r24, r24
    267a:	91 50       	subi	r25, 0x01	; 1
    267c:	50 40       	sbci	r21, 0x00	; 0
    267e:	c1 f7       	brne	.-16     	; 0x2670 <ldexp+0x18>
    2680:	9e 3f       	cpi	r25, 0xFE	; 254
    2682:	51 05       	cpc	r21, r1
    2684:	2c f7       	brge	.-54     	; 0x2650 <inverse+0x10>
    2686:	88 0f       	add	r24, r24
    2688:	91 1d       	adc	r25, r1
    268a:	96 95       	lsr	r25
    268c:	87 95       	ror	r24
    268e:	97 f9       	bld	r25, 7
    2690:	08 95       	ret
    2692:	5f 3f       	cpi	r21, 0xFF	; 255
    2694:	ac f0       	brlt	.+42     	; 0x26c0 <ldexp+0x68>
    2696:	98 3e       	cpi	r25, 0xE8	; 232
    2698:	9c f0       	brlt	.+38     	; 0x26c0 <ldexp+0x68>
    269a:	bb 27       	eor	r27, r27
    269c:	86 95       	lsr	r24
    269e:	77 95       	ror	r23
    26a0:	67 95       	ror	r22
    26a2:	b7 95       	ror	r27
    26a4:	08 f4       	brcc	.+2      	; 0x26a8 <ldexp+0x50>
    26a6:	b1 60       	ori	r27, 0x01	; 1
    26a8:	93 95       	inc	r25
    26aa:	c1 f7       	brne	.-16     	; 0x269c <ldexp+0x44>
    26ac:	bb 0f       	add	r27, r27
    26ae:	58 f7       	brcc	.-42     	; 0x2686 <ldexp+0x2e>
    26b0:	11 f4       	brne	.+4      	; 0x26b6 <ldexp+0x5e>
    26b2:	60 ff       	sbrs	r22, 0
    26b4:	e8 cf       	rjmp	.-48     	; 0x2686 <ldexp+0x2e>
    26b6:	6f 5f       	subi	r22, 0xFF	; 255
    26b8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ba:	8f 4f       	sbci	r24, 0xFF	; 255
    26bc:	9f 4f       	sbci	r25, 0xFF	; 255
    26be:	e3 cf       	rjmp	.-58     	; 0x2686 <ldexp+0x2e>
    26c0:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__fp_szero>
    26c4:	16 f0       	brts	.+4      	; 0x26ca <ldexp+0x72>
    26c6:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_mpack>
    26ca:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__fp_nan>
    26ce:	68 94       	set
    26d0:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_inf>

000026d4 <log>:
    26d4:	0e 94 81 11 	call	0x2302	; 0x2302 <__fp_splitA>
    26d8:	a8 f3       	brcs	.-22     	; 0x26c4 <ldexp+0x6c>
    26da:	99 23       	and	r25, r25
    26dc:	c1 f3       	breq	.-16     	; 0x26ce <ldexp+0x76>
    26de:	ae f3       	brts	.-22     	; 0x26ca <ldexp+0x72>
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	1f 93       	push	r17
    26e6:	0f 93       	push	r16
    26e8:	ff 92       	push	r15
    26ea:	c9 2f       	mov	r28, r25
    26ec:	dd 27       	eor	r29, r29
    26ee:	88 23       	and	r24, r24
    26f0:	2a f0       	brmi	.+10     	; 0x26fc <log+0x28>
    26f2:	21 97       	sbiw	r28, 0x01	; 1
    26f4:	66 0f       	add	r22, r22
    26f6:	77 1f       	adc	r23, r23
    26f8:	88 1f       	adc	r24, r24
    26fa:	da f7       	brpl	.-10     	; 0x26f2 <log+0x1e>
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f eb       	ldi	r21, 0xBF	; 191
    2704:	9f e3       	ldi	r25, 0x3F	; 63
    2706:	88 39       	cpi	r24, 0x98	; 152
    2708:	20 f0       	brcs	.+8      	; 0x2712 <log+0x3e>
    270a:	80 3e       	cpi	r24, 0xE0	; 224
    270c:	38 f0       	brcs	.+14     	; 0x271c <log+0x48>
    270e:	21 96       	adiw	r28, 0x01	; 1
    2710:	8f 77       	andi	r24, 0x7F	; 127
    2712:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    2716:	e4 e2       	ldi	r30, 0x24	; 36
    2718:	f2 e0       	ldi	r31, 0x02	; 2
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <log+0x50>
    271c:	0e 94 12 10 	call	0x2024	; 0x2024 <__addsf3>
    2720:	e1 e5       	ldi	r30, 0x51	; 81
    2722:	f2 e0       	ldi	r31, 0x02	; 2
    2724:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__fp_powser>
    2728:	8b 01       	movw	r16, r22
    272a:	be 01       	movw	r22, r28
    272c:	ec 01       	movw	r28, r24
    272e:	fb 2e       	mov	r15, r27
    2730:	6f 57       	subi	r22, 0x7F	; 127
    2732:	71 09       	sbc	r23, r1
    2734:	75 95       	asr	r23
    2736:	77 1f       	adc	r23, r23
    2738:	88 0b       	sbc	r24, r24
    273a:	99 0b       	sbc	r25, r25
    273c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatsisf>
    2740:	28 e1       	ldi	r18, 0x18	; 24
    2742:	32 e7       	ldi	r19, 0x72	; 114
    2744:	41 e3       	ldi	r20, 0x31	; 49
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 ba 11 	call	0x2374	; 0x2374 <__mulsf3x>
    274c:	af 2d       	mov	r26, r15
    274e:	98 01       	movw	r18, r16
    2750:	ae 01       	movw	r20, r28
    2752:	ff 90       	pop	r15
    2754:	0f 91       	pop	r16
    2756:	1f 91       	pop	r17
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	0e 94 29 10 	call	0x2052	; 0x2052 <__addsf3x>
    2760:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_round>

00002764 <modf>:
    2764:	fa 01       	movw	r30, r20
    2766:	dc 01       	movw	r26, r24
    2768:	aa 0f       	add	r26, r26
    276a:	bb 1f       	adc	r27, r27
    276c:	9b 01       	movw	r18, r22
    276e:	ac 01       	movw	r20, r24
    2770:	bf 57       	subi	r27, 0x7F	; 127
    2772:	28 f4       	brcc	.+10     	; 0x277e <modf+0x1a>
    2774:	22 27       	eor	r18, r18
    2776:	33 27       	eor	r19, r19
    2778:	44 27       	eor	r20, r20
    277a:	50 78       	andi	r21, 0x80	; 128
    277c:	20 c0       	rjmp	.+64     	; 0x27be <modf+0x5a>
    277e:	b7 51       	subi	r27, 0x17	; 23
    2780:	90 f4       	brcc	.+36     	; 0x27a6 <modf+0x42>
    2782:	ab 2f       	mov	r26, r27
    2784:	00 24       	eor	r0, r0
    2786:	46 95       	lsr	r20
    2788:	37 95       	ror	r19
    278a:	27 95       	ror	r18
    278c:	01 1c       	adc	r0, r1
    278e:	a3 95       	inc	r26
    2790:	d2 f3       	brmi	.-12     	; 0x2786 <modf+0x22>
    2792:	00 20       	and	r0, r0
    2794:	71 f0       	breq	.+28     	; 0x27b2 <modf+0x4e>
    2796:	22 0f       	add	r18, r18
    2798:	33 1f       	adc	r19, r19
    279a:	44 1f       	adc	r20, r20
    279c:	b3 95       	inc	r27
    279e:	da f3       	brmi	.-10     	; 0x2796 <modf+0x32>
    27a0:	0e d0       	rcall	.+28     	; 0x27be <modf+0x5a>
    27a2:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__subsf3>
    27a6:	61 30       	cpi	r22, 0x01	; 1
    27a8:	71 05       	cpc	r23, r1
    27aa:	a0 e8       	ldi	r26, 0x80	; 128
    27ac:	8a 07       	cpc	r24, r26
    27ae:	b9 46       	sbci	r27, 0x69	; 105
    27b0:	30 f4       	brcc	.+12     	; 0x27be <modf+0x5a>
    27b2:	9b 01       	movw	r18, r22
    27b4:	ac 01       	movw	r20, r24
    27b6:	66 27       	eor	r22, r22
    27b8:	77 27       	eor	r23, r23
    27ba:	88 27       	eor	r24, r24
    27bc:	90 78       	andi	r25, 0x80	; 128
    27be:	30 96       	adiw	r30, 0x00	; 0
    27c0:	21 f0       	breq	.+8      	; 0x27ca <modf+0x66>
    27c2:	20 83       	st	Z, r18
    27c4:	31 83       	std	Z+1, r19	; 0x01
    27c6:	42 83       	std	Z+2, r20	; 0x02
    27c8:	53 83       	std	Z+3, r21	; 0x03
    27ca:	08 95       	ret

000027cc <vfprintf>:
    27cc:	2f 92       	push	r2
    27ce:	3f 92       	push	r3
    27d0:	4f 92       	push	r4
    27d2:	5f 92       	push	r5
    27d4:	6f 92       	push	r6
    27d6:	7f 92       	push	r7
    27d8:	8f 92       	push	r8
    27da:	9f 92       	push	r9
    27dc:	af 92       	push	r10
    27de:	bf 92       	push	r11
    27e0:	cf 92       	push	r12
    27e2:	df 92       	push	r13
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	60 97       	sbiw	r28, 0x10	; 16
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	7c 01       	movw	r14, r24
    27fc:	1b 01       	movw	r2, r22
    27fe:	6a 01       	movw	r12, r20
    2800:	fc 01       	movw	r30, r24
    2802:	16 82       	std	Z+6, r1	; 0x06
    2804:	17 82       	std	Z+7, r1	; 0x07
    2806:	83 81       	ldd	r24, Z+3	; 0x03
    2808:	81 ff       	sbrs	r24, 1
    280a:	44 c3       	rjmp	.+1672   	; 0x2e94 <vfprintf+0x6c8>
    280c:	9e 01       	movw	r18, r28
    280e:	2f 5f       	subi	r18, 0xFF	; 255
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	39 01       	movw	r6, r18
    2814:	f7 01       	movw	r30, r14
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	f1 01       	movw	r30, r2
    281a:	93 fd       	sbrc	r25, 3
    281c:	85 91       	lpm	r24, Z+
    281e:	93 ff       	sbrs	r25, 3
    2820:	81 91       	ld	r24, Z+
    2822:	1f 01       	movw	r2, r30
    2824:	88 23       	and	r24, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <vfprintf+0x5e>
    2828:	31 c3       	rjmp	.+1634   	; 0x2e8c <vfprintf+0x6c0>
    282a:	85 32       	cpi	r24, 0x25	; 37
    282c:	39 f4       	brne	.+14     	; 0x283c <vfprintf+0x70>
    282e:	93 fd       	sbrc	r25, 3
    2830:	85 91       	lpm	r24, Z+
    2832:	93 ff       	sbrs	r25, 3
    2834:	81 91       	ld	r24, Z+
    2836:	1f 01       	movw	r2, r30
    2838:	85 32       	cpi	r24, 0x25	; 37
    283a:	39 f4       	brne	.+14     	; 0x284a <vfprintf+0x7e>
    283c:	b7 01       	movw	r22, r14
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2844:	56 01       	movw	r10, r12
    2846:	65 01       	movw	r12, r10
    2848:	e5 cf       	rjmp	.-54     	; 0x2814 <vfprintf+0x48>
    284a:	10 e0       	ldi	r17, 0x00	; 0
    284c:	51 2c       	mov	r5, r1
    284e:	91 2c       	mov	r9, r1
    2850:	ff e1       	ldi	r31, 0x1F	; 31
    2852:	f9 15       	cp	r31, r9
    2854:	d8 f0       	brcs	.+54     	; 0x288c <vfprintf+0xc0>
    2856:	8b 32       	cpi	r24, 0x2B	; 43
    2858:	79 f0       	breq	.+30     	; 0x2878 <vfprintf+0xac>
    285a:	38 f4       	brcc	.+14     	; 0x286a <vfprintf+0x9e>
    285c:	80 32       	cpi	r24, 0x20	; 32
    285e:	79 f0       	breq	.+30     	; 0x287e <vfprintf+0xb2>
    2860:	83 32       	cpi	r24, 0x23	; 35
    2862:	a1 f4       	brne	.+40     	; 0x288c <vfprintf+0xc0>
    2864:	f9 2d       	mov	r31, r9
    2866:	f0 61       	ori	r31, 0x10	; 16
    2868:	2e c0       	rjmp	.+92     	; 0x28c6 <vfprintf+0xfa>
    286a:	8d 32       	cpi	r24, 0x2D	; 45
    286c:	61 f0       	breq	.+24     	; 0x2886 <vfprintf+0xba>
    286e:	80 33       	cpi	r24, 0x30	; 48
    2870:	69 f4       	brne	.+26     	; 0x288c <vfprintf+0xc0>
    2872:	29 2d       	mov	r18, r9
    2874:	21 60       	ori	r18, 0x01	; 1
    2876:	2d c0       	rjmp	.+90     	; 0x28d2 <vfprintf+0x106>
    2878:	39 2d       	mov	r19, r9
    287a:	32 60       	ori	r19, 0x02	; 2
    287c:	93 2e       	mov	r9, r19
    287e:	89 2d       	mov	r24, r9
    2880:	84 60       	ori	r24, 0x04	; 4
    2882:	98 2e       	mov	r9, r24
    2884:	2a c0       	rjmp	.+84     	; 0x28da <vfprintf+0x10e>
    2886:	e9 2d       	mov	r30, r9
    2888:	e8 60       	ori	r30, 0x08	; 8
    288a:	15 c0       	rjmp	.+42     	; 0x28b6 <vfprintf+0xea>
    288c:	97 fc       	sbrc	r9, 7
    288e:	2d c0       	rjmp	.+90     	; 0x28ea <vfprintf+0x11e>
    2890:	20 ed       	ldi	r18, 0xD0	; 208
    2892:	28 0f       	add	r18, r24
    2894:	2a 30       	cpi	r18, 0x0A	; 10
    2896:	88 f4       	brcc	.+34     	; 0x28ba <vfprintf+0xee>
    2898:	96 fe       	sbrs	r9, 6
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <vfprintf+0xdc>
    289c:	3a e0       	ldi	r19, 0x0A	; 10
    289e:	13 9f       	mul	r17, r19
    28a0:	20 0d       	add	r18, r0
    28a2:	11 24       	eor	r1, r1
    28a4:	12 2f       	mov	r17, r18
    28a6:	19 c0       	rjmp	.+50     	; 0x28da <vfprintf+0x10e>
    28a8:	8a e0       	ldi	r24, 0x0A	; 10
    28aa:	58 9e       	mul	r5, r24
    28ac:	20 0d       	add	r18, r0
    28ae:	11 24       	eor	r1, r1
    28b0:	52 2e       	mov	r5, r18
    28b2:	e9 2d       	mov	r30, r9
    28b4:	e0 62       	ori	r30, 0x20	; 32
    28b6:	9e 2e       	mov	r9, r30
    28b8:	10 c0       	rjmp	.+32     	; 0x28da <vfprintf+0x10e>
    28ba:	8e 32       	cpi	r24, 0x2E	; 46
    28bc:	31 f4       	brne	.+12     	; 0x28ca <vfprintf+0xfe>
    28be:	96 fc       	sbrc	r9, 6
    28c0:	e5 c2       	rjmp	.+1482   	; 0x2e8c <vfprintf+0x6c0>
    28c2:	f9 2d       	mov	r31, r9
    28c4:	f0 64       	ori	r31, 0x40	; 64
    28c6:	9f 2e       	mov	r9, r31
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <vfprintf+0x10e>
    28ca:	8c 36       	cpi	r24, 0x6C	; 108
    28cc:	21 f4       	brne	.+8      	; 0x28d6 <vfprintf+0x10a>
    28ce:	29 2d       	mov	r18, r9
    28d0:	20 68       	ori	r18, 0x80	; 128
    28d2:	92 2e       	mov	r9, r18
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <vfprintf+0x10e>
    28d6:	88 36       	cpi	r24, 0x68	; 104
    28d8:	41 f4       	brne	.+16     	; 0x28ea <vfprintf+0x11e>
    28da:	f1 01       	movw	r30, r2
    28dc:	93 fd       	sbrc	r25, 3
    28de:	85 91       	lpm	r24, Z+
    28e0:	93 ff       	sbrs	r25, 3
    28e2:	81 91       	ld	r24, Z+
    28e4:	1f 01       	movw	r2, r30
    28e6:	81 11       	cpse	r24, r1
    28e8:	b3 cf       	rjmp	.-154    	; 0x2850 <vfprintf+0x84>
    28ea:	9b eb       	ldi	r25, 0xBB	; 187
    28ec:	98 0f       	add	r25, r24
    28ee:	93 30       	cpi	r25, 0x03	; 3
    28f0:	20 f4       	brcc	.+8      	; 0x28fa <vfprintf+0x12e>
    28f2:	99 2d       	mov	r25, r9
    28f4:	90 61       	ori	r25, 0x10	; 16
    28f6:	80 5e       	subi	r24, 0xE0	; 224
    28f8:	07 c0       	rjmp	.+14     	; 0x2908 <vfprintf+0x13c>
    28fa:	9b e9       	ldi	r25, 0x9B	; 155
    28fc:	98 0f       	add	r25, r24
    28fe:	93 30       	cpi	r25, 0x03	; 3
    2900:	08 f0       	brcs	.+2      	; 0x2904 <vfprintf+0x138>
    2902:	66 c1       	rjmp	.+716    	; 0x2bd0 <vfprintf+0x404>
    2904:	99 2d       	mov	r25, r9
    2906:	9f 7e       	andi	r25, 0xEF	; 239
    2908:	96 ff       	sbrs	r25, 6
    290a:	16 e0       	ldi	r17, 0x06	; 6
    290c:	9f 73       	andi	r25, 0x3F	; 63
    290e:	99 2e       	mov	r9, r25
    2910:	85 36       	cpi	r24, 0x65	; 101
    2912:	19 f4       	brne	.+6      	; 0x291a <vfprintf+0x14e>
    2914:	90 64       	ori	r25, 0x40	; 64
    2916:	99 2e       	mov	r9, r25
    2918:	08 c0       	rjmp	.+16     	; 0x292a <vfprintf+0x15e>
    291a:	86 36       	cpi	r24, 0x66	; 102
    291c:	21 f4       	brne	.+8      	; 0x2926 <vfprintf+0x15a>
    291e:	39 2f       	mov	r19, r25
    2920:	30 68       	ori	r19, 0x80	; 128
    2922:	93 2e       	mov	r9, r19
    2924:	02 c0       	rjmp	.+4      	; 0x292a <vfprintf+0x15e>
    2926:	11 11       	cpse	r17, r1
    2928:	11 50       	subi	r17, 0x01	; 1
    292a:	97 fe       	sbrs	r9, 7
    292c:	07 c0       	rjmp	.+14     	; 0x293c <vfprintf+0x170>
    292e:	1c 33       	cpi	r17, 0x3C	; 60
    2930:	50 f4       	brcc	.+20     	; 0x2946 <vfprintf+0x17a>
    2932:	44 24       	eor	r4, r4
    2934:	43 94       	inc	r4
    2936:	41 0e       	add	r4, r17
    2938:	27 e0       	ldi	r18, 0x07	; 7
    293a:	0b c0       	rjmp	.+22     	; 0x2952 <vfprintf+0x186>
    293c:	18 30       	cpi	r17, 0x08	; 8
    293e:	38 f0       	brcs	.+14     	; 0x294e <vfprintf+0x182>
    2940:	27 e0       	ldi	r18, 0x07	; 7
    2942:	17 e0       	ldi	r17, 0x07	; 7
    2944:	05 c0       	rjmp	.+10     	; 0x2950 <vfprintf+0x184>
    2946:	27 e0       	ldi	r18, 0x07	; 7
    2948:	9c e3       	ldi	r25, 0x3C	; 60
    294a:	49 2e       	mov	r4, r25
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <vfprintf+0x186>
    294e:	21 2f       	mov	r18, r17
    2950:	41 2c       	mov	r4, r1
    2952:	56 01       	movw	r10, r12
    2954:	84 e0       	ldi	r24, 0x04	; 4
    2956:	a8 0e       	add	r10, r24
    2958:	b1 1c       	adc	r11, r1
    295a:	f6 01       	movw	r30, r12
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	04 2d       	mov	r16, r4
    2966:	a3 01       	movw	r20, r6
    2968:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__ftoa_engine>
    296c:	6c 01       	movw	r12, r24
    296e:	f9 81       	ldd	r31, Y+1	; 0x01
    2970:	fc 87       	std	Y+12, r31	; 0x0c
    2972:	f0 ff       	sbrs	r31, 0
    2974:	02 c0       	rjmp	.+4      	; 0x297a <vfprintf+0x1ae>
    2976:	f3 ff       	sbrs	r31, 3
    2978:	06 c0       	rjmp	.+12     	; 0x2986 <vfprintf+0x1ba>
    297a:	91 fc       	sbrc	r9, 1
    297c:	06 c0       	rjmp	.+12     	; 0x298a <vfprintf+0x1be>
    297e:	92 fe       	sbrs	r9, 2
    2980:	06 c0       	rjmp	.+12     	; 0x298e <vfprintf+0x1c2>
    2982:	00 e2       	ldi	r16, 0x20	; 32
    2984:	05 c0       	rjmp	.+10     	; 0x2990 <vfprintf+0x1c4>
    2986:	0d e2       	ldi	r16, 0x2D	; 45
    2988:	03 c0       	rjmp	.+6      	; 0x2990 <vfprintf+0x1c4>
    298a:	0b e2       	ldi	r16, 0x2B	; 43
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <vfprintf+0x1c4>
    298e:	00 e0       	ldi	r16, 0x00	; 0
    2990:	8c 85       	ldd	r24, Y+12	; 0x0c
    2992:	8c 70       	andi	r24, 0x0C	; 12
    2994:	19 f0       	breq	.+6      	; 0x299c <vfprintf+0x1d0>
    2996:	01 11       	cpse	r16, r1
    2998:	5a c2       	rjmp	.+1204   	; 0x2e4e <vfprintf+0x682>
    299a:	9b c2       	rjmp	.+1334   	; 0x2ed2 <vfprintf+0x706>
    299c:	97 fe       	sbrs	r9, 7
    299e:	10 c0       	rjmp	.+32     	; 0x29c0 <vfprintf+0x1f4>
    29a0:	4c 0c       	add	r4, r12
    29a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    29a4:	f4 ff       	sbrs	r31, 4
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <vfprintf+0x1e4>
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	81 33       	cpi	r24, 0x31	; 49
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <vfprintf+0x1e4>
    29ae:	4a 94       	dec	r4
    29b0:	14 14       	cp	r1, r4
    29b2:	74 f5       	brge	.+92     	; 0x2a10 <vfprintf+0x244>
    29b4:	28 e0       	ldi	r18, 0x08	; 8
    29b6:	24 15       	cp	r18, r4
    29b8:	78 f5       	brcc	.+94     	; 0x2a18 <vfprintf+0x24c>
    29ba:	88 e0       	ldi	r24, 0x08	; 8
    29bc:	48 2e       	mov	r4, r24
    29be:	2c c0       	rjmp	.+88     	; 0x2a18 <vfprintf+0x24c>
    29c0:	96 fc       	sbrc	r9, 6
    29c2:	2a c0       	rjmp	.+84     	; 0x2a18 <vfprintf+0x24c>
    29c4:	81 2f       	mov	r24, r17
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	8c 15       	cp	r24, r12
    29ca:	9d 05       	cpc	r25, r13
    29cc:	9c f0       	brlt	.+38     	; 0x29f4 <vfprintf+0x228>
    29ce:	3c ef       	ldi	r19, 0xFC	; 252
    29d0:	c3 16       	cp	r12, r19
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	d3 06       	cpc	r13, r19
    29d6:	74 f0       	brlt	.+28     	; 0x29f4 <vfprintf+0x228>
    29d8:	89 2d       	mov	r24, r9
    29da:	80 68       	ori	r24, 0x80	; 128
    29dc:	98 2e       	mov	r9, r24
    29de:	0a c0       	rjmp	.+20     	; 0x29f4 <vfprintf+0x228>
    29e0:	e2 e0       	ldi	r30, 0x02	; 2
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	ec 0f       	add	r30, r28
    29e6:	fd 1f       	adc	r31, r29
    29e8:	e1 0f       	add	r30, r17
    29ea:	f1 1d       	adc	r31, r1
    29ec:	80 81       	ld	r24, Z
    29ee:	80 33       	cpi	r24, 0x30	; 48
    29f0:	19 f4       	brne	.+6      	; 0x29f8 <vfprintf+0x22c>
    29f2:	11 50       	subi	r17, 0x01	; 1
    29f4:	11 11       	cpse	r17, r1
    29f6:	f4 cf       	rjmp	.-24     	; 0x29e0 <vfprintf+0x214>
    29f8:	97 fe       	sbrs	r9, 7
    29fa:	0e c0       	rjmp	.+28     	; 0x2a18 <vfprintf+0x24c>
    29fc:	44 24       	eor	r4, r4
    29fe:	43 94       	inc	r4
    2a00:	41 0e       	add	r4, r17
    2a02:	81 2f       	mov	r24, r17
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	c8 16       	cp	r12, r24
    2a08:	d9 06       	cpc	r13, r25
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <vfprintf+0x24a>
    2a0c:	1c 19       	sub	r17, r12
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <vfprintf+0x24c>
    2a10:	44 24       	eor	r4, r4
    2a12:	43 94       	inc	r4
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <vfprintf+0x24c>
    2a16:	10 e0       	ldi	r17, 0x00	; 0
    2a18:	97 fe       	sbrs	r9, 7
    2a1a:	06 c0       	rjmp	.+12     	; 0x2a28 <vfprintf+0x25c>
    2a1c:	1c 14       	cp	r1, r12
    2a1e:	1d 04       	cpc	r1, r13
    2a20:	34 f4       	brge	.+12     	; 0x2a2e <vfprintf+0x262>
    2a22:	c6 01       	movw	r24, r12
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	05 c0       	rjmp	.+10     	; 0x2a32 <vfprintf+0x266>
    2a28:	85 e0       	ldi	r24, 0x05	; 5
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <vfprintf+0x266>
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	01 11       	cpse	r16, r1
    2a34:	01 96       	adiw	r24, 0x01	; 1
    2a36:	11 23       	and	r17, r17
    2a38:	31 f0       	breq	.+12     	; 0x2a46 <vfprintf+0x27a>
    2a3a:	21 2f       	mov	r18, r17
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	2f 5f       	subi	r18, 0xFF	; 255
    2a40:	3f 4f       	sbci	r19, 0xFF	; 255
    2a42:	82 0f       	add	r24, r18
    2a44:	93 1f       	adc	r25, r19
    2a46:	25 2d       	mov	r18, r5
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	82 17       	cp	r24, r18
    2a4c:	93 07       	cpc	r25, r19
    2a4e:	14 f4       	brge	.+4      	; 0x2a54 <vfprintf+0x288>
    2a50:	58 1a       	sub	r5, r24
    2a52:	01 c0       	rjmp	.+2      	; 0x2a56 <vfprintf+0x28a>
    2a54:	51 2c       	mov	r5, r1
    2a56:	89 2d       	mov	r24, r9
    2a58:	89 70       	andi	r24, 0x09	; 9
    2a5a:	49 f4       	brne	.+18     	; 0x2a6e <vfprintf+0x2a2>
    2a5c:	55 20       	and	r5, r5
    2a5e:	39 f0       	breq	.+14     	; 0x2a6e <vfprintf+0x2a2>
    2a60:	b7 01       	movw	r22, r14
    2a62:	80 e2       	ldi	r24, 0x20	; 32
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2a6a:	5a 94       	dec	r5
    2a6c:	f7 cf       	rjmp	.-18     	; 0x2a5c <vfprintf+0x290>
    2a6e:	00 23       	and	r16, r16
    2a70:	29 f0       	breq	.+10     	; 0x2a7c <vfprintf+0x2b0>
    2a72:	b7 01       	movw	r22, r14
    2a74:	80 2f       	mov	r24, r16
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2a7c:	93 fc       	sbrc	r9, 3
    2a7e:	09 c0       	rjmp	.+18     	; 0x2a92 <vfprintf+0x2c6>
    2a80:	55 20       	and	r5, r5
    2a82:	39 f0       	breq	.+14     	; 0x2a92 <vfprintf+0x2c6>
    2a84:	b7 01       	movw	r22, r14
    2a86:	80 e3       	ldi	r24, 0x30	; 48
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2a8e:	5a 94       	dec	r5
    2a90:	f7 cf       	rjmp	.-18     	; 0x2a80 <vfprintf+0x2b4>
    2a92:	97 fe       	sbrs	r9, 7
    2a94:	4c c0       	rjmp	.+152    	; 0x2b2e <vfprintf+0x362>
    2a96:	46 01       	movw	r8, r12
    2a98:	d7 fe       	sbrs	r13, 7
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <vfprintf+0x2d4>
    2a9c:	81 2c       	mov	r8, r1
    2a9e:	91 2c       	mov	r9, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	88 19       	sub	r24, r8
    2aa4:	99 09       	sbc	r25, r9
    2aa6:	f3 01       	movw	r30, r6
    2aa8:	e8 0f       	add	r30, r24
    2aaa:	f9 1f       	adc	r31, r25
    2aac:	ed 87       	std	Y+13, r30	; 0x0d
    2aae:	fe 87       	std	Y+14, r31	; 0x0e
    2ab0:	96 01       	movw	r18, r12
    2ab2:	24 19       	sub	r18, r4
    2ab4:	31 09       	sbc	r19, r1
    2ab6:	2f 87       	std	Y+15, r18	; 0x0f
    2ab8:	38 8b       	std	Y+16, r19	; 0x10
    2aba:	01 2f       	mov	r16, r17
    2abc:	10 e0       	ldi	r17, 0x00	; 0
    2abe:	11 95       	neg	r17
    2ac0:	01 95       	neg	r16
    2ac2:	11 09       	sbc	r17, r1
    2ac4:	3f ef       	ldi	r19, 0xFF	; 255
    2ac6:	83 16       	cp	r8, r19
    2ac8:	93 06       	cpc	r9, r19
    2aca:	29 f4       	brne	.+10     	; 0x2ad6 <vfprintf+0x30a>
    2acc:	b7 01       	movw	r22, r14
    2ace:	8e e2       	ldi	r24, 0x2E	; 46
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2ad6:	c8 14       	cp	r12, r8
    2ad8:	d9 04       	cpc	r13, r9
    2ada:	4c f0       	brlt	.+18     	; 0x2aee <vfprintf+0x322>
    2adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ade:	98 89       	ldd	r25, Y+16	; 0x10
    2ae0:	88 15       	cp	r24, r8
    2ae2:	99 05       	cpc	r25, r9
    2ae4:	24 f4       	brge	.+8      	; 0x2aee <vfprintf+0x322>
    2ae6:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ae8:	fe 85       	ldd	r31, Y+14	; 0x0e
    2aea:	81 81       	ldd	r24, Z+1	; 0x01
    2aec:	01 c0       	rjmp	.+2      	; 0x2af0 <vfprintf+0x324>
    2aee:	80 e3       	ldi	r24, 0x30	; 48
    2af0:	f1 e0       	ldi	r31, 0x01	; 1
    2af2:	8f 1a       	sub	r8, r31
    2af4:	91 08       	sbc	r9, r1
    2af6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2af8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2afa:	2f 5f       	subi	r18, 0xFF	; 255
    2afc:	3f 4f       	sbci	r19, 0xFF	; 255
    2afe:	2d 87       	std	Y+13, r18	; 0x0d
    2b00:	3e 87       	std	Y+14, r19	; 0x0e
    2b02:	80 16       	cp	r8, r16
    2b04:	91 06       	cpc	r9, r17
    2b06:	2c f0       	brlt	.+10     	; 0x2b12 <vfprintf+0x346>
    2b08:	b7 01       	movw	r22, r14
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2b10:	d9 cf       	rjmp	.-78     	; 0x2ac4 <vfprintf+0x2f8>
    2b12:	c8 14       	cp	r12, r8
    2b14:	d9 04       	cpc	r13, r9
    2b16:	41 f4       	brne	.+16     	; 0x2b28 <vfprintf+0x35c>
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1a:	96 33       	cpi	r25, 0x36	; 54
    2b1c:	20 f4       	brcc	.+8      	; 0x2b26 <vfprintf+0x35a>
    2b1e:	95 33       	cpi	r25, 0x35	; 53
    2b20:	19 f4       	brne	.+6      	; 0x2b28 <vfprintf+0x35c>
    2b22:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b24:	34 ff       	sbrs	r19, 4
    2b26:	81 e3       	ldi	r24, 0x31	; 49
    2b28:	b7 01       	movw	r22, r14
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	4e c0       	rjmp	.+156    	; 0x2bca <vfprintf+0x3fe>
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	81 33       	cpi	r24, 0x31	; 49
    2b32:	19 f0       	breq	.+6      	; 0x2b3a <vfprintf+0x36e>
    2b34:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b36:	9f 7e       	andi	r25, 0xEF	; 239
    2b38:	9c 87       	std	Y+12, r25	; 0x0c
    2b3a:	b7 01       	movw	r22, r14
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2b42:	11 11       	cpse	r17, r1
    2b44:	05 c0       	rjmp	.+10     	; 0x2b50 <vfprintf+0x384>
    2b46:	94 fc       	sbrc	r9, 4
    2b48:	18 c0       	rjmp	.+48     	; 0x2b7a <vfprintf+0x3ae>
    2b4a:	85 e6       	ldi	r24, 0x65	; 101
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	17 c0       	rjmp	.+46     	; 0x2b7e <vfprintf+0x3b2>
    2b50:	b7 01       	movw	r22, r14
    2b52:	8e e2       	ldi	r24, 0x2E	; 46
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2b5a:	1e 5f       	subi	r17, 0xFE	; 254
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	01 e0       	ldi	r16, 0x01	; 1
    2b60:	08 0f       	add	r16, r24
    2b62:	f3 01       	movw	r30, r6
    2b64:	e8 0f       	add	r30, r24
    2b66:	f1 1d       	adc	r31, r1
    2b68:	80 81       	ld	r24, Z
    2b6a:	b7 01       	movw	r22, r14
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2b72:	80 2f       	mov	r24, r16
    2b74:	01 13       	cpse	r16, r17
    2b76:	f3 cf       	rjmp	.-26     	; 0x2b5e <vfprintf+0x392>
    2b78:	e6 cf       	rjmp	.-52     	; 0x2b46 <vfprintf+0x37a>
    2b7a:	85 e4       	ldi	r24, 0x45	; 69
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	b7 01       	movw	r22, r14
    2b80:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2b84:	d7 fc       	sbrc	r13, 7
    2b86:	06 c0       	rjmp	.+12     	; 0x2b94 <vfprintf+0x3c8>
    2b88:	c1 14       	cp	r12, r1
    2b8a:	d1 04       	cpc	r13, r1
    2b8c:	41 f4       	brne	.+16     	; 0x2b9e <vfprintf+0x3d2>
    2b8e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b90:	e4 ff       	sbrs	r30, 4
    2b92:	05 c0       	rjmp	.+10     	; 0x2b9e <vfprintf+0x3d2>
    2b94:	d1 94       	neg	r13
    2b96:	c1 94       	neg	r12
    2b98:	d1 08       	sbc	r13, r1
    2b9a:	8d e2       	ldi	r24, 0x2D	; 45
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <vfprintf+0x3d4>
    2b9e:	8b e2       	ldi	r24, 0x2B	; 43
    2ba0:	b7 01       	movw	r22, r14
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2ba8:	80 e3       	ldi	r24, 0x30	; 48
    2baa:	2a e0       	ldi	r18, 0x0A	; 10
    2bac:	c2 16       	cp	r12, r18
    2bae:	d1 04       	cpc	r13, r1
    2bb0:	2c f0       	brlt	.+10     	; 0x2bbc <vfprintf+0x3f0>
    2bb2:	8f 5f       	subi	r24, 0xFF	; 255
    2bb4:	fa e0       	ldi	r31, 0x0A	; 10
    2bb6:	cf 1a       	sub	r12, r31
    2bb8:	d1 08       	sbc	r13, r1
    2bba:	f7 cf       	rjmp	.-18     	; 0x2baa <vfprintf+0x3de>
    2bbc:	b7 01       	movw	r22, r14
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2bc4:	b7 01       	movw	r22, r14
    2bc6:	c6 01       	movw	r24, r12
    2bc8:	c0 96       	adiw	r24, 0x30	; 48
    2bca:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2bce:	54 c1       	rjmp	.+680    	; 0x2e78 <vfprintf+0x6ac>
    2bd0:	83 36       	cpi	r24, 0x63	; 99
    2bd2:	31 f0       	breq	.+12     	; 0x2be0 <vfprintf+0x414>
    2bd4:	83 37       	cpi	r24, 0x73	; 115
    2bd6:	79 f0       	breq	.+30     	; 0x2bf6 <vfprintf+0x42a>
    2bd8:	83 35       	cpi	r24, 0x53	; 83
    2bda:	09 f0       	breq	.+2      	; 0x2bde <vfprintf+0x412>
    2bdc:	56 c0       	rjmp	.+172    	; 0x2c8a <vfprintf+0x4be>
    2bde:	20 c0       	rjmp	.+64     	; 0x2c20 <vfprintf+0x454>
    2be0:	56 01       	movw	r10, r12
    2be2:	32 e0       	ldi	r19, 0x02	; 2
    2be4:	a3 0e       	add	r10, r19
    2be6:	b1 1c       	adc	r11, r1
    2be8:	f6 01       	movw	r30, r12
    2bea:	80 81       	ld	r24, Z
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	01 e0       	ldi	r16, 0x01	; 1
    2bf0:	10 e0       	ldi	r17, 0x00	; 0
    2bf2:	63 01       	movw	r12, r6
    2bf4:	12 c0       	rjmp	.+36     	; 0x2c1a <vfprintf+0x44e>
    2bf6:	56 01       	movw	r10, r12
    2bf8:	f2 e0       	ldi	r31, 0x02	; 2
    2bfa:	af 0e       	add	r10, r31
    2bfc:	b1 1c       	adc	r11, r1
    2bfe:	f6 01       	movw	r30, r12
    2c00:	c0 80       	ld	r12, Z
    2c02:	d1 80       	ldd	r13, Z+1	; 0x01
    2c04:	96 fe       	sbrs	r9, 6
    2c06:	03 c0       	rjmp	.+6      	; 0x2c0e <vfprintf+0x442>
    2c08:	61 2f       	mov	r22, r17
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <vfprintf+0x446>
    2c0e:	6f ef       	ldi	r22, 0xFF	; 255
    2c10:	7f ef       	ldi	r23, 0xFF	; 255
    2c12:	c6 01       	movw	r24, r12
    2c14:	0e 94 69 18 	call	0x30d2	; 0x30d2 <strnlen>
    2c18:	8c 01       	movw	r16, r24
    2c1a:	f9 2d       	mov	r31, r9
    2c1c:	ff 77       	andi	r31, 0x7F	; 127
    2c1e:	14 c0       	rjmp	.+40     	; 0x2c48 <vfprintf+0x47c>
    2c20:	56 01       	movw	r10, r12
    2c22:	22 e0       	ldi	r18, 0x02	; 2
    2c24:	a2 0e       	add	r10, r18
    2c26:	b1 1c       	adc	r11, r1
    2c28:	f6 01       	movw	r30, r12
    2c2a:	c0 80       	ld	r12, Z
    2c2c:	d1 80       	ldd	r13, Z+1	; 0x01
    2c2e:	96 fe       	sbrs	r9, 6
    2c30:	03 c0       	rjmp	.+6      	; 0x2c38 <vfprintf+0x46c>
    2c32:	61 2f       	mov	r22, r17
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <vfprintf+0x470>
    2c38:	6f ef       	ldi	r22, 0xFF	; 255
    2c3a:	7f ef       	ldi	r23, 0xFF	; 255
    2c3c:	c6 01       	movw	r24, r12
    2c3e:	0e 94 5e 18 	call	0x30bc	; 0x30bc <strnlen_P>
    2c42:	8c 01       	movw	r16, r24
    2c44:	f9 2d       	mov	r31, r9
    2c46:	f0 68       	ori	r31, 0x80	; 128
    2c48:	9f 2e       	mov	r9, r31
    2c4a:	f3 fd       	sbrc	r31, 3
    2c4c:	1a c0       	rjmp	.+52     	; 0x2c82 <vfprintf+0x4b6>
    2c4e:	85 2d       	mov	r24, r5
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	08 17       	cp	r16, r24
    2c54:	19 07       	cpc	r17, r25
    2c56:	a8 f4       	brcc	.+42     	; 0x2c82 <vfprintf+0x4b6>
    2c58:	b7 01       	movw	r22, r14
    2c5a:	80 e2       	ldi	r24, 0x20	; 32
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2c62:	5a 94       	dec	r5
    2c64:	f4 cf       	rjmp	.-24     	; 0x2c4e <vfprintf+0x482>
    2c66:	f6 01       	movw	r30, r12
    2c68:	97 fc       	sbrc	r9, 7
    2c6a:	85 91       	lpm	r24, Z+
    2c6c:	97 fe       	sbrs	r9, 7
    2c6e:	81 91       	ld	r24, Z+
    2c70:	6f 01       	movw	r12, r30
    2c72:	b7 01       	movw	r22, r14
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2c7a:	51 10       	cpse	r5, r1
    2c7c:	5a 94       	dec	r5
    2c7e:	01 50       	subi	r16, 0x01	; 1
    2c80:	11 09       	sbc	r17, r1
    2c82:	01 15       	cp	r16, r1
    2c84:	11 05       	cpc	r17, r1
    2c86:	79 f7       	brne	.-34     	; 0x2c66 <vfprintf+0x49a>
    2c88:	f7 c0       	rjmp	.+494    	; 0x2e78 <vfprintf+0x6ac>
    2c8a:	84 36       	cpi	r24, 0x64	; 100
    2c8c:	11 f0       	breq	.+4      	; 0x2c92 <vfprintf+0x4c6>
    2c8e:	89 36       	cpi	r24, 0x69	; 105
    2c90:	61 f5       	brne	.+88     	; 0x2cea <vfprintf+0x51e>
    2c92:	56 01       	movw	r10, r12
    2c94:	97 fe       	sbrs	r9, 7
    2c96:	09 c0       	rjmp	.+18     	; 0x2caa <vfprintf+0x4de>
    2c98:	24 e0       	ldi	r18, 0x04	; 4
    2c9a:	a2 0e       	add	r10, r18
    2c9c:	b1 1c       	adc	r11, r1
    2c9e:	f6 01       	movw	r30, r12
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	0a c0       	rjmp	.+20     	; 0x2cbe <vfprintf+0x4f2>
    2caa:	f2 e0       	ldi	r31, 0x02	; 2
    2cac:	af 0e       	add	r10, r31
    2cae:	b1 1c       	adc	r11, r1
    2cb0:	f6 01       	movw	r30, r12
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	07 2e       	mov	r0, r23
    2cb8:	00 0c       	add	r0, r0
    2cba:	88 0b       	sbc	r24, r24
    2cbc:	99 0b       	sbc	r25, r25
    2cbe:	f9 2d       	mov	r31, r9
    2cc0:	ff 76       	andi	r31, 0x6F	; 111
    2cc2:	9f 2e       	mov	r9, r31
    2cc4:	97 ff       	sbrs	r25, 7
    2cc6:	09 c0       	rjmp	.+18     	; 0x2cda <vfprintf+0x50e>
    2cc8:	90 95       	com	r25
    2cca:	80 95       	com	r24
    2ccc:	70 95       	com	r23
    2cce:	61 95       	neg	r22
    2cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd6:	f0 68       	ori	r31, 0x80	; 128
    2cd8:	9f 2e       	mov	r9, r31
    2cda:	2a e0       	ldi	r18, 0x0A	; 10
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	a3 01       	movw	r20, r6
    2ce0:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__ultoa_invert>
    2ce4:	c8 2e       	mov	r12, r24
    2ce6:	c6 18       	sub	r12, r6
    2ce8:	3f c0       	rjmp	.+126    	; 0x2d68 <vfprintf+0x59c>
    2cea:	09 2d       	mov	r16, r9
    2cec:	85 37       	cpi	r24, 0x75	; 117
    2cee:	21 f4       	brne	.+8      	; 0x2cf8 <vfprintf+0x52c>
    2cf0:	0f 7e       	andi	r16, 0xEF	; 239
    2cf2:	2a e0       	ldi	r18, 0x0A	; 10
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	1d c0       	rjmp	.+58     	; 0x2d32 <vfprintf+0x566>
    2cf8:	09 7f       	andi	r16, 0xF9	; 249
    2cfa:	8f 36       	cpi	r24, 0x6F	; 111
    2cfc:	91 f0       	breq	.+36     	; 0x2d22 <vfprintf+0x556>
    2cfe:	18 f4       	brcc	.+6      	; 0x2d06 <vfprintf+0x53a>
    2d00:	88 35       	cpi	r24, 0x58	; 88
    2d02:	59 f0       	breq	.+22     	; 0x2d1a <vfprintf+0x54e>
    2d04:	c3 c0       	rjmp	.+390    	; 0x2e8c <vfprintf+0x6c0>
    2d06:	80 37       	cpi	r24, 0x70	; 112
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <vfprintf+0x544>
    2d0a:	88 37       	cpi	r24, 0x78	; 120
    2d0c:	11 f0       	breq	.+4      	; 0x2d12 <vfprintf+0x546>
    2d0e:	be c0       	rjmp	.+380    	; 0x2e8c <vfprintf+0x6c0>
    2d10:	00 61       	ori	r16, 0x10	; 16
    2d12:	04 ff       	sbrs	r16, 4
    2d14:	09 c0       	rjmp	.+18     	; 0x2d28 <vfprintf+0x55c>
    2d16:	04 60       	ori	r16, 0x04	; 4
    2d18:	07 c0       	rjmp	.+14     	; 0x2d28 <vfprintf+0x55c>
    2d1a:	94 fe       	sbrs	r9, 4
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <vfprintf+0x562>
    2d1e:	06 60       	ori	r16, 0x06	; 6
    2d20:	06 c0       	rjmp	.+12     	; 0x2d2e <vfprintf+0x562>
    2d22:	28 e0       	ldi	r18, 0x08	; 8
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	05 c0       	rjmp	.+10     	; 0x2d32 <vfprintf+0x566>
    2d28:	20 e1       	ldi	r18, 0x10	; 16
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <vfprintf+0x566>
    2d2e:	20 e1       	ldi	r18, 0x10	; 16
    2d30:	32 e0       	ldi	r19, 0x02	; 2
    2d32:	56 01       	movw	r10, r12
    2d34:	07 ff       	sbrs	r16, 7
    2d36:	09 c0       	rjmp	.+18     	; 0x2d4a <vfprintf+0x57e>
    2d38:	84 e0       	ldi	r24, 0x04	; 4
    2d3a:	a8 0e       	add	r10, r24
    2d3c:	b1 1c       	adc	r11, r1
    2d3e:	f6 01       	movw	r30, r12
    2d40:	60 81       	ld	r22, Z
    2d42:	71 81       	ldd	r23, Z+1	; 0x01
    2d44:	82 81       	ldd	r24, Z+2	; 0x02
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	08 c0       	rjmp	.+16     	; 0x2d5a <vfprintf+0x58e>
    2d4a:	f2 e0       	ldi	r31, 0x02	; 2
    2d4c:	af 0e       	add	r10, r31
    2d4e:	b1 1c       	adc	r11, r1
    2d50:	f6 01       	movw	r30, r12
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	a3 01       	movw	r20, r6
    2d5c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__ultoa_invert>
    2d60:	c8 2e       	mov	r12, r24
    2d62:	c6 18       	sub	r12, r6
    2d64:	0f 77       	andi	r16, 0x7F	; 127
    2d66:	90 2e       	mov	r9, r16
    2d68:	96 fe       	sbrs	r9, 6
    2d6a:	0b c0       	rjmp	.+22     	; 0x2d82 <vfprintf+0x5b6>
    2d6c:	09 2d       	mov	r16, r9
    2d6e:	0e 7f       	andi	r16, 0xFE	; 254
    2d70:	c1 16       	cp	r12, r17
    2d72:	50 f4       	brcc	.+20     	; 0x2d88 <vfprintf+0x5bc>
    2d74:	94 fe       	sbrs	r9, 4
    2d76:	0a c0       	rjmp	.+20     	; 0x2d8c <vfprintf+0x5c0>
    2d78:	92 fc       	sbrc	r9, 2
    2d7a:	08 c0       	rjmp	.+16     	; 0x2d8c <vfprintf+0x5c0>
    2d7c:	09 2d       	mov	r16, r9
    2d7e:	0e 7e       	andi	r16, 0xEE	; 238
    2d80:	05 c0       	rjmp	.+10     	; 0x2d8c <vfprintf+0x5c0>
    2d82:	dc 2c       	mov	r13, r12
    2d84:	09 2d       	mov	r16, r9
    2d86:	03 c0       	rjmp	.+6      	; 0x2d8e <vfprintf+0x5c2>
    2d88:	dc 2c       	mov	r13, r12
    2d8a:	01 c0       	rjmp	.+2      	; 0x2d8e <vfprintf+0x5c2>
    2d8c:	d1 2e       	mov	r13, r17
    2d8e:	04 ff       	sbrs	r16, 4
    2d90:	0d c0       	rjmp	.+26     	; 0x2dac <vfprintf+0x5e0>
    2d92:	fe 01       	movw	r30, r28
    2d94:	ec 0d       	add	r30, r12
    2d96:	f1 1d       	adc	r31, r1
    2d98:	80 81       	ld	r24, Z
    2d9a:	80 33       	cpi	r24, 0x30	; 48
    2d9c:	11 f4       	brne	.+4      	; 0x2da2 <vfprintf+0x5d6>
    2d9e:	09 7e       	andi	r16, 0xE9	; 233
    2da0:	09 c0       	rjmp	.+18     	; 0x2db4 <vfprintf+0x5e8>
    2da2:	02 ff       	sbrs	r16, 2
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <vfprintf+0x5e6>
    2da6:	d3 94       	inc	r13
    2da8:	d3 94       	inc	r13
    2daa:	04 c0       	rjmp	.+8      	; 0x2db4 <vfprintf+0x5e8>
    2dac:	80 2f       	mov	r24, r16
    2dae:	86 78       	andi	r24, 0x86	; 134
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <vfprintf+0x5e8>
    2db2:	d3 94       	inc	r13
    2db4:	03 fd       	sbrc	r16, 3
    2db6:	11 c0       	rjmp	.+34     	; 0x2dda <vfprintf+0x60e>
    2db8:	00 ff       	sbrs	r16, 0
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <vfprintf+0x5fc>
    2dbc:	1c 2d       	mov	r17, r12
    2dbe:	d5 14       	cp	r13, r5
    2dc0:	80 f4       	brcc	.+32     	; 0x2de2 <vfprintf+0x616>
    2dc2:	15 0d       	add	r17, r5
    2dc4:	1d 19       	sub	r17, r13
    2dc6:	0d c0       	rjmp	.+26     	; 0x2de2 <vfprintf+0x616>
    2dc8:	d5 14       	cp	r13, r5
    2dca:	58 f4       	brcc	.+22     	; 0x2de2 <vfprintf+0x616>
    2dcc:	b7 01       	movw	r22, r14
    2dce:	80 e2       	ldi	r24, 0x20	; 32
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2dd6:	d3 94       	inc	r13
    2dd8:	f7 cf       	rjmp	.-18     	; 0x2dc8 <vfprintf+0x5fc>
    2dda:	d5 14       	cp	r13, r5
    2ddc:	10 f4       	brcc	.+4      	; 0x2de2 <vfprintf+0x616>
    2dde:	5d 18       	sub	r5, r13
    2de0:	01 c0       	rjmp	.+2      	; 0x2de4 <vfprintf+0x618>
    2de2:	51 2c       	mov	r5, r1
    2de4:	04 ff       	sbrs	r16, 4
    2de6:	10 c0       	rjmp	.+32     	; 0x2e08 <vfprintf+0x63c>
    2de8:	b7 01       	movw	r22, r14
    2dea:	80 e3       	ldi	r24, 0x30	; 48
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2df2:	02 ff       	sbrs	r16, 2
    2df4:	17 c0       	rjmp	.+46     	; 0x2e24 <vfprintf+0x658>
    2df6:	01 fd       	sbrc	r16, 1
    2df8:	03 c0       	rjmp	.+6      	; 0x2e00 <vfprintf+0x634>
    2dfa:	88 e7       	ldi	r24, 0x78	; 120
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <vfprintf+0x638>
    2e00:	88 e5       	ldi	r24, 0x58	; 88
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	b7 01       	movw	r22, r14
    2e06:	0c c0       	rjmp	.+24     	; 0x2e20 <vfprintf+0x654>
    2e08:	80 2f       	mov	r24, r16
    2e0a:	86 78       	andi	r24, 0x86	; 134
    2e0c:	59 f0       	breq	.+22     	; 0x2e24 <vfprintf+0x658>
    2e0e:	01 ff       	sbrs	r16, 1
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <vfprintf+0x64a>
    2e12:	8b e2       	ldi	r24, 0x2B	; 43
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <vfprintf+0x64c>
    2e16:	80 e2       	ldi	r24, 0x20	; 32
    2e18:	07 fd       	sbrc	r16, 7
    2e1a:	8d e2       	ldi	r24, 0x2D	; 45
    2e1c:	b7 01       	movw	r22, r14
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2e24:	c1 16       	cp	r12, r17
    2e26:	38 f4       	brcc	.+14     	; 0x2e36 <vfprintf+0x66a>
    2e28:	b7 01       	movw	r22, r14
    2e2a:	80 e3       	ldi	r24, 0x30	; 48
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2e32:	11 50       	subi	r17, 0x01	; 1
    2e34:	f7 cf       	rjmp	.-18     	; 0x2e24 <vfprintf+0x658>
    2e36:	ca 94       	dec	r12
    2e38:	f3 01       	movw	r30, r6
    2e3a:	ec 0d       	add	r30, r12
    2e3c:	f1 1d       	adc	r31, r1
    2e3e:	80 81       	ld	r24, Z
    2e40:	b7 01       	movw	r22, r14
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2e48:	c1 10       	cpse	r12, r1
    2e4a:	f5 cf       	rjmp	.-22     	; 0x2e36 <vfprintf+0x66a>
    2e4c:	15 c0       	rjmp	.+42     	; 0x2e78 <vfprintf+0x6ac>
    2e4e:	f4 e0       	ldi	r31, 0x04	; 4
    2e50:	f5 15       	cp	r31, r5
    2e52:	60 f5       	brcc	.+88     	; 0x2eac <vfprintf+0x6e0>
    2e54:	84 e0       	ldi	r24, 0x04	; 4
    2e56:	58 1a       	sub	r5, r24
    2e58:	93 fe       	sbrs	r9, 3
    2e5a:	1f c0       	rjmp	.+62     	; 0x2e9a <vfprintf+0x6ce>
    2e5c:	01 11       	cpse	r16, r1
    2e5e:	27 c0       	rjmp	.+78     	; 0x2eae <vfprintf+0x6e2>
    2e60:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e62:	23 ff       	sbrs	r18, 3
    2e64:	2a c0       	rjmp	.+84     	; 0x2eba <vfprintf+0x6ee>
    2e66:	0e e7       	ldi	r16, 0x7E	; 126
    2e68:	12 e0       	ldi	r17, 0x02	; 2
    2e6a:	39 2d       	mov	r19, r9
    2e6c:	30 71       	andi	r19, 0x10	; 16
    2e6e:	93 2e       	mov	r9, r19
    2e70:	f8 01       	movw	r30, r16
    2e72:	84 91       	lpm	r24, Z
    2e74:	81 11       	cpse	r24, r1
    2e76:	24 c0       	rjmp	.+72     	; 0x2ec0 <vfprintf+0x6f4>
    2e78:	55 20       	and	r5, r5
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <vfprintf+0x6b2>
    2e7c:	e4 cc       	rjmp	.-1592   	; 0x2846 <vfprintf+0x7a>
    2e7e:	b7 01       	movw	r22, r14
    2e80:	80 e2       	ldi	r24, 0x20	; 32
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2e88:	5a 94       	dec	r5
    2e8a:	f6 cf       	rjmp	.-20     	; 0x2e78 <vfprintf+0x6ac>
    2e8c:	f7 01       	movw	r30, r14
    2e8e:	86 81       	ldd	r24, Z+6	; 0x06
    2e90:	97 81       	ldd	r25, Z+7	; 0x07
    2e92:	26 c0       	rjmp	.+76     	; 0x2ee0 <vfprintf+0x714>
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	9f ef       	ldi	r25, 0xFF	; 255
    2e98:	23 c0       	rjmp	.+70     	; 0x2ee0 <vfprintf+0x714>
    2e9a:	b7 01       	movw	r22, r14
    2e9c:	80 e2       	ldi	r24, 0x20	; 32
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2ea4:	5a 94       	dec	r5
    2ea6:	51 10       	cpse	r5, r1
    2ea8:	f8 cf       	rjmp	.-16     	; 0x2e9a <vfprintf+0x6ce>
    2eaa:	d8 cf       	rjmp	.-80     	; 0x2e5c <vfprintf+0x690>
    2eac:	51 2c       	mov	r5, r1
    2eae:	b7 01       	movw	r22, r14
    2eb0:	80 2f       	mov	r24, r16
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2eb8:	d3 cf       	rjmp	.-90     	; 0x2e60 <vfprintf+0x694>
    2eba:	02 e8       	ldi	r16, 0x82	; 130
    2ebc:	12 e0       	ldi	r17, 0x02	; 2
    2ebe:	d5 cf       	rjmp	.-86     	; 0x2e6a <vfprintf+0x69e>
    2ec0:	91 10       	cpse	r9, r1
    2ec2:	80 52       	subi	r24, 0x20	; 32
    2ec4:	b7 01       	movw	r22, r14
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 74 18 	call	0x30e8	; 0x30e8 <fputc>
    2ecc:	0f 5f       	subi	r16, 0xFF	; 255
    2ece:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed0:	cf cf       	rjmp	.-98     	; 0x2e70 <vfprintf+0x6a4>
    2ed2:	23 e0       	ldi	r18, 0x03	; 3
    2ed4:	25 15       	cp	r18, r5
    2ed6:	10 f4       	brcc	.+4      	; 0x2edc <vfprintf+0x710>
    2ed8:	83 e0       	ldi	r24, 0x03	; 3
    2eda:	bd cf       	rjmp	.-134    	; 0x2e56 <vfprintf+0x68a>
    2edc:	51 2c       	mov	r5, r1
    2ede:	c0 cf       	rjmp	.-128    	; 0x2e60 <vfprintf+0x694>
    2ee0:	60 96       	adiw	r28, 0x10	; 16
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	ff 90       	pop	r15
    2ef0:	ef 90       	pop	r14
    2ef2:	df 90       	pop	r13
    2ef4:	cf 90       	pop	r12
    2ef6:	bf 90       	pop	r11
    2ef8:	af 90       	pop	r10
    2efa:	9f 90       	pop	r9
    2efc:	8f 90       	pop	r8
    2efe:	7f 90       	pop	r7
    2f00:	6f 90       	pop	r6
    2f02:	5f 90       	pop	r5
    2f04:	4f 90       	pop	r4
    2f06:	3f 90       	pop	r3
    2f08:	2f 90       	pop	r2
    2f0a:	08 95       	ret

00002f0c <__ftoa_engine>:
    2f0c:	28 30       	cpi	r18, 0x08	; 8
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <__ftoa_engine+0x6>
    2f10:	27 e0       	ldi	r18, 0x07	; 7
    2f12:	33 27       	eor	r19, r19
    2f14:	da 01       	movw	r26, r20
    2f16:	99 0f       	add	r25, r25
    2f18:	31 1d       	adc	r19, r1
    2f1a:	87 fd       	sbrc	r24, 7
    2f1c:	91 60       	ori	r25, 0x01	; 1
    2f1e:	00 96       	adiw	r24, 0x00	; 0
    2f20:	61 05       	cpc	r22, r1
    2f22:	71 05       	cpc	r23, r1
    2f24:	39 f4       	brne	.+14     	; 0x2f34 <__ftoa_engine+0x28>
    2f26:	32 60       	ori	r19, 0x02	; 2
    2f28:	2e 5f       	subi	r18, 0xFE	; 254
    2f2a:	3d 93       	st	X+, r19
    2f2c:	30 e3       	ldi	r19, 0x30	; 48
    2f2e:	2a 95       	dec	r18
    2f30:	e1 f7       	brne	.-8      	; 0x2f2a <__ftoa_engine+0x1e>
    2f32:	08 95       	ret
    2f34:	9f 3f       	cpi	r25, 0xFF	; 255
    2f36:	30 f0       	brcs	.+12     	; 0x2f44 <__ftoa_engine+0x38>
    2f38:	80 38       	cpi	r24, 0x80	; 128
    2f3a:	71 05       	cpc	r23, r1
    2f3c:	61 05       	cpc	r22, r1
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <__ftoa_engine+0x36>
    2f40:	3c 5f       	subi	r19, 0xFC	; 252
    2f42:	3c 5f       	subi	r19, 0xFC	; 252
    2f44:	3d 93       	st	X+, r19
    2f46:	91 30       	cpi	r25, 0x01	; 1
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <__ftoa_engine+0x40>
    2f4a:	80 68       	ori	r24, 0x80	; 128
    2f4c:	91 1d       	adc	r25, r1
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	1f 93       	push	r17
    2f54:	0f 93       	push	r16
    2f56:	ff 92       	push	r15
    2f58:	ef 92       	push	r14
    2f5a:	19 2f       	mov	r17, r25
    2f5c:	98 7f       	andi	r25, 0xF8	; 248
    2f5e:	96 95       	lsr	r25
    2f60:	e9 2f       	mov	r30, r25
    2f62:	96 95       	lsr	r25
    2f64:	96 95       	lsr	r25
    2f66:	e9 0f       	add	r30, r25
    2f68:	ff 27       	eor	r31, r31
    2f6a:	e0 52       	subi	r30, 0x20	; 32
    2f6c:	fd 4f       	sbci	r31, 0xFD	; 253
    2f6e:	99 27       	eor	r25, r25
    2f70:	33 27       	eor	r19, r19
    2f72:	ee 24       	eor	r14, r14
    2f74:	ff 24       	eor	r15, r15
    2f76:	a7 01       	movw	r20, r14
    2f78:	e7 01       	movw	r28, r14
    2f7a:	05 90       	lpm	r0, Z+
    2f7c:	08 94       	sec
    2f7e:	07 94       	ror	r0
    2f80:	28 f4       	brcc	.+10     	; 0x2f8c <__ftoa_engine+0x80>
    2f82:	36 0f       	add	r19, r22
    2f84:	e7 1e       	adc	r14, r23
    2f86:	f8 1e       	adc	r15, r24
    2f88:	49 1f       	adc	r20, r25
    2f8a:	51 1d       	adc	r21, r1
    2f8c:	66 0f       	add	r22, r22
    2f8e:	77 1f       	adc	r23, r23
    2f90:	88 1f       	adc	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	06 94       	lsr	r0
    2f96:	a1 f7       	brne	.-24     	; 0x2f80 <__ftoa_engine+0x74>
    2f98:	05 90       	lpm	r0, Z+
    2f9a:	07 94       	ror	r0
    2f9c:	28 f4       	brcc	.+10     	; 0x2fa8 <__ftoa_engine+0x9c>
    2f9e:	e7 0e       	add	r14, r23
    2fa0:	f8 1e       	adc	r15, r24
    2fa2:	49 1f       	adc	r20, r25
    2fa4:	56 1f       	adc	r21, r22
    2fa6:	c1 1d       	adc	r28, r1
    2fa8:	77 0f       	add	r23, r23
    2faa:	88 1f       	adc	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	66 1f       	adc	r22, r22
    2fb0:	06 94       	lsr	r0
    2fb2:	a1 f7       	brne	.-24     	; 0x2f9c <__ftoa_engine+0x90>
    2fb4:	05 90       	lpm	r0, Z+
    2fb6:	07 94       	ror	r0
    2fb8:	28 f4       	brcc	.+10     	; 0x2fc4 <__ftoa_engine+0xb8>
    2fba:	f8 0e       	add	r15, r24
    2fbc:	49 1f       	adc	r20, r25
    2fbe:	56 1f       	adc	r21, r22
    2fc0:	c7 1f       	adc	r28, r23
    2fc2:	d1 1d       	adc	r29, r1
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	66 1f       	adc	r22, r22
    2fca:	77 1f       	adc	r23, r23
    2fcc:	06 94       	lsr	r0
    2fce:	a1 f7       	brne	.-24     	; 0x2fb8 <__ftoa_engine+0xac>
    2fd0:	05 90       	lpm	r0, Z+
    2fd2:	07 94       	ror	r0
    2fd4:	20 f4       	brcc	.+8      	; 0x2fde <__ftoa_engine+0xd2>
    2fd6:	49 0f       	add	r20, r25
    2fd8:	56 1f       	adc	r21, r22
    2fda:	c7 1f       	adc	r28, r23
    2fdc:	d8 1f       	adc	r29, r24
    2fde:	99 0f       	add	r25, r25
    2fe0:	66 1f       	adc	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	88 1f       	adc	r24, r24
    2fe6:	06 94       	lsr	r0
    2fe8:	a9 f7       	brne	.-22     	; 0x2fd4 <__ftoa_engine+0xc8>
    2fea:	84 91       	lpm	r24, Z
    2fec:	10 95       	com	r17
    2fee:	17 70       	andi	r17, 0x07	; 7
    2ff0:	41 f0       	breq	.+16     	; 0x3002 <__ftoa_engine+0xf6>
    2ff2:	d6 95       	lsr	r29
    2ff4:	c7 95       	ror	r28
    2ff6:	57 95       	ror	r21
    2ff8:	47 95       	ror	r20
    2ffa:	f7 94       	ror	r15
    2ffc:	e7 94       	ror	r14
    2ffe:	1a 95       	dec	r17
    3000:	c1 f7       	brne	.-16     	; 0x2ff2 <__ftoa_engine+0xe6>
    3002:	e6 e8       	ldi	r30, 0x86	; 134
    3004:	f2 e0       	ldi	r31, 0x02	; 2
    3006:	68 94       	set
    3008:	15 90       	lpm	r1, Z+
    300a:	15 91       	lpm	r17, Z+
    300c:	35 91       	lpm	r19, Z+
    300e:	65 91       	lpm	r22, Z+
    3010:	95 91       	lpm	r25, Z+
    3012:	05 90       	lpm	r0, Z+
    3014:	7f e2       	ldi	r23, 0x2F	; 47
    3016:	73 95       	inc	r23
    3018:	e1 18       	sub	r14, r1
    301a:	f1 0a       	sbc	r15, r17
    301c:	43 0b       	sbc	r20, r19
    301e:	56 0b       	sbc	r21, r22
    3020:	c9 0b       	sbc	r28, r25
    3022:	d0 09       	sbc	r29, r0
    3024:	c0 f7       	brcc	.-16     	; 0x3016 <__ftoa_engine+0x10a>
    3026:	e1 0c       	add	r14, r1
    3028:	f1 1e       	adc	r15, r17
    302a:	43 1f       	adc	r20, r19
    302c:	56 1f       	adc	r21, r22
    302e:	c9 1f       	adc	r28, r25
    3030:	d0 1d       	adc	r29, r0
    3032:	7e f4       	brtc	.+30     	; 0x3052 <__ftoa_engine+0x146>
    3034:	70 33       	cpi	r23, 0x30	; 48
    3036:	11 f4       	brne	.+4      	; 0x303c <__ftoa_engine+0x130>
    3038:	8a 95       	dec	r24
    303a:	e6 cf       	rjmp	.-52     	; 0x3008 <__ftoa_engine+0xfc>
    303c:	e8 94       	clt
    303e:	01 50       	subi	r16, 0x01	; 1
    3040:	30 f0       	brcs	.+12     	; 0x304e <__ftoa_engine+0x142>
    3042:	08 0f       	add	r16, r24
    3044:	0a f4       	brpl	.+2      	; 0x3048 <__ftoa_engine+0x13c>
    3046:	00 27       	eor	r16, r16
    3048:	02 17       	cp	r16, r18
    304a:	08 f4       	brcc	.+2      	; 0x304e <__ftoa_engine+0x142>
    304c:	20 2f       	mov	r18, r16
    304e:	23 95       	inc	r18
    3050:	02 2f       	mov	r16, r18
    3052:	7a 33       	cpi	r23, 0x3A	; 58
    3054:	28 f0       	brcs	.+10     	; 0x3060 <__ftoa_engine+0x154>
    3056:	79 e3       	ldi	r23, 0x39	; 57
    3058:	7d 93       	st	X+, r23
    305a:	2a 95       	dec	r18
    305c:	e9 f7       	brne	.-6      	; 0x3058 <__ftoa_engine+0x14c>
    305e:	10 c0       	rjmp	.+32     	; 0x3080 <__ftoa_engine+0x174>
    3060:	7d 93       	st	X+, r23
    3062:	2a 95       	dec	r18
    3064:	89 f6       	brne	.-94     	; 0x3008 <__ftoa_engine+0xfc>
    3066:	06 94       	lsr	r0
    3068:	97 95       	ror	r25
    306a:	67 95       	ror	r22
    306c:	37 95       	ror	r19
    306e:	17 95       	ror	r17
    3070:	17 94       	ror	r1
    3072:	e1 18       	sub	r14, r1
    3074:	f1 0a       	sbc	r15, r17
    3076:	43 0b       	sbc	r20, r19
    3078:	56 0b       	sbc	r21, r22
    307a:	c9 0b       	sbc	r28, r25
    307c:	d0 09       	sbc	r29, r0
    307e:	98 f0       	brcs	.+38     	; 0x30a6 <__ftoa_engine+0x19a>
    3080:	23 95       	inc	r18
    3082:	7e 91       	ld	r23, -X
    3084:	73 95       	inc	r23
    3086:	7a 33       	cpi	r23, 0x3A	; 58
    3088:	08 f0       	brcs	.+2      	; 0x308c <__ftoa_engine+0x180>
    308a:	70 e3       	ldi	r23, 0x30	; 48
    308c:	7c 93       	st	X, r23
    308e:	20 13       	cpse	r18, r16
    3090:	b8 f7       	brcc	.-18     	; 0x3080 <__ftoa_engine+0x174>
    3092:	7e 91       	ld	r23, -X
    3094:	70 61       	ori	r23, 0x10	; 16
    3096:	7d 93       	st	X+, r23
    3098:	30 f0       	brcs	.+12     	; 0x30a6 <__ftoa_engine+0x19a>
    309a:	83 95       	inc	r24
    309c:	71 e3       	ldi	r23, 0x31	; 49
    309e:	7d 93       	st	X+, r23
    30a0:	70 e3       	ldi	r23, 0x30	; 48
    30a2:	2a 95       	dec	r18
    30a4:	e1 f7       	brne	.-8      	; 0x309e <__ftoa_engine+0x192>
    30a6:	11 24       	eor	r1, r1
    30a8:	ef 90       	pop	r14
    30aa:	ff 90       	pop	r15
    30ac:	0f 91       	pop	r16
    30ae:	1f 91       	pop	r17
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	99 27       	eor	r25, r25
    30b6:	87 fd       	sbrc	r24, 7
    30b8:	90 95       	com	r25
    30ba:	08 95       	ret

000030bc <strnlen_P>:
    30bc:	fc 01       	movw	r30, r24
    30be:	05 90       	lpm	r0, Z+
    30c0:	61 50       	subi	r22, 0x01	; 1
    30c2:	70 40       	sbci	r23, 0x00	; 0
    30c4:	01 10       	cpse	r0, r1
    30c6:	d8 f7       	brcc	.-10     	; 0x30be <strnlen_P+0x2>
    30c8:	80 95       	com	r24
    30ca:	90 95       	com	r25
    30cc:	8e 0f       	add	r24, r30
    30ce:	9f 1f       	adc	r25, r31
    30d0:	08 95       	ret

000030d2 <strnlen>:
    30d2:	fc 01       	movw	r30, r24
    30d4:	61 50       	subi	r22, 0x01	; 1
    30d6:	70 40       	sbci	r23, 0x00	; 0
    30d8:	01 90       	ld	r0, Z+
    30da:	01 10       	cpse	r0, r1
    30dc:	d8 f7       	brcc	.-10     	; 0x30d4 <strnlen+0x2>
    30de:	80 95       	com	r24
    30e0:	90 95       	com	r25
    30e2:	8e 0f       	add	r24, r30
    30e4:	9f 1f       	adc	r25, r31
    30e6:	08 95       	ret

000030e8 <fputc>:
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	fb 01       	movw	r30, r22
    30f2:	23 81       	ldd	r18, Z+3	; 0x03
    30f4:	21 fd       	sbrc	r18, 1
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <fputc+0x16>
    30f8:	8f ef       	ldi	r24, 0xFF	; 255
    30fa:	9f ef       	ldi	r25, 0xFF	; 255
    30fc:	2c c0       	rjmp	.+88     	; 0x3156 <fputc+0x6e>
    30fe:	22 ff       	sbrs	r18, 2
    3100:	16 c0       	rjmp	.+44     	; 0x312e <fputc+0x46>
    3102:	46 81       	ldd	r20, Z+6	; 0x06
    3104:	57 81       	ldd	r21, Z+7	; 0x07
    3106:	24 81       	ldd	r18, Z+4	; 0x04
    3108:	35 81       	ldd	r19, Z+5	; 0x05
    310a:	42 17       	cp	r20, r18
    310c:	53 07       	cpc	r21, r19
    310e:	44 f4       	brge	.+16     	; 0x3120 <fputc+0x38>
    3110:	a0 81       	ld	r26, Z
    3112:	b1 81       	ldd	r27, Z+1	; 0x01
    3114:	9d 01       	movw	r18, r26
    3116:	2f 5f       	subi	r18, 0xFF	; 255
    3118:	3f 4f       	sbci	r19, 0xFF	; 255
    311a:	20 83       	st	Z, r18
    311c:	31 83       	std	Z+1, r19	; 0x01
    311e:	8c 93       	st	X, r24
    3120:	26 81       	ldd	r18, Z+6	; 0x06
    3122:	37 81       	ldd	r19, Z+7	; 0x07
    3124:	2f 5f       	subi	r18, 0xFF	; 255
    3126:	3f 4f       	sbci	r19, 0xFF	; 255
    3128:	26 83       	std	Z+6, r18	; 0x06
    312a:	37 83       	std	Z+7, r19	; 0x07
    312c:	14 c0       	rjmp	.+40     	; 0x3156 <fputc+0x6e>
    312e:	8b 01       	movw	r16, r22
    3130:	ec 01       	movw	r28, r24
    3132:	fb 01       	movw	r30, r22
    3134:	00 84       	ldd	r0, Z+8	; 0x08
    3136:	f1 85       	ldd	r31, Z+9	; 0x09
    3138:	e0 2d       	mov	r30, r0
    313a:	19 95       	eicall
    313c:	89 2b       	or	r24, r25
    313e:	e1 f6       	brne	.-72     	; 0x30f8 <fputc+0x10>
    3140:	d8 01       	movw	r26, r16
    3142:	16 96       	adiw	r26, 0x06	; 6
    3144:	8d 91       	ld	r24, X+
    3146:	9c 91       	ld	r25, X
    3148:	17 97       	sbiw	r26, 0x07	; 7
    314a:	01 96       	adiw	r24, 0x01	; 1
    314c:	16 96       	adiw	r26, 0x06	; 6
    314e:	8d 93       	st	X+, r24
    3150:	9c 93       	st	X, r25
    3152:	17 97       	sbiw	r26, 0x07	; 7
    3154:	ce 01       	movw	r24, r28
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	08 95       	ret

00003160 <snprintf>:
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	2e 97       	sbiw	r28, 0x0e	; 14
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0e 89       	ldd	r16, Y+22	; 0x16
    3174:	1f 89       	ldd	r17, Y+23	; 0x17
    3176:	88 8d       	ldd	r24, Y+24	; 0x18
    3178:	99 8d       	ldd	r25, Y+25	; 0x19
    317a:	26 e0       	ldi	r18, 0x06	; 6
    317c:	2c 83       	std	Y+4, r18	; 0x04
    317e:	09 83       	std	Y+1, r16	; 0x01
    3180:	1a 83       	std	Y+2, r17	; 0x02
    3182:	97 ff       	sbrs	r25, 7
    3184:	02 c0       	rjmp	.+4      	; 0x318a <snprintf+0x2a>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e8       	ldi	r25, 0x80	; 128
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	8d 83       	std	Y+5, r24	; 0x05
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	ae 01       	movw	r20, r28
    3192:	44 5e       	subi	r20, 0xE4	; 228
    3194:	5f 4f       	sbci	r21, 0xFF	; 255
    3196:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3198:	7b 8d       	ldd	r23, Y+27	; 0x1b
    319a:	ce 01       	movw	r24, r28
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <vfprintf>
    31a2:	4d 81       	ldd	r20, Y+5	; 0x05
    31a4:	5e 81       	ldd	r21, Y+6	; 0x06
    31a6:	57 fd       	sbrc	r21, 7
    31a8:	0a c0       	rjmp	.+20     	; 0x31be <snprintf+0x5e>
    31aa:	2f 81       	ldd	r18, Y+7	; 0x07
    31ac:	38 85       	ldd	r19, Y+8	; 0x08
    31ae:	42 17       	cp	r20, r18
    31b0:	53 07       	cpc	r21, r19
    31b2:	0c f4       	brge	.+2      	; 0x31b6 <snprintf+0x56>
    31b4:	9a 01       	movw	r18, r20
    31b6:	f8 01       	movw	r30, r16
    31b8:	e2 0f       	add	r30, r18
    31ba:	f3 1f       	adc	r31, r19
    31bc:	10 82       	st	Z, r1
    31be:	2e 96       	adiw	r28, 0x0e	; 14
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	08 95       	ret

000031ce <__ultoa_invert>:
    31ce:	fa 01       	movw	r30, r20
    31d0:	aa 27       	eor	r26, r26
    31d2:	28 30       	cpi	r18, 0x08	; 8
    31d4:	51 f1       	breq	.+84     	; 0x322a <__ultoa_invert+0x5c>
    31d6:	20 31       	cpi	r18, 0x10	; 16
    31d8:	81 f1       	breq	.+96     	; 0x323a <__ultoa_invert+0x6c>
    31da:	e8 94       	clt
    31dc:	6f 93       	push	r22
    31de:	6e 7f       	andi	r22, 0xFE	; 254
    31e0:	6e 5f       	subi	r22, 0xFE	; 254
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	8f 4f       	sbci	r24, 0xFF	; 255
    31e6:	9f 4f       	sbci	r25, 0xFF	; 255
    31e8:	af 4f       	sbci	r26, 0xFF	; 255
    31ea:	b1 e0       	ldi	r27, 0x01	; 1
    31ec:	3e d0       	rcall	.+124    	; 0x326a <__ultoa_invert+0x9c>
    31ee:	b4 e0       	ldi	r27, 0x04	; 4
    31f0:	3c d0       	rcall	.+120    	; 0x326a <__ultoa_invert+0x9c>
    31f2:	67 0f       	add	r22, r23
    31f4:	78 1f       	adc	r23, r24
    31f6:	89 1f       	adc	r24, r25
    31f8:	9a 1f       	adc	r25, r26
    31fa:	a1 1d       	adc	r26, r1
    31fc:	68 0f       	add	r22, r24
    31fe:	79 1f       	adc	r23, r25
    3200:	8a 1f       	adc	r24, r26
    3202:	91 1d       	adc	r25, r1
    3204:	a1 1d       	adc	r26, r1
    3206:	6a 0f       	add	r22, r26
    3208:	71 1d       	adc	r23, r1
    320a:	81 1d       	adc	r24, r1
    320c:	91 1d       	adc	r25, r1
    320e:	a1 1d       	adc	r26, r1
    3210:	20 d0       	rcall	.+64     	; 0x3252 <__ultoa_invert+0x84>
    3212:	09 f4       	brne	.+2      	; 0x3216 <__ultoa_invert+0x48>
    3214:	68 94       	set
    3216:	3f 91       	pop	r19
    3218:	2a e0       	ldi	r18, 0x0A	; 10
    321a:	26 9f       	mul	r18, r22
    321c:	11 24       	eor	r1, r1
    321e:	30 19       	sub	r19, r0
    3220:	30 5d       	subi	r19, 0xD0	; 208
    3222:	31 93       	st	Z+, r19
    3224:	de f6       	brtc	.-74     	; 0x31dc <__ultoa_invert+0xe>
    3226:	cf 01       	movw	r24, r30
    3228:	08 95       	ret
    322a:	46 2f       	mov	r20, r22
    322c:	47 70       	andi	r20, 0x07	; 7
    322e:	40 5d       	subi	r20, 0xD0	; 208
    3230:	41 93       	st	Z+, r20
    3232:	b3 e0       	ldi	r27, 0x03	; 3
    3234:	0f d0       	rcall	.+30     	; 0x3254 <__ultoa_invert+0x86>
    3236:	c9 f7       	brne	.-14     	; 0x322a <__ultoa_invert+0x5c>
    3238:	f6 cf       	rjmp	.-20     	; 0x3226 <__ultoa_invert+0x58>
    323a:	46 2f       	mov	r20, r22
    323c:	4f 70       	andi	r20, 0x0F	; 15
    323e:	40 5d       	subi	r20, 0xD0	; 208
    3240:	4a 33       	cpi	r20, 0x3A	; 58
    3242:	18 f0       	brcs	.+6      	; 0x324a <__ultoa_invert+0x7c>
    3244:	49 5d       	subi	r20, 0xD9	; 217
    3246:	31 fd       	sbrc	r19, 1
    3248:	40 52       	subi	r20, 0x20	; 32
    324a:	41 93       	st	Z+, r20
    324c:	02 d0       	rcall	.+4      	; 0x3252 <__ultoa_invert+0x84>
    324e:	a9 f7       	brne	.-22     	; 0x323a <__ultoa_invert+0x6c>
    3250:	ea cf       	rjmp	.-44     	; 0x3226 <__ultoa_invert+0x58>
    3252:	b4 e0       	ldi	r27, 0x04	; 4
    3254:	a6 95       	lsr	r26
    3256:	97 95       	ror	r25
    3258:	87 95       	ror	r24
    325a:	77 95       	ror	r23
    325c:	67 95       	ror	r22
    325e:	ba 95       	dec	r27
    3260:	c9 f7       	brne	.-14     	; 0x3254 <__ultoa_invert+0x86>
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	61 05       	cpc	r22, r1
    3266:	71 05       	cpc	r23, r1
    3268:	08 95       	ret
    326a:	9b 01       	movw	r18, r22
    326c:	ac 01       	movw	r20, r24
    326e:	0a 2e       	mov	r0, r26
    3270:	06 94       	lsr	r0
    3272:	57 95       	ror	r21
    3274:	47 95       	ror	r20
    3276:	37 95       	ror	r19
    3278:	27 95       	ror	r18
    327a:	ba 95       	dec	r27
    327c:	c9 f7       	brne	.-14     	; 0x3270 <__ultoa_invert+0xa2>
    327e:	62 0f       	add	r22, r18
    3280:	73 1f       	adc	r23, r19
    3282:	84 1f       	adc	r24, r20
    3284:	95 1f       	adc	r25, r21
    3286:	a0 1d       	adc	r26, r0
    3288:	08 95       	ret

0000328a <_exit>:
    328a:	f8 94       	cli

0000328c <__stop_program>:
    328c:	ff cf       	rjmp	.-2      	; 0x328c <__stop_program>
