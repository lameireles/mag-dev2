
evog_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000300  00802000  000031c2  00003256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  00802300  00802300  00003556  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003556  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b0  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f3ad  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040f1  00000000  00000000  00013051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d04  00000000  00000000  00017142  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010a8  00000000  00000000  00019e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000628e  00000000  00000000  0001aef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005579  00000000  00000000  0002117e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  000266f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c0 01 	jmp	0x380	; 0x380 <__ctors_end>
       4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      30:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      38:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_14>
      3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      40:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      54:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      68:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      6c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      70:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <__vector_28>
      74:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_29>
      78:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_30>
      7c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      84:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      8c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      90:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      94:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      98:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      9c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      a8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      ac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      b0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      b4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      b8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      bc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      c0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      c4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      cc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      d0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      d4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      d8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      dc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      e0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      e4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      e8:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_58>
      ec:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      f0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      f4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      f8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      fc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     100:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     104:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     108:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     10c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     110:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     114:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     118:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     11c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_71>
     120:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_72>
     124:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_73>
     128:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_74>
     12c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     130:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     134:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     138:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     13c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     140:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     144:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     148:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     14c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     150:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     154:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     158:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     15c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     160:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     164:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     168:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     16c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     170:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     174:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     178:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     17c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     180:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     184:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     188:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     18c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     190:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     194:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     198:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     19c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1a0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1a4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1a8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1ac:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1b0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1b4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1b8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1bc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1c0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1c4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1cc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1d0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1d4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1d8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1dc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1e0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1e4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1e8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1ec:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1f0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1f4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1f8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <_ZN9Ms5525dso7readADCEv+0x4a>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	6e 61       	ori	r22, 0x1E	; 30
     280:	6e 00       	.word	0x006e	; ????

00000282 <__c.2332>:
     282:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     292:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2a2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2b2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2c2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2d2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2e2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2f2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     302:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     312:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     322:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     332:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     342:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     352:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     362:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     372:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000380 <__ctors_end>:
     380:	11 24       	eor	r1, r1
     382:	1f be       	out	0x3f, r1	; 63
     384:	cf ef       	ldi	r28, 0xFF	; 255
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df e3       	ldi	r29, 0x3F	; 63
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	0c bf       	out	0x3c, r16	; 60
     390:	18 be       	out	0x38, r1	; 56
     392:	19 be       	out	0x39, r1	; 57
     394:	1a be       	out	0x3a, r1	; 58
     396:	1b be       	out	0x3b, r1	; 59

00000398 <__do_copy_data>:
     398:	13 e2       	ldi	r17, 0x23	; 35
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e2       	ldi	r27, 0x20	; 32
     39e:	e2 ec       	ldi	r30, 0xC2	; 194
     3a0:	f1 e3       	ldi	r31, 0x31	; 49
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0b bf       	out	0x3b, r16	; 59
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <__do_copy_data+0x14>
     3a8:	07 90       	elpm	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	a0 30       	cpi	r26, 0x00	; 0
     3ae:	b1 07       	cpc	r27, r17
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <__do_copy_data+0x10>
     3b2:	1b be       	out	0x3b, r1	; 59

000003b4 <__do_clear_bss>:
     3b4:	23 e2       	ldi	r18, 0x23	; 35
     3b6:	a0 e0       	ldi	r26, 0x00	; 0
     3b8:	b3 e2       	ldi	r27, 0x23	; 35
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	aa 35       	cpi	r26, 0x5A	; 90
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <main>
     3c8:	0c 94 df 18 	jmp	0x31be	; 0x31be <_exit>

000003cc <__bad_interrupt>:
     3cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d0 <__vector_71>:
	}
}

void Adca::flush()
{
	ADCA_CTRLA |= ADC_FLUSH_bm;
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	08 b6       	in	r0, 0x38	; 56
     3dc:	0f 92       	push	r0
     3de:	18 be       	out	0x38, r1	; 56
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 93 0b 23 	sts	0x230B, r24	; 0x80230b <_ZN4Adca7ch0flagE>
     3ea:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     3ee:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     3f2:	80 93 06 23 	sts	0x2306, r24	; 0x802306 <_ZN4Adca3ch0E>
     3f6:	90 93 07 23 	sts	0x2307, r25	; 0x802307 <_ZN4Adca3ch0E+0x1>
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	0f 90       	pop	r0
     400:	08 be       	out	0x38, r0	; 56
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_72>:
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	08 b6       	in	r0, 0x38	; 56
     418:	0f 92       	push	r0
     41a:	18 be       	out	0x38, r1	; 56
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	80 93 0a 23 	sts	0x230A, r24	; 0x80230a <_ZN4Adca7ch1flagE>
     426:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     42a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     42e:	80 93 04 23 	sts	0x2304, r24	; 0x802304 <_ZN4Adca3ch1E>
     432:	90 93 05 23 	sts	0x2305, r25	; 0x802305 <_ZN4Adca3ch1E+0x1>
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	0f 90       	pop	r0
     43c:	08 be       	out	0x38, r0	; 56
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_73>:
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	08 b6       	in	r0, 0x38	; 56
     454:	0f 92       	push	r0
     456:	18 be       	out	0x38, r1	; 56
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 09 23 	sts	0x2309, r24	; 0x802309 <_ZN4Adca7ch2flagE>
     462:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     466:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     46a:	80 93 02 23 	sts	0x2302, r24	; 0x802302 <_ZN4Adca3ch2E>
     46e:	90 93 03 23 	sts	0x2303, r25	; 0x802303 <_ZN4Adca3ch2E+0x1>
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	0f 90       	pop	r0
     478:	08 be       	out	0x38, r0	; 56
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_74>:
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1
     48e:	08 b6       	in	r0, 0x38	; 56
     490:	0f 92       	push	r0
     492:	18 be       	out	0x38, r1	; 56
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 08 23 	sts	0x2308, r24	; 0x802308 <_ZN4Adca7ch3flagE>
     49e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     4a2:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     4a6:	80 93 00 23 	sts	0x2300, r24	; 0x802300 <__data_end>
     4aa:	90 93 01 23 	sts	0x2301, r25	; 0x802301 <__data_end+0x1>
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	0f 90       	pop	r0
     4b4:	08 be       	out	0x38, r0	; 56
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <_ZN4Adca21startSingleConversionENS_9channel_eE>:
     4c0:	61 30       	cpi	r22, 0x01	; 1
     4c2:	61 f0       	breq	.+24     	; 0x4dc <_ZN4Adca21startSingleConversionENS_9channel_eE+0x1c>
     4c4:	28 f0       	brcs	.+10     	; 0x4d0 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x10>
     4c6:	62 30       	cpi	r22, 0x02	; 2
     4c8:	79 f0       	breq	.+30     	; 0x4e8 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x28>
     4ca:	63 30       	cpi	r22, 0x03	; 3
     4cc:	99 f0       	breq	.+38     	; 0x4f4 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x34>
     4ce:	08 95       	ret
     4d0:	10 92 0b 23 	sts	0x230B, r1	; 0x80230b <_ZN4Adca7ch0flagE>
     4d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4d8:	84 60       	ori	r24, 0x04	; 4
     4da:	11 c0       	rjmp	.+34     	; 0x4fe <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     4dc:	10 92 0a 23 	sts	0x230A, r1	; 0x80230a <_ZN4Adca7ch1flagE>
     4e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4e4:	88 60       	ori	r24, 0x08	; 8
     4e6:	0b c0       	rjmp	.+22     	; 0x4fe <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     4e8:	10 92 09 23 	sts	0x2309, r1	; 0x802309 <_ZN4Adca7ch2flagE>
     4ec:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4f0:	80 61       	ori	r24, 0x10	; 16
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     4f4:	10 92 08 23 	sts	0x2308, r1	; 0x802308 <_ZN4Adca7ch3flagE>
     4f8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     4fc:	80 62       	ori	r24, 0x20	; 32
     4fe:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     502:	08 95       	ret

00000504 <_ZN4Adca14waitConversionENS_9channel_eE>:
}

void Adca::waitConversion(channel_e channel)
{
	switch (channel) {
     504:	61 30       	cpi	r22, 0x01	; 1
     506:	59 f0       	breq	.+22     	; 0x51e <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     508:	28 f0       	brcs	.+10     	; 0x514 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     50a:	62 30       	cpi	r22, 0x02	; 2
     50c:	69 f0       	breq	.+26     	; 0x528 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     50e:	63 30       	cpi	r22, 0x03	; 3
     510:	81 f0       	breq	.+32     	; 0x532 <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     512:	08 95       	ret
		case CH_0: while (!ch0flag) ; break;
     514:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <_ZN4Adca7ch0flagE>
     518:	88 23       	and	r24, r24
     51a:	e1 f3       	breq	.-8      	; 0x514 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     51c:	08 95       	ret
		case CH_1: while (!ch1flag) ; break;
     51e:	80 91 0a 23 	lds	r24, 0x230A	; 0x80230a <_ZN4Adca7ch1flagE>
     522:	88 23       	and	r24, r24
     524:	e1 f3       	breq	.-8      	; 0x51e <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     526:	08 95       	ret
		case CH_2: while (!ch2flag) ; break;
     528:	80 91 09 23 	lds	r24, 0x2309	; 0x802309 <_ZN4Adca7ch2flagE>
     52c:	88 23       	and	r24, r24
     52e:	e1 f3       	breq	.-8      	; 0x528 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     530:	08 95       	ret
		case CH_3: while (!ch3flag) ; break;
     532:	80 91 08 23 	lds	r24, 0x2308	; 0x802308 <_ZN4Adca7ch3flagE>
     536:	88 23       	and	r24, r24
     538:	e1 f3       	breq	.-8      	; 0x532 <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     53a:	08 95       	ret

0000053c <_ZN4Adca11readChannelENS_9channel_eE>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

uint16_t Adca::readChannel(channel_e channel)
{
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	8c 01       	movw	r16, r24
     544:	c6 2f       	mov	r28, r22
	startSingleConversion(channel);
     546:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN4Adca21startSingleConversionENS_9channel_eE>
	waitConversion(channel);
     54a:	6c 2f       	mov	r22, r28
     54c:	c8 01       	movw	r24, r16
     54e:	0e 94 82 02 	call	0x504	; 0x504 <_ZN4Adca14waitConversionENS_9channel_eE>
	switch (channel) {
     552:	c1 30       	cpi	r28, 0x01	; 1
     554:	79 f0       	breq	.+30     	; 0x574 <_ZN4Adca11readChannelENS_9channel_eE+0x38>
     556:	48 f0       	brcs	.+18     	; 0x56a <_ZN4Adca11readChannelENS_9channel_eE+0x2e>
     558:	c2 30       	cpi	r28, 0x02	; 2
     55a:	89 f0       	breq	.+34     	; 0x57e <_ZN4Adca11readChannelENS_9channel_eE+0x42>
     55c:	c3 30       	cpi	r28, 0x03	; 3
     55e:	a1 f4       	brne	.+40     	; 0x588 <_ZN4Adca11readChannelENS_9channel_eE+0x4c>
		case CH_0: return ADCA_CH0RES;
		case CH_1: return ADCA_CH1RES;
		case CH_2: return ADCA_CH2RES;
		case CH_3: return ADCA_CH3RES;
     560:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     564:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     568:	11 c0       	rjmp	.+34     	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
uint16_t Adca::readChannel(channel_e channel)
{
	startSingleConversion(channel);
	waitConversion(channel);
	switch (channel) {
		case CH_0: return ADCA_CH0RES;
     56a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     56e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     572:	0c c0       	rjmp	.+24     	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_1: return ADCA_CH1RES;
     574:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     578:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     57c:	07 c0       	rjmp	.+14     	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_2: return ADCA_CH2RES;
     57e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     582:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     586:	02 c0       	rjmp	.+4      	; 0x58c <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_3: return ADCA_CH3RES;
	}
	return 0;
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
}
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <_ZN4Adca9enableADCEv>:
//=== ENABLERS ===//
//================//

void Adca::enableADC()
{
	adc = true;
     594:	21 e0       	ldi	r18, 0x01	; 1
     596:	fc 01       	movw	r30, r24
     598:	21 83       	std	Z+1, r18	; 0x01
	ADCA_CTRLA |= ADC_ENABLE_bm;
     59a:	e0 e0       	ldi	r30, 0x00	; 0
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	80 81       	ld	r24, Z
     5a0:	81 60       	ori	r24, 0x01	; 1
     5a2:	80 83       	st	Z, r24
     5a4:	08 95       	ret

000005a6 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

Adca::Adca(prescaler_e prescaler, Utils::interruptLevel_e interruptLevel)
     5a6:	fc 01       	movw	r30, r24
	ADCA_EVCTRL = (eventMode << ADC_EVACT_gp)|(ADCA_EVCTRL & ~ADC_EVACT_gm);
}

void Adca::setPrescaler(prescaler_e prescaler)
{
	this->prescaler = prescaler;
     5a8:	65 87       	std	Z+13, r22	; 0x0d
	ADCA_PRESCALER = prescaler;
     5aa:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
	ADCA_CTRLB = (currentLimitation << ADC_CURRLIMIT_gp)|(ADCA_CTRLB & ~ADC_CURRLIMIT_gm);
}

void Adca::setConversionMode(conversionMode_e conversionMode)
{
	this->conversionMode = conversionMode;
     5ae:	14 82       	std	Z+4, r1	; 0x04
	switch(conversionMode) {
		case CM_UNSIGNED: ADCA_CTRLB &= ~ADC_CONMODE_bm; break;
     5b0:	a1 e0       	ldi	r26, 0x01	; 1
     5b2:	b2 e0       	ldi	r27, 0x02	; 2
     5b4:	8c 91       	ld	r24, X
     5b6:	8f 7e       	andi	r24, 0xEF	; 239
     5b8:	8c 93       	st	X, r24

void Adca::setChannelInputMode(channel_e channel, cim_e cim)
{
	switch (channel) {
		case CH_0:
			cim0 = cim;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	82 8b       	std	Z+18, r24	; 0x12
			ADCA_CH0_CTRL = (cim << ADC_CH_INPUTMODE_gp)|(ADCA_CH0_CTRL & ~ADC_CH_INPUTMODE_gm);
     5be:	a0 e2       	ldi	r26, 0x20	; 32
     5c0:	b2 e0       	ldi	r27, 0x02	; 2
     5c2:	8c 91       	ld	r24, X
     5c4:	8c 7f       	andi	r24, 0xFC	; 252
     5c6:	81 60       	ori	r24, 0x01	; 1
     5c8:	8c 93       	st	X, r24

void Adca::setMuxSelectionPositiveInput(channel_e channel, mspi_e mspi)
{
	switch (channel) {
		case CH_0:
			mspi0 = mspi;
     5ca:	16 8a       	std	Z+22, r1	; 0x16
			ADCA_CH0_MUXCTRL = ((mspi&0x0f) << ADC_CH_MUXPOS_gp)|(ADCA_CH0_MUXCTRL & ~ADC_CH_MUXPOS_gm);
     5cc:	a1 e2       	ldi	r26, 0x21	; 33
     5ce:	b2 e0       	ldi	r27, 0x02	; 2
     5d0:	8c 91       	ld	r24, X
     5d2:	87 78       	andi	r24, 0x87	; 135
     5d4:	8c 93       	st	X, r24

void Adca::enableInterrupt(channel_e channel, Utils::interruptLevel_e il)
{
	switch (channel) {
		case CH_0:
			il0 = il;
     5d6:	42 a3       	std	Z+34, r20	; 0x22
			ADCA_CH0_INTCTRL = (il << ADC_CH_INTLVL_gp)|(ADCA_CH0_INTCTRL & ~ADC_CH_INTLVL_gm);
     5d8:	a2 e2       	ldi	r26, 0x22	; 34
     5da:	b2 e0       	ldi	r27, 0x02	; 2
     5dc:	8c 91       	ld	r24, X
     5de:	8c 7f       	andi	r24, 0xFC	; 252
     5e0:	48 2b       	or	r20, r24
     5e2:	4c 93       	st	X, r20
	setPrescaler(prescaler);
	setConversionMode(CM_UNSIGNED);
	setChannelInputMode(CH_0, CIM_SINGLEENDED);
	setMuxSelectionPositiveInput(CH_0, MSPI_PIN0);
	enableInterrupt(CH_0, interruptLevel);
	enableADC();
     5e4:	cf 01       	movw	r24, r30
     5e6:	0c 94 ca 02 	jmp	0x594	; 0x594 <_ZN4Adca9enableADCEv>

000005ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>:
//=========================//
//=== PRIVATE FUNCTIONS ===//
//=========================//

uint16_t Ms5525dso::readCoef(coef_e c)
{
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	a8 97       	sbiw	r28, 0x28	; 40
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	de bf       	out	0x3e, r29	; 62
     602:	8c 01       	movw	r16, r24
     604:	f6 2e       	mov	r15, r22
	const char err[] = "Error: could not read flow sensor PROM.";
     606:	88 e2       	ldi	r24, 0x28	; 40
     608:	e4 e2       	ldi	r30, 0x24	; 36
     60a:	f0 e2       	ldi	r31, 0x20	; 32
     60c:	de 01       	movw	r26, r28
     60e:	11 96       	adiw	r26, 0x01	; 1
     610:	01 90       	ld	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x26>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	f8 01       	movw	r30, r16
     61c:	63 81       	ldd	r22, Z+3	; 0x03
     61e:	84 81       	ldd	r24, Z+4	; 0x04
     620:	95 81       	ldd	r25, Z+5	; 0x05
     622:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     626:	f8 01       	movw	r30, r16
     628:	84 81       	ldd	r24, Z+4	; 0x04
     62a:	95 81       	ldd	r25, Z+5	; 0x05
     62c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     630:	f8 01       	movw	r30, r16
     632:	24 81       	ldd	r18, Z+4	; 0x04
     634:	35 81       	ldd	r19, Z+5	; 0x05
     636:	81 11       	cpse	r24, r1
     638:	2e c0       	rjmp	.+92     	; 0x696 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xac>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(c);
     63a:	6f 2d       	mov	r22, r15
     63c:	c9 01       	movw	r24, r18
     63e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     642:	41 e0       	ldi	r20, 0x01	; 1
     644:	63 e0       	ldi	r22, 0x03	; 3
     646:	f8 01       	movw	r30, r16
     648:	84 81       	ldd	r24, Z+4	; 0x04
     64a:	95 81       	ldd	r25, Z+5	; 0x05
     64c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     650:	f8 01       	movw	r30, r16
     652:	84 81       	ldd	r24, Z+4	; 0x04
     654:	95 81       	ldd	r25, Z+5	; 0x05
     656:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     65a:	f8 01       	movw	r30, r16
     65c:	24 81       	ldd	r18, Z+4	; 0x04
     65e:	35 81       	ldd	r19, Z+5	; 0x05
     660:	88 23       	and	r24, r24
     662:	49 f0       	breq	.+18     	; 0x676 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x8c>
		myTwie->errorHandler(err);
     664:	be 01       	movw	r22, r28
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	c9 01       	movw	r24, r18
     66c:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN4Twie12errorHandlerEPKc>
		return 0;
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	61 c0       	rjmp	.+194    	; 0x738 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x14e>
	}
	
	myTwie->setAddress(address, Twie::DIR_READ);
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	f8 01       	movw	r30, r16
     67a:	63 81       	ldd	r22, Z+3	; 0x03
     67c:	c9 01       	movw	r24, r18
     67e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     682:	f8 01       	movw	r30, r16
     684:	84 81       	ldd	r24, Z+4	; 0x04
     686:	95 81       	ldd	r25, Z+5	; 0x05
     688:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     68c:	f8 01       	movw	r30, r16
     68e:	24 81       	ldd	r18, Z+4	; 0x04
     690:	35 81       	ldd	r19, Z+5	; 0x05
     692:	88 23       	and	r24, r24
     694:	61 f0       	breq	.+24     	; 0x6ae <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xc4>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	63 e0       	ldi	r22, 0x03	; 3
     69a:	c9 01       	movw	r24, r18
     69c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	f8 01       	movw	r30, r16
     6a8:	84 81       	ldd	r24, Z+4	; 0x04
     6aa:	95 81       	ldd	r25, Z+5	; 0x05
     6ac:	df cf       	rjmp	.-66     	; 0x66c <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x82>
		return 0;
	}
	uint16_t temp = myTwie->getData(Twie::AA_ACK) << 8;
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	c9 01       	movw	r24, r18
     6b2:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     6b6:	c8 2e       	mov	r12, r24
     6b8:	d1 2c       	mov	r13, r1
     6ba:	dc 2c       	mov	r13, r12
     6bc:	cc 24       	eor	r12, r12
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	62 e0       	ldi	r22, 0x02	; 2
     6c2:	f8 01       	movw	r30, r16
     6c4:	84 81       	ldd	r24, Z+4	; 0x04
     6c6:	95 81       	ldd	r25, Z+5	; 0x05
     6c8:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	temp |= myTwie->getData(Twie::AA_NACK);
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	f8 01       	movw	r30, r16
     6d0:	84 81       	ldd	r24, Z+4	; 0x04
     6d2:	95 81       	ldd	r25, Z+5	; 0x05
     6d4:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     6d8:	c8 2a       	or	r12, r24
	
	int i = (c-0xA0)/2;
     6da:	6f 2d       	mov	r22, r15
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	60 5a       	subi	r22, 0xA0	; 160
     6e0:	71 09       	sbc	r23, r1
     6e2:	77 ff       	sbrs	r23, 7
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x100>
     6e6:	6f 5f       	subi	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	75 95       	asr	r23
     6ec:	67 95       	ror	r22
	snprintf(Utils::txBuf,TX_LEN,"\tC%d: %u (0x%04x)\tQ%u: %d\r\n",i,temp,temp,i,Qs[i-1]);
     6ee:	f8 01       	movw	r30, r16
     6f0:	e6 0f       	add	r30, r22
     6f2:	f7 1f       	adc	r31, r23
     6f4:	81 8d       	ldd	r24, Z+25	; 0x19
     6f6:	1f 92       	push	r1
     6f8:	8f 93       	push	r24
     6fa:	7f 93       	push	r23
     6fc:	6f 93       	push	r22
     6fe:	df 92       	push	r13
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	cf 92       	push	r12
     706:	7f 93       	push	r23
     708:	6f 93       	push	r22
     70a:	88 e0       	ldi	r24, 0x08	; 8
     70c:	90 e2       	ldi	r25, 0x20	; 32
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	1f 92       	push	r1
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	8f 93       	push	r24
     718:	8a e1       	ldi	r24, 0x1A	; 26
     71a:	93 e2       	ldi	r25, 0x23	; 35
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	0e 94 4a 18 	call	0x3094	; 0x3094 <snprintf>
	myUsart->sendString(Utils::txBuf);
     724:	6a e1       	ldi	r22, 0x1A	; 26
     726:	73 e2       	ldi	r23, 0x23	; 35
     728:	f8 01       	movw	r30, r16
     72a:	86 81       	ldd	r24, Z+6	; 0x06
     72c:	97 81       	ldd	r25, Z+7	; 0x07
     72e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	
	return temp;
     732:	cd bf       	out	0x3d, r28	; 61
     734:	de bf       	out	0x3e, r29	; 62
     736:	c6 01       	movw	r24, r12
}
     738:	a8 96       	adiw	r28, 0x28	; 40
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret

0000074e <_ZN9Ms5525dso5resetEv>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

void Ms5525dso::reset()
{
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	a4 97       	sbiw	r28, 0x24	; 36
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	de bf       	out	0x3e, r29	; 62
     760:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not reset flow sensor.";
     762:	84 e2       	ldi	r24, 0x24	; 36
     764:	e7 e6       	ldi	r30, 0x67	; 103
     766:	f0 e2       	ldi	r31, 0x20	; 32
     768:	de 01       	movw	r26, r28
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	01 90       	ld	r0, Z+
     76e:	0d 92       	st	X+, r0
     770:	8a 95       	dec	r24
     772:	e1 f7       	brne	.-8      	; 0x76c <_ZN9Ms5525dso5resetEv+0x1e>
	
	myUsart->sendString("\tResetting Flow Sensor... ");
     774:	6c e4       	ldi	r22, 0x4C	; 76
     776:	70 e2       	ldi	r23, 0x20	; 32
     778:	f8 01       	movw	r30, r16
     77a:	86 81       	ldd	r24, Z+6	; 0x06
     77c:	97 81       	ldd	r25, Z+7	; 0x07
     77e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	f8 01       	movw	r30, r16
     786:	63 81       	ldd	r22, Z+3	; 0x03
     788:	84 81       	ldd	r24, Z+4	; 0x04
     78a:	95 81       	ldd	r25, Z+5	; 0x05
     78c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     790:	f8 01       	movw	r30, r16
     792:	84 81       	ldd	r24, Z+4	; 0x04
     794:	95 81       	ldd	r25, Z+5	; 0x05
     796:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     79a:	f8 01       	movw	r30, r16
     79c:	24 81       	ldd	r18, Z+4	; 0x04
     79e:	35 81       	ldd	r19, Z+5	; 0x05
     7a0:	88 23       	and	r24, r24
     7a2:	31 f0       	breq	.+12     	; 0x7b0 <_ZN9Ms5525dso5resetEv+0x62>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	63 e0       	ldi	r22, 0x03	; 3
     7a8:	c9 01       	movw	r24, r18
     7aa:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <_ZN9Ms5525dso5resetEv+0x86>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x1E);
     7b0:	6e e1       	ldi	r22, 0x1E	; 30
     7b2:	c9 01       	movw	r24, r18
     7b4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	f8 01       	movw	r30, r16
     7be:	84 81       	ldd	r24, Z+4	; 0x04
     7c0:	95 81       	ldd	r25, Z+5	; 0x05
     7c2:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     7c6:	f8 01       	movw	r30, r16
     7c8:	84 81       	ldd	r24, Z+4	; 0x04
     7ca:	95 81       	ldd	r25, Z+5	; 0x05
     7cc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     7d0:	88 23       	and	r24, r24
     7d2:	49 f0       	breq	.+18     	; 0x7e6 <_ZN9Ms5525dso5resetEv+0x98>
		myTwie->errorHandler(err);
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	f8 01       	movw	r30, r16
     7dc:	84 81       	ldd	r24, Z+4	; 0x04
     7de:	95 81       	ldd	r25, Z+5	; 0x05
     7e0:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN4Twie12errorHandlerEPKc>
		return;
     7e4:	0b c0       	rjmp	.+22     	; 0x7fc <_ZN9Ms5525dso5resetEv+0xae>
	}
	Utils::delay_ms(3);
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_ZN5Utils8delay_msEj>
	
	myUsart->sendString("DONE!\r\n");
     7ee:	6b ea       	ldi	r22, 0xAB	; 171
     7f0:	70 e2       	ldi	r23, 0x20	; 32
     7f2:	f8 01       	movw	r30, r16
     7f4:	86 81       	ldd	r24, Z+6	; 0x06
     7f6:	97 81       	ldd	r25, Z+7	; 0x07
     7f8:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
}
     7fc:	a4 96       	adiw	r28, 0x24	; 36
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <_ZN9Ms5525dso8readPROMEv>:

void Ms5525dso::readPROM()
{
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	ec 01       	movw	r28, r24
	myUsart->sendString("\tReading Flow Sensor PROM...\r\n");
     812:	6b e8       	ldi	r22, 0x8B	; 139
     814:	70 e2       	ldi	r23, 0x20	; 32
     816:	8e 81       	ldd	r24, Y+6	; 0x06
     818:	9f 81       	ldd	r25, Y+7	; 0x07
     81a:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	
	C1 = readCoef(C1_addr);
     81e:	62 ea       	ldi	r22, 0xA2	; 162
     820:	ce 01       	movw	r24, r28
     822:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     826:	88 87       	std	Y+8, r24	; 0x08
     828:	99 87       	std	Y+9, r25	; 0x09
	C2 = readCoef(C2_addr);
     82a:	64 ea       	ldi	r22, 0xA4	; 164
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     832:	8a 87       	std	Y+10, r24	; 0x0a
     834:	9b 87       	std	Y+11, r25	; 0x0b
	C3 = readCoef(C3_addr);
     836:	66 ea       	ldi	r22, 0xA6	; 166
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     83e:	8c 87       	std	Y+12, r24	; 0x0c
     840:	9d 87       	std	Y+13, r25	; 0x0d
	C4 = readCoef(C4_addr);
     842:	68 ea       	ldi	r22, 0xA8	; 168
     844:	ce 01       	movw	r24, r28
     846:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     84a:	8e 87       	std	Y+14, r24	; 0x0e
     84c:	9f 87       	std	Y+15, r25	; 0x0f
	C5 = readCoef(C5_addr);
     84e:	6a ea       	ldi	r22, 0xAA	; 170
     850:	ce 01       	movw	r24, r28
     852:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     856:	88 8b       	std	Y+16, r24	; 0x10
     858:	99 8b       	std	Y+17, r25	; 0x11
	C6 = readCoef(C6_addr);
     85a:	6c ea       	ldi	r22, 0xAC	; 172
     85c:	ce 01       	movw	r24, r28
     85e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     862:	8a 8b       	std	Y+18, r24	; 0x12
     864:	9b 8b       	std	Y+19, r25	; 0x13
	
	myUsart->sendString("\tDONE!\r\n");
     866:	6a ea       	ldi	r22, 0xAA	; 170
     868:	70 e2       	ldi	r23, 0x20	; 32
     86a:	8e 81       	ldd	r24, Y+6	; 0x06
     86c:	9f 81       	ldd	r25, Y+7	; 0x07
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
	C3 = readCoef(C3_addr);
	C4 = readCoef(C4_addr);
	C5 = readCoef(C5_addr);
	C6 = readCoef(C6_addr);
	
	myUsart->sendString("\tDONE!\r\n");
     872:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

00000876 <_ZN9Ms5525dsoC1ENS_5osr_sEhP4TwieP7UsartE0>:
		
//===================//
//=== CONSTRUCTOR ===//
//===================//

Ms5525dso::Ms5525dso(osr_s osr, uint8_t address, Twie* myTwie, UsartE0* myUsart)
     876:	6f 92       	push	r6
     878:	7f 92       	push	r7
     87a:	8f 92       	push	r8
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	3a 01       	movw	r6, r20
     88c:	86 2e       	mov	r8, r22
     88e:	6e e0       	ldi	r22, 0x0E	; 14
     890:	6c 8b       	std	Y+20, r22	; 0x14
     892:	50 e1       	ldi	r21, 0x10	; 16
     894:	5d 8b       	std	Y+21, r21	; 0x15
     896:	87 e0       	ldi	r24, 0x07	; 7
     898:	8e 8b       	std	Y+22, r24	; 0x16
     89a:	35 e0       	ldi	r19, 0x05	; 5
     89c:	3f 8b       	std	Y+23, r19	; 0x17
     89e:	88 8f       	std	Y+24, r24	; 0x18
     8a0:	95 e1       	ldi	r25, 0x15	; 21
     8a2:	99 8f       	std	Y+25, r25	; 0x19
     8a4:	6a 8f       	std	Y+26, r22	; 0x1a
     8a6:	5b 8f       	std	Y+27, r21	; 0x1b
     8a8:	8c 8f       	std	Y+28, r24	; 0x1c
     8aa:	3d 8f       	std	Y+29, r19	; 0x1d
     8ac:	8e 8f       	std	Y+30, r24	; 0x1e
     8ae:	9f 8f       	std	Y+31, r25	; 0x1f
{
	this->osr = osr;
     8b0:	68 82       	st	Y, r6
     8b2:	79 82       	std	Y+1, r7	; 0x01
     8b4:	8a 82       	std	Y+2, r8	; 0x02
	this->address = address;
     8b6:	2b 83       	std	Y+3, r18	; 0x03
	this->myTwie = myTwie;
     8b8:	0c 83       	std	Y+4, r16	; 0x04
     8ba:	1d 83       	std	Y+5, r17	; 0x05
	this->myUsart = myUsart;
     8bc:	ee 82       	std	Y+6, r14	; 0x06
     8be:	ff 82       	std	Y+7, r15	; 0x07
	
	reset();
     8c0:	ce 01       	movw	r24, r28
     8c2:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN9Ms5525dso5resetEv>
	readPROM();
     8c6:	ce 01       	movw	r24, r28
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	8f 90       	pop	r8
     8d6:	7f 90       	pop	r7
     8d8:	6f 90       	pop	r6
	this->address = address;
	this->myTwie = myTwie;
	this->myUsart = myUsart;
	
	reset();
	readPROM();
     8da:	0c 94 06 04 	jmp	0x80c	; 0x80c <_ZN9Ms5525dso8readPROMEv>

000008de <_ZN9Ms5525dso15convertPressureEv>:
	
	myUsart->sendString("\tDONE!\r\n");
}

void Ms5525dso::convertPressure()
{
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	e2 97       	sbiw	r28, 0x32	; 50
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert pressure in flow sensor.";
     8f2:	82 e3       	ldi	r24, 0x32	; 50
     8f4:	e3 eb       	ldi	r30, 0xB3	; 179
     8f6:	f0 e2       	ldi	r31, 0x20	; 32
     8f8:	de 01       	movw	r26, r28
     8fa:	11 96       	adiw	r26, 0x01	; 1
     8fc:	01 90       	ld	r0, Z+
     8fe:	0d 92       	st	X+, r0
     900:	8a 95       	dec	r24
     902:	e1 f7       	brne	.-8      	; 0x8fc <_ZN9Ms5525dso15convertPressureEv+0x1e>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	f8 01       	movw	r30, r16
     908:	63 81       	ldd	r22, Z+3	; 0x03
     90a:	84 81       	ldd	r24, Z+4	; 0x04
     90c:	95 81       	ldd	r25, Z+5	; 0x05
     90e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     912:	f8 01       	movw	r30, r16
     914:	84 81       	ldd	r24, Z+4	; 0x04
     916:	95 81       	ldd	r25, Z+5	; 0x05
     918:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     91c:	f8 01       	movw	r30, r16
     91e:	24 81       	ldd	r18, Z+4	; 0x04
     920:	35 81       	ldd	r19, Z+5	; 0x05
     922:	88 23       	and	r24, r24
     924:	31 f0       	breq	.+12     	; 0x932 <_ZN9Ms5525dso15convertPressureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	63 e0       	ldi	r22, 0x03	; 3
     92a:	c9 01       	movw	r24, r18
     92c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     930:	14 c0       	rjmp	.+40     	; 0x95a <_ZN9Ms5525dso15convertPressureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x40 + osr.cmd);
     932:	f8 01       	movw	r30, r16
     934:	60 81       	ld	r22, Z
     936:	60 5c       	subi	r22, 0xC0	; 192
     938:	c9 01       	movw	r24, r18
     93a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	63 e0       	ldi	r22, 0x03	; 3
     942:	f8 01       	movw	r30, r16
     944:	84 81       	ldd	r24, Z+4	; 0x04
     946:	95 81       	ldd	r25, Z+5	; 0x05
     948:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     94c:	f8 01       	movw	r30, r16
     94e:	84 81       	ldd	r24, Z+4	; 0x04
     950:	95 81       	ldd	r25, Z+5	; 0x05
     952:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     956:	88 23       	and	r24, r24
     958:	49 f0       	breq	.+18     	; 0x96c <_ZN9Ms5525dso15convertPressureEv+0x8e>
		myTwie->errorHandler(err);
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	f8 01       	movw	r30, r16
     962:	84 81       	ldd	r24, Z+4	; 0x04
     964:	95 81       	ldd	r25, Z+5	; 0x05
     966:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN4Twie12errorHandlerEPKc>
		return;
     96a:	05 c0       	rjmp	.+10     	; 0x976 <_ZN9Ms5525dso15convertPressureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     96c:	f8 01       	movw	r30, r16
     96e:	81 81       	ldd	r24, Z+1	; 0x01
     970:	92 81       	ldd	r25, Z+2	; 0x02
     972:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <_ZN5Utils8delay_usEj>
}
     976:	e2 96       	adiw	r28, 0x32	; 50
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <_ZN9Ms5525dso18convertTemperatureEv>:

void Ms5525dso::convertTemperature()
{	
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	e5 97       	sbiw	r28, 0x35	; 53
     994:	cd bf       	out	0x3d, r28	; 61
     996:	de bf       	out	0x3e, r29	; 62
     998:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert temperature in flow sensor.";
     99a:	85 e3       	ldi	r24, 0x35	; 53
     99c:	e5 ee       	ldi	r30, 0xE5	; 229
     99e:	f0 e2       	ldi	r31, 0x20	; 32
     9a0:	de 01       	movw	r26, r28
     9a2:	11 96       	adiw	r26, 0x01	; 1
     9a4:	01 90       	ld	r0, Z+
     9a6:	0d 92       	st	X+, r0
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <_ZN9Ms5525dso18convertTemperatureEv+0x1e>

	myTwie->setAddress(address, Twie::DIR_WRITE);
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	f8 01       	movw	r30, r16
     9b0:	63 81       	ldd	r22, Z+3	; 0x03
     9b2:	84 81       	ldd	r24, Z+4	; 0x04
     9b4:	95 81       	ldd	r25, Z+5	; 0x05
     9b6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     9ba:	f8 01       	movw	r30, r16
     9bc:	84 81       	ldd	r24, Z+4	; 0x04
     9be:	95 81       	ldd	r25, Z+5	; 0x05
     9c0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     9c4:	f8 01       	movw	r30, r16
     9c6:	24 81       	ldd	r18, Z+4	; 0x04
     9c8:	35 81       	ldd	r19, Z+5	; 0x05
     9ca:	88 23       	and	r24, r24
     9cc:	31 f0       	breq	.+12     	; 0x9da <_ZN9Ms5525dso18convertTemperatureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	63 e0       	ldi	r22, 0x03	; 3
     9d2:	c9 01       	movw	r24, r18
     9d4:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <_ZN9Ms5525dso18convertTemperatureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x50 + osr.cmd);
     9da:	f8 01       	movw	r30, r16
     9dc:	60 81       	ld	r22, Z
     9de:	60 5b       	subi	r22, 0xB0	; 176
     9e0:	c9 01       	movw	r24, r18
     9e2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	63 e0       	ldi	r22, 0x03	; 3
     9ea:	f8 01       	movw	r30, r16
     9ec:	84 81       	ldd	r24, Z+4	; 0x04
     9ee:	95 81       	ldd	r25, Z+5	; 0x05
     9f0:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     9f4:	f8 01       	movw	r30, r16
     9f6:	84 81       	ldd	r24, Z+4	; 0x04
     9f8:	95 81       	ldd	r25, Z+5	; 0x05
     9fa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     9fe:	88 23       	and	r24, r24
     a00:	49 f0       	breq	.+18     	; 0xa14 <_ZN9Ms5525dso18convertTemperatureEv+0x8e>
		myTwie->errorHandler(err);
     a02:	be 01       	movw	r22, r28
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	f8 01       	movw	r30, r16
     a0a:	84 81       	ldd	r24, Z+4	; 0x04
     a0c:	95 81       	ldd	r25, Z+5	; 0x05
     a0e:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN4Twie12errorHandlerEPKc>
		return;
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <_ZN9Ms5525dso18convertTemperatureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     a14:	f8 01       	movw	r30, r16
     a16:	81 81       	ldd	r24, Z+1	; 0x01
     a18:	92 81       	ldd	r25, Z+2	; 0x02
     a1a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <_ZN5Utils8delay_usEj>
}
     a1e:	e5 96       	adiw	r28, 0x35	; 53
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	08 95       	ret

00000a2e <_ZN9Ms5525dso7readADCEv>:

uint32_t Ms5525dso::readADC()
{
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	aa 97       	sbiw	r28, 0x2a	; 42
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not read ADC in flow sensor.";
     a46:	8a e2       	ldi	r24, 0x2A	; 42
     a48:	ea e1       	ldi	r30, 0x1A	; 26
     a4a:	f1 e2       	ldi	r31, 0x21	; 33
     a4c:	de 01       	movw	r26, r28
     a4e:	11 96       	adiw	r26, 0x01	; 1
     a50:	01 90       	ld	r0, Z+
     a52:	0d 92       	st	X+, r0
     a54:	8a 95       	dec	r24
     a56:	e1 f7       	brne	.-8      	; 0xa50 <_ZN9Ms5525dso7readADCEv+0x22>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	f8 01       	movw	r30, r16
     a5c:	63 81       	ldd	r22, Z+3	; 0x03
     a5e:	84 81       	ldd	r24, Z+4	; 0x04
     a60:	95 81       	ldd	r25, Z+5	; 0x05
     a62:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     a66:	f8 01       	movw	r30, r16
     a68:	84 81       	ldd	r24, Z+4	; 0x04
     a6a:	95 81       	ldd	r25, Z+5	; 0x05
     a6c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     a70:	f8 01       	movw	r30, r16
     a72:	24 81       	ldd	r18, Z+4	; 0x04
     a74:	35 81       	ldd	r19, Z+5	; 0x05
     a76:	81 11       	cpse	r24, r1
     a78:	2f c0       	rjmp	.+94     	; 0xad8 <_ZN9Ms5525dso7readADCEv+0xaa>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(0x00);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	c9 01       	movw	r24, r18
     a7e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	f8 01       	movw	r30, r16
     a88:	84 81       	ldd	r24, Z+4	; 0x04
     a8a:	95 81       	ldd	r25, Z+5	; 0x05
     a8c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     a90:	f8 01       	movw	r30, r16
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	95 81       	ldd	r25, Z+5	; 0x05
     a96:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     a9a:	f8 01       	movw	r30, r16
     a9c:	24 81       	ldd	r18, Z+4	; 0x04
     a9e:	35 81       	ldd	r19, Z+5	; 0x05
     aa0:	88 23       	and	r24, r24
     aa2:	51 f0       	breq	.+20     	; 0xab8 <_ZN9Ms5525dso7readADCEv+0x8a>
		myTwie->errorHandler(err);
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	c9 01       	movw	r24, r18
     aac:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN4Twie12errorHandlerEPKc>
		return 0;
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	cb 01       	movw	r24, r22
     ab6:	4a c0       	rjmp	.+148    	; 0xb4c <_ZN9Ms5525dso7readADCEv+0x11e>
	}
		
	myTwie->setAddress(address, Twie::DIR_READ);
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	f8 01       	movw	r30, r16
     abc:	63 81       	ldd	r22, Z+3	; 0x03
     abe:	c9 01       	movw	r24, r18
     ac0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     ac4:	f8 01       	movw	r30, r16
     ac6:	84 81       	ldd	r24, Z+4	; 0x04
     ac8:	95 81       	ldd	r25, Z+5	; 0x05
     aca:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN4Twie7isErrorEv>
     ace:	f8 01       	movw	r30, r16
     ad0:	24 81       	ldd	r18, Z+4	; 0x04
     ad2:	35 81       	ldd	r19, Z+5	; 0x05
     ad4:	88 23       	and	r24, r24
     ad6:	61 f0       	breq	.+24     	; 0xaf0 <_ZN9Ms5525dso7readADCEv+0xc2>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	63 e0       	ldi	r22, 0x03	; 3
     adc:	c9 01       	movw	r24, r18
     ade:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     ae2:	be 01       	movw	r22, r28
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	f8 01       	movw	r30, r16
     aea:	84 81       	ldd	r24, Z+4	; 0x04
     aec:	95 81       	ldd	r25, Z+5	; 0x05
     aee:	de cf       	rjmp	.-68     	; 0xaac <_ZN9Ms5525dso7readADCEv+0x7e>
		return 0;
	}
	
	uint32_t b1 = myTwie->getData(Twie::AA_ACK);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	c9 01       	movw	r24, r18
     af4:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     af8:	e8 2e       	mov	r14, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	62 e0       	ldi	r22, 0x02	; 2
     afe:	f8 01       	movw	r30, r16
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	95 81       	ldd	r25, Z+5	; 0x05
     b04:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b2 = myTwie->getData(Twie::AA_ACK);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	f8 01       	movw	r30, r16
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	95 81       	ldd	r25, Z+5	; 0x05
     b10:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     b14:	f8 2e       	mov	r15, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	f8 01       	movw	r30, r16
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	95 81       	ldd	r25, Z+5	; 0x05
     b20:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b3 = myTwie->getData(Twie::AA_NACK);
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	f8 01       	movw	r30, r16
     b28:	84 81       	ldd	r24, Z+4	; 0x04
     b2a:	95 81       	ldd	r25, Z+5	; 0x05
     b2c:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
	
	return (b1 << 16)|(b2 << 8)|b3;
     b30:	4f 2d       	mov	r20, r15
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	76 2f       	mov	r23, r22
     b3a:	65 2f       	mov	r22, r21
     b3c:	54 2f       	mov	r21, r20
     b3e:	44 27       	eor	r20, r20
     b40:	6e 29       	or	r22, r14
     b42:	8a 01       	movw	r16, r20
     b44:	9b 01       	movw	r18, r22
     b46:	08 2b       	or	r16, r24
     b48:	c9 01       	movw	r24, r18
     b4a:	b8 01       	movw	r22, r16
}
     b4c:	aa 96       	adiw	r28, 0x2a	; 42
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	08 95       	ret

00000b60 <_ZN9Ms5525dso4readEv>:

Ms5525dso::data_s Ms5525dso::read()
{	
     b60:	2f 92       	push	r2
     b62:	3f 92       	push	r3
     b64:	4f 92       	push	r4
     b66:	5f 92       	push	r5
     b68:	6f 92       	push	r6
     b6a:	7f 92       	push	r7
     b6c:	8f 92       	push	r8
     b6e:	9f 92       	push	r9
     b70:	af 92       	push	r10
     b72:	bf 92       	push	r11
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	6a 97       	sbiw	r28, 0x1a	; 26
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	1c 01       	movw	r2, r24
	convertPressure();
     b90:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN9Ms5525dso15convertPressureEv>
	uint32_t D1 = readADC();
     b94:	c1 01       	movw	r24, r2
     b96:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN9Ms5525dso7readADCEv>
     b9a:	4b 01       	movw	r8, r22
     b9c:	5c 01       	movw	r10, r24
	convertTemperature();
     b9e:	c1 01       	movw	r24, r2
     ba0:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN9Ms5525dso18convertTemperatureEv>
	uint32_t D2 = readADC();
     ba4:	c1 01       	movw	r24, r2
     ba6:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN9Ms5525dso7readADCEv>
     baa:	2b 01       	movw	r4, r22
     bac:	3c 01       	movw	r6, r24
			
	double dT = D2 - C5*pow(2,Q5);
     bae:	f1 01       	movw	r30, r2
     bb0:	60 8d       	ldd	r22, Z+24	; 0x18
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e4       	ldi	r25, 0x40	; 64
     bc8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <pow>
     bcc:	6b 01       	movw	r12, r22
     bce:	7c 01       	movw	r14, r24
     bd0:	c3 01       	movw	r24, r6
     bd2:	b2 01       	movw	r22, r4
     bd4:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     bd8:	2b 01       	movw	r4, r22
     bda:	3c 01       	movw	r6, r24
     bdc:	f1 01       	movw	r30, r2
     bde:	60 89       	ldd	r22, Z+16	; 0x10
     be0:	71 89       	ldd	r23, Z+17	; 0x11
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     bea:	a7 01       	movw	r20, r14
     bec:	96 01       	movw	r18, r12
     bee:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	c3 01       	movw	r24, r6
     bf8:	b2 01       	movw	r22, r4
     bfa:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
     bfe:	6b 01       	movw	r12, r22
     c00:	7c 01       	movw	r14, r24
	double TEMP = 2000 + dT*C6/pow(2,Q6);
     c02:	f1 01       	movw	r30, r2
     c04:	61 8d       	ldd	r22, Z+25	; 0x19
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e4       	ldi	r25, 0x40	; 64
     c1c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <pow>
     c20:	2b 01       	movw	r4, r22
     c22:	3c 01       	movw	r6, r24
		
	double OFF = C2*pow(2,Q2) + dT*C4/pow(2,Q4);
     c24:	f1 01       	movw	r30, r2
     c26:	65 89       	ldd	r22, Z+21	; 0x15
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e4       	ldi	r25, 0x40	; 64
     c3e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <pow>
     c42:	69 87       	std	Y+9, r22	; 0x09
     c44:	7a 87       	std	Y+10, r23	; 0x0a
     c46:	8b 87       	std	Y+11, r24	; 0x0b
     c48:	9c 87       	std	Y+12, r25	; 0x0c
     c4a:	f1 01       	movw	r30, r2
     c4c:	67 89       	ldd	r22, Z+23	; 0x17
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e4       	ldi	r25, 0x40	; 64
     c64:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <pow>
     c68:	6d 87       	std	Y+13, r22	; 0x0d
     c6a:	7e 87       	std	Y+14, r23	; 0x0e
     c6c:	8f 87       	std	Y+15, r24	; 0x0f
     c6e:	98 8b       	std	Y+16, r25	; 0x10
	double SENS = C1*pow(2,Q1) + dT*C3/pow(2,Q3);
     c70:	f1 01       	movw	r30, r2
     c72:	64 89       	ldd	r22, Z+20	; 0x14
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e4       	ldi	r25, 0x40	; 64
     c8a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <pow>
     c8e:	69 8b       	std	Y+17, r22	; 0x11
     c90:	7a 8b       	std	Y+18, r23	; 0x12
     c92:	8b 8b       	std	Y+19, r24	; 0x13
     c94:	9c 8b       	std	Y+20, r25	; 0x14
     c96:	f1 01       	movw	r30, r2
     c98:	66 89       	ldd	r22, Z+22	; 0x16
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e4       	ldi	r25, 0x40	; 64
     cb0:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <pow>
     cb4:	6d 8b       	std	Y+21, r22	; 0x15
     cb6:	7e 8b       	std	Y+22, r23	; 0x16
     cb8:	8f 8b       	std	Y+23, r24	; 0x17
     cba:	98 8f       	std	Y+24, r25	; 0x18
	double P = (D1*SENS/pow(2,21) - OFF)/pow(2,15);
	
	data_s data;
	data.pressure = P/100.;
	data.temperature = TEMP/100.;
     cbc:	f1 01       	movw	r30, r2
     cbe:	62 89       	ldd	r22, Z+18	; 0x12
     cc0:	73 89       	ldd	r23, Z+19	; 0x13
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     cca:	a7 01       	movw	r20, r14
     ccc:	96 01       	movw	r18, r12
     cce:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     cd2:	a3 01       	movw	r20, r6
     cd4:	92 01       	movw	r18, r4
     cd6:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a ef       	ldi	r20, 0xFA	; 250
     ce0:	54 e4       	ldi	r21, 0x44	; 68
     ce2:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	48 ec       	ldi	r20, 0xC8	; 200
     cec:	52 e4       	ldi	r21, 0x42	; 66
     cee:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
     cf2:	16 2f       	mov	r17, r22
     cf4:	07 2f       	mov	r16, r23
     cf6:	89 8f       	std	Y+25, r24	; 0x19
     cf8:	9a 8f       	std	Y+26, r25	; 0x1a
	return data;
     cfa:	f1 01       	movw	r30, r2
     cfc:	64 85       	ldd	r22, Z+12	; 0x0c
     cfe:	75 85       	ldd	r23, Z+13	; 0x0d
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     d10:	2d 89       	ldd	r18, Y+21	; 0x15
     d12:	3e 89       	ldd	r19, Y+22	; 0x16
     d14:	4f 89       	ldd	r20, Y+23	; 0x17
     d16:	58 8d       	ldd	r21, Y+24	; 0x18
     d18:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
     d1c:	2b 01       	movw	r4, r22
     d1e:	3c 01       	movw	r6, r24
     d20:	f1 01       	movw	r30, r2
     d22:	60 85       	ldd	r22, Z+8	; 0x08
     d24:	71 85       	ldd	r23, Z+9	; 0x09
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     d2e:	29 89       	ldd	r18, Y+17	; 0x11
     d30:	3a 89       	ldd	r19, Y+18	; 0x12
     d32:	4b 89       	ldd	r20, Y+19	; 0x13
     d34:	5c 89       	ldd	r21, Y+20	; 0x14
     d36:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     d3a:	9b 01       	movw	r18, r22
     d3c:	ac 01       	movw	r20, r24
     d3e:	c3 01       	movw	r24, r6
     d40:	b2 01       	movw	r22, r4
     d42:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
     d46:	2b 01       	movw	r4, r22
     d48:	3c 01       	movw	r6, r24
     d4a:	c5 01       	movw	r24, r10
     d4c:	b4 01       	movw	r22, r8
     d4e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     d52:	9b 01       	movw	r18, r22
     d54:	ac 01       	movw	r20, r24
     d56:	c3 01       	movw	r24, r6
     d58:	b2 01       	movw	r22, r4
     d5a:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	55 e3       	ldi	r21, 0x35	; 53
     d66:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     d6a:	4b 01       	movw	r8, r22
     d6c:	5c 01       	movw	r10, r24
     d6e:	f1 01       	movw	r30, r2
     d70:	66 85       	ldd	r22, Z+14	; 0x0e
     d72:	77 85       	ldd	r23, Z+15	; 0x0f
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     d7c:	a7 01       	movw	r20, r14
     d7e:	96 01       	movw	r18, r12
     d80:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     d84:	2d 85       	ldd	r18, Y+13	; 0x0d
     d86:	3e 85       	ldd	r19, Y+14	; 0x0e
     d88:	4f 85       	ldd	r20, Y+15	; 0x0f
     d8a:	58 89       	ldd	r21, Y+16	; 0x10
     d8c:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
     d90:	6b 01       	movw	r12, r22
     d92:	7c 01       	movw	r14, r24
     d94:	f1 01       	movw	r30, r2
     d96:	62 85       	ldd	r22, Z+10	; 0x0a
     d98:	73 85       	ldd	r23, Z+11	; 0x0b
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
     da2:	29 85       	ldd	r18, Y+9	; 0x09
     da4:	3a 85       	ldd	r19, Y+10	; 0x0a
     da6:	4b 85       	ldd	r20, Y+11	; 0x0b
     da8:	5c 85       	ldd	r21, Y+12	; 0x0c
     daa:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c7 01       	movw	r24, r14
     db4:	b6 01       	movw	r22, r12
     db6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	c5 01       	movw	r24, r10
     dc0:	b4 01       	movw	r22, r8
     dc2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	58 e3       	ldi	r21, 0x38	; 56
     dce:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	48 ec       	ldi	r20, 0xC8	; 200
     dd8:	52 e4       	ldi	r21, 0x42	; 66
     dda:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
     dde:	9b 01       	movw	r18, r22
     de0:	ab 01       	movw	r20, r22
     de2:	bc 01       	movw	r22, r24
     de4:	49 83       	std	Y+1, r20	; 0x01
     de6:	5a 83       	std	Y+2, r21	; 0x02
     de8:	6b 83       	std	Y+3, r22	; 0x03
     dea:	7c 83       	std	Y+4, r23	; 0x04
     dec:	81 2f       	mov	r24, r17
     dee:	90 2f       	mov	r25, r16
     df0:	a9 8d       	ldd	r26, Y+25	; 0x19
     df2:	ba 8d       	ldd	r27, Y+26	; 0x1a
     df4:	8d 83       	std	Y+5, r24	; 0x05
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	af 83       	std	Y+7, r26	; 0x07
     dfa:	b8 87       	std	Y+8, r27	; 0x08
     dfc:	3a 81       	ldd	r19, Y+2	; 0x02
     dfe:	4b 81       	ldd	r20, Y+3	; 0x03
     e00:	5c 81       	ldd	r21, Y+4	; 0x04
     e02:	61 2f       	mov	r22, r17
     e04:	7e 81       	ldd	r23, Y+6	; 0x06
}
     e06:	8f 81       	ldd	r24, Y+7	; 0x07
     e08:	98 85       	ldd	r25, Y+8	; 0x08
     e0a:	6a 96       	adiw	r28, 0x1a	; 26
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	7f 90       	pop	r7
     e2a:	6f 90       	pop	r6
     e2c:	5f 90       	pop	r5
     e2e:	4f 90       	pop	r4
     e30:	3f 90       	pop	r3
     e32:	2f 90       	pop	r2
     e34:	08 95       	ret

00000e36 <_ZN4PumpC1Ev>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Pump::Pump()
     e36:	fc 01       	movw	r30, r24
{
	PORTC_DIRSET = PIN3_bm;
     e38:	98 e0       	ldi	r25, 0x08	; 8
     e3a:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	on = true;
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
     e3e:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
     e42:	10 82       	st	Z, r1
     e44:	08 95       	ret

00000e46 <_ZN4Pump6turnOnEv>:
//=== PUBLIC FUNCTIONS ===//
//========================//

void Pump::turnOn()
{
	PORTC_OUTSET = PIN3_bm;
     e46:	28 e0       	ldi	r18, 0x08	; 8
     e48:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	on = true;
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
     e52:	08 95       	ret

00000e54 <_ZN4Pump7turnOffEv>:
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
     e54:	28 e0       	ldi	r18, 0x08	; 8
     e56:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
     e5a:	fc 01       	movw	r30, r24
     e5c:	10 82       	st	Z, r1
     e5e:	08 95       	ret

00000e60 <__vector_14>:
}

void Tcc0::enableTimerErrorInterrupt(Utils::interruptLevel_e timerErrorLevel)
{
	this->timerErrorLevel = timerErrorLevel;
	TCC0_INTCTRLA = (timerErrorLevel << TC0_ERRINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_ERRINTLVL_gm);
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	08 b6       	in	r0, 0x38	; 56
     e6c:	0f 92       	push	r0
     e6e:	18 be       	out	0x38, r1	; 56
     e70:	09 b6       	in	r0, 0x39	; 57
     e72:	0f 92       	push	r0
     e74:	19 be       	out	0x39, r1	; 57
     e76:	0b b6       	in	r0, 0x3b	; 59
     e78:	0f 92       	push	r0
     e7a:	1b be       	out	0x3b, r1	; 59
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	60 91 0c 23 	lds	r22, 0x230C	; 0x80230c <_ZN4Tcc016timeIncrement_msE>
     e98:	70 91 0d 23 	lds	r23, 0x230D	; 0x80230d <_ZN4Tcc016timeIncrement_msE+0x1>
     e9c:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <_ZN4Tcc016timeIncrement_msE+0x2>
     ea0:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <_ZN4Tcc016timeIncrement_msE+0x3>
     ea4:	20 91 10 23 	lds	r18, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
     ea8:	30 91 11 23 	lds	r19, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
     eac:	40 91 12 23 	lds	r20, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
     eb0:	50 91 13 23 	lds	r21, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
     eb4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
     eb8:	60 93 10 23 	sts	0x2310, r22	; 0x802310 <_ZN4Tcc07time_msE>
     ebc:	70 93 11 23 	sts	0x2311, r23	; 0x802311 <_ZN4Tcc07time_msE+0x1>
     ec0:	80 93 12 23 	sts	0x2312, r24	; 0x802312 <_ZN4Tcc07time_msE+0x2>
     ec4:	90 93 13 23 	sts	0x2313, r25	; 0x802313 <_ZN4Tcc07time_msE+0x3>
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0b be       	out	0x3b, r0	; 59
     ee4:	0f 90       	pop	r0
     ee6:	09 be       	out	0x39, r0	; 57
     ee8:	0f 90       	pop	r0
     eea:	08 be       	out	0x38, r0	; 56
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>:
}

void Tcc0::enableTimerOverflowInterrupt(Utils::interruptLevel_e timerOverflowLevel)
{
	this->timerOverflowLevel = timerOverflowLevel;
     ef6:	fc 01       	movw	r30, r24
     ef8:	67 87       	std	Z+15, r22	; 0x0f
	TCC0_INTCTRLA = (timerOverflowLevel << TC0_OVFINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_OVFINTLVL_gm);
     efa:	e6 e0       	ldi	r30, 0x06	; 6
     efc:	f8 e0       	ldi	r31, 0x08	; 8
     efe:	80 81       	ld	r24, Z
     f00:	8c 7f       	andi	r24, 0xFC	; 252
     f02:	68 2b       	or	r22, r24
     f04:	60 83       	st	Z, r22
     f06:	08 95       	ret

00000f08 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
     f08:	0f 93       	push	r16
//=== SETTERS ===//
//===============//

void Tcc0::setClockSource(clockSource_e clockSource)
{
	this->clockSource = clockSource;
     f0a:	fc 01       	movw	r30, r24
     f0c:	60 83       	st	Z, r22
	TCC0_CTRLA = clockSource;
     f0e:	60 93 00 08 	sts	0x0800, r22	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
     f12:	20 93 0c 23 	sts	0x230C, r18	; 0x80230c <_ZN4Tcc016timeIncrement_msE>
     f16:	30 93 0d 23 	sts	0x230D, r19	; 0x80230d <_ZN4Tcc016timeIncrement_msE+0x1>
     f1a:	40 93 0e 23 	sts	0x230E, r20	; 0x80230e <_ZN4Tcc016timeIncrement_msE+0x2>
     f1e:	50 93 0f 23 	sts	0x230F, r21	; 0x80230f <_ZN4Tcc016timeIncrement_msE+0x3>
	enableTimerOverflowInterrupt(level);
     f22:	60 2f       	mov	r22, r16
}
     f24:	0f 91       	pop	r16

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
	enableTimerOverflowInterrupt(level);
     f26:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>

00000f2a <_ZN4Twie8waitReadEv>:
}

void Twie::setBaudRate(uint8_t baudRate)
{
	this->baudRate = baudRate;
	TWIE_MASTER_BAUD = baudRate;
     f2a:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f2e:	87 ff       	sbrs	r24, 7
     f30:	fc cf       	rjmp	.-8      	; 0xf2a <_ZN4Twie8waitReadEv>
     f32:	08 95       	ret

00000f34 <_ZN4Twie9waitWriteEv>:
     f34:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f38:	86 ff       	sbrs	r24, 6
     f3a:	fc cf       	rjmp	.-8      	; 0xf34 <_ZN4Twie9waitWriteEv>
     f3c:	08 95       	ret

00000f3e <_ZN4Twie7isErrorEv>:
     f3e:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f42:	9c 71       	andi	r25, 0x1C	; 28
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	09 f4       	brne	.+2      	; 0xf4a <_ZN4Twie7isErrorEv+0xc>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	08 95       	ret

00000f4c <_ZN4Twie14getErrorStatusEv>:
     f4c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f50:	84 fd       	sbrc	r24, 4
     f52:	0a c0       	rjmp	.+20     	; 0xf68 <_ZN4Twie14getErrorStatusEv+0x1c>
     f54:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f58:	83 fd       	sbrc	r24, 3
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <_ZN4Twie14getErrorStatusEv+0x20>
     f5c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
     f60:	82 fd       	sbrc	r24, 2
     f62:	06 c0       	rjmp	.+12     	; 0xf70 <_ZN4Twie14getErrorStatusEv+0x24>
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	08 95       	ret
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	08 95       	ret
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	08 95       	ret
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	08 95       	ret

00000f74 <_ZN4Twie12errorHandlerEPKc>:
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
     f7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f7e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
     f82:	67 e4       	ldi	r22, 0x47	; 71
     f84:	71 e2       	ldi	r23, 0x21	; 33
     f86:	8b 85       	ldd	r24, Y+11	; 0x0b
     f88:	9c 85       	ldd	r25, Y+12	; 0x0c
     f8a:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
     f8e:	ce 01       	movw	r24, r28
     f90:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4Twie14getErrorStatusEv>
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	59 f0       	breq	.+22     	; 0xfae <_ZN4Twie12errorHandlerEPKc+0x3a>
     f98:	38 f0       	brcs	.+14     	; 0xfa8 <_ZN4Twie12errorHandlerEPKc+0x34>
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <_ZN4Twie12errorHandlerEPKc+0x40>
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	89 f4       	brne	.+34     	; 0xfc4 <_ZN4Twie12errorHandlerEPKc+0x50>
     fa2:	61 e7       	ldi	r22, 0x71	; 113
     fa4:	71 e2       	ldi	r23, 0x21	; 33
     fa6:	08 c0       	rjmp	.+16     	; 0xfb8 <_ZN4Twie12errorHandlerEPKc+0x44>
     fa8:	66 e5       	ldi	r22, 0x56	; 86
     faa:	71 e2       	ldi	r23, 0x21	; 33
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <_ZN4Twie12errorHandlerEPKc+0x44>
     fae:	6e e5       	ldi	r22, 0x5E	; 94
     fb0:	71 e2       	ldi	r23, 0x21	; 33
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <_ZN4Twie12errorHandlerEPKc+0x44>
     fb4:	68 e6       	ldi	r22, 0x68	; 104
     fb6:	71 e2       	ldi	r23, 0x21	; 33
     fb8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fba:	9c 85       	ldd	r25, Y+12	; 0x0c
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	0c 94 be 08 	jmp	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <_ZN4Twie12enableMasterEv>:
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	fc 01       	movw	r30, r24
     fce:	25 83       	std	Z+5, r18	; 0x05
     fd0:	e1 ea       	ldi	r30, 0xA1	; 161
     fd2:	f4 e0       	ldi	r31, 0x04	; 4
     fd4:	80 81       	ld	r24, Z
     fd6:	88 60       	ori	r24, 0x08	; 8
     fd8:	80 83       	st	Z, r24
     fda:	08 95       	ret

00000fdc <_ZN4Twie15enableSmartModeEv>:
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	fc 01       	movw	r30, r24
     fe0:	20 87       	std	Z+8, r18	; 0x08
     fe2:	e2 ea       	ldi	r30, 0xA2	; 162
     fe4:	f4 e0       	ldi	r31, 0x04	; 4
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	80 83       	st	Z, r24
     fec:	08 95       	ret

00000fee <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>:
     fee:	fc 01       	movw	r30, r24
     ff0:	66 83       	std	Z+6, r22	; 0x06
     ff2:	e2 ea       	ldi	r30, 0xA2	; 162
     ff4:	f4 e0       	ldi	r31, 0x04	; 4
     ff6:	80 81       	ld	r24, Z
     ff8:	94 e0       	ldi	r25, 0x04	; 4
     ffa:	69 9f       	mul	r22, r25
     ffc:	b0 01       	movw	r22, r0
     ffe:	11 24       	eor	r1, r1
    1000:	83 7f       	andi	r24, 0xF3	; 243
    1002:	68 2b       	or	r22, r24
    1004:	60 83       	st	Z, r22
    1006:	08 95       	ret

00001008 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>:
    1008:	fc 01       	movw	r30, r24
    100a:	61 87       	std	Z+9, r22	; 0x09
    100c:	66 23       	and	r22, r22
    100e:	19 f0       	breq	.+6      	; 0x1016 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0xe>
    1010:	61 30       	cpi	r22, 0x01	; 1
    1012:	29 f0       	breq	.+10     	; 0x101e <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x16>
    1014:	08 95       	ret
    1016:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x1c>
    101e:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1022:	84 60       	ori	r24, 0x04	; 4
    1024:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1028:	08 95       	ret

0000102a <_ZN4Twie7getDataENS_19acknowledgeAction_eE>:
    102a:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
    102e:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
    1032:	08 95       	ret

00001034 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>:
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	ec 01       	movw	r28, r24
    103c:	16 2f       	mov	r17, r22
    103e:	64 2f       	mov	r22, r20
    1040:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
    1044:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1048:	8c 7f       	andi	r24, 0xFC	; 252
    104a:	81 2b       	or	r24, r17
    104c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1050:	12 30       	cpi	r17, 0x02	; 2
    1052:	31 f4       	brne	.+12     	; 0x1060 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE+0x2c>
    1054:	ce 01       	movw	r24, r28
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <_ZN4Twie8waitReadEv>
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	08 95       	ret

00001068 <_ZN4Twie10setBusIdleEv>:
    1068:	e4 ea       	ldi	r30, 0xA4	; 164
    106a:	f4 e0       	ldi	r31, 0x04	; 4
    106c:	80 81       	ld	r24, Z
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	80 83       	st	Z, r24
    1072:	08 95       	ret

00001074 <_ZN4TwieC1EhNS_5ibt_eEP7UsartE0>:
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
    107a:	6a 87       	std	Y+10, r22	; 0x0a
    107c:	4e 83       	std	Y+6, r20	; 0x06
    107e:	2b 87       	std	Y+11, r18	; 0x0b
    1080:	3c 87       	std	Y+12, r19	; 0x0c
    1082:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7004a5>
    1086:	64 2f       	mov	r22, r20
    1088:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>
    108c:	ce 01       	movw	r24, r28
    108e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN4Twie15enableSmartModeEv>
    1092:	ce 01       	movw	r24, r28
    1094:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN4Twie12enableMasterEv>
    1098:	ce 01       	movw	r24, r28
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	0c 94 34 08 	jmp	0x1068	; 0x1068 <_ZN4Twie10setBusIdleEv>

000010a2 <_ZN4Twie10setAddressEhNS_11direction_eE>:
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
		TWIE_MASTER_ADDR = (address << 1) | 1;
    10a2:	66 0f       	add	r22, r22
	TWIE_MASTER_BAUD = baudRate;
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
    10a4:	41 30       	cpi	r20, 0x01	; 1
    10a6:	29 f4       	brne	.+10     	; 0x10b2 <_ZN4Twie10setAddressEhNS_11direction_eE+0x10>
		TWIE_MASTER_ADDR = (address << 1) | 1;
    10a8:	61 60       	ori	r22, 0x01	; 1
    10aa:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitRead();
    10ae:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <_ZN4Twie8waitReadEv>
	} else {
		TWIE_MASTER_ADDR = (address << 1);
    10b2:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitWrite();
    10b6:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <_ZN4Twie9waitWriteEv>

000010ba <_ZN4Twie7setDataEh>:
	}
}

void Twie::setData(uint8_t data)
{
	TWIE_MASTER_DATA = data;
    10ba:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
	waitWrite();
    10be:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <_ZN4Twie9waitWriteEv>

000010c2 <__vector_28>:
volatile bool UsartC1::rxcFlag = false;
volatile bool UsartC1::txcFlag = false;
volatile bool UsartC1::dreFlag = false;
volatile char UsartC1::rxChar = '\0';

ISR(USARTC1_RXC_vect) {
    10c2:	1f 92       	push	r1
    10c4:	0f 92       	push	r0
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	0f 92       	push	r0
    10ca:	11 24       	eor	r1, r1
    10cc:	08 b6       	in	r0, 0x38	; 56
    10ce:	0f 92       	push	r0
    10d0:	18 be       	out	0x38, r1	; 56
    10d2:	8f 93       	push	r24
	UsartC1::rxcFlag = true;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 17 23 	sts	0x2317, r24	; 0x802317 <_ZN7UsartC17rxcFlagE>
	UsartC1::rxChar = USARTC1_DATA;
    10da:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    10de:	80 93 14 23 	sts	0x2314, r24	; 0x802314 <_ZN7UsartC16rxCharE>
}
    10e2:	8f 91       	pop	r24
    10e4:	0f 90       	pop	r0
    10e6:	08 be       	out	0x38, r0	; 56
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_30>:
ISR(USARTC1_TXC_vect) {UsartC1::txcFlag = true;}
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	08 b6       	in	r0, 0x38	; 56
    10fe:	0f 92       	push	r0
    1100:	18 be       	out	0x38, r1	; 56
    1102:	8f 93       	push	r24
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 16 23 	sts	0x2316, r24	; 0x802316 <_ZN7UsartC17txcFlagE>
    110a:	8f 91       	pop	r24
    110c:	0f 90       	pop	r0
    110e:	08 be       	out	0x38, r0	; 56
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_29>:
ISR(USARTC1_DRE_vect) {UsartC1::dreFlag = true;}
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	08 b6       	in	r0, 0x38	; 56
    1126:	0f 92       	push	r0
    1128:	18 be       	out	0x38, r1	; 56
    112a:	8f 93       	push	r24
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 15 23 	sts	0x2315, r24	; 0x802315 <_ZN7UsartC17dreFlagE>
    1132:	8f 91       	pop	r24
    1134:	0f 90       	pop	r0
    1136:	08 be       	out	0x38, r0	; 56
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <__vector_58>:
}

void UsartE0::setCharacterSize(characterSize_e characterSize)
{
	this->characterSize = characterSize;
	USARTE0_CTRLC = (characterSize << USART_CHSIZE_gp)|(USARTE0_CTRLC & ~USART_CHSIZE_gm);
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	08 b6       	in	r0, 0x38	; 56
    114e:	0f 92       	push	r0
    1150:	18 be       	out	0x38, r1	; 56
    1152:	8f 93       	push	r24
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 19 23 	sts	0x2319, r24	; 0x802319 <_ZN7UsartE07rxcFlagE>
    115a:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    115e:	80 93 18 23 	sts	0x2318, r24	; 0x802318 <_ZN7UsartE06rxCharE>
    1162:	8f 91       	pop	r24
    1164:	0f 90       	pop	r0
    1166:	08 be       	out	0x38, r0	; 56
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <_ZN7UsartE021waitDataRegisterEmptyEv>:
    1172:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
    1176:	85 ff       	sbrs	r24, 5
    1178:	fc cf       	rjmp	.-8      	; 0x1172 <_ZN7UsartE021waitDataRegisterEmptyEv>
    117a:	08 95       	ret

0000117c <_ZN7UsartE010sendStringEPKc>:
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	7c 01       	movw	r14, r24
    1188:	8b 01       	movw	r16, r22
    118a:	f8 01       	movw	r30, r16
    118c:	c1 91       	ld	r28, Z+
    118e:	8f 01       	movw	r16, r30
    1190:	cc 23       	and	r28, r28
    1192:	31 f0       	breq	.+12     	; 0x11a0 <_ZN7UsartE010sendStringEPKc+0x24>
    1194:	c7 01       	movw	r24, r14
    1196:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN7UsartE021waitDataRegisterEmptyEv>
    119a:	c0 93 a0 0a 	sts	0x0AA0, r28	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    119e:	f5 cf       	rjmp	.-22     	; 0x118a <_ZN7UsartE010sendStringEPKc+0xe>
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	08 95       	ret

000011ac <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>:
    11ac:	fc 01       	movw	r30, r24
    11ae:	60 83       	st	Z, r22
    11b0:	e3 ea       	ldi	r30, 0xA3	; 163
    11b2:	fa e0       	ldi	r31, 0x0A	; 10
    11b4:	80 81       	ld	r24, Z
    11b6:	90 e1       	ldi	r25, 0x10	; 16
    11b8:	69 9f       	mul	r22, r25
    11ba:	b0 01       	movw	r22, r0
    11bc:	11 24       	eor	r1, r1
    11be:	8f 7c       	andi	r24, 0xCF	; 207
    11c0:	68 2b       	or	r22, r24
    11c2:	60 83       	st	Z, r22
    11c4:	08 95       	ret

000011c6 <_ZN7UsartE014enableReceiverEv>:
    11c6:	21 e0       	ldi	r18, 0x01	; 1
    11c8:	fc 01       	movw	r30, r24
    11ca:	23 83       	std	Z+3, r18	; 0x03
    11cc:	e4 ea       	ldi	r30, 0xA4	; 164
    11ce:	fa e0       	ldi	r31, 0x0A	; 10
    11d0:	80 81       	ld	r24, Z
    11d2:	80 61       	ori	r24, 0x10	; 16
    11d4:	80 83       	st	Z, r24
    11d6:	08 95       	ret

000011d8 <_ZN7UsartE017enableTransmitterEv>:
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	fc 01       	movw	r30, r24
    11dc:	24 83       	std	Z+4, r18	; 0x04
    11de:	e4 ea       	ldi	r30, 0xA4	; 164
    11e0:	fa e0       	ldi	r31, 0x0A	; 10
    11e2:	80 81       	ld	r24, Z
    11e4:	88 60       	ori	r24, 0x08	; 8
    11e6:	80 83       	st	Z, r24
    11e8:	08 95       	ret

000011ea <_ZN7UsartE029enableDoubleTransmissionSpeedEv>:
    11ea:	21 e0       	ldi	r18, 0x01	; 1
    11ec:	fc 01       	movw	r30, r24
    11ee:	25 83       	std	Z+5, r18	; 0x05
    11f0:	e4 ea       	ldi	r30, 0xA4	; 164
    11f2:	fa e0       	ldi	r31, 0x0A	; 10
    11f4:	80 81       	ld	r24, Z
    11f6:	84 60       	ori	r24, 0x04	; 4
    11f8:	80 83       	st	Z, r24
    11fa:	08 95       	ret

000011fc <_ZN7UsartE07setBSELEj>:
}

void UsartE0::setBSEL(uint16_t bsel)
{
	this->bsel = bsel;
    11fc:	fc 01       	movw	r30, r24
    11fe:	63 87       	std	Z+11, r22	; 0x0b
    1200:	74 87       	std	Z+12, r23	; 0x0c
	USARTE0_BAUDCTRLA = bsel;
    1202:	60 93 a6 0a 	sts	0x0AA6, r22	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x700aa6>
	USARTE0_BAUDCTRLB = (bsel >> 8)|(USARTE0_BAUDCTRLB & 0x0F);
    1206:	e7 ea       	ldi	r30, 0xA7	; 167
    1208:	fa e0       	ldi	r31, 0x0A	; 10
    120a:	80 81       	ld	r24, Z
    120c:	8f 70       	andi	r24, 0x0F	; 15
    120e:	78 2b       	or	r23, r24
    1210:	70 83       	st	Z, r23
    1212:	08 95       	ret

00001214 <_ZN7UsartE09setBSCALEEh>:
}

void UsartE0::setBSCALE(uint8_t bscale)
{
	this->bscale = bscale;
    1214:	fc 01       	movw	r30, r24
    1216:	65 87       	std	Z+13, r22	; 0x0d
	USARTE0_BAUDCTRLB = (bscale << USART_BSCALE_gp)|(USARTE0_BAUDCTRLB & ~USART_BSCALE_gm);
    1218:	e7 ea       	ldi	r30, 0xA7	; 167
    121a:	fa e0       	ldi	r31, 0x0A	; 10
    121c:	80 81       	ld	r24, Z
    121e:	90 e1       	ldi	r25, 0x10	; 16
    1220:	69 9f       	mul	r22, r25
    1222:	b0 01       	movw	r22, r0
    1224:	11 24       	eor	r1, r1
    1226:	8f 70       	andi	r24, 0x0F	; 15
    1228:	68 2b       	or	r22, r24
    122a:	60 83       	st	Z, r22
    122c:	08 95       	ret

0000122e <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

UsartE0::UsartE0(Usart::baudrate_s baudrate,Utils::interruptLevel_e receiveCompleteInterruptLevel)
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ec 01       	movw	r28, r24
    123a:	f6 2e       	mov	r15, r22
    123c:	07 2f       	mov	r16, r23
    123e:	12 2f       	mov	r17, r18
{
	setBSEL(baudrate.bsel);
    1240:	ba 01       	movw	r22, r20
    1242:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN7UsartE07setBSELEj>
	setBSCALE(baudrate.bscale);
    1246:	6f 2d       	mov	r22, r15
    1248:	ce 01       	movw	r24, r28
    124a:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN7UsartE09setBSCALEEh>
	if (baudrate.clk2x) enableDoubleTransmissionSpeed();
    124e:	00 23       	and	r16, r16
    1250:	19 f0       	breq	.+6      	; 0x1258 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE+0x2a>
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7UsartE029enableDoubleTransmissionSpeedEv>
	enableReceiver();
    1258:	ce 01       	movw	r24, r28
    125a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN7UsartE014enableReceiverEv>
	enableTransmitter();
    125e:	ce 01       	movw	r24, r28
    1260:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN7UsartE017enableTransmitterEv>
	enableReceiveCompleteInterrupt(receiveCompleteInterruptLevel);
    1264:	61 2f       	mov	r22, r17
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>
	PORTE_DIRSET = PIN3_bm;
    126c:	88 e0       	ldi	r24, 0x08	; 8
    126e:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	08 95       	ret

0000127e <_ZN5Utils14setSystemClockENS_13systemClock_eE>:

char Utils::txBuf[TX_LEN];

void Utils::setSystemClock(systemClock_e sc)
{
	OSC_CTRL |= 1 << sc; // enable oscillator
    127e:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	08 2e       	mov	r0, r24
    1288:	02 c0       	rjmp	.+4      	; 0x128e <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x10>
    128a:	44 0f       	add	r20, r20
    128c:	55 1f       	adc	r21, r21
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <_ZN5Utils14setSystemClockENS_13systemClock_eE+0xc>
    1292:	94 2b       	or	r25, r20
    1294:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC_STATUS & (1 << sc))) ; // wait until oscillator is ready
    1298:	20 91 51 00 	lds	r18, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	24 23       	and	r18, r20
    12a0:	35 23       	and	r19, r21
    12a2:	23 2b       	or	r18, r19
    12a4:	c9 f3       	breq	.-14     	; 0x1298 <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x1a>
	CCP = CCP_IOREG_gc; // trigger protection mechanism
    12a6:	98 ed       	ldi	r25, 0xD8	; 216
    12a8:	94 bf       	out	0x34, r25	; 52
	CLK_CTRL = sc << CLK_SCLKSEL_gp; // select system clock
    12aa:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    12ae:	08 95       	ret

000012b0 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>:
}

void Utils::enableInterruptLevel(interruptLevel_e il)
{
	PMIC_CTRL |= (1 << (il-1));
    12b0:	e2 ea       	ldi	r30, 0xA2	; 162
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	40 81       	ld	r20, Z
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	21 e0       	ldi	r18, 0x01	; 1
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	b9 01       	movw	r22, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x14>
    12c0:	66 0f       	add	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	8a 95       	dec	r24
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x10>
    12c8:	cb 01       	movw	r24, r22
    12ca:	84 2b       	or	r24, r20
    12cc:	80 83       	st	Z, r24
    12ce:	08 95       	ret

000012d0 <_ZN5Utils21globalInterruptEnableEv>:
}

void Utils::globalInterruptEnable()
{
	CPU_SREG |= CPU_I_bm;
    12d0:	8f b7       	in	r24, 0x3f	; 63
    12d2:	80 68       	ori	r24, 0x80	; 128
    12d4:	8f bf       	out	0x3f, r24	; 63
    12d6:	08 95       	ret

000012d8 <_ZN5Utils8delay_msEj>:
}

void Utils::delay_ms(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_ms(1);
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	49 f0       	breq	.+18     	; 0x12f4 <_ZN5Utils8delay_msEj+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e2:	ef e3       	ldi	r30, 0x3F	; 63
    12e4:	ff e1       	ldi	r31, 0x1F	; 31
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <_ZN5Utils8delay_msEj+0xe>
    12ea:	00 c0       	rjmp	.+0      	; 0x12ec <_ZN5Utils8delay_msEj+0x14>
    12ec:	00 00       	nop
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	f4 cf       	rjmp	.-24     	; 0x12dc <_ZN5Utils8delay_msEj+0x4>
    12f4:	08 95       	ret

000012f6 <_ZN5Utils8delay_usEj>:
}

void Utils::delay_us(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_us(1);
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	28 17       	cp	r18, r24
    12fc:	39 07       	cpc	r19, r25
    12fe:	39 f0       	breq	.+14     	; 0x130e <_ZN5Utils8delay_usEj+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1300:	4a e0       	ldi	r20, 0x0A	; 10
    1302:	4a 95       	dec	r20
    1304:	f1 f7       	brne	.-4      	; 0x1302 <_ZN5Utils8delay_usEj+0xc>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <_ZN5Utils8delay_usEj+0x12>
    1308:	2f 5f       	subi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	f6 cf       	rjmp	.-20     	; 0x12fa <_ZN5Utils8delay_usEj+0x4>
    130e:	08 95       	ret

00001310 <_Z12oversampleO2jR4Adca>:
}

double o2_counts2pct(double counts, Utils::gascal_s gascal)
{
	return counts*gascal.gain + gascal.offset;
}
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	5c 01       	movw	r10, r24
    1326:	8b 01       	movw	r16, r22
    1328:	c0 e0       	ldi	r28, 0x00	; 0
    132a:	d0 e0       	ldi	r29, 0x00	; 0
    132c:	c1 2c       	mov	r12, r1
    132e:	d1 2c       	mov	r13, r1
    1330:	76 01       	movw	r14, r12
    1332:	ca 15       	cp	r28, r10
    1334:	db 05       	cpc	r29, r11
    1336:	51 f0       	breq	.+20     	; 0x134c <_Z12oversampleO2jR4Adca+0x3c>
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	c8 01       	movw	r24, r16
    133c:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4Adca11readChannelENS_9channel_eE>
    1340:	c8 0e       	add	r12, r24
    1342:	d9 1e       	adc	r13, r25
    1344:	e1 1c       	adc	r14, r1
    1346:	f1 1c       	adc	r15, r1
    1348:	21 96       	adiw	r28, 0x01	; 1
    134a:	f3 cf       	rjmp	.-26     	; 0x1332 <_Z12oversampleO2jR4Adca+0x22>
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
    1358:	be 01       	movw	r22, r28
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__floatunsisf>
    1362:	9b 01       	movw	r18, r22
    1364:	ac 01       	movw	r20, r24
    1366:	c7 01       	movw	r24, r14
    1368:	b6 01       	movw	r22, r12
    136a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	bf 90       	pop	r11
    1380:	af 90       	pop	r10
    1382:	08 95       	ret

00001384 <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0>:

void flow_acq(Ms5525dso & myFlowSensor, Adca & myAdc, Tcc0 & myTimer, UsartE0 & myUsart)
{
    1384:	7f 92       	push	r7
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	28 97       	sbiw	r28, 0x08	; 8
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	4c 01       	movw	r8, r24
    13aa:	5b 01       	movw	r10, r22
    13ac:	89 01       	movw	r16, r18
	myUsart.sendString("sep=,\r\nTime [ms],Pressure [psi],Temperature [oC],O2 [counts]\r\n");
    13ae:	6b e7       	ldi	r22, 0x7B	; 123
    13b0:	71 e2       	ldi	r23, 0x21	; 33
    13b2:	c9 01       	movw	r24, r18
    13b4:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	while (!(myUsart.isRXC()))
	{
		Ms5525dso::data_s flowData = myFlowSensor.read();
		uint16_t o2_counts = myAdc.readChannel(Adca::CH_0);
		snprintf(Utils::txBuf, TX_LEN, "%.3f,%.4f,%.2f,%d\r\n", myTimer.getTime_ms(), flowData.pressure, flowData.temperature, o2_counts);
    13b8:	8a eb       	ldi	r24, 0xBA	; 186
    13ba:	c8 2e       	mov	r12, r24
    13bc:	81 e2       	ldi	r24, 0x21	; 33
    13be:	d8 2e       	mov	r13, r24
    13c0:	90 e4       	ldi	r25, 0x40	; 64
    13c2:	79 2e       	mov	r7, r25
    13c4:	2a e1       	ldi	r18, 0x1A	; 26
    13c6:	e2 2e       	mov	r14, r18
    13c8:	23 e2       	ldi	r18, 0x23	; 35
    13ca:	f2 2e       	mov	r15, r18
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    13cc:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <_ZN7UsartE07rxcFlagE>
}

void flow_acq(Ms5525dso & myFlowSensor, Adca & myAdc, Tcc0 & myTimer, UsartE0 & myUsart)
{
	myUsart.sendString("sep=,\r\nTime [ms],Pressure [psi],Temperature [oC],O2 [counts]\r\n");
	while (!(myUsart.isRXC()))
    13d0:	81 11       	cpse	r24, r1
    13d2:	3d c0       	rjmp	.+122    	; 0x144e <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0+0xca>
	{
		Ms5525dso::data_s flowData = myFlowSensor.read();
    13d4:	c4 01       	movw	r24, r8
    13d6:	0e 94 b0 05 	call	0xb60	; 0xb60 <_ZN9Ms5525dso4readEv>
    13da:	29 83       	std	Y+1, r18	; 0x01
    13dc:	3a 83       	std	Y+2, r19	; 0x02
    13de:	4b 83       	std	Y+3, r20	; 0x03
    13e0:	5c 83       	std	Y+4, r21	; 0x04
    13e2:	6d 83       	std	Y+5, r22	; 0x05
    13e4:	7e 83       	std	Y+6, r23	; 0x06
    13e6:	8f 83       	std	Y+7, r24	; 0x07
    13e8:	98 87       	std	Y+8, r25	; 0x08
		uint16_t o2_counts = myAdc.readChannel(Adca::CH_0);
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	c5 01       	movw	r24, r10
    13ee:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4Adca11readChannelENS_9channel_eE>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile double time_ms;
	static volatile double timeIncrement_ms;
	double getTime_ms(){return time_ms;};
    13f2:	40 91 10 23 	lds	r20, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    13f6:	50 91 11 23 	lds	r21, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    13fa:	60 91 12 23 	lds	r22, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    13fe:	70 91 13 23 	lds	r23, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
		snprintf(Utils::txBuf, TX_LEN, "%.3f,%.4f,%.2f,%d\r\n", myTimer.getTime_ms(), flowData.pressure, flowData.temperature, o2_counts);
    1402:	9f 93       	push	r25
    1404:	8f 93       	push	r24
    1406:	88 85       	ldd	r24, Y+8	; 0x08
    1408:	8f 93       	push	r24
    140a:	8f 81       	ldd	r24, Y+7	; 0x07
    140c:	8f 93       	push	r24
    140e:	8e 81       	ldd	r24, Y+6	; 0x06
    1410:	8f 93       	push	r24
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	8f 93       	push	r24
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	8f 93       	push	r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	8f 93       	push	r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	8f 93       	push	r24
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	8f 93       	push	r24
    1426:	7f 93       	push	r23
    1428:	6f 93       	push	r22
    142a:	5f 93       	push	r21
    142c:	4f 93       	push	r20
    142e:	df 92       	push	r13
    1430:	cf 92       	push	r12
    1432:	1f 92       	push	r1
    1434:	7f 92       	push	r7
    1436:	ff 92       	push	r15
    1438:	ef 92       	push	r14
    143a:	0e 94 4a 18 	call	0x3094	; 0x3094 <snprintf>
		myUsart.sendString(Utils::txBuf);
    143e:	6a e1       	ldi	r22, 0x1A	; 26
    1440:	73 e2       	ldi	r23, 0x23	; 35
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
}

void flow_acq(Ms5525dso & myFlowSensor, Adca & myAdc, Tcc0 & myTimer, UsartE0 & myUsart)
{
	myUsart.sendString("sep=,\r\nTime [ms],Pressure [psi],Temperature [oC],O2 [counts]\r\n");
	while (!(myUsart.isRXC()))
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	bf cf       	rjmp	.-130    	; 0x13cc <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0+0x48>
	void setRXC(bool b){rxcFlag = b;};
    144e:	10 92 19 23 	sts	0x2319, r1	; 0x802319 <_ZN7UsartE07rxcFlagE>
		uint16_t o2_counts = myAdc.readChannel(Adca::CH_0);
		snprintf(Utils::txBuf, TX_LEN, "%.3f,%.4f,%.2f,%d\r\n", myTimer.getTime_ms(), flowData.pressure, flowData.temperature, o2_counts);
		myUsart.sendString(Utils::txBuf);
	}
	myUsart.setRXC(false);
}
    1452:	28 96       	adiw	r28, 0x08	; 8
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	bf 90       	pop	r11
    146a:	af 90       	pop	r10
    146c:	9f 90       	pop	r9
    146e:	8f 90       	pop	r8
    1470:	7f 90       	pop	r7
    1472:	08 95       	ret

00001474 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_>:
	Pump & myPump,
	Tcc0 & myTimer,
	UsartE0 & myUsart,
	Valve & sampleValve,
	Valve & outputValve)
{
    1474:	2f 92       	push	r2
    1476:	3f 92       	push	r3
    1478:	4f 92       	push	r4
    147a:	5f 92       	push	r5
    147c:	6f 92       	push	r6
    147e:	7f 92       	push	r7
    1480:	8f 92       	push	r8
    1482:	9f 92       	push	r9
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	a6 97       	sbiw	r28, 0x26	; 38
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	29 8b       	std	Y+17, r18	; 0x11
    14a4:	3a 8b       	std	Y+18, r19	; 0x12
    14a6:	4b 8b       	std	Y+19, r20	; 0x13
    14a8:	5c 8b       	std	Y+20, r21	; 0x14
    14aa:	6d 8b       	std	Y+21, r22	; 0x15
    14ac:	7e 8b       	std	Y+22, r23	; 0x16
    14ae:	8f 8b       	std	Y+23, r24	; 0x17
    14b0:	98 8f       	std	Y+24, r25	; 0x18
    14b2:	0d a3       	std	Y+37, r16	; 0x25
    14b4:	1e a3       	std	Y+38, r17	; 0x26
    14b6:	eb 8e       	std	Y+27, r14	; 0x1b
    14b8:	fc 8e       	std	Y+28, r15	; 0x1c
    14ba:	cd 8e       	std	Y+29, r12	; 0x1d
    14bc:	de 8e       	std	Y+30, r13	; 0x1e
    14be:	8f 8e       	std	Y+31, r8	; 0x1f
    14c0:	98 a2       	std	Y+32, r9	; 0x20
    14c2:	2c ac       	ldd	r2, Y+60	; 0x3c
    14c4:	3d ac       	ldd	r3, Y+61	; 0x3d
    14c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    14c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    14ca:	89 8f       	std	Y+25, r24	; 0x19
    14cc:	9a 8f       	std	Y+26, r25	; 0x1a
	const uint16_t SAMPLE_PERIOD_ms = 5000;
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const uint8_t BREATH_CYCLE_UP_THRESH = 8;
	const uint8_t BREATH_CYCLE_DOWN_THRESH = 8;
		
	myUsart.sendString("sep=,\r\nTime [ms],O2 [%]\r\n");
    14ce:	6e ec       	ldi	r22, 0xCE	; 206
    14d0:	71 e2       	ldi	r23, 0x21	; 33
    14d2:	c4 01       	movw	r24, r8
    14d4:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
    14d8:	80 90 10 23 	lds	r8, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    14dc:	90 90 11 23 	lds	r9, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    14e0:	a0 90 12 23 	lds	r10, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    14e4:	b0 90 13 23 	lds	r11, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
    14e8:	40 90 10 23 	lds	r4, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    14ec:	50 90 11 23 	lds	r5, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    14f0:	60 90 12 23 	lds	r6, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    14f4:	70 90 13 23 	lds	r7, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
	uint8_t upCount = 0, downCount = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double sampleTimeFlag = myTimer.getTime_ms();
	Ms5525dso::data_s last_flowData = myFlowSensor.read();
    14f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fc:	0e 94 b0 05 	call	0xb60	; 0xb60 <_ZN9Ms5525dso4readEv>
    1500:	29 87       	std	Y+9, r18	; 0x09
    1502:	3a 87       	std	Y+10, r19	; 0x0a
    1504:	4b 87       	std	Y+11, r20	; 0x0b
    1506:	5c 87       	std	Y+12, r21	; 0x0c
    1508:	6d 87       	std	Y+13, r22	; 0x0d
    150a:	7e 87       	std	Y+14, r23	; 0x0e
    150c:	8f 87       	std	Y+15, r24	; 0x0f
    150e:	98 8b       	std	Y+16, r25	; 0x10
    1510:	29 a3       	std	Y+33, r18	; 0x21
    1512:	3a a3       	std	Y+34, r19	; 0x22
    1514:	4b a3       	std	Y+35, r20	; 0x23
    1516:	5c a3       	std	Y+36, r21	; 0x24
	myPump.turnOn();
    1518:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    151c:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN4Pump6turnOnEv>
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const uint8_t BREATH_CYCLE_UP_THRESH = 8;
	const uint8_t BREATH_CYCLE_DOWN_THRESH = 8;
		
	myUsart.sendString("sep=,\r\nTime [ms],O2 [%]\r\n");
	uint8_t upCount = 0, downCount = 0;
    1520:	00 e0       	ldi	r16, 0x00	; 0
    1522:	10 e0       	ldi	r17, 0x00	; 0
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    1524:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <_ZN7UsartE07rxcFlagE>
	double outputTimeFlag = myTimer.getTime_ms();
	double sampleTimeFlag = myTimer.getTime_ms();
	Ms5525dso::data_s last_flowData = myFlowSensor.read();
	myPump.turnOn();
	while (!(myUsart.isRXC()))
    1528:	81 11       	cpse	r24, r1
    152a:	99 c0       	rjmp	.+306    	; 0x165e <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x1ea>
    152c:	c0 90 10 23 	lds	r12, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    1530:	d0 90 11 23 	lds	r13, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    1534:	e0 90 12 23 	lds	r14, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    1538:	f0 90 13 23 	lds	r15, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
	{
		double timeNow = myTimer.getTime_ms();
						
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    153c:	e9 8d       	ldd	r30, Y+25	; 0x19
    153e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1540:	81 81       	ldd	r24, Z+1	; 0x01
    1542:	a5 01       	movw	r20, r10
    1544:	94 01       	movw	r18, r8
    1546:	88 23       	and	r24, r24
    1548:	71 f0       	breq	.+28     	; 0x1566 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0xf2>
    154a:	c7 01       	movw	r24, r14
    154c:	b6 01       	movw	r22, r12
    154e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e4       	ldi	r19, 0x40	; 64
    1556:	4c e1       	ldi	r20, 0x1C	; 28
    1558:	55 e4       	ldi	r21, 0x45	; 69
    155a:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    155e:	18 16       	cp	r1, r24
    1560:	0c f4       	brge	.+2      	; 0x1564 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0xf0>
    1562:	96 c0       	rjmp	.+300    	; 0x1690 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x21c>
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x10c>
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    1566:	c7 01       	movw	r24, r14
    1568:	b6 01       	movw	r22, r12
    156a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e4       	ldi	r19, 0x40	; 64
    1572:	4c e1       	ldi	r20, 0x1C	; 28
    1574:	55 e4       	ldi	r21, 0x45	; 69
    1576:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    157a:	18 16       	cp	r1, r24
    157c:	0c f4       	brge	.+2      	; 0x1580 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x10c>
    157e:	8d c0       	rjmp	.+282    	; 0x169a <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x226>
			outputTimeFlag = timeNow;
			outputValve.open();
		}
		
		// Handle o2 sample
		if (timeNow - sampleTimeFlag > SAMPLE_PERIOD_ms) {
    1580:	a3 01       	movw	r20, r6
    1582:	92 01       	movw	r18, r4
    1584:	c7 01       	movw	r24, r14
    1586:	b6 01       	movw	r22, r12
    1588:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e4       	ldi	r19, 0x40	; 64
    1590:	4c e9       	ldi	r20, 0x9C	; 156
    1592:	55 e4       	ldi	r21, 0x45	; 69
    1594:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    1598:	18 16       	cp	r1, r24
    159a:	8c f5       	brge	.+98     	; 0x15fe <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x18a>
			sampleTimeFlag = timeNow;
			double o2_pct = o2_counts2pct(oversampleO2(OVERSAMPLE_COEFF, myAdc),gascal);
    159c:	6d a1       	ldd	r22, Y+37	; 0x25
    159e:	7e a1       	ldd	r23, Y+38	; 0x26
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	94 e0       	ldi	r25, 0x04	; 4
    15a4:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z12oversampleO2jR4Adca>
			snprintf(Utils::txBuf, TX_LEN, "%.3f,%.3f\r\n", timeNow, o2_pct);
    15a8:	29 89       	ldd	r18, Y+17	; 0x11
    15aa:	3a 89       	ldd	r19, Y+18	; 0x12
    15ac:	4b 89       	ldd	r20, Y+19	; 0x13
    15ae:	5c 89       	ldd	r21, Y+20	; 0x14
    15b0:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
    15b4:	2d 89       	ldd	r18, Y+21	; 0x15
    15b6:	3e 89       	ldd	r19, Y+22	; 0x16
    15b8:	4f 89       	ldd	r20, Y+23	; 0x17
    15ba:	58 8d       	ldd	r21, Y+24	; 0x18
    15bc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
    15c0:	9f 93       	push	r25
    15c2:	8f 93       	push	r24
    15c4:	7f 93       	push	r23
    15c6:	6f 93       	push	r22
    15c8:	ff 92       	push	r15
    15ca:	ef 92       	push	r14
    15cc:	df 92       	push	r13
    15ce:	cf 92       	push	r12
    15d0:	88 ee       	ldi	r24, 0xE8	; 232
    15d2:	91 e2       	ldi	r25, 0x21	; 33
    15d4:	9f 93       	push	r25
    15d6:	8f 93       	push	r24
    15d8:	1f 92       	push	r1
    15da:	f0 e4       	ldi	r31, 0x40	; 64
    15dc:	ff 93       	push	r31
    15de:	8a e1       	ldi	r24, 0x1A	; 26
    15e0:	93 e2       	ldi	r25, 0x23	; 35
    15e2:	9f 93       	push	r25
    15e4:	8f 93       	push	r24
    15e6:	0e 94 4a 18 	call	0x3094	; 0x3094 <snprintf>
			myUsart.sendString(Utils::txBuf);
    15ea:	6a e1       	ldi	r22, 0x1A	; 26
    15ec:	73 e2       	ldi	r23, 0x23	; 35
    15ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15f0:	98 a1       	ldd	r25, Y+32	; 0x20
    15f2:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	de bf       	out	0x3e, r29	; 62
			outputValve.open();
		}
		
		// Handle o2 sample
		if (timeNow - sampleTimeFlag > SAMPLE_PERIOD_ms) {
			sampleTimeFlag = timeNow;
    15fa:	26 01       	movw	r4, r12
    15fc:	37 01       	movw	r6, r14
			snprintf(Utils::txBuf, TX_LEN, "%.3f,%.3f\r\n", timeNow, o2_pct);
			myUsart.sendString(Utils::txBuf);
		}
		
		// Handle sample valve
		Ms5525dso::data_s flowData = myFlowSensor.read();
    15fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1602:	0e 94 b0 05 	call	0xb60	; 0xb60 <_ZN9Ms5525dso4readEv>
    1606:	29 83       	std	Y+1, r18	; 0x01
    1608:	3a 83       	std	Y+2, r19	; 0x02
    160a:	4b 83       	std	Y+3, r20	; 0x03
    160c:	5c 83       	std	Y+4, r21	; 0x04
    160e:	6d 83       	std	Y+5, r22	; 0x05
    1610:	7e 83       	std	Y+6, r23	; 0x06
    1612:	8f 83       	std	Y+7, r24	; 0x07
    1614:	98 87       	std	Y+8, r25	; 0x08
    1616:	f2 2e       	mov	r15, r18
    1618:	e3 2e       	mov	r14, r19
    161a:	d4 2e       	mov	r13, r20
    161c:	c5 2e       	mov	r12, r21
		if (flowData.pressure > last_flowData.pressure) {
    161e:	29 a1       	ldd	r18, Y+33	; 0x21
    1620:	3a a1       	ldd	r19, Y+34	; 0x22
    1622:	4b a1       	ldd	r20, Y+35	; 0x23
    1624:	5c a1       	ldd	r21, Y+36	; 0x24
    1626:	6f 2d       	mov	r22, r15
    1628:	7e 2d       	mov	r23, r14
    162a:	8d 2d       	mov	r24, r13
    162c:	9c 2d       	mov	r25, r12
    162e:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    1632:	f1 01       	movw	r30, r2
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	18 16       	cp	r1, r24
    1638:	4c f4       	brge	.+18     	; 0x164c <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x1d8>
			downCount = 0;
			if (!(sampleValve.isOpen()) && ++upCount > BREATH_CYCLE_UP_THRESH) sampleValve.open();
    163a:	91 11       	cpse	r25, r1
    163c:	35 c0       	rjmp	.+106    	; 0x16a8 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x234>
    163e:	1f 5f       	subi	r17, 0xFF	; 255
    1640:	19 30       	cpi	r17, 0x09	; 9
    1642:	90 f1       	brcs	.+100    	; 0x16a8 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x234>
    1644:	c1 01       	movw	r24, r2
    1646:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_ZN5Valve4openEv>
    164a:	2e c0       	rjmp	.+92     	; 0x16a8 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x234>
		} else {
			upCount = 0;
			if (sampleValve.isOpen() && ++downCount > BREATH_CYCLE_DOWN_THRESH) sampleValve.close();
    164c:	99 23       	and	r25, r25
    164e:	91 f1       	breq	.+100    	; 0x16b4 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x240>
    1650:	0f 5f       	subi	r16, 0xFF	; 255
    1652:	09 30       	cpi	r16, 0x09	; 9
    1654:	78 f1       	brcs	.+94     	; 0x16b4 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x240>
    1656:	c1 01       	movw	r24, r2
    1658:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
    165c:	2b c0       	rjmp	.+86     	; 0x16b4 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x240>
		}
		last_flowData = flowData;
	}
	myPump.turnOff();
    165e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1660:	9e 8d       	ldd	r25, Y+30	; 0x1e
}
    1662:	a6 96       	adiw	r28, 0x26	; 38
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	3f 90       	pop	r3
    168a:	2f 90       	pop	r2
			upCount = 0;
			if (sampleValve.isOpen() && ++downCount > BREATH_CYCLE_DOWN_THRESH) sampleValve.close();
		}
		last_flowData = flowData;
	}
	myPump.turnOff();
    168c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_ZN4Pump7turnOffEv>
		double timeNow = myTimer.getTime_ms();
						
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
    1690:	89 8d       	ldd	r24, Y+25	; 0x19
    1692:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1694:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x22e>
		} else if (!outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.open();
    169a:	89 8d       	ldd	r24, Y+25	; 0x19
    169c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    169e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
    16a2:	46 01       	movw	r8, r12
    16a4:	57 01       	movw	r10, r14
    16a6:	6c cf       	rjmp	.-296    	; 0x1580 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x10c>
		}
		
		// Handle sample valve
		Ms5525dso::data_s flowData = myFlowSensor.read();
		if (flowData.pressure > last_flowData.pressure) {
			downCount = 0;
    16a8:	00 e0       	ldi	r16, 0x00	; 0
			if (!(sampleValve.isOpen()) && ++upCount > BREATH_CYCLE_UP_THRESH) sampleValve.open();
		} else {
			upCount = 0;
			if (sampleValve.isOpen() && ++downCount > BREATH_CYCLE_DOWN_THRESH) sampleValve.close();
		}
		last_flowData = flowData;
    16aa:	f9 a2       	std	Y+33, r15	; 0x21
    16ac:	ea a2       	std	Y+34, r14	; 0x22
    16ae:	db a2       	std	Y+35, r13	; 0x23
    16b0:	cc a2       	std	Y+36, r12	; 0x24
	uint8_t upCount = 0, downCount = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double sampleTimeFlag = myTimer.getTime_ms();
	Ms5525dso::data_s last_flowData = myFlowSensor.read();
	myPump.turnOn();
	while (!(myUsart.isRXC()))
    16b2:	38 cf       	rjmp	.-400    	; 0x1524 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0xb0>
		Ms5525dso::data_s flowData = myFlowSensor.read();
		if (flowData.pressure > last_flowData.pressure) {
			downCount = 0;
			if (!(sampleValve.isOpen()) && ++upCount > BREATH_CYCLE_UP_THRESH) sampleValve.open();
		} else {
			upCount = 0;
    16b4:	10 e0       	ldi	r17, 0x00	; 0
    16b6:	f9 cf       	rjmp	.-14     	; 0x16aa <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_+0x236>

000016b8 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>:
	Tcc0 & myTimer,
	UsartE0 & myUsart,
	Valve & sampleValve,
	Valve & gascalValve,
	Valve & outputValve)
{
    16b8:	2f 92       	push	r2
    16ba:	3f 92       	push	r3
    16bc:	4f 92       	push	r4
    16be:	5f 92       	push	r5
    16c0:	6f 92       	push	r6
    16c2:	7f 92       	push	r7
    16c4:	8f 92       	push	r8
    16c6:	9f 92       	push	r9
    16c8:	af 92       	push	r10
    16ca:	bf 92       	push	r11
    16cc:	cf 92       	push	r12
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	69 97       	sbiw	r28, 0x19	; 25
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	8c 8b       	std	Y+20, r24	; 0x14
    16e8:	9d 8b       	std	Y+21, r25	; 0x15
    16ea:	6e 8b       	std	Y+22, r22	; 0x16
    16ec:	7f 8b       	std	Y+23, r23	; 0x17
    16ee:	28 8f       	std	Y+24, r18	; 0x18
    16f0:	39 8f       	std	Y+25, r19	; 0x19
    16f2:	17 01       	movw	r2, r14
    16f4:	c9 86       	std	Y+9, r12	; 0x09
    16f6:	da 86       	std	Y+10, r13	; 0x0a
    16f8:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    16fc:	90 91 11 23 	lds	r25, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    1700:	a0 91 12 23 	lds	r26, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    1704:	b0 91 13 23 	lds	r27, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
    1708:	8b 87       	std	Y+11, r24	; 0x0b
    170a:	9c 87       	std	Y+12, r25	; 0x0c
    170c:	ad 87       	std	Y+13, r26	; 0x0d
    170e:	be 87       	std	Y+14, r27	; 0x0e
    1710:	40 90 10 23 	lds	r4, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    1714:	50 90 11 23 	lds	r5, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    1718:	60 90 12 23 	lds	r6, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    171c:	70 90 13 23 	lds	r7, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0, avgGascal = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double targetTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
    1720:	cb 01       	movw	r24, r22
    1722:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN4Pump6turnOnEv>
	sampleValve.open();
    1726:	c8 01       	movw	r24, r16
    1728:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_ZN5Valve4openEv>
	gascalValve.close();
    172c:	c7 01       	movw	r24, r14
    172e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
	outputValve.close();
    1732:	89 85       	ldd	r24, Y+9	; 0x09
    1734:	9a 85       	ldd	r25, Y+10	; 0x0a
    1736:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
	uint8_t i = 0;
    173a:	1f 86       	std	Y+15, r1	; 0x0f
	const uint16_t GASCAL_OPEN_DURATION_ms = 15000;
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const double GASCAL_PCT = 17;
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0, avgGascal = 0;
    173c:	18 8a       	std	Y+16, r1	; 0x10
    173e:	19 8a       	std	Y+17, r1	; 0x11
    1740:	1a 8a       	std	Y+18, r1	; 0x12
    1742:	1b 8a       	std	Y+19, r1	; 0x13
    1744:	81 2c       	mov	r8, r1
    1746:	91 2c       	mov	r9, r1
    1748:	54 01       	movw	r10, r8
    174a:	c0 90 10 23 	lds	r12, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    174e:	d0 90 11 23 	lds	r13, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    1752:	e0 90 12 23 	lds	r14, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    1756:	f0 90 13 23 	lds	r15, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    175a:	a9 85       	ldd	r26, Y+9	; 0x09
    175c:	ba 85       	ldd	r27, Y+10	; 0x0a
    175e:	11 96       	adiw	r26, 0x01	; 1
    1760:	8c 91       	ld	r24, X
    1762:	2b 85       	ldd	r18, Y+11	; 0x0b
    1764:	3c 85       	ldd	r19, Y+12	; 0x0c
    1766:	4d 85       	ldd	r20, Y+13	; 0x0d
    1768:	5e 85       	ldd	r21, Y+14	; 0x0e
    176a:	88 23       	and	r24, r24
    176c:	69 f0       	breq	.+26     	; 0x1788 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xd0>
    176e:	c7 01       	movw	r24, r14
    1770:	b6 01       	movw	r22, r12
    1772:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e4       	ldi	r19, 0x40	; 64
    177a:	4c e1       	ldi	r20, 0x1C	; 28
    177c:	55 e4       	ldi	r21, 0x45	; 69
    177e:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    1782:	18 16       	cp	r1, r24
    1784:	c4 f1       	brlt	.+112    	; 0x17f6 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x13e>
    1786:	0c c0       	rjmp	.+24     	; 0x17a0 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xe8>
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!(outputValve.isOpen()) && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    1788:	c7 01       	movw	r24, r14
    178a:	b6 01       	movw	r22, r12
    178c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e4       	ldi	r19, 0x40	; 64
    1794:	4c e1       	ldi	r20, 0x1C	; 28
    1796:	55 e4       	ldi	r21, 0x45	; 69
    1798:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    179c:	18 16       	cp	r1, r24
    179e:	84 f1       	brlt	.+96     	; 0x1800 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x148>
			outputTimeFlag = timeNow;
			outputValve.open();
		}
		
		// Handle sample and gascal valve
		if (sampleValve.isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
    17a0:	f8 01       	movw	r30, r16
    17a2:	81 81       	ldd	r24, Z+1	; 0x01
    17a4:	88 23       	and	r24, r24
    17a6:	a9 f1       	breq	.+106    	; 0x1812 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x15a>
    17a8:	a3 01       	movw	r20, r6
    17aa:	92 01       	movw	r18, r4
    17ac:	c7 01       	movw	r24, r14
    17ae:	b6 01       	movw	r22, r12
    17b0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e6       	ldi	r19, 0x60	; 96
    17b8:	4a e6       	ldi	r20, 0x6A	; 106
    17ba:	56 e4       	ldi	r21, 0x46	; 70
    17bc:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	3c f5       	brge	.+78     	; 0x1812 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x15a>
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
    17c4:	6c 89       	ldd	r22, Y+20	; 0x14
    17c6:	7d 89       	ldd	r23, Y+21	; 0x15
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	94 e0       	ldi	r25, 0x04	; 4
    17cc:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z12oversampleO2jR4Adca>
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	5e e3       	ldi	r21, 0x3E	; 62
    17d8:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
    17dc:	9b 01       	movw	r18, r22
    17de:	ac 01       	movw	r20, r24
    17e0:	c5 01       	movw	r24, r10
    17e2:	b4 01       	movw	r22, r8
    17e4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
    17e8:	4b 01       	movw	r8, r22
    17ea:	5c 01       	movw	r10, r24
			sampleValve.close();
    17ec:	c8 01       	movw	r24, r16
    17ee:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
			gascalValve.open();
    17f2:	c1 01       	movw	r24, r2
    17f4:	c2 c0       	rjmp	.+388    	; 0x197a <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x2c2>
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x150>
		} else if (!(outputValve.isOpen()) && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.open();
    1800:	89 85       	ldd	r24, Y+9	; 0x09
    1802:	9a 85       	ldd	r25, Y+10	; 0x0a
    1804:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!(outputValve.isOpen()) && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
    1808:	cb 86       	std	Y+11, r12	; 0x0b
    180a:	dc 86       	std	Y+12, r13	; 0x0c
    180c:	ed 86       	std	Y+13, r14	; 0x0d
    180e:	fe 86       	std	Y+14, r15	; 0x0e
    1810:	c7 cf       	rjmp	.-114    	; 0x17a0 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xe8>
		if (sampleValve.isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			sampleValve.close();
			gascalValve.open();
		} else if (gascalValve.isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    1812:	f1 01       	movw	r30, r2
    1814:	81 81       	ldd	r24, Z+1	; 0x01
    1816:	81 11       	cpse	r24, r1
    1818:	82 c0       	rjmp	.+260    	; 0x191e <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x266>
	myPump.turnOn();
	sampleValve.open();
	gascalValve.close();
	outputValve.close();
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    181a:	9f 85       	ldd	r25, Y+15	; 0x0f
    181c:	98 30       	cpi	r25, 0x08	; 8
    181e:	09 f0       	breq	.+2      	; 0x1822 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x16a>
    1820:	94 cf       	rjmp	.-216    	; 0x174a <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x92>
			i++;
			gascalValve.close();
			sampleValve.open();
		}
	}
	myPump.turnOff();
    1822:	8e 89       	ldd	r24, Y+22	; 0x16
    1824:	9f 89       	ldd	r25, Y+23	; 0x17
    1826:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN4Pump7turnOffEv>
	sampleValve.close();
    182a:	c8 01       	movw	r24, r16
    182c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
	gascalValve.close();
    1830:	c1 01       	movw	r24, r2
    1832:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
	outputValve.close();
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>

	// Output gascal coefficients
	Utils::gascal_s result;
	result.gain = (SAMPLE_PCT - GASCAL_PCT)/(avgSample-avgGascal);
    183e:	28 89       	ldd	r18, Y+16	; 0x10
    1840:	39 89       	ldd	r19, Y+17	; 0x11
    1842:	4a 89       	ldd	r20, Y+18	; 0x12
    1844:	5b 89       	ldd	r21, Y+19	; 0x13
    1846:	c5 01       	movw	r24, r10
    1848:	b4 01       	movw	r22, r8
    184a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    184e:	9b 01       	movw	r18, r22
    1850:	ac 01       	movw	r20, r24
    1852:	68 e7       	ldi	r22, 0x78	; 120
    1854:	74 e1       	ldi	r23, 0x14	; 20
    1856:	8e e7       	ldi	r24, 0x7E	; 126
    1858:	90 e4       	ldi	r25, 0x40	; 64
    185a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3>
    185e:	7b 01       	movw	r14, r22
    1860:	8c 01       	movw	r16, r24
	result.offset = SAMPLE_PCT - result.gain*avgSample;
    1862:	76 2f       	mov	r23, r22
    1864:	27 2f       	mov	r18, r23
    1866:	3f 2d       	mov	r19, r15
    1868:	40 2f       	mov	r20, r16
    186a:	51 2f       	mov	r21, r17
    186c:	c5 01       	movw	r24, r10
    186e:	b4 01       	movw	r22, r8
    1870:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
    1874:	9b 01       	movw	r18, r22
    1876:	ac 01       	movw	r20, r24
    1878:	6f e8       	ldi	r22, 0x8F	; 143
    187a:	72 ec       	ldi	r23, 0xC2	; 194
    187c:	87 ea       	ldi	r24, 0xA7	; 167
    187e:	91 e4       	ldi	r25, 0x41	; 65
    1880:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1884:	5b 01       	movw	r10, r22
    1886:	6c 01       	movw	r12, r24
	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f Offset: %.3f\r\n", result.gain, result.offset);
    1888:	df 92       	push	r13
    188a:	8f 93       	push	r24
    188c:	bf 92       	push	r11
    188e:	6f 93       	push	r22
    1890:	1f 93       	push	r17
    1892:	0f 93       	push	r16
    1894:	ff 92       	push	r15
    1896:	ef 92       	push	r14
    1898:	84 ef       	ldi	r24, 0xF4	; 244
    189a:	91 e2       	ldi	r25, 0x21	; 33
    189c:	9f 93       	push	r25
    189e:	8f 93       	push	r24
    18a0:	1f 92       	push	r1
    18a2:	80 e4       	ldi	r24, 0x40	; 64
    18a4:	8f 93       	push	r24
    18a6:	8a e1       	ldi	r24, 0x1A	; 26
    18a8:	93 e2       	ldi	r25, 0x23	; 35
    18aa:	9f 93       	push	r25
    18ac:	8f 93       	push	r24
    18ae:	0e 94 4a 18 	call	0x3094	; 0x3094 <snprintf>
	myUsart.sendString(Utils::txBuf);
    18b2:	6a e1       	ldi	r22, 0x1A	; 26
    18b4:	73 e2       	ldi	r23, 0x23	; 35
    18b6:	88 8d       	ldd	r24, Y+24	; 0x18
    18b8:	99 8d       	ldd	r25, Y+25	; 0x19
    18ba:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	return result;
    18be:	2e 2d       	mov	r18, r14
    18c0:	8e 2d       	mov	r24, r14
    18c2:	9f 2d       	mov	r25, r15
    18c4:	a0 2f       	mov	r26, r16
    18c6:	b1 2f       	mov	r27, r17
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	ab 83       	std	Y+3, r26	; 0x03
    18ce:	bc 83       	std	Y+4, r27	; 0x04
    18d0:	6a 2d       	mov	r22, r10
    18d2:	8a 2d       	mov	r24, r10
    18d4:	9b 2d       	mov	r25, r11
    18d6:	ac 2d       	mov	r26, r12
    18d8:	bd 2d       	mov	r27, r13
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	9e 83       	std	Y+6, r25	; 0x06
    18de:	af 83       	std	Y+7, r26	; 0x07
    18e0:	b8 87       	std	Y+8, r27	; 0x08
    18e2:	3a 81       	ldd	r19, Y+2	; 0x02
    18e4:	4b 81       	ldd	r20, Y+3	; 0x03
    18e6:	5c 81       	ldd	r21, Y+4	; 0x04
    18e8:	7e 81       	ldd	r23, Y+6	; 0x06
    18ea:	8f 81       	ldd	r24, Y+7	; 0x07
    18ec:	98 85       	ldd	r25, Y+8	; 0x08
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	de bf       	out	0x3e, r29	; 62
}
    18f2:	69 96       	adiw	r28, 0x19	; 25
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	7f 90       	pop	r7
    1912:	6f 90       	pop	r6
    1914:	5f 90       	pop	r5
    1916:	4f 90       	pop	r4
    1918:	3f 90       	pop	r3
    191a:	2f 90       	pop	r2
    191c:	08 95       	ret
		if (sampleValve.isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			sampleValve.close();
			gascalValve.open();
		} else if (gascalValve.isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    191e:	a3 01       	movw	r20, r6
    1920:	92 01       	movw	r18, r4
    1922:	c7 01       	movw	r24, r14
    1924:	b6 01       	movw	r22, r12
    1926:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e6       	ldi	r19, 0x60	; 96
    192e:	4a e6       	ldi	r20, 0x6A	; 106
    1930:	56 e4       	ldi	r21, 0x46	; 70
    1932:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    1936:	18 16       	cp	r1, r24
    1938:	0c f0       	brlt	.+2      	; 0x193c <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x284>
    193a:	6f cf       	rjmp	.-290    	; 0x181a <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x162>
			targetTimeFlag = timeNow;
			avgGascal += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
    193c:	6c 89       	ldd	r22, Y+20	; 0x14
    193e:	7d 89       	ldd	r23, Y+21	; 0x15
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z12oversampleO2jR4Adca>
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	5e e3       	ldi	r21, 0x3E	; 62
    1950:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	68 89       	ldd	r22, Y+16	; 0x10
    195a:	79 89       	ldd	r23, Y+17	; 0x11
    195c:	8a 89       	ldd	r24, Y+18	; 0x12
    195e:	9b 89       	ldd	r25, Y+19	; 0x13
    1960:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
    1964:	68 8b       	std	Y+16, r22	; 0x10
    1966:	79 8b       	std	Y+17, r23	; 0x11
    1968:	8a 8b       	std	Y+18, r24	; 0x12
    196a:	9b 8b       	std	Y+19, r25	; 0x13
			i++;
    196c:	ff 85       	ldd	r31, Y+15	; 0x0f
    196e:	ff 5f       	subi	r31, 0xFF	; 255
    1970:	ff 87       	std	Y+15, r31	; 0x0f
			gascalValve.close();
    1972:	c1 01       	movw	r24, r2
    1974:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
			sampleValve.open();
    1978:	c8 01       	movw	r24, r16
    197a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_ZN5Valve4openEv>
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			sampleValve.close();
			gascalValve.open();
		} else if (gascalValve.isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
			targetTimeFlag = timeNow;
    197e:	26 01       	movw	r4, r12
    1980:	37 01       	movw	r6, r14
    1982:	4b cf       	rjmp	.-362    	; 0x181a <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x162>

00001984 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>:
	Tcc0 & myTimer,
	UsartE0 & myUsart,
	Valve & sampleValve,
	Valve & gascalValve,
	Valve & outputValve)
{
    1984:	2f 92       	push	r2
    1986:	3f 92       	push	r3
    1988:	4f 92       	push	r4
    198a:	5f 92       	push	r5
    198c:	6f 92       	push	r6
    198e:	7f 92       	push	r7
    1990:	8f 92       	push	r8
    1992:	9f 92       	push	r9
    1994:	af 92       	push	r10
    1996:	bf 92       	push	r11
    1998:	cf 92       	push	r12
    199a:	df 92       	push	r13
    199c:	ef 92       	push	r14
    199e:	ff 92       	push	r15
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	67 97       	sbiw	r28, 0x17	; 23
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	6c 8b       	std	Y+20, r22	; 0x14
    19b4:	7d 8b       	std	Y+21, r23	; 0x15
    19b6:	8e 8b       	std	Y+22, r24	; 0x16
    19b8:	9f 8b       	std	Y+23, r25	; 0x17
    19ba:	1a 01       	movw	r2, r20
    19bc:	89 01       	movw	r16, r18
    19be:	ea 8a       	std	Y+18, r14	; 0x12
    19c0:	fb 8a       	std	Y+19, r15	; 0x13
    19c2:	56 01       	movw	r10, r12
    19c4:	40 90 10 23 	lds	r4, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    19c8:	50 90 11 23 	lds	r5, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    19cc:	60 90 12 23 	lds	r6, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    19d0:	70 90 13 23 	lds	r7, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
    19d4:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    19d8:	90 91 11 23 	lds	r25, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    19dc:	a0 91 12 23 	lds	r26, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    19e0:	b0 91 13 23 	lds	r27, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
    19e4:	8e 87       	std	Y+14, r24	; 0x0e
    19e6:	9f 87       	std	Y+15, r25	; 0x0f
    19e8:	a8 8b       	std	Y+16, r26	; 0x10
    19ea:	b9 8b       	std	Y+17, r27	; 0x11
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0;
	double outputTimeFlag = myTimer.getTime_ms();
	double targetTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
    19ec:	c9 01       	movw	r24, r18
    19ee:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN4Pump6turnOnEv>
	sampleValve.open();
    19f2:	c6 01       	movw	r24, r12
    19f4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_ZN5Valve4openEv>
	outputValve.close();
    19f8:	c4 01       	movw	r24, r8
    19fa:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
	uint8_t i = 0;
    19fe:	19 86       	std	Y+9, r1	; 0x09
	const uint16_t OUTPUT_CLOSE_DURATION_ms = 2500;
	const uint16_t SAMPLE_PERIOD_ms = 15000;
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0;
    1a00:	1a 86       	std	Y+10, r1	; 0x0a
    1a02:	1b 86       	std	Y+11, r1	; 0x0b
    1a04:	1c 86       	std	Y+12, r1	; 0x0c
    1a06:	1d 86       	std	Y+13, r1	; 0x0d
    1a08:	c0 90 10 23 	lds	r12, 0x2310	; 0x802310 <_ZN4Tcc07time_msE>
    1a0c:	d0 90 11 23 	lds	r13, 0x2311	; 0x802311 <_ZN4Tcc07time_msE+0x1>
    1a10:	e0 90 12 23 	lds	r14, 0x2312	; 0x802312 <_ZN4Tcc07time_msE+0x2>
    1a14:	f0 90 13 23 	lds	r15, 0x2313	; 0x802313 <_ZN4Tcc07time_msE+0x3>
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    1a18:	d4 01       	movw	r26, r8
    1a1a:	11 96       	adiw	r26, 0x01	; 1
    1a1c:	8c 91       	ld	r24, X
    1a1e:	a3 01       	movw	r20, r6
    1a20:	92 01       	movw	r18, r4
    1a22:	88 23       	and	r24, r24
    1a24:	71 f0       	breq	.+28     	; 0x1a42 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xbe>
    1a26:	c7 01       	movw	r24, r14
    1a28:	b6 01       	movw	r22, r12
    1a2a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e4       	ldi	r19, 0x40	; 64
    1a32:	4c e1       	ldi	r20, 0x1C	; 28
    1a34:	55 e4       	ldi	r21, 0x45	; 69
    1a36:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	0c f4       	brge	.+2      	; 0x1a40 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xbc>
    1a3e:	ac c0       	rjmp	.+344    	; 0x1b98 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x214>
    1a40:	0d c0       	rjmp	.+26     	; 0x1a5c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xd8>
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!(outputValve.isOpen()) && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    1a42:	c7 01       	movw	r24, r14
    1a44:	b6 01       	movw	r22, r12
    1a46:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e4       	ldi	r19, 0x40	; 64
    1a4e:	4c e1       	ldi	r20, 0x1C	; 28
    1a50:	55 e4       	ldi	r21, 0x45	; 69
    1a52:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	0c f4       	brge	.+2      	; 0x1a5c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xd8>
    1a5a:	a2 c0       	rjmp	.+324    	; 0x1ba0 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x21c>
			outputTimeFlag = timeNow;
			outputValve.open();
		}
		
		// Handle sample and gascal valve
		if (timeNow - targetTimeFlag > SAMPLE_PERIOD_ms) {
    1a5c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a5e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a60:	48 89       	ldd	r20, Y+16	; 0x10
    1a62:	59 89       	ldd	r21, Y+17	; 0x11
    1a64:	c7 01       	movw	r24, r14
    1a66:	b6 01       	movw	r22, r12
    1a68:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e6       	ldi	r19, 0x60	; 96
    1a70:	4a e6       	ldi	r20, 0x6A	; 106
    1a72:	56 e4       	ldi	r21, 0x46	; 70
    1a74:	0e 94 89 11 	call	0x2312	; 0x2312 <__gesf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	0c f4       	brge	.+2      	; 0x1a7e <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xfa>
    1a7c:	6e c0       	rjmp	.+220    	; 0x1b5a <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x1d6>
	double targetTimeFlag = myTimer.getTime_ms();
	myPump.turnOn();
	sampleValve.open();
	outputValve.close();
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    1a7e:	99 85       	ldd	r25, Y+9	; 0x09
    1a80:	98 30       	cpi	r25, 0x08	; 8
    1a82:	08 f4       	brcc	.+2      	; 0x1a86 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x102>
    1a84:	c1 cf       	rjmp	.-126    	; 0x1a08 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x84>
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
			i++;
		}
	}
	myPump.turnOff();
    1a86:	c8 01       	movw	r24, r16
    1a88:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN4Pump7turnOffEv>
	sampleValve.close();
    1a8c:	c5 01       	movw	r24, r10
    1a8e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
	outputValve.close();
    1a92:	c4 01       	movw	r24, r8
    1a94:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>

	// Output aircal coefficients
	Utils::gascal_s result;
	result.gain = gascal_gain;
	result.offset = SAMPLE_PCT - result.gain*avgSample;
    1a98:	cc 88       	ldd	r12, Y+20	; 0x14
    1a9a:	dd 88       	ldd	r13, Y+21	; 0x15
    1a9c:	ee 88       	ldd	r14, Y+22	; 0x16
    1a9e:	ff 88       	ldd	r15, Y+23	; 0x17
    1aa0:	96 01       	movw	r18, r12
    1aa2:	a7 01       	movw	r20, r14
    1aa4:	6a 85       	ldd	r22, Y+10	; 0x0a
    1aa6:	7b 85       	ldd	r23, Y+11	; 0x0b
    1aa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aac:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	6f e8       	ldi	r22, 0x8F	; 143
    1ab6:	72 ec       	ldi	r23, 0xC2	; 194
    1ab8:	87 ea       	ldi	r24, 0xA7	; 167
    1aba:	91 e4       	ldi	r25, 0x41	; 65
    1abc:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__subsf3>
    1ac0:	5b 01       	movw	r10, r22
    1ac2:	8c 01       	movw	r16, r24
	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f Offset: %.3f\r\n", result.gain, result.offset);
    1ac4:	1f 93       	push	r17
    1ac6:	8f 93       	push	r24
    1ac8:	bf 92       	push	r11
    1aca:	6f 93       	push	r22
    1acc:	ff 92       	push	r15
    1ace:	ef 92       	push	r14
    1ad0:	df 92       	push	r13
    1ad2:	cf 92       	push	r12
    1ad4:	84 ef       	ldi	r24, 0xF4	; 244
    1ad6:	91 e2       	ldi	r25, 0x21	; 33
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	1f 92       	push	r1
    1ade:	80 e4       	ldi	r24, 0x40	; 64
    1ae0:	8f 93       	push	r24
    1ae2:	8a e1       	ldi	r24, 0x1A	; 26
    1ae4:	93 e2       	ldi	r25, 0x23	; 35
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	0e 94 4a 18 	call	0x3094	; 0x3094 <snprintf>
	myUsart.sendString(Utils::txBuf);
    1aee:	6a e1       	ldi	r22, 0x1A	; 26
    1af0:	73 e2       	ldi	r23, 0x23	; 35
    1af2:	8a 89       	ldd	r24, Y+18	; 0x12
    1af4:	9b 89       	ldd	r25, Y+19	; 0x13
    1af6:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	return result;
    1afa:	2c 2d       	mov	r18, r12
    1afc:	8c 2d       	mov	r24, r12
    1afe:	9d 2d       	mov	r25, r13
    1b00:	ae 2d       	mov	r26, r14
    1b02:	bf 2d       	mov	r27, r15
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	ab 83       	std	Y+3, r26	; 0x03
    1b0a:	bc 83       	std	Y+4, r27	; 0x04
    1b0c:	6a 2d       	mov	r22, r10
    1b0e:	8a 2d       	mov	r24, r10
    1b10:	9b 2d       	mov	r25, r11
    1b12:	a0 2f       	mov	r26, r16
    1b14:	b1 2f       	mov	r27, r17
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	af 83       	std	Y+7, r26	; 0x07
    1b1c:	b8 87       	std	Y+8, r27	; 0x08
    1b1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b20:	4b 81       	ldd	r20, Y+3	; 0x03
    1b22:	5c 81       	ldd	r21, Y+4	; 0x04
    1b24:	7e 81       	ldd	r23, Y+6	; 0x06
    1b26:	8f 81       	ldd	r24, Y+7	; 0x07
    1b28:	98 85       	ldd	r25, Y+8	; 0x08
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	de bf       	out	0x3e, r29	; 62
}
    1b2e:	67 96       	adiw	r28, 0x17	; 23
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	bf 90       	pop	r11
    1b46:	af 90       	pop	r10
    1b48:	9f 90       	pop	r9
    1b4a:	8f 90       	pop	r8
    1b4c:	7f 90       	pop	r7
    1b4e:	6f 90       	pop	r6
    1b50:	5f 90       	pop	r5
    1b52:	4f 90       	pop	r4
    1b54:	3f 90       	pop	r3
    1b56:	2f 90       	pop	r2
    1b58:	08 95       	ret
		}
		
		// Handle sample and gascal valve
		if (timeNow - targetTimeFlag > SAMPLE_PERIOD_ms) {
			targetTimeFlag = timeNow;
			avgSample += oversampleO2(OVERSAMPLE_COEFF, myAdc)/NUMBER_OF_REPETITIONS;
    1b5a:	b1 01       	movw	r22, r2
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	94 e0       	ldi	r25, 0x04	; 4
    1b60:	0e 94 88 09 	call	0x1310	; 0x1310 <_Z12oversampleO2jR4Adca>
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	5e e3       	ldi	r21, 0x3E	; 62
    1b6c:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
    1b70:	9b 01       	movw	r18, r22
    1b72:	ac 01       	movw	r20, r24
    1b74:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b76:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b78:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b7a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b7c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
    1b80:	6a 87       	std	Y+10, r22	; 0x0a
    1b82:	7b 87       	std	Y+11, r23	; 0x0b
    1b84:	8c 87       	std	Y+12, r24	; 0x0c
    1b86:	9d 87       	std	Y+13, r25	; 0x0d
			i++;
    1b88:	b9 85       	ldd	r27, Y+9	; 0x09
    1b8a:	bf 5f       	subi	r27, 0xFF	; 255
    1b8c:	b9 87       	std	Y+9, r27	; 0x09
			outputValve.open();
		}
		
		// Handle sample and gascal valve
		if (timeNow - targetTimeFlag > SAMPLE_PERIOD_ms) {
			targetTimeFlag = timeNow;
    1b8e:	ce 86       	std	Y+14, r12	; 0x0e
    1b90:	df 86       	std	Y+15, r13	; 0x0f
    1b92:	e8 8a       	std	Y+16, r14	; 0x10
    1b94:	f9 8a       	std	Y+17, r15	; 0x11
    1b96:	73 cf       	rjmp	.-282    	; 0x1a7e <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xfa>
		double timeNow = myTimer.getTime_ms();

		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
    1b98:	c4 01       	movw	r24, r8
    1b9a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Valve5closeEv>
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0x222>
		} else if (!(outputValve.isOpen()) && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.open();
    1ba0:	c4 01       	movw	r24, r8
    1ba2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve.isOpen() && timeNow - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow;
			outputValve.close();
		} else if (!(outputValve.isOpen()) && timeNow - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow;
    1ba6:	26 01       	movw	r4, r12
    1ba8:	37 01       	movw	r6, r14
    1baa:	58 cf       	rjmp	.-336    	; 0x1a5c <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_+0xd8>

00001bac <main>:
//============//
//=== MAIN ===//
//============//

int main(void)
{
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	c6 59       	subi	r28, 0x96	; 150
    1bb6:	d1 09       	sbc	r29, r1
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	de bf       	out	0x3e, r29	; 62
	Utils::setSystemClock(Utils::SC_32M); // 32MHz internal oscillator
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN5Utils14setSystemClockENS_13systemClock_eE>

	UsartE0 myUsart0(Usart::BAUD_115k2, Utils::IL_MEDIUM);
    1bc2:	40 91 fb 22 	lds	r20, 0x22FB	; 0x8022fb <_ZN5Usart10BAUD_115k2E>
    1bc6:	50 91 fc 22 	lds	r21, 0x22FC	; 0x8022fc <_ZN5Usart10BAUD_115k2E+0x1>
    1bca:	60 91 fd 22 	lds	r22, 0x22FD	; 0x8022fd <_ZN5Usart10BAUD_115k2E+0x2>
    1bce:	70 91 fe 22 	lds	r23, 0x22FE	; 0x8022fe <_ZN5Usart10BAUD_115k2E+0x3>
    1bd2:	22 e0       	ldi	r18, 0x02	; 2
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	83 5a       	subi	r24, 0xA3	; 163
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	0e 94 17 09 	call	0x122e	; 0x122e <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>
	myUsart0.sendString("\r\n");
    1bde:	60 eb       	ldi	r22, 0xB0	; 176
    1be0:	70 e2       	ldi	r23, 0x20	; 32
    1be2:	ce 01       	movw	r24, r28
    1be4:	83 5a       	subi	r24, 0xA3	; 163
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	myUsart0.sendString("+-------------------------------+\r\n");
    1bec:	6e e0       	ldi	r22, 0x0E	; 14
    1bee:	72 e2       	ldi	r23, 0x22	; 34
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	83 5a       	subi	r24, 0xA3	; 163
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	myUsart0.sendString("| Hello World! This is USARTE0! |\r\n");
    1bfa:	62 e3       	ldi	r22, 0x32	; 50
    1bfc:	72 e2       	ldi	r23, 0x22	; 34
    1bfe:	ce 01       	movw	r24, r28
    1c00:	83 5a       	subi	r24, 0xA3	; 163
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	myUsart0.sendString("+-------------------------------+\r\n");
    1c08:	6e e0       	ldi	r22, 0x0E	; 14
    1c0a:	72 e2       	ldi	r23, 0x22	; 34
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	83 5a       	subi	r24, 0xA3	; 163
    1c10:	9f 4f       	sbci	r25, 0xFF	; 255
    1c12:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	myUsart0.sendString("Enabling Interrupts... ");
    1c16:	66 e5       	ldi	r22, 0x56	; 86
    1c18:	72 e2       	ldi	r23, 0x22	; 34
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	83 5a       	subi	r24, 0xA3	; 163
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	Utils::enableInterruptLevel(Utils::IL_MEDIUM);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::enableInterruptLevel(Utils::IL_HIGH);
    1c2a:	83 e0       	ldi	r24, 0x03	; 3
    1c2c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::globalInterruptEnable();
    1c30:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN5Utils21globalInterruptEnableEv>
	myUsart0.sendString("DONE!\r\n");
    1c34:	6b ea       	ldi	r22, 0xAB	; 171
    1c36:	70 e2       	ldi	r23, 0x20	; 32
    1c38:	ce 01       	movw	r24, r28
    1c3a:	83 5a       	subi	r24, 0xA3	; 163
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	myUsart0.sendString("Initializing TCC0... ");
    1c42:	6e e6       	ldi	r22, 0x6E	; 110
    1c44:	72 e2       	ldi	r23, 0x22	; 34
    1c46:	ce 01       	movw	r24, r28
    1c48:	83 5a       	subi	r24, 0xA3	; 163
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	Tcc0 myTimer(Tcc0::CS_DIV1, 2.048, Utils::IL_HIGH); // timeIncrement = 65536/32MHz
    1c50:	03 e0       	ldi	r16, 0x03	; 3
    1c52:	2f e6       	ldi	r18, 0x6F	; 111
    1c54:	32 e1       	ldi	r19, 0x12	; 18
    1c56:	43 e0       	ldi	r20, 0x03	; 3
    1c58:	50 e4       	ldi	r21, 0x40	; 64
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	89 5b       	subi	r24, 0xB9	; 185
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>
	myUsart0.sendString("DONE!\r\n");
    1c66:	6b ea       	ldi	r22, 0xAB	; 171
    1c68:	70 e2       	ldi	r23, 0x20	; 32
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	83 5a       	subi	r24, 0xA3	; 163
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	myUsart0.sendString("Initializing TWIE... ");
    1c74:	64 e8       	ldi	r22, 0x84	; 132
    1c76:	72 e2       	ldi	r23, 0x22	; 34
    1c78:	ce 01       	movw	r24, r28
    1c7a:	83 5a       	subi	r24, 0xA3	; 163
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	Twie myTwie(155, Twie::IBT_50US, &myUsart0); // 155 = 100 kHz
    1c82:	9e 01       	movw	r18, r28
    1c84:	23 5a       	subi	r18, 0xA3	; 163
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	6b e9       	ldi	r22, 0x9B	; 155
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	85 59       	subi	r24, 0x95	; 149
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN4TwieC1EhNS_5ibt_eEP7UsartE0>
	myUsart0.sendString("DONE!\r\n");
    1c96:	6b ea       	ldi	r22, 0xAB	; 171
    1c98:	70 e2       	ldi	r23, 0x20	; 32
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	83 5a       	subi	r24, 0xA3	; 163
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	myUsart0.sendString("Initializing ADC... ");
    1ca4:	6a e9       	ldi	r22, 0x9A	; 154
    1ca6:	72 e2       	ldi	r23, 0x22	; 34
    1ca8:	ce 01       	movw	r24, r28
    1caa:	83 5a       	subi	r24, 0xA3	; 163
    1cac:	9f 4f       	sbci	r25, 0xFF	; 255
    1cae:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	Adca myAdc(Adca::P_DIV512, Utils::IL_HIGH);
    1cb2:	43 e0       	ldi	r20, 0x03	; 3
    1cb4:	67 e0       	ldi	r22, 0x07	; 7
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>
	myUsart0.sendString("DONE!\r\n");
    1cbe:	6b ea       	ldi	r22, 0xAB	; 171
    1cc0:	70 e2       	ldi	r23, 0x20	; 32
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	83 5a       	subi	r24, 0xA3	; 163
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	myUsart0.sendString("Initializing Flow Sensor...\r\n");
    1ccc:	6f ea       	ldi	r22, 0xAF	; 175
    1cce:	72 e2       	ldi	r23, 0x22	; 34
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	83 5a       	subi	r24, 0xA3	; 163
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	Ms5525dso myFlowSensor(Ms5525dso::OSR4096, 0x76, &myTwie, &myUsart0);
    1cda:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <_ZN9Ms5525dso7OSR4096E>
    1cde:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <_ZN9Ms5525dso7OSR4096E+0x1>
    1ce2:	a0 91 46 21 	lds	r26, 0x2146	; 0x802146 <_ZN9Ms5525dso7OSR4096E+0x2>
    1ce6:	9e 01       	movw	r18, r28
    1ce8:	23 5a       	subi	r18, 0xA3	; 163
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	79 01       	movw	r14, r18
    1cee:	8e 01       	movw	r16, r28
    1cf0:	05 59       	subi	r16, 0x95	; 149
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	26 e7       	ldi	r18, 0x76	; 118
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	6a 2f       	mov	r22, r26
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	87 96       	adiw	r24, 0x27	; 39
    1cfe:	0e 94 3b 04 	call	0x876	; 0x876 <_ZN9Ms5525dsoC1ENS_5osr_sEhP4TwieP7UsartE0>
	myUsart0.sendString("DONE!\r\n");
    1d02:	6b ea       	ldi	r22, 0xAB	; 171
    1d04:	70 e2       	ldi	r23, 0x20	; 32
    1d06:	c7 01       	movw	r24, r14
    1d08:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	myUsart0.sendString("Initializing Pump... ");
    1d0c:	6d ec       	ldi	r22, 0xCD	; 205
    1d0e:	72 e2       	ldi	r23, 0x22	; 34
    1d10:	c7 01       	movw	r24, r14
    1d12:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	Pump myPump;
    1d16:	ce 01       	movw	r24, r28
    1d18:	8a 57       	subi	r24, 0x7A	; 122
    1d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1c:	c9 57       	subi	r28, 0x79	; 121
    1d1e:	df 4f       	sbci	r29, 0xFF	; 255
    1d20:	88 83       	st	Y, r24
    1d22:	99 83       	std	Y+1, r25	; 0x01
    1d24:	c7 58       	subi	r28, 0x87	; 135
    1d26:	d0 40       	sbci	r29, 0x00	; 0
    1d28:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN4PumpC1Ev>
	myUsart0.sendString("DONE!\r\n");
    1d2c:	6b ea       	ldi	r22, 0xAB	; 171
    1d2e:	70 e2       	ldi	r23, 0x20	; 32
    1d30:	c7 01       	movw	r24, r14
    1d32:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	myUsart0.sendString("Initializing Valves... ");
    1d36:	63 ee       	ldi	r22, 0xE3	; 227
    1d38:	72 e2       	ldi	r23, 0x22	; 34
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>
	Valve sampleValve(1<<1);
    1d40:	fe 01       	movw	r30, r28
    1d42:	ec 57       	subi	r30, 0x7C	; 124
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	c7 57       	subi	r28, 0x77	; 119
    1d48:	df 4f       	sbci	r29, 0xFF	; 255
    1d4a:	e8 83       	st	Y, r30
    1d4c:	f9 83       	std	Y+1, r31	; 0x01
    1d4e:	c9 58       	subi	r28, 0x89	; 137
    1d50:	d0 40       	sbci	r29, 0x00	; 0
    1d52:	62 e0       	ldi	r22, 0x02	; 2
    1d54:	cf 01       	movw	r24, r30
    1d56:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN5ValveC1Eh>
	Valve gascalValve(1<<2);
    1d5a:	9e 01       	movw	r18, r28
    1d5c:	2e 57       	subi	r18, 0x7E	; 126
    1d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d60:	c5 57       	subi	r28, 0x75	; 117
    1d62:	df 4f       	sbci	r29, 0xFF	; 255
    1d64:	28 83       	st	Y, r18
    1d66:	39 83       	std	Y+1, r19	; 0x01
    1d68:	cb 58       	subi	r28, 0x8B	; 139
    1d6a:	d0 40       	sbci	r29, 0x00	; 0
    1d6c:	64 e0       	ldi	r22, 0x04	; 4
    1d6e:	c9 01       	movw	r24, r18
    1d70:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN5ValveC1Eh>
	Valve outputValve(1<<4);
    1d74:	ce 01       	movw	r24, r28
    1d76:	80 58       	subi	r24, 0x80	; 128
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	c3 57       	subi	r28, 0x73	; 115
    1d7c:	df 4f       	sbci	r29, 0xFF	; 255
    1d7e:	88 83       	st	Y, r24
    1d80:	99 83       	std	Y+1, r25	; 0x01
    1d82:	cd 58       	subi	r28, 0x8D	; 141
    1d84:	d0 40       	sbci	r29, 0x00	; 0
    1d86:	60 e1       	ldi	r22, 0x10	; 16
    1d88:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <_ZN5ValveC1Eh>
	myUsart0.sendString("DONE!\r\n");
    1d8c:	6b ea       	ldi	r22, 0xAB	; 171
    1d8e:	70 e2       	ldi	r23, 0x20	; 32
    1d90:	c7 01       	movw	r24, r14
    1d92:	0e 94 be 08 	call	0x117c	; 0x117c <_ZN7UsartE010sendStringEPKc>

	// Utils::gascal_s gascal;
	Utils::gascal_s gascal = {0.415,-67.522};
    1d96:	3e 01       	movw	r6, r28
    1d98:	98 e7       	ldi	r25, 0x78	; 120
    1d9a:	69 0e       	add	r6, r25
    1d9c:	71 1c       	adc	r7, r1
    1d9e:	88 e0       	ldi	r24, 0x08	; 8
    1da0:	e0 e0       	ldi	r30, 0x00	; 0
    1da2:	f0 e2       	ldi	r31, 0x20	; 32
    1da4:	d3 01       	movw	r26, r6
    1da6:	01 90       	ld	r0, Z+
    1da8:	0d 92       	st	X+, r0
    1daa:	8a 95       	dec	r24
    1dac:	e1 f7       	brne	.-8      	; 0x1da6 <main+0x1fa>
    1dae:	81 ee       	ldi	r24, 0xE1	; 225
    1db0:	28 2e       	mov	r2, r24
    1db2:	8a e7       	ldi	r24, 0x7A	; 122
    1db4:	38 2e       	mov	r3, r24
    1db6:	84 ed       	ldi	r24, 0xD4	; 212
    1db8:	48 2e       	mov	r4, r24
    1dba:	8e e3       	ldi	r24, 0x3E	; 62
    1dbc:	58 2e       	mov	r5, r24
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			if (c == 'a') flow_acq(myFlowSensor, myAdc, myTimer, myUsart0);
			else if (c == 'b') start_test(gascal, myAdc, myFlowSensor, myPump, myTimer, myUsart0, sampleValve, outputValve);
			else if (c == 'c') gascal = start_gascal(myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
			else if (c == 'd') gascal = start_aircal(gascal.gain, myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
    1dbe:	c3 57       	subi	r28, 0x73	; 115
    1dc0:	df 4f       	sbci	r29, 0xFF	; 255
    1dc2:	e8 81       	ld	r30, Y
    1dc4:	cd 58       	subi	r28, 0x8D	; 141
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	c1 57       	subi	r28, 0x71	; 113
    1dca:	df 4f       	sbci	r29, 0xFF	; 255
    1dcc:	e8 83       	st	Y, r30
    1dce:	cf 58       	subi	r28, 0x8F	; 143
    1dd0:	d0 40       	sbci	r29, 0x00	; 0
    1dd2:	c2 57       	subi	r28, 0x72	; 114
    1dd4:	df 4f       	sbci	r29, 0xFF	; 255
    1dd6:	f8 81       	ld	r31, Y
    1dd8:	ce 58       	subi	r28, 0x8E	; 142
    1dda:	d0 40       	sbci	r29, 0x00	; 0
    1ddc:	c0 57       	subi	r28, 0x70	; 112
    1dde:	df 4f       	sbci	r29, 0xFF	; 255
    1de0:	f8 83       	st	Y, r31
    1de2:	c0 59       	subi	r28, 0x90	; 144
    1de4:	d0 40       	sbci	r29, 0x00	; 0
    1de6:	c5 57       	subi	r28, 0x75	; 117
    1de8:	df 4f       	sbci	r29, 0xFF	; 255
    1dea:	28 81       	ld	r18, Y
    1dec:	cb 58       	subi	r28, 0x8B	; 139
    1dee:	d0 40       	sbci	r29, 0x00	; 0
    1df0:	cf 56       	subi	r28, 0x6F	; 111
    1df2:	df 4f       	sbci	r29, 0xFF	; 255
    1df4:	28 83       	st	Y, r18
    1df6:	c1 59       	subi	r28, 0x91	; 145
    1df8:	d0 40       	sbci	r29, 0x00	; 0
    1dfa:	c4 57       	subi	r28, 0x74	; 116
    1dfc:	df 4f       	sbci	r29, 0xFF	; 255
    1dfe:	38 81       	ld	r19, Y
    1e00:	cc 58       	subi	r28, 0x8C	; 140
    1e02:	d0 40       	sbci	r29, 0x00	; 0
    1e04:	ce 56       	subi	r28, 0x6E	; 110
    1e06:	df 4f       	sbci	r29, 0xFF	; 255
    1e08:	38 83       	st	Y, r19
    1e0a:	c2 59       	subi	r28, 0x92	; 146
    1e0c:	d0 40       	sbci	r29, 0x00	; 0
		if (myUsart0.isRXC())
		{
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			if (c == 'a') flow_acq(myFlowSensor, myAdc, myTimer, myUsart0);
			else if (c == 'b') start_test(gascal, myAdc, myFlowSensor, myPump, myTimer, myUsart0, sampleValve, outputValve);
    1e0e:	c9 57       	subi	r28, 0x79	; 121
    1e10:	df 4f       	sbci	r29, 0xFF	; 255
    1e12:	88 81       	ld	r24, Y
    1e14:	c7 58       	subi	r28, 0x87	; 135
    1e16:	d0 40       	sbci	r29, 0x00	; 0
    1e18:	cd 56       	subi	r28, 0x6D	; 109
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	88 83       	st	Y, r24
    1e1e:	c3 59       	subi	r28, 0x93	; 147
    1e20:	d0 40       	sbci	r29, 0x00	; 0
    1e22:	c8 57       	subi	r28, 0x78	; 120
    1e24:	df 4f       	sbci	r29, 0xFF	; 255
    1e26:	98 81       	ld	r25, Y
    1e28:	c8 58       	subi	r28, 0x88	; 136
    1e2a:	d0 40       	sbci	r29, 0x00	; 0
    1e2c:	cc 56       	subi	r28, 0x6C	; 108
    1e2e:	df 4f       	sbci	r29, 0xFF	; 255
    1e30:	98 83       	st	Y, r25
    1e32:	c4 59       	subi	r28, 0x94	; 148
    1e34:	d0 40       	sbci	r29, 0x00	; 0
    1e36:	c7 57       	subi	r28, 0x77	; 119
    1e38:	df 4f       	sbci	r29, 0xFF	; 255
    1e3a:	e8 81       	ld	r30, Y
    1e3c:	c9 58       	subi	r28, 0x89	; 137
    1e3e:	d0 40       	sbci	r29, 0x00	; 0
    1e40:	cb 56       	subi	r28, 0x6B	; 107
    1e42:	df 4f       	sbci	r29, 0xFF	; 255
    1e44:	e8 83       	st	Y, r30
    1e46:	c5 59       	subi	r28, 0x95	; 149
    1e48:	d0 40       	sbci	r29, 0x00	; 0
    1e4a:	c6 57       	subi	r28, 0x76	; 118
    1e4c:	df 4f       	sbci	r29, 0xFF	; 255
    1e4e:	f8 81       	ld	r31, Y
    1e50:	ca 58       	subi	r28, 0x8A	; 138
    1e52:	d0 40       	sbci	r29, 0x00	; 0
    1e54:	ca 56       	subi	r28, 0x6A	; 106
    1e56:	df 4f       	sbci	r29, 0xFF	; 255
    1e58:	f8 83       	st	Y, r31
    1e5a:	c6 59       	subi	r28, 0x96	; 150
    1e5c:	d0 40       	sbci	r29, 0x00	; 0
    1e5e:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <_ZN7UsartE07rxcFlagE>

	// Utils::gascal_s gascal;
	Utils::gascal_s gascal = {0.415,-67.522};
	while (true)
	{
		if (myUsart0.isRXC())
    1e62:	88 23       	and	r24, r24
    1e64:	e1 f3       	breq	.-8      	; 0x1e5e <main+0x2b2>
	void setRXC(bool b){rxcFlag = b;};
    1e66:	10 92 19 23 	sts	0x2319, r1	; 0x802319 <_ZN7UsartE07rxcFlagE>
	char getChar(){return rxChar;};
    1e6a:	80 91 18 23 	lds	r24, 0x2318	; 0x802318 <_ZN7UsartE06rxCharE>
		{
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			if (c == 'a') flow_acq(myFlowSensor, myAdc, myTimer, myUsart0);
    1e6e:	81 36       	cpi	r24, 0x61	; 97
    1e70:	71 f4       	brne	.+28     	; 0x1e8e <main+0x2e2>
    1e72:	9e 01       	movw	r18, r28
    1e74:	23 5a       	subi	r18, 0xA3	; 163
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	ae 01       	movw	r20, r28
    1e7a:	49 5b       	subi	r20, 0xB9	; 185
    1e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7e:	be 01       	movw	r22, r28
    1e80:	6f 5f       	subi	r22, 0xFF	; 255
    1e82:	7f 4f       	sbci	r23, 0xFF	; 255
    1e84:	ce 01       	movw	r24, r28
    1e86:	87 96       	adiw	r24, 0x27	; 39
    1e88:	0e 94 c2 09 	call	0x1384	; 0x1384 <_Z8flow_acqR9Ms5525dsoR4AdcaR4Tcc0R7UsartE0>
    1e8c:	e8 cf       	rjmp	.-48     	; 0x1e5e <main+0x2b2>
			else if (c == 'b') start_test(gascal, myAdc, myFlowSensor, myPump, myTimer, myUsart0, sampleValve, outputValve);
    1e8e:	82 36       	cpi	r24, 0x62	; 98
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <main+0x2e8>
    1e92:	45 c0       	rjmp	.+138    	; 0x1f1e <main+0x372>
    1e94:	f3 01       	movw	r30, r6
    1e96:	20 82       	st	Z, r2
    1e98:	31 82       	std	Z+1, r3	; 0x01
    1e9a:	42 82       	std	Z+2, r4	; 0x02
    1e9c:	53 82       	std	Z+3, r5	; 0x03
    1e9e:	c0 57       	subi	r28, 0x70	; 112
    1ea0:	df 4f       	sbci	r29, 0xFF	; 255
    1ea2:	f8 81       	ld	r31, Y
    1ea4:	c0 59       	subi	r28, 0x90	; 144
    1ea6:	d0 40       	sbci	r29, 0x00	; 0
    1ea8:	ff 93       	push	r31
    1eaa:	c1 57       	subi	r28, 0x71	; 113
    1eac:	df 4f       	sbci	r29, 0xFF	; 255
    1eae:	28 81       	ld	r18, Y
    1eb0:	cf 58       	subi	r28, 0x8F	; 143
    1eb2:	d0 40       	sbci	r29, 0x00	; 0
    1eb4:	2f 93       	push	r18
    1eb6:	ca 56       	subi	r28, 0x6A	; 106
    1eb8:	df 4f       	sbci	r29, 0xFF	; 255
    1eba:	38 81       	ld	r19, Y
    1ebc:	c6 59       	subi	r28, 0x96	; 150
    1ebe:	d0 40       	sbci	r29, 0x00	; 0
    1ec0:	3f 93       	push	r19
    1ec2:	cb 56       	subi	r28, 0x6B	; 107
    1ec4:	df 4f       	sbci	r29, 0xFF	; 255
    1ec6:	88 81       	ld	r24, Y
    1ec8:	c5 59       	subi	r28, 0x95	; 149
    1eca:	d0 40       	sbci	r29, 0x00	; 0
    1ecc:	8f 93       	push	r24
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e3 5a       	subi	r30, 0xA3	; 163
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	4f 01       	movw	r8, r30
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	29 5b       	subi	r18, 0xB9	; 185
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	59 01       	movw	r10, r18
    1ede:	cd 56       	subi	r28, 0x6D	; 109
    1ee0:	df 4f       	sbci	r29, 0xFF	; 255
    1ee2:	c8 80       	ld	r12, Y
    1ee4:	c3 59       	subi	r28, 0x93	; 147
    1ee6:	d0 40       	sbci	r29, 0x00	; 0
    1ee8:	cc 56       	subi	r28, 0x6C	; 108
    1eea:	df 4f       	sbci	r29, 0xFF	; 255
    1eec:	d8 80       	ld	r13, Y
    1eee:	c4 59       	subi	r28, 0x94	; 148
    1ef0:	d0 40       	sbci	r29, 0x00	; 0
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	87 96       	adiw	r24, 0x27	; 39
    1ef6:	7c 01       	movw	r14, r24
    1ef8:	8e 01       	movw	r16, r28
    1efa:	0f 5f       	subi	r16, 0xFF	; 255
    1efc:	1f 4f       	sbci	r17, 0xFF	; 255
    1efe:	f3 01       	movw	r30, r6
    1f00:	20 81       	ld	r18, Z
    1f02:	31 81       	ldd	r19, Z+1	; 0x01
    1f04:	42 81       	ldd	r20, Z+2	; 0x02
    1f06:	53 81       	ldd	r21, Z+3	; 0x03
    1f08:	64 81       	ldd	r22, Z+4	; 0x04
    1f0a:	75 81       	ldd	r23, Z+5	; 0x05
    1f0c:	86 81       	ldd	r24, Z+6	; 0x06
    1f0e:	97 81       	ldd	r25, Z+7	; 0x07
    1f10:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_Z10start_testN5Utils8gascal_sER4AdcaR9Ms5525dsoR4PumpR4Tcc0R7UsartE0R5ValveSC_>
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	a0 cf       	rjmp	.-192    	; 0x1e5e <main+0x2b2>
			else if (c == 'c') gascal = start_gascal(myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
    1f1e:	83 36       	cpi	r24, 0x63	; 99
    1f20:	c1 f4       	brne	.+48     	; 0x1f52 <main+0x3a6>
    1f22:	9e 01       	movw	r18, r28
    1f24:	20 58       	subi	r18, 0x80	; 128
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	69 01       	movw	r12, r18
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	8e 57       	subi	r24, 0x7E	; 126
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	7c 01       	movw	r14, r24
    1f32:	8e 01       	movw	r16, r28
    1f34:	0c 57       	subi	r16, 0x7C	; 124
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	23 52       	subi	r18, 0x23	; 35
    1f3a:	31 09       	sbc	r19, r1
    1f3c:	ae 01       	movw	r20, r28
    1f3e:	49 5b       	subi	r20, 0xB9	; 185
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	be 01       	movw	r22, r28
    1f44:	6a 57       	subi	r22, 0x7A	; 122
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	81 58       	subi	r24, 0x81	; 129
    1f4a:	91 09       	sbc	r25, r1
    1f4c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_Z12start_gascalR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>
    1f50:	2b c0       	rjmp	.+86     	; 0x1fa8 <main+0x3fc>
			else if (c == 'd') gascal = start_aircal(gascal.gain, myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
    1f52:	84 36       	cpi	r24, 0x64	; 100
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <main+0x3ac>
    1f56:	83 cf       	rjmp	.-250    	; 0x1e5e <main+0x2b2>
    1f58:	c1 57       	subi	r28, 0x71	; 113
    1f5a:	df 4f       	sbci	r29, 0xFF	; 255
    1f5c:	88 80       	ld	r8, Y
    1f5e:	cf 58       	subi	r28, 0x8F	; 143
    1f60:	d0 40       	sbci	r29, 0x00	; 0
    1f62:	c0 57       	subi	r28, 0x70	; 112
    1f64:	df 4f       	sbci	r29, 0xFF	; 255
    1f66:	98 80       	ld	r9, Y
    1f68:	c0 59       	subi	r28, 0x90	; 144
    1f6a:	d0 40       	sbci	r29, 0x00	; 0
    1f6c:	cf 56       	subi	r28, 0x6F	; 111
    1f6e:	df 4f       	sbci	r29, 0xFF	; 255
    1f70:	a8 80       	ld	r10, Y
    1f72:	c1 59       	subi	r28, 0x91	; 145
    1f74:	d0 40       	sbci	r29, 0x00	; 0
    1f76:	ce 56       	subi	r28, 0x6E	; 110
    1f78:	df 4f       	sbci	r29, 0xFF	; 255
    1f7a:	b8 80       	ld	r11, Y
    1f7c:	c2 59       	subi	r28, 0x92	; 146
    1f7e:	d0 40       	sbci	r29, 0x00	; 0
    1f80:	9e 01       	movw	r18, r28
    1f82:	2c 57       	subi	r18, 0x7C	; 124
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	69 01       	movw	r12, r18
    1f88:	ce 01       	movw	r24, r28
    1f8a:	83 5a       	subi	r24, 0xA3	; 163
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	7c 01       	movw	r14, r24
    1f90:	8e 01       	movw	r16, r28
    1f92:	09 5b       	subi	r16, 0xB9	; 185
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	2e 5f       	subi	r18, 0xFE	; 254
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	ae 01       	movw	r20, r28
    1f9c:	4f 5f       	subi	r20, 0xFF	; 255
    1f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa0:	c2 01       	movw	r24, r4
    1fa2:	b1 01       	movw	r22, r2
    1fa4:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_Z12start_aircaldR4AdcaR4PumpR4Tcc0R7UsartE0R5ValveS8_S8_>
    1fa8:	f3 01       	movw	r30, r6
    1faa:	20 83       	st	Z, r18
    1fac:	31 83       	std	Z+1, r19	; 0x01
    1fae:	42 83       	std	Z+2, r20	; 0x02
    1fb0:	53 83       	std	Z+3, r21	; 0x03
    1fb2:	64 83       	std	Z+4, r22	; 0x04
    1fb4:	75 83       	std	Z+5, r23	; 0x05
    1fb6:	86 83       	std	Z+6, r24	; 0x06
    1fb8:	97 83       	std	Z+7, r25	; 0x07
    1fba:	20 80       	ld	r2, Z
    1fbc:	31 80       	ldd	r3, Z+1	; 0x01
    1fbe:	42 80       	ldd	r4, Z+2	; 0x02
    1fc0:	53 80       	ldd	r5, Z+3	; 0x03
    1fc2:	4d cf       	rjmp	.-358    	; 0x1e5e <main+0x2b2>

00001fc4 <_ZN5ValveC1Eh>:
*/

#include "Valve.h"
#include <avr/io.h>

Valve::Valve(uint8_t pin)
    1fc4:	fc 01       	movw	r30, r24
{
	this->pin = pin;
    1fc6:	60 83       	st	Z, r22
	PORTC_DIRSET = pin;
    1fc8:	60 93 41 06 	sts	0x0641, r22	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	open_b = true;
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    1fcc:	80 81       	ld	r24, Z
    1fce:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    1fd2:	11 82       	std	Z+1, r1	; 0x01
    1fd4:	08 95       	ret

00001fd6 <_ZN5Valve4openEv>:
	close();
}

void Valve::open()
{
	PORTC_OUTSET = pin;
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	20 81       	ld	r18, Z
    1fda:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	open_b = true;
    1fde:	21 e0       	ldi	r18, 0x01	; 1
    1fe0:	21 83       	std	Z+1, r18	; 0x01
    1fe2:	08 95       	ret

00001fe4 <_ZN5Valve5closeEv>:
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	20 81       	ld	r18, Z
    1fe8:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    1fec:	11 82       	std	Z+1, r1	; 0x01
    1fee:	08 95       	ret

00001ff0 <__subsf3>:
    1ff0:	50 58       	subi	r21, 0x80	; 128

00001ff2 <__addsf3>:
    1ff2:	bb 27       	eor	r27, r27
    1ff4:	aa 27       	eor	r26, r26
    1ff6:	0e 94 10 10 	call	0x2020	; 0x2020 <__addsf3x>
    1ffa:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_round>
    1ffe:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_pscA>
    2002:	38 f0       	brcs	.+14     	; 0x2012 <__addsf3+0x20>
    2004:	0e 94 48 11 	call	0x2290	; 0x2290 <__fp_pscB>
    2008:	20 f0       	brcs	.+8      	; 0x2012 <__addsf3+0x20>
    200a:	39 f4       	brne	.+14     	; 0x201a <__addsf3+0x28>
    200c:	9f 3f       	cpi	r25, 0xFF	; 255
    200e:	19 f4       	brne	.+6      	; 0x2016 <__addsf3+0x24>
    2010:	26 f4       	brtc	.+8      	; 0x201a <__addsf3+0x28>
    2012:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>
    2016:	0e f4       	brtc	.+2      	; 0x201a <__addsf3+0x28>
    2018:	e0 95       	com	r30
    201a:	e7 fb       	bst	r30, 7
    201c:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>

00002020 <__addsf3x>:
    2020:	e9 2f       	mov	r30, r25
    2022:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_split3>
    2026:	58 f3       	brcs	.-42     	; 0x1ffe <__addsf3+0xc>
    2028:	ba 17       	cp	r27, r26
    202a:	62 07       	cpc	r22, r18
    202c:	73 07       	cpc	r23, r19
    202e:	84 07       	cpc	r24, r20
    2030:	95 07       	cpc	r25, r21
    2032:	20 f0       	brcs	.+8      	; 0x203c <__addsf3x+0x1c>
    2034:	79 f4       	brne	.+30     	; 0x2054 <__addsf3x+0x34>
    2036:	a6 f5       	brtc	.+104    	; 0x20a0 <__addsf3x+0x80>
    2038:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_zero>
    203c:	0e f4       	brtc	.+2      	; 0x2040 <__addsf3x+0x20>
    203e:	e0 95       	com	r30
    2040:	0b 2e       	mov	r0, r27
    2042:	ba 2f       	mov	r27, r26
    2044:	a0 2d       	mov	r26, r0
    2046:	0b 01       	movw	r0, r22
    2048:	b9 01       	movw	r22, r18
    204a:	90 01       	movw	r18, r0
    204c:	0c 01       	movw	r0, r24
    204e:	ca 01       	movw	r24, r20
    2050:	a0 01       	movw	r20, r0
    2052:	11 24       	eor	r1, r1
    2054:	ff 27       	eor	r31, r31
    2056:	59 1b       	sub	r21, r25
    2058:	99 f0       	breq	.+38     	; 0x2080 <__addsf3x+0x60>
    205a:	59 3f       	cpi	r21, 0xF9	; 249
    205c:	50 f4       	brcc	.+20     	; 0x2072 <__addsf3x+0x52>
    205e:	50 3e       	cpi	r21, 0xE0	; 224
    2060:	68 f1       	brcs	.+90     	; 0x20bc <__addsf3x+0x9c>
    2062:	1a 16       	cp	r1, r26
    2064:	f0 40       	sbci	r31, 0x00	; 0
    2066:	a2 2f       	mov	r26, r18
    2068:	23 2f       	mov	r18, r19
    206a:	34 2f       	mov	r19, r20
    206c:	44 27       	eor	r20, r20
    206e:	58 5f       	subi	r21, 0xF8	; 248
    2070:	f3 cf       	rjmp	.-26     	; 0x2058 <__addsf3x+0x38>
    2072:	46 95       	lsr	r20
    2074:	37 95       	ror	r19
    2076:	27 95       	ror	r18
    2078:	a7 95       	ror	r26
    207a:	f0 40       	sbci	r31, 0x00	; 0
    207c:	53 95       	inc	r21
    207e:	c9 f7       	brne	.-14     	; 0x2072 <__addsf3x+0x52>
    2080:	7e f4       	brtc	.+30     	; 0x20a0 <__addsf3x+0x80>
    2082:	1f 16       	cp	r1, r31
    2084:	ba 0b       	sbc	r27, r26
    2086:	62 0b       	sbc	r22, r18
    2088:	73 0b       	sbc	r23, r19
    208a:	84 0b       	sbc	r24, r20
    208c:	ba f0       	brmi	.+46     	; 0x20bc <__addsf3x+0x9c>
    208e:	91 50       	subi	r25, 0x01	; 1
    2090:	a1 f0       	breq	.+40     	; 0x20ba <__addsf3x+0x9a>
    2092:	ff 0f       	add	r31, r31
    2094:	bb 1f       	adc	r27, r27
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	c2 f7       	brpl	.-16     	; 0x208e <__addsf3x+0x6e>
    209e:	0e c0       	rjmp	.+28     	; 0x20bc <__addsf3x+0x9c>
    20a0:	ba 0f       	add	r27, r26
    20a2:	62 1f       	adc	r22, r18
    20a4:	73 1f       	adc	r23, r19
    20a6:	84 1f       	adc	r24, r20
    20a8:	48 f4       	brcc	.+18     	; 0x20bc <__addsf3x+0x9c>
    20aa:	87 95       	ror	r24
    20ac:	77 95       	ror	r23
    20ae:	67 95       	ror	r22
    20b0:	b7 95       	ror	r27
    20b2:	f7 95       	ror	r31
    20b4:	9e 3f       	cpi	r25, 0xFE	; 254
    20b6:	08 f0       	brcs	.+2      	; 0x20ba <__addsf3x+0x9a>
    20b8:	b0 cf       	rjmp	.-160    	; 0x201a <__addsf3+0x28>
    20ba:	93 95       	inc	r25
    20bc:	88 0f       	add	r24, r24
    20be:	08 f0       	brcs	.+2      	; 0x20c2 <__addsf3x+0xa2>
    20c0:	99 27       	eor	r25, r25
    20c2:	ee 0f       	add	r30, r30
    20c4:	97 95       	ror	r25
    20c6:	87 95       	ror	r24
    20c8:	08 95       	ret

000020ca <__divsf3>:
    20ca:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3x>
    20ce:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_round>
    20d2:	0e 94 48 11 	call	0x2290	; 0x2290 <__fp_pscB>
    20d6:	58 f0       	brcs	.+22     	; 0x20ee <__divsf3+0x24>
    20d8:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_pscA>
    20dc:	40 f0       	brcs	.+16     	; 0x20ee <__divsf3+0x24>
    20de:	29 f4       	brne	.+10     	; 0x20ea <__divsf3+0x20>
    20e0:	5f 3f       	cpi	r21, 0xFF	; 255
    20e2:	29 f0       	breq	.+10     	; 0x20ee <__divsf3+0x24>
    20e4:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    20e8:	51 11       	cpse	r21, r1
    20ea:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>
    20ee:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>

000020f2 <__divsf3x>:
    20f2:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_split3>
    20f6:	68 f3       	brcs	.-38     	; 0x20d2 <__divsf3+0x8>

000020f8 <__divsf3_pse>:
    20f8:	99 23       	and	r25, r25
    20fa:	b1 f3       	breq	.-20     	; 0x20e8 <__divsf3+0x1e>
    20fc:	55 23       	and	r21, r21
    20fe:	91 f3       	breq	.-28     	; 0x20e4 <__divsf3+0x1a>
    2100:	95 1b       	sub	r25, r21
    2102:	55 0b       	sbc	r21, r21
    2104:	bb 27       	eor	r27, r27
    2106:	aa 27       	eor	r26, r26
    2108:	62 17       	cp	r22, r18
    210a:	73 07       	cpc	r23, r19
    210c:	84 07       	cpc	r24, r20
    210e:	38 f0       	brcs	.+14     	; 0x211e <__divsf3_pse+0x26>
    2110:	9f 5f       	subi	r25, 0xFF	; 255
    2112:	5f 4f       	sbci	r21, 0xFF	; 255
    2114:	22 0f       	add	r18, r18
    2116:	33 1f       	adc	r19, r19
    2118:	44 1f       	adc	r20, r20
    211a:	aa 1f       	adc	r26, r26
    211c:	a9 f3       	breq	.-22     	; 0x2108 <__divsf3_pse+0x10>
    211e:	35 d0       	rcall	.+106    	; 0x218a <__divsf3_pse+0x92>
    2120:	0e 2e       	mov	r0, r30
    2122:	3a f0       	brmi	.+14     	; 0x2132 <__divsf3_pse+0x3a>
    2124:	e0 e8       	ldi	r30, 0x80	; 128
    2126:	32 d0       	rcall	.+100    	; 0x218c <__divsf3_pse+0x94>
    2128:	91 50       	subi	r25, 0x01	; 1
    212a:	50 40       	sbci	r21, 0x00	; 0
    212c:	e6 95       	lsr	r30
    212e:	00 1c       	adc	r0, r0
    2130:	ca f7       	brpl	.-14     	; 0x2124 <__divsf3_pse+0x2c>
    2132:	2b d0       	rcall	.+86     	; 0x218a <__divsf3_pse+0x92>
    2134:	fe 2f       	mov	r31, r30
    2136:	29 d0       	rcall	.+82     	; 0x218a <__divsf3_pse+0x92>
    2138:	66 0f       	add	r22, r22
    213a:	77 1f       	adc	r23, r23
    213c:	88 1f       	adc	r24, r24
    213e:	bb 1f       	adc	r27, r27
    2140:	26 17       	cp	r18, r22
    2142:	37 07       	cpc	r19, r23
    2144:	48 07       	cpc	r20, r24
    2146:	ab 07       	cpc	r26, r27
    2148:	b0 e8       	ldi	r27, 0x80	; 128
    214a:	09 f0       	breq	.+2      	; 0x214e <__divsf3_pse+0x56>
    214c:	bb 0b       	sbc	r27, r27
    214e:	80 2d       	mov	r24, r0
    2150:	bf 01       	movw	r22, r30
    2152:	ff 27       	eor	r31, r31
    2154:	93 58       	subi	r25, 0x83	; 131
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	3a f0       	brmi	.+14     	; 0x2168 <__divsf3_pse+0x70>
    215a:	9e 3f       	cpi	r25, 0xFE	; 254
    215c:	51 05       	cpc	r21, r1
    215e:	78 f0       	brcs	.+30     	; 0x217e <__divsf3_pse+0x86>
    2160:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    2164:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>
    2168:	5f 3f       	cpi	r21, 0xFF	; 255
    216a:	e4 f3       	brlt	.-8      	; 0x2164 <__divsf3_pse+0x6c>
    216c:	98 3e       	cpi	r25, 0xE8	; 232
    216e:	d4 f3       	brlt	.-12     	; 0x2164 <__divsf3_pse+0x6c>
    2170:	86 95       	lsr	r24
    2172:	77 95       	ror	r23
    2174:	67 95       	ror	r22
    2176:	b7 95       	ror	r27
    2178:	f7 95       	ror	r31
    217a:	9f 5f       	subi	r25, 0xFF	; 255
    217c:	c9 f7       	brne	.-14     	; 0x2170 <__divsf3_pse+0x78>
    217e:	88 0f       	add	r24, r24
    2180:	91 1d       	adc	r25, r1
    2182:	96 95       	lsr	r25
    2184:	87 95       	ror	r24
    2186:	97 f9       	bld	r25, 7
    2188:	08 95       	ret
    218a:	e1 e0       	ldi	r30, 0x01	; 1
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	bb 1f       	adc	r27, r27
    2194:	62 17       	cp	r22, r18
    2196:	73 07       	cpc	r23, r19
    2198:	84 07       	cpc	r24, r20
    219a:	ba 07       	cpc	r27, r26
    219c:	20 f0       	brcs	.+8      	; 0x21a6 <__divsf3_pse+0xae>
    219e:	62 1b       	sub	r22, r18
    21a0:	73 0b       	sbc	r23, r19
    21a2:	84 0b       	sbc	r24, r20
    21a4:	ba 0b       	sbc	r27, r26
    21a6:	ee 1f       	adc	r30, r30
    21a8:	88 f7       	brcc	.-30     	; 0x218c <__divsf3_pse+0x94>
    21aa:	e0 95       	com	r30
    21ac:	08 95       	ret

000021ae <__floatunsisf>:
    21ae:	e8 94       	clt
    21b0:	09 c0       	rjmp	.+18     	; 0x21c4 <__floatsisf+0x12>

000021b2 <__floatsisf>:
    21b2:	97 fb       	bst	r25, 7
    21b4:	3e f4       	brtc	.+14     	; 0x21c4 <__floatsisf+0x12>
    21b6:	90 95       	com	r25
    21b8:	80 95       	com	r24
    21ba:	70 95       	com	r23
    21bc:	61 95       	neg	r22
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	99 23       	and	r25, r25
    21c6:	a9 f0       	breq	.+42     	; 0x21f2 <__floatsisf+0x40>
    21c8:	f9 2f       	mov	r31, r25
    21ca:	96 e9       	ldi	r25, 0x96	; 150
    21cc:	bb 27       	eor	r27, r27
    21ce:	93 95       	inc	r25
    21d0:	f6 95       	lsr	r31
    21d2:	87 95       	ror	r24
    21d4:	77 95       	ror	r23
    21d6:	67 95       	ror	r22
    21d8:	b7 95       	ror	r27
    21da:	f1 11       	cpse	r31, r1
    21dc:	f8 cf       	rjmp	.-16     	; 0x21ce <__floatsisf+0x1c>
    21de:	fa f4       	brpl	.+62     	; 0x221e <__floatsisf+0x6c>
    21e0:	bb 0f       	add	r27, r27
    21e2:	11 f4       	brne	.+4      	; 0x21e8 <__floatsisf+0x36>
    21e4:	60 ff       	sbrs	r22, 0
    21e6:	1b c0       	rjmp	.+54     	; 0x221e <__floatsisf+0x6c>
    21e8:	6f 5f       	subi	r22, 0xFF	; 255
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	8f 4f       	sbci	r24, 0xFF	; 255
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	16 c0       	rjmp	.+44     	; 0x221e <__floatsisf+0x6c>
    21f2:	88 23       	and	r24, r24
    21f4:	11 f0       	breq	.+4      	; 0x21fa <__floatsisf+0x48>
    21f6:	96 e9       	ldi	r25, 0x96	; 150
    21f8:	11 c0       	rjmp	.+34     	; 0x221c <__floatsisf+0x6a>
    21fa:	77 23       	and	r23, r23
    21fc:	21 f0       	breq	.+8      	; 0x2206 <__floatsisf+0x54>
    21fe:	9e e8       	ldi	r25, 0x8E	; 142
    2200:	87 2f       	mov	r24, r23
    2202:	76 2f       	mov	r23, r22
    2204:	05 c0       	rjmp	.+10     	; 0x2210 <__floatsisf+0x5e>
    2206:	66 23       	and	r22, r22
    2208:	71 f0       	breq	.+28     	; 0x2226 <__floatsisf+0x74>
    220a:	96 e8       	ldi	r25, 0x86	; 134
    220c:	86 2f       	mov	r24, r22
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	2a f0       	brmi	.+10     	; 0x221e <__floatsisf+0x6c>
    2214:	9a 95       	dec	r25
    2216:	66 0f       	add	r22, r22
    2218:	77 1f       	adc	r23, r23
    221a:	88 1f       	adc	r24, r24
    221c:	da f7       	brpl	.-10     	; 0x2214 <__floatsisf+0x62>
    221e:	88 0f       	add	r24, r24
    2220:	96 95       	lsr	r25
    2222:	87 95       	ror	r24
    2224:	97 f9       	bld	r25, 7
    2226:	08 95       	ret

00002228 <__fp_cmp>:
    2228:	99 0f       	add	r25, r25
    222a:	00 08       	sbc	r0, r0
    222c:	55 0f       	add	r21, r21
    222e:	aa 0b       	sbc	r26, r26
    2230:	e0 e8       	ldi	r30, 0x80	; 128
    2232:	fe ef       	ldi	r31, 0xFE	; 254
    2234:	16 16       	cp	r1, r22
    2236:	17 06       	cpc	r1, r23
    2238:	e8 07       	cpc	r30, r24
    223a:	f9 07       	cpc	r31, r25
    223c:	c0 f0       	brcs	.+48     	; 0x226e <__fp_cmp+0x46>
    223e:	12 16       	cp	r1, r18
    2240:	13 06       	cpc	r1, r19
    2242:	e4 07       	cpc	r30, r20
    2244:	f5 07       	cpc	r31, r21
    2246:	98 f0       	brcs	.+38     	; 0x226e <__fp_cmp+0x46>
    2248:	62 1b       	sub	r22, r18
    224a:	73 0b       	sbc	r23, r19
    224c:	84 0b       	sbc	r24, r20
    224e:	95 0b       	sbc	r25, r21
    2250:	39 f4       	brne	.+14     	; 0x2260 <__fp_cmp+0x38>
    2252:	0a 26       	eor	r0, r26
    2254:	61 f0       	breq	.+24     	; 0x226e <__fp_cmp+0x46>
    2256:	23 2b       	or	r18, r19
    2258:	24 2b       	or	r18, r20
    225a:	25 2b       	or	r18, r21
    225c:	21 f4       	brne	.+8      	; 0x2266 <__fp_cmp+0x3e>
    225e:	08 95       	ret
    2260:	0a 26       	eor	r0, r26
    2262:	09 f4       	brne	.+2      	; 0x2266 <__fp_cmp+0x3e>
    2264:	a1 40       	sbci	r26, 0x01	; 1
    2266:	a6 95       	lsr	r26
    2268:	8f ef       	ldi	r24, 0xFF	; 255
    226a:	81 1d       	adc	r24, r1
    226c:	81 1d       	adc	r24, r1
    226e:	08 95       	ret

00002270 <__fp_inf>:
    2270:	97 f9       	bld	r25, 7
    2272:	9f 67       	ori	r25, 0x7F	; 127
    2274:	80 e8       	ldi	r24, 0x80	; 128
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	08 95       	ret

0000227c <__fp_nan>:
    227c:	9f ef       	ldi	r25, 0xFF	; 255
    227e:	80 ec       	ldi	r24, 0xC0	; 192
    2280:	08 95       	ret

00002282 <__fp_pscA>:
    2282:	00 24       	eor	r0, r0
    2284:	0a 94       	dec	r0
    2286:	16 16       	cp	r1, r22
    2288:	17 06       	cpc	r1, r23
    228a:	18 06       	cpc	r1, r24
    228c:	09 06       	cpc	r0, r25
    228e:	08 95       	ret

00002290 <__fp_pscB>:
    2290:	00 24       	eor	r0, r0
    2292:	0a 94       	dec	r0
    2294:	12 16       	cp	r1, r18
    2296:	13 06       	cpc	r1, r19
    2298:	14 06       	cpc	r1, r20
    229a:	05 06       	cpc	r0, r21
    229c:	08 95       	ret

0000229e <__fp_round>:
    229e:	09 2e       	mov	r0, r25
    22a0:	03 94       	inc	r0
    22a2:	00 0c       	add	r0, r0
    22a4:	11 f4       	brne	.+4      	; 0x22aa <__fp_round+0xc>
    22a6:	88 23       	and	r24, r24
    22a8:	52 f0       	brmi	.+20     	; 0x22be <__fp_round+0x20>
    22aa:	bb 0f       	add	r27, r27
    22ac:	40 f4       	brcc	.+16     	; 0x22be <__fp_round+0x20>
    22ae:	bf 2b       	or	r27, r31
    22b0:	11 f4       	brne	.+4      	; 0x22b6 <__fp_round+0x18>
    22b2:	60 ff       	sbrs	r22, 0
    22b4:	04 c0       	rjmp	.+8      	; 0x22be <__fp_round+0x20>
    22b6:	6f 5f       	subi	r22, 0xFF	; 255
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	8f 4f       	sbci	r24, 0xFF	; 255
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	08 95       	ret

000022c0 <__fp_split3>:
    22c0:	57 fd       	sbrc	r21, 7
    22c2:	90 58       	subi	r25, 0x80	; 128
    22c4:	44 0f       	add	r20, r20
    22c6:	55 1f       	adc	r21, r21
    22c8:	59 f0       	breq	.+22     	; 0x22e0 <__fp_splitA+0x10>
    22ca:	5f 3f       	cpi	r21, 0xFF	; 255
    22cc:	71 f0       	breq	.+28     	; 0x22ea <__fp_splitA+0x1a>
    22ce:	47 95       	ror	r20

000022d0 <__fp_splitA>:
    22d0:	88 0f       	add	r24, r24
    22d2:	97 fb       	bst	r25, 7
    22d4:	99 1f       	adc	r25, r25
    22d6:	61 f0       	breq	.+24     	; 0x22f0 <__fp_splitA+0x20>
    22d8:	9f 3f       	cpi	r25, 0xFF	; 255
    22da:	79 f0       	breq	.+30     	; 0x22fa <__fp_splitA+0x2a>
    22dc:	87 95       	ror	r24
    22de:	08 95       	ret
    22e0:	12 16       	cp	r1, r18
    22e2:	13 06       	cpc	r1, r19
    22e4:	14 06       	cpc	r1, r20
    22e6:	55 1f       	adc	r21, r21
    22e8:	f2 cf       	rjmp	.-28     	; 0x22ce <__fp_split3+0xe>
    22ea:	46 95       	lsr	r20
    22ec:	f1 df       	rcall	.-30     	; 0x22d0 <__fp_splitA>
    22ee:	08 c0       	rjmp	.+16     	; 0x2300 <__fp_splitA+0x30>
    22f0:	16 16       	cp	r1, r22
    22f2:	17 06       	cpc	r1, r23
    22f4:	18 06       	cpc	r1, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	f1 cf       	rjmp	.-30     	; 0x22dc <__fp_splitA+0xc>
    22fa:	86 95       	lsr	r24
    22fc:	71 05       	cpc	r23, r1
    22fe:	61 05       	cpc	r22, r1
    2300:	08 94       	sec
    2302:	08 95       	ret

00002304 <__fp_zero>:
    2304:	e8 94       	clt

00002306 <__fp_szero>:
    2306:	bb 27       	eor	r27, r27
    2308:	66 27       	eor	r22, r22
    230a:	77 27       	eor	r23, r23
    230c:	cb 01       	movw	r24, r22
    230e:	97 f9       	bld	r25, 7
    2310:	08 95       	ret

00002312 <__gesf2>:
    2312:	0e 94 14 11 	call	0x2228	; 0x2228 <__fp_cmp>
    2316:	08 f4       	brcc	.+2      	; 0x231a <__gesf2+0x8>
    2318:	8f ef       	ldi	r24, 0xFF	; 255
    231a:	08 95       	ret

0000231c <__mulsf3>:
    231c:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3x>
    2320:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_round>
    2324:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_pscA>
    2328:	38 f0       	brcs	.+14     	; 0x2338 <__mulsf3+0x1c>
    232a:	0e 94 48 11 	call	0x2290	; 0x2290 <__fp_pscB>
    232e:	20 f0       	brcs	.+8      	; 0x2338 <__mulsf3+0x1c>
    2330:	95 23       	and	r25, r21
    2332:	11 f0       	breq	.+4      	; 0x2338 <__mulsf3+0x1c>
    2334:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    2338:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>
    233c:	11 24       	eor	r1, r1
    233e:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>

00002342 <__mulsf3x>:
    2342:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_split3>
    2346:	70 f3       	brcs	.-36     	; 0x2324 <__mulsf3+0x8>

00002348 <__mulsf3_pse>:
    2348:	95 9f       	mul	r25, r21
    234a:	c1 f3       	breq	.-16     	; 0x233c <__mulsf3+0x20>
    234c:	95 0f       	add	r25, r21
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	55 1f       	adc	r21, r21
    2352:	62 9f       	mul	r22, r18
    2354:	f0 01       	movw	r30, r0
    2356:	72 9f       	mul	r23, r18
    2358:	bb 27       	eor	r27, r27
    235a:	f0 0d       	add	r31, r0
    235c:	b1 1d       	adc	r27, r1
    235e:	63 9f       	mul	r22, r19
    2360:	aa 27       	eor	r26, r26
    2362:	f0 0d       	add	r31, r0
    2364:	b1 1d       	adc	r27, r1
    2366:	aa 1f       	adc	r26, r26
    2368:	64 9f       	mul	r22, r20
    236a:	66 27       	eor	r22, r22
    236c:	b0 0d       	add	r27, r0
    236e:	a1 1d       	adc	r26, r1
    2370:	66 1f       	adc	r22, r22
    2372:	82 9f       	mul	r24, r18
    2374:	22 27       	eor	r18, r18
    2376:	b0 0d       	add	r27, r0
    2378:	a1 1d       	adc	r26, r1
    237a:	62 1f       	adc	r22, r18
    237c:	73 9f       	mul	r23, r19
    237e:	b0 0d       	add	r27, r0
    2380:	a1 1d       	adc	r26, r1
    2382:	62 1f       	adc	r22, r18
    2384:	83 9f       	mul	r24, r19
    2386:	a0 0d       	add	r26, r0
    2388:	61 1d       	adc	r22, r1
    238a:	22 1f       	adc	r18, r18
    238c:	74 9f       	mul	r23, r20
    238e:	33 27       	eor	r19, r19
    2390:	a0 0d       	add	r26, r0
    2392:	61 1d       	adc	r22, r1
    2394:	23 1f       	adc	r18, r19
    2396:	84 9f       	mul	r24, r20
    2398:	60 0d       	add	r22, r0
    239a:	21 1d       	adc	r18, r1
    239c:	82 2f       	mov	r24, r18
    239e:	76 2f       	mov	r23, r22
    23a0:	6a 2f       	mov	r22, r26
    23a2:	11 24       	eor	r1, r1
    23a4:	9f 57       	subi	r25, 0x7F	; 127
    23a6:	50 40       	sbci	r21, 0x00	; 0
    23a8:	9a f0       	brmi	.+38     	; 0x23d0 <__mulsf3_pse+0x88>
    23aa:	f1 f0       	breq	.+60     	; 0x23e8 <__mulsf3_pse+0xa0>
    23ac:	88 23       	and	r24, r24
    23ae:	4a f0       	brmi	.+18     	; 0x23c2 <__mulsf3_pse+0x7a>
    23b0:	ee 0f       	add	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	bb 1f       	adc	r27, r27
    23b6:	66 1f       	adc	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	88 1f       	adc	r24, r24
    23bc:	91 50       	subi	r25, 0x01	; 1
    23be:	50 40       	sbci	r21, 0x00	; 0
    23c0:	a9 f7       	brne	.-22     	; 0x23ac <__mulsf3_pse+0x64>
    23c2:	9e 3f       	cpi	r25, 0xFE	; 254
    23c4:	51 05       	cpc	r21, r1
    23c6:	80 f0       	brcs	.+32     	; 0x23e8 <__mulsf3_pse+0xa0>
    23c8:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    23cc:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>
    23d0:	5f 3f       	cpi	r21, 0xFF	; 255
    23d2:	e4 f3       	brlt	.-8      	; 0x23cc <__mulsf3_pse+0x84>
    23d4:	98 3e       	cpi	r25, 0xE8	; 232
    23d6:	d4 f3       	brlt	.-12     	; 0x23cc <__mulsf3_pse+0x84>
    23d8:	86 95       	lsr	r24
    23da:	77 95       	ror	r23
    23dc:	67 95       	ror	r22
    23de:	b7 95       	ror	r27
    23e0:	f7 95       	ror	r31
    23e2:	e7 95       	ror	r30
    23e4:	9f 5f       	subi	r25, 0xFF	; 255
    23e6:	c1 f7       	brne	.-16     	; 0x23d8 <__mulsf3_pse+0x90>
    23e8:	fe 2b       	or	r31, r30
    23ea:	88 0f       	add	r24, r24
    23ec:	91 1d       	adc	r25, r1
    23ee:	96 95       	lsr	r25
    23f0:	87 95       	ror	r24
    23f2:	97 f9       	bld	r25, 7
    23f4:	08 95       	ret

000023f6 <pow>:
    23f6:	fa 01       	movw	r30, r20
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	30 96       	adiw	r30, 0x00	; 0
    23fe:	21 05       	cpc	r18, r1
    2400:	31 05       	cpc	r19, r1
    2402:	a1 f1       	breq	.+104    	; 0x246c <pow+0x76>
    2404:	61 15       	cp	r22, r1
    2406:	71 05       	cpc	r23, r1
    2408:	61 f4       	brne	.+24     	; 0x2422 <pow+0x2c>
    240a:	80 38       	cpi	r24, 0x80	; 128
    240c:	bf e3       	ldi	r27, 0x3F	; 63
    240e:	9b 07       	cpc	r25, r27
    2410:	49 f1       	breq	.+82     	; 0x2464 <pow+0x6e>
    2412:	68 94       	set
    2414:	90 38       	cpi	r25, 0x80	; 128
    2416:	81 05       	cpc	r24, r1
    2418:	61 f0       	breq	.+24     	; 0x2432 <pow+0x3c>
    241a:	80 38       	cpi	r24, 0x80	; 128
    241c:	bf ef       	ldi	r27, 0xFF	; 255
    241e:	9b 07       	cpc	r25, r27
    2420:	41 f0       	breq	.+16     	; 0x2432 <pow+0x3c>
    2422:	99 23       	and	r25, r25
    2424:	4a f5       	brpl	.+82     	; 0x2478 <pow+0x82>
    2426:	ff 3f       	cpi	r31, 0xFF	; 255
    2428:	e1 05       	cpc	r30, r1
    242a:	31 05       	cpc	r19, r1
    242c:	21 05       	cpc	r18, r1
    242e:	19 f1       	breq	.+70     	; 0x2476 <pow+0x80>
    2430:	e8 94       	clt
    2432:	08 94       	sec
    2434:	e7 95       	ror	r30
    2436:	d9 01       	movw	r26, r18
    2438:	aa 23       	and	r26, r26
    243a:	29 f4       	brne	.+10     	; 0x2446 <pow+0x50>
    243c:	ab 2f       	mov	r26, r27
    243e:	be 2f       	mov	r27, r30
    2440:	f8 5f       	subi	r31, 0xF8	; 248
    2442:	d0 f3       	brcs	.-12     	; 0x2438 <pow+0x42>
    2444:	10 c0       	rjmp	.+32     	; 0x2466 <pow+0x70>
    2446:	ff 5f       	subi	r31, 0xFF	; 255
    2448:	70 f4       	brcc	.+28     	; 0x2466 <pow+0x70>
    244a:	a6 95       	lsr	r26
    244c:	e0 f7       	brcc	.-8      	; 0x2446 <pow+0x50>
    244e:	f7 39       	cpi	r31, 0x97	; 151
    2450:	50 f0       	brcs	.+20     	; 0x2466 <pow+0x70>
    2452:	19 f0       	breq	.+6      	; 0x245a <pow+0x64>
    2454:	ff 3a       	cpi	r31, 0xAF	; 175
    2456:	38 f4       	brcc	.+14     	; 0x2466 <pow+0x70>
    2458:	9f 77       	andi	r25, 0x7F	; 127
    245a:	9f 93       	push	r25
    245c:	0d d0       	rcall	.+26     	; 0x2478 <pow+0x82>
    245e:	0f 90       	pop	r0
    2460:	07 fc       	sbrc	r0, 7
    2462:	90 58       	subi	r25, 0x80	; 128
    2464:	08 95       	ret
    2466:	46 f0       	brts	.+16     	; 0x2478 <pow+0x82>
    2468:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	80 e8       	ldi	r24, 0x80	; 128
    2472:	9f e3       	ldi	r25, 0x3F	; 63
    2474:	08 95       	ret
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	9f 77       	andi	r25, 0x7F	; 127
    247a:	5f 93       	push	r21
    247c:	4f 93       	push	r20
    247e:	3f 93       	push	r19
    2480:	2f 93       	push	r18
    2482:	0e 94 f6 12 	call	0x25ec	; 0x25ec <log>
    2486:	2f 91       	pop	r18
    2488:	3f 91       	pop	r19
    248a:	4f 91       	pop	r20
    248c:	5f 91       	pop	r21
    248e:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulsf3>
    2492:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <exp>
    2496:	29 f4       	brne	.+10     	; 0x24a2 <pow+0xac>
    2498:	16 f0       	brts	.+4      	; 0x249e <pow+0xa8>
    249a:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    249e:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_zero>
    24a2:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>

000024a6 <exp>:
    24a6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fp_splitA>
    24aa:	a8 f3       	brcs	.-22     	; 0x2496 <pow+0xa0>
    24ac:	96 38       	cpi	r25, 0x86	; 134
    24ae:	a0 f7       	brcc	.-24     	; 0x2498 <pow+0xa2>
    24b0:	07 f8       	bld	r0, 7
    24b2:	0f 92       	push	r0
    24b4:	e8 94       	clt
    24b6:	2b e3       	ldi	r18, 0x3B	; 59
    24b8:	3a ea       	ldi	r19, 0xAA	; 170
    24ba:	48 eb       	ldi	r20, 0xB8	; 184
    24bc:	5f e7       	ldi	r21, 0x7F	; 127
    24be:	0e 94 a4 11 	call	0x2348	; 0x2348 <__mulsf3_pse>
    24c2:	0f 92       	push	r0
    24c4:	0f 92       	push	r0
    24c6:	0f 92       	push	r0
    24c8:	4d b7       	in	r20, 0x3d	; 61
    24ca:	5e b7       	in	r21, 0x3e	; 62
    24cc:	0f 92       	push	r0
    24ce:	0e 94 3e 13 	call	0x267c	; 0x267c <modf>
    24d2:	ec ef       	ldi	r30, 0xFC	; 252
    24d4:	f1 e0       	ldi	r31, 0x01	; 1
    24d6:	0e 94 85 12 	call	0x250a	; 0x250a <__fp_powser>
    24da:	4f 91       	pop	r20
    24dc:	5f 91       	pop	r21
    24de:	ef 91       	pop	r30
    24e0:	ff 91       	pop	r31
    24e2:	e5 95       	asr	r30
    24e4:	ee 1f       	adc	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	49 f0       	breq	.+18     	; 0x24fc <exp+0x56>
    24ea:	fe 57       	subi	r31, 0x7E	; 126
    24ec:	e0 68       	ori	r30, 0x80	; 128
    24ee:	44 27       	eor	r20, r20
    24f0:	ee 0f       	add	r30, r30
    24f2:	44 1f       	adc	r20, r20
    24f4:	fa 95       	dec	r31
    24f6:	e1 f7       	brne	.-8      	; 0x24f0 <exp+0x4a>
    24f8:	41 95       	neg	r20
    24fa:	55 0b       	sbc	r21, r21
    24fc:	0e 94 b8 12 	call	0x2570	; 0x2570 <ldexp>
    2500:	0f 90       	pop	r0
    2502:	07 fe       	sbrs	r0, 7
    2504:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <inverse>
    2508:	08 95       	ret

0000250a <__fp_powser>:
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	1f 93       	push	r17
    2510:	0f 93       	push	r16
    2512:	ff 92       	push	r15
    2514:	ef 92       	push	r14
    2516:	df 92       	push	r13
    2518:	7b 01       	movw	r14, r22
    251a:	8c 01       	movw	r16, r24
    251c:	68 94       	set
    251e:	06 c0       	rjmp	.+12     	; 0x252c <__fp_powser+0x22>
    2520:	da 2e       	mov	r13, r26
    2522:	ef 01       	movw	r28, r30
    2524:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3x>
    2528:	fe 01       	movw	r30, r28
    252a:	e8 94       	clt
    252c:	a5 91       	lpm	r26, Z+
    252e:	25 91       	lpm	r18, Z+
    2530:	35 91       	lpm	r19, Z+
    2532:	45 91       	lpm	r20, Z+
    2534:	55 91       	lpm	r21, Z+
    2536:	a6 f3       	brts	.-24     	; 0x2520 <__fp_powser+0x16>
    2538:	ef 01       	movw	r28, r30
    253a:	0e 94 10 10 	call	0x2020	; 0x2020 <__addsf3x>
    253e:	fe 01       	movw	r30, r28
    2540:	97 01       	movw	r18, r14
    2542:	a8 01       	movw	r20, r16
    2544:	da 94       	dec	r13
    2546:	69 f7       	brne	.-38     	; 0x2522 <__fp_powser+0x18>
    2548:	df 90       	pop	r13
    254a:	ef 90       	pop	r14
    254c:	ff 90       	pop	r15
    254e:	0f 91       	pop	r16
    2550:	1f 91       	pop	r17
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <inverse>:
    2558:	9b 01       	movw	r18, r22
    255a:	ac 01       	movw	r20, r24
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	80 e8       	ldi	r24, 0x80	; 128
    2562:	9f e3       	ldi	r25, 0x3F	; 63
    2564:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__divsf3>
    2568:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    256c:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_mpack>

00002570 <ldexp>:
    2570:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fp_splitA>
    2574:	d8 f3       	brcs	.-10     	; 0x256c <inverse+0x14>
    2576:	99 23       	and	r25, r25
    2578:	c9 f3       	breq	.-14     	; 0x256c <inverse+0x14>
    257a:	94 0f       	add	r25, r20
    257c:	51 1d       	adc	r21, r1
    257e:	a3 f3       	brvs	.-24     	; 0x2568 <inverse+0x10>
    2580:	91 50       	subi	r25, 0x01	; 1
    2582:	50 40       	sbci	r21, 0x00	; 0
    2584:	94 f0       	brlt	.+36     	; 0x25aa <ldexp+0x3a>
    2586:	59 f0       	breq	.+22     	; 0x259e <ldexp+0x2e>
    2588:	88 23       	and	r24, r24
    258a:	32 f0       	brmi	.+12     	; 0x2598 <ldexp+0x28>
    258c:	66 0f       	add	r22, r22
    258e:	77 1f       	adc	r23, r23
    2590:	88 1f       	adc	r24, r24
    2592:	91 50       	subi	r25, 0x01	; 1
    2594:	50 40       	sbci	r21, 0x00	; 0
    2596:	c1 f7       	brne	.-16     	; 0x2588 <ldexp+0x18>
    2598:	9e 3f       	cpi	r25, 0xFE	; 254
    259a:	51 05       	cpc	r21, r1
    259c:	2c f7       	brge	.-54     	; 0x2568 <inverse+0x10>
    259e:	88 0f       	add	r24, r24
    25a0:	91 1d       	adc	r25, r1
    25a2:	96 95       	lsr	r25
    25a4:	87 95       	ror	r24
    25a6:	97 f9       	bld	r25, 7
    25a8:	08 95       	ret
    25aa:	5f 3f       	cpi	r21, 0xFF	; 255
    25ac:	ac f0       	brlt	.+42     	; 0x25d8 <ldexp+0x68>
    25ae:	98 3e       	cpi	r25, 0xE8	; 232
    25b0:	9c f0       	brlt	.+38     	; 0x25d8 <ldexp+0x68>
    25b2:	bb 27       	eor	r27, r27
    25b4:	86 95       	lsr	r24
    25b6:	77 95       	ror	r23
    25b8:	67 95       	ror	r22
    25ba:	b7 95       	ror	r27
    25bc:	08 f4       	brcc	.+2      	; 0x25c0 <ldexp+0x50>
    25be:	b1 60       	ori	r27, 0x01	; 1
    25c0:	93 95       	inc	r25
    25c2:	c1 f7       	brne	.-16     	; 0x25b4 <ldexp+0x44>
    25c4:	bb 0f       	add	r27, r27
    25c6:	58 f7       	brcc	.-42     	; 0x259e <ldexp+0x2e>
    25c8:	11 f4       	brne	.+4      	; 0x25ce <ldexp+0x5e>
    25ca:	60 ff       	sbrs	r22, 0
    25cc:	e8 cf       	rjmp	.-48     	; 0x259e <ldexp+0x2e>
    25ce:	6f 5f       	subi	r22, 0xFF	; 255
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	8f 4f       	sbci	r24, 0xFF	; 255
    25d4:	9f 4f       	sbci	r25, 0xFF	; 255
    25d6:	e3 cf       	rjmp	.-58     	; 0x259e <ldexp+0x2e>
    25d8:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>
    25dc:	16 f0       	brts	.+4      	; 0x25e2 <ldexp+0x72>
    25de:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_mpack>
    25e2:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>
    25e6:	68 94       	set
    25e8:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>

000025ec <log>:
    25ec:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fp_splitA>
    25f0:	a8 f3       	brcs	.-22     	; 0x25dc <ldexp+0x6c>
    25f2:	99 23       	and	r25, r25
    25f4:	c1 f3       	breq	.-16     	; 0x25e6 <ldexp+0x76>
    25f6:	ae f3       	brts	.-22     	; 0x25e2 <ldexp+0x72>
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	1f 93       	push	r17
    25fe:	0f 93       	push	r16
    2600:	ff 92       	push	r15
    2602:	c9 2f       	mov	r28, r25
    2604:	dd 27       	eor	r29, r29
    2606:	88 23       	and	r24, r24
    2608:	2a f0       	brmi	.+10     	; 0x2614 <log+0x28>
    260a:	21 97       	sbiw	r28, 0x01	; 1
    260c:	66 0f       	add	r22, r22
    260e:	77 1f       	adc	r23, r23
    2610:	88 1f       	adc	r24, r24
    2612:	da f7       	brpl	.-10     	; 0x260a <log+0x1e>
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f eb       	ldi	r21, 0xBF	; 191
    261c:	9f e3       	ldi	r25, 0x3F	; 63
    261e:	88 39       	cpi	r24, 0x98	; 152
    2620:	20 f0       	brcs	.+8      	; 0x262a <log+0x3e>
    2622:	80 3e       	cpi	r24, 0xE0	; 224
    2624:	38 f0       	brcs	.+14     	; 0x2634 <log+0x48>
    2626:	21 96       	adiw	r28, 0x01	; 1
    2628:	8f 77       	andi	r24, 0x7F	; 127
    262a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
    262e:	e4 e2       	ldi	r30, 0x24	; 36
    2630:	f2 e0       	ldi	r31, 0x02	; 2
    2632:	04 c0       	rjmp	.+8      	; 0x263c <log+0x50>
    2634:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__addsf3>
    2638:	e1 e5       	ldi	r30, 0x51	; 81
    263a:	f2 e0       	ldi	r31, 0x02	; 2
    263c:	0e 94 85 12 	call	0x250a	; 0x250a <__fp_powser>
    2640:	8b 01       	movw	r16, r22
    2642:	be 01       	movw	r22, r28
    2644:	ec 01       	movw	r28, r24
    2646:	fb 2e       	mov	r15, r27
    2648:	6f 57       	subi	r22, 0x7F	; 127
    264a:	71 09       	sbc	r23, r1
    264c:	75 95       	asr	r23
    264e:	77 1f       	adc	r23, r23
    2650:	88 0b       	sbc	r24, r24
    2652:	99 0b       	sbc	r25, r25
    2654:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatsisf>
    2658:	28 e1       	ldi	r18, 0x18	; 24
    265a:	32 e7       	ldi	r19, 0x72	; 114
    265c:	41 e3       	ldi	r20, 0x31	; 49
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3x>
    2664:	af 2d       	mov	r26, r15
    2666:	98 01       	movw	r18, r16
    2668:	ae 01       	movw	r20, r28
    266a:	ff 90       	pop	r15
    266c:	0f 91       	pop	r16
    266e:	1f 91       	pop	r17
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	0e 94 10 10 	call	0x2020	; 0x2020 <__addsf3x>
    2678:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_round>

0000267c <modf>:
    267c:	fa 01       	movw	r30, r20
    267e:	dc 01       	movw	r26, r24
    2680:	aa 0f       	add	r26, r26
    2682:	bb 1f       	adc	r27, r27
    2684:	9b 01       	movw	r18, r22
    2686:	ac 01       	movw	r20, r24
    2688:	bf 57       	subi	r27, 0x7F	; 127
    268a:	28 f4       	brcc	.+10     	; 0x2696 <modf+0x1a>
    268c:	22 27       	eor	r18, r18
    268e:	33 27       	eor	r19, r19
    2690:	44 27       	eor	r20, r20
    2692:	50 78       	andi	r21, 0x80	; 128
    2694:	20 c0       	rjmp	.+64     	; 0x26d6 <modf+0x5a>
    2696:	b7 51       	subi	r27, 0x17	; 23
    2698:	90 f4       	brcc	.+36     	; 0x26be <modf+0x42>
    269a:	ab 2f       	mov	r26, r27
    269c:	00 24       	eor	r0, r0
    269e:	46 95       	lsr	r20
    26a0:	37 95       	ror	r19
    26a2:	27 95       	ror	r18
    26a4:	01 1c       	adc	r0, r1
    26a6:	a3 95       	inc	r26
    26a8:	d2 f3       	brmi	.-12     	; 0x269e <modf+0x22>
    26aa:	00 20       	and	r0, r0
    26ac:	71 f0       	breq	.+28     	; 0x26ca <modf+0x4e>
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	44 1f       	adc	r20, r20
    26b4:	b3 95       	inc	r27
    26b6:	da f3       	brmi	.-10     	; 0x26ae <modf+0x32>
    26b8:	0e d0       	rcall	.+28     	; 0x26d6 <modf+0x5a>
    26ba:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__subsf3>
    26be:	61 30       	cpi	r22, 0x01	; 1
    26c0:	71 05       	cpc	r23, r1
    26c2:	a0 e8       	ldi	r26, 0x80	; 128
    26c4:	8a 07       	cpc	r24, r26
    26c6:	b9 46       	sbci	r27, 0x69	; 105
    26c8:	30 f4       	brcc	.+12     	; 0x26d6 <modf+0x5a>
    26ca:	9b 01       	movw	r18, r22
    26cc:	ac 01       	movw	r20, r24
    26ce:	66 27       	eor	r22, r22
    26d0:	77 27       	eor	r23, r23
    26d2:	88 27       	eor	r24, r24
    26d4:	90 78       	andi	r25, 0x80	; 128
    26d6:	30 96       	adiw	r30, 0x00	; 0
    26d8:	21 f0       	breq	.+8      	; 0x26e2 <modf+0x66>
    26da:	20 83       	st	Z, r18
    26dc:	31 83       	std	Z+1, r19	; 0x01
    26de:	42 83       	std	Z+2, r20	; 0x02
    26e0:	53 83       	std	Z+3, r21	; 0x03
    26e2:	08 95       	ret

000026e4 <__fp_mpack>:
    26e4:	9f 3f       	cpi	r25, 0xFF	; 255
    26e6:	31 f0       	breq	.+12     	; 0x26f4 <__fp_mpack_finite+0xc>

000026e8 <__fp_mpack_finite>:
    26e8:	91 50       	subi	r25, 0x01	; 1
    26ea:	20 f4       	brcc	.+8      	; 0x26f4 <__fp_mpack_finite+0xc>
    26ec:	87 95       	ror	r24
    26ee:	77 95       	ror	r23
    26f0:	67 95       	ror	r22
    26f2:	b7 95       	ror	r27
    26f4:	88 0f       	add	r24, r24
    26f6:	91 1d       	adc	r25, r1
    26f8:	96 95       	lsr	r25
    26fa:	87 95       	ror	r24
    26fc:	97 f9       	bld	r25, 7
    26fe:	08 95       	ret

00002700 <vfprintf>:
    2700:	2f 92       	push	r2
    2702:	3f 92       	push	r3
    2704:	4f 92       	push	r4
    2706:	5f 92       	push	r5
    2708:	6f 92       	push	r6
    270a:	7f 92       	push	r7
    270c:	8f 92       	push	r8
    270e:	9f 92       	push	r9
    2710:	af 92       	push	r10
    2712:	bf 92       	push	r11
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	60 97       	sbiw	r28, 0x10	; 16
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	7c 01       	movw	r14, r24
    2730:	1b 01       	movw	r2, r22
    2732:	6a 01       	movw	r12, r20
    2734:	fc 01       	movw	r30, r24
    2736:	16 82       	std	Z+6, r1	; 0x06
    2738:	17 82       	std	Z+7, r1	; 0x07
    273a:	83 81       	ldd	r24, Z+3	; 0x03
    273c:	81 ff       	sbrs	r24, 1
    273e:	44 c3       	rjmp	.+1672   	; 0x2dc8 <vfprintf+0x6c8>
    2740:	9e 01       	movw	r18, r28
    2742:	2f 5f       	subi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	39 01       	movw	r6, r18
    2748:	f7 01       	movw	r30, r14
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	f1 01       	movw	r30, r2
    274e:	93 fd       	sbrc	r25, 3
    2750:	85 91       	lpm	r24, Z+
    2752:	93 ff       	sbrs	r25, 3
    2754:	81 91       	ld	r24, Z+
    2756:	1f 01       	movw	r2, r30
    2758:	88 23       	and	r24, r24
    275a:	09 f4       	brne	.+2      	; 0x275e <vfprintf+0x5e>
    275c:	31 c3       	rjmp	.+1634   	; 0x2dc0 <vfprintf+0x6c0>
    275e:	85 32       	cpi	r24, 0x25	; 37
    2760:	39 f4       	brne	.+14     	; 0x2770 <vfprintf+0x70>
    2762:	93 fd       	sbrc	r25, 3
    2764:	85 91       	lpm	r24, Z+
    2766:	93 ff       	sbrs	r25, 3
    2768:	81 91       	ld	r24, Z+
    276a:	1f 01       	movw	r2, r30
    276c:	85 32       	cpi	r24, 0x25	; 37
    276e:	39 f4       	brne	.+14     	; 0x277e <vfprintf+0x7e>
    2770:	b7 01       	movw	r22, r14
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2778:	56 01       	movw	r10, r12
    277a:	65 01       	movw	r12, r10
    277c:	e5 cf       	rjmp	.-54     	; 0x2748 <vfprintf+0x48>
    277e:	10 e0       	ldi	r17, 0x00	; 0
    2780:	51 2c       	mov	r5, r1
    2782:	91 2c       	mov	r9, r1
    2784:	ff e1       	ldi	r31, 0x1F	; 31
    2786:	f9 15       	cp	r31, r9
    2788:	d8 f0       	brcs	.+54     	; 0x27c0 <vfprintf+0xc0>
    278a:	8b 32       	cpi	r24, 0x2B	; 43
    278c:	79 f0       	breq	.+30     	; 0x27ac <vfprintf+0xac>
    278e:	38 f4       	brcc	.+14     	; 0x279e <vfprintf+0x9e>
    2790:	80 32       	cpi	r24, 0x20	; 32
    2792:	79 f0       	breq	.+30     	; 0x27b2 <vfprintf+0xb2>
    2794:	83 32       	cpi	r24, 0x23	; 35
    2796:	a1 f4       	brne	.+40     	; 0x27c0 <vfprintf+0xc0>
    2798:	f9 2d       	mov	r31, r9
    279a:	f0 61       	ori	r31, 0x10	; 16
    279c:	2e c0       	rjmp	.+92     	; 0x27fa <vfprintf+0xfa>
    279e:	8d 32       	cpi	r24, 0x2D	; 45
    27a0:	61 f0       	breq	.+24     	; 0x27ba <vfprintf+0xba>
    27a2:	80 33       	cpi	r24, 0x30	; 48
    27a4:	69 f4       	brne	.+26     	; 0x27c0 <vfprintf+0xc0>
    27a6:	29 2d       	mov	r18, r9
    27a8:	21 60       	ori	r18, 0x01	; 1
    27aa:	2d c0       	rjmp	.+90     	; 0x2806 <vfprintf+0x106>
    27ac:	39 2d       	mov	r19, r9
    27ae:	32 60       	ori	r19, 0x02	; 2
    27b0:	93 2e       	mov	r9, r19
    27b2:	89 2d       	mov	r24, r9
    27b4:	84 60       	ori	r24, 0x04	; 4
    27b6:	98 2e       	mov	r9, r24
    27b8:	2a c0       	rjmp	.+84     	; 0x280e <vfprintf+0x10e>
    27ba:	e9 2d       	mov	r30, r9
    27bc:	e8 60       	ori	r30, 0x08	; 8
    27be:	15 c0       	rjmp	.+42     	; 0x27ea <vfprintf+0xea>
    27c0:	97 fc       	sbrc	r9, 7
    27c2:	2d c0       	rjmp	.+90     	; 0x281e <vfprintf+0x11e>
    27c4:	20 ed       	ldi	r18, 0xD0	; 208
    27c6:	28 0f       	add	r18, r24
    27c8:	2a 30       	cpi	r18, 0x0A	; 10
    27ca:	88 f4       	brcc	.+34     	; 0x27ee <vfprintf+0xee>
    27cc:	96 fe       	sbrs	r9, 6
    27ce:	06 c0       	rjmp	.+12     	; 0x27dc <vfprintf+0xdc>
    27d0:	3a e0       	ldi	r19, 0x0A	; 10
    27d2:	13 9f       	mul	r17, r19
    27d4:	20 0d       	add	r18, r0
    27d6:	11 24       	eor	r1, r1
    27d8:	12 2f       	mov	r17, r18
    27da:	19 c0       	rjmp	.+50     	; 0x280e <vfprintf+0x10e>
    27dc:	8a e0       	ldi	r24, 0x0A	; 10
    27de:	58 9e       	mul	r5, r24
    27e0:	20 0d       	add	r18, r0
    27e2:	11 24       	eor	r1, r1
    27e4:	52 2e       	mov	r5, r18
    27e6:	e9 2d       	mov	r30, r9
    27e8:	e0 62       	ori	r30, 0x20	; 32
    27ea:	9e 2e       	mov	r9, r30
    27ec:	10 c0       	rjmp	.+32     	; 0x280e <vfprintf+0x10e>
    27ee:	8e 32       	cpi	r24, 0x2E	; 46
    27f0:	31 f4       	brne	.+12     	; 0x27fe <vfprintf+0xfe>
    27f2:	96 fc       	sbrc	r9, 6
    27f4:	e5 c2       	rjmp	.+1482   	; 0x2dc0 <vfprintf+0x6c0>
    27f6:	f9 2d       	mov	r31, r9
    27f8:	f0 64       	ori	r31, 0x40	; 64
    27fa:	9f 2e       	mov	r9, r31
    27fc:	08 c0       	rjmp	.+16     	; 0x280e <vfprintf+0x10e>
    27fe:	8c 36       	cpi	r24, 0x6C	; 108
    2800:	21 f4       	brne	.+8      	; 0x280a <vfprintf+0x10a>
    2802:	29 2d       	mov	r18, r9
    2804:	20 68       	ori	r18, 0x80	; 128
    2806:	92 2e       	mov	r9, r18
    2808:	02 c0       	rjmp	.+4      	; 0x280e <vfprintf+0x10e>
    280a:	88 36       	cpi	r24, 0x68	; 104
    280c:	41 f4       	brne	.+16     	; 0x281e <vfprintf+0x11e>
    280e:	f1 01       	movw	r30, r2
    2810:	93 fd       	sbrc	r25, 3
    2812:	85 91       	lpm	r24, Z+
    2814:	93 ff       	sbrs	r25, 3
    2816:	81 91       	ld	r24, Z+
    2818:	1f 01       	movw	r2, r30
    281a:	81 11       	cpse	r24, r1
    281c:	b3 cf       	rjmp	.-154    	; 0x2784 <vfprintf+0x84>
    281e:	9b eb       	ldi	r25, 0xBB	; 187
    2820:	98 0f       	add	r25, r24
    2822:	93 30       	cpi	r25, 0x03	; 3
    2824:	20 f4       	brcc	.+8      	; 0x282e <vfprintf+0x12e>
    2826:	99 2d       	mov	r25, r9
    2828:	90 61       	ori	r25, 0x10	; 16
    282a:	80 5e       	subi	r24, 0xE0	; 224
    282c:	07 c0       	rjmp	.+14     	; 0x283c <vfprintf+0x13c>
    282e:	9b e9       	ldi	r25, 0x9B	; 155
    2830:	98 0f       	add	r25, r24
    2832:	93 30       	cpi	r25, 0x03	; 3
    2834:	08 f0       	brcs	.+2      	; 0x2838 <vfprintf+0x138>
    2836:	66 c1       	rjmp	.+716    	; 0x2b04 <vfprintf+0x404>
    2838:	99 2d       	mov	r25, r9
    283a:	9f 7e       	andi	r25, 0xEF	; 239
    283c:	96 ff       	sbrs	r25, 6
    283e:	16 e0       	ldi	r17, 0x06	; 6
    2840:	9f 73       	andi	r25, 0x3F	; 63
    2842:	99 2e       	mov	r9, r25
    2844:	85 36       	cpi	r24, 0x65	; 101
    2846:	19 f4       	brne	.+6      	; 0x284e <vfprintf+0x14e>
    2848:	90 64       	ori	r25, 0x40	; 64
    284a:	99 2e       	mov	r9, r25
    284c:	08 c0       	rjmp	.+16     	; 0x285e <vfprintf+0x15e>
    284e:	86 36       	cpi	r24, 0x66	; 102
    2850:	21 f4       	brne	.+8      	; 0x285a <vfprintf+0x15a>
    2852:	39 2f       	mov	r19, r25
    2854:	30 68       	ori	r19, 0x80	; 128
    2856:	93 2e       	mov	r9, r19
    2858:	02 c0       	rjmp	.+4      	; 0x285e <vfprintf+0x15e>
    285a:	11 11       	cpse	r17, r1
    285c:	11 50       	subi	r17, 0x01	; 1
    285e:	97 fe       	sbrs	r9, 7
    2860:	07 c0       	rjmp	.+14     	; 0x2870 <vfprintf+0x170>
    2862:	1c 33       	cpi	r17, 0x3C	; 60
    2864:	50 f4       	brcc	.+20     	; 0x287a <vfprintf+0x17a>
    2866:	44 24       	eor	r4, r4
    2868:	43 94       	inc	r4
    286a:	41 0e       	add	r4, r17
    286c:	27 e0       	ldi	r18, 0x07	; 7
    286e:	0b c0       	rjmp	.+22     	; 0x2886 <vfprintf+0x186>
    2870:	18 30       	cpi	r17, 0x08	; 8
    2872:	38 f0       	brcs	.+14     	; 0x2882 <vfprintf+0x182>
    2874:	27 e0       	ldi	r18, 0x07	; 7
    2876:	17 e0       	ldi	r17, 0x07	; 7
    2878:	05 c0       	rjmp	.+10     	; 0x2884 <vfprintf+0x184>
    287a:	27 e0       	ldi	r18, 0x07	; 7
    287c:	9c e3       	ldi	r25, 0x3C	; 60
    287e:	49 2e       	mov	r4, r25
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <vfprintf+0x186>
    2882:	21 2f       	mov	r18, r17
    2884:	41 2c       	mov	r4, r1
    2886:	56 01       	movw	r10, r12
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	a8 0e       	add	r10, r24
    288c:	b1 1c       	adc	r11, r1
    288e:	f6 01       	movw	r30, r12
    2890:	60 81       	ld	r22, Z
    2892:	71 81       	ldd	r23, Z+1	; 0x01
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	93 81       	ldd	r25, Z+3	; 0x03
    2898:	04 2d       	mov	r16, r4
    289a:	a3 01       	movw	r20, r6
    289c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__ftoa_engine>
    28a0:	6c 01       	movw	r12, r24
    28a2:	f9 81       	ldd	r31, Y+1	; 0x01
    28a4:	fc 87       	std	Y+12, r31	; 0x0c
    28a6:	f0 ff       	sbrs	r31, 0
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x1ae>
    28aa:	f3 ff       	sbrs	r31, 3
    28ac:	06 c0       	rjmp	.+12     	; 0x28ba <vfprintf+0x1ba>
    28ae:	91 fc       	sbrc	r9, 1
    28b0:	06 c0       	rjmp	.+12     	; 0x28be <vfprintf+0x1be>
    28b2:	92 fe       	sbrs	r9, 2
    28b4:	06 c0       	rjmp	.+12     	; 0x28c2 <vfprintf+0x1c2>
    28b6:	00 e2       	ldi	r16, 0x20	; 32
    28b8:	05 c0       	rjmp	.+10     	; 0x28c4 <vfprintf+0x1c4>
    28ba:	0d e2       	ldi	r16, 0x2D	; 45
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <vfprintf+0x1c4>
    28be:	0b e2       	ldi	r16, 0x2B	; 43
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <vfprintf+0x1c4>
    28c2:	00 e0       	ldi	r16, 0x00	; 0
    28c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28c6:	8c 70       	andi	r24, 0x0C	; 12
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <vfprintf+0x1d0>
    28ca:	01 11       	cpse	r16, r1
    28cc:	5a c2       	rjmp	.+1204   	; 0x2d82 <vfprintf+0x682>
    28ce:	9b c2       	rjmp	.+1334   	; 0x2e06 <vfprintf+0x706>
    28d0:	97 fe       	sbrs	r9, 7
    28d2:	10 c0       	rjmp	.+32     	; 0x28f4 <vfprintf+0x1f4>
    28d4:	4c 0c       	add	r4, r12
    28d6:	fc 85       	ldd	r31, Y+12	; 0x0c
    28d8:	f4 ff       	sbrs	r31, 4
    28da:	04 c0       	rjmp	.+8      	; 0x28e4 <vfprintf+0x1e4>
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	81 33       	cpi	r24, 0x31	; 49
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <vfprintf+0x1e4>
    28e2:	4a 94       	dec	r4
    28e4:	14 14       	cp	r1, r4
    28e6:	74 f5       	brge	.+92     	; 0x2944 <vfprintf+0x244>
    28e8:	28 e0       	ldi	r18, 0x08	; 8
    28ea:	24 15       	cp	r18, r4
    28ec:	78 f5       	brcc	.+94     	; 0x294c <vfprintf+0x24c>
    28ee:	88 e0       	ldi	r24, 0x08	; 8
    28f0:	48 2e       	mov	r4, r24
    28f2:	2c c0       	rjmp	.+88     	; 0x294c <vfprintf+0x24c>
    28f4:	96 fc       	sbrc	r9, 6
    28f6:	2a c0       	rjmp	.+84     	; 0x294c <vfprintf+0x24c>
    28f8:	81 2f       	mov	r24, r17
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	8c 15       	cp	r24, r12
    28fe:	9d 05       	cpc	r25, r13
    2900:	9c f0       	brlt	.+38     	; 0x2928 <vfprintf+0x228>
    2902:	3c ef       	ldi	r19, 0xFC	; 252
    2904:	c3 16       	cp	r12, r19
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	d3 06       	cpc	r13, r19
    290a:	74 f0       	brlt	.+28     	; 0x2928 <vfprintf+0x228>
    290c:	89 2d       	mov	r24, r9
    290e:	80 68       	ori	r24, 0x80	; 128
    2910:	98 2e       	mov	r9, r24
    2912:	0a c0       	rjmp	.+20     	; 0x2928 <vfprintf+0x228>
    2914:	e2 e0       	ldi	r30, 0x02	; 2
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	ec 0f       	add	r30, r28
    291a:	fd 1f       	adc	r31, r29
    291c:	e1 0f       	add	r30, r17
    291e:	f1 1d       	adc	r31, r1
    2920:	80 81       	ld	r24, Z
    2922:	80 33       	cpi	r24, 0x30	; 48
    2924:	19 f4       	brne	.+6      	; 0x292c <vfprintf+0x22c>
    2926:	11 50       	subi	r17, 0x01	; 1
    2928:	11 11       	cpse	r17, r1
    292a:	f4 cf       	rjmp	.-24     	; 0x2914 <vfprintf+0x214>
    292c:	97 fe       	sbrs	r9, 7
    292e:	0e c0       	rjmp	.+28     	; 0x294c <vfprintf+0x24c>
    2930:	44 24       	eor	r4, r4
    2932:	43 94       	inc	r4
    2934:	41 0e       	add	r4, r17
    2936:	81 2f       	mov	r24, r17
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	c8 16       	cp	r12, r24
    293c:	d9 06       	cpc	r13, r25
    293e:	2c f4       	brge	.+10     	; 0x294a <vfprintf+0x24a>
    2940:	1c 19       	sub	r17, r12
    2942:	04 c0       	rjmp	.+8      	; 0x294c <vfprintf+0x24c>
    2944:	44 24       	eor	r4, r4
    2946:	43 94       	inc	r4
    2948:	01 c0       	rjmp	.+2      	; 0x294c <vfprintf+0x24c>
    294a:	10 e0       	ldi	r17, 0x00	; 0
    294c:	97 fe       	sbrs	r9, 7
    294e:	06 c0       	rjmp	.+12     	; 0x295c <vfprintf+0x25c>
    2950:	1c 14       	cp	r1, r12
    2952:	1d 04       	cpc	r1, r13
    2954:	34 f4       	brge	.+12     	; 0x2962 <vfprintf+0x262>
    2956:	c6 01       	movw	r24, r12
    2958:	01 96       	adiw	r24, 0x01	; 1
    295a:	05 c0       	rjmp	.+10     	; 0x2966 <vfprintf+0x266>
    295c:	85 e0       	ldi	r24, 0x05	; 5
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <vfprintf+0x266>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	01 11       	cpse	r16, r1
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	11 23       	and	r17, r17
    296c:	31 f0       	breq	.+12     	; 0x297a <vfprintf+0x27a>
    296e:	21 2f       	mov	r18, r17
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	2f 5f       	subi	r18, 0xFF	; 255
    2974:	3f 4f       	sbci	r19, 0xFF	; 255
    2976:	82 0f       	add	r24, r18
    2978:	93 1f       	adc	r25, r19
    297a:	25 2d       	mov	r18, r5
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	82 17       	cp	r24, r18
    2980:	93 07       	cpc	r25, r19
    2982:	14 f4       	brge	.+4      	; 0x2988 <vfprintf+0x288>
    2984:	58 1a       	sub	r5, r24
    2986:	01 c0       	rjmp	.+2      	; 0x298a <vfprintf+0x28a>
    2988:	51 2c       	mov	r5, r1
    298a:	89 2d       	mov	r24, r9
    298c:	89 70       	andi	r24, 0x09	; 9
    298e:	49 f4       	brne	.+18     	; 0x29a2 <vfprintf+0x2a2>
    2990:	55 20       	and	r5, r5
    2992:	39 f0       	breq	.+14     	; 0x29a2 <vfprintf+0x2a2>
    2994:	b7 01       	movw	r22, r14
    2996:	80 e2       	ldi	r24, 0x20	; 32
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    299e:	5a 94       	dec	r5
    29a0:	f7 cf       	rjmp	.-18     	; 0x2990 <vfprintf+0x290>
    29a2:	00 23       	and	r16, r16
    29a4:	29 f0       	breq	.+10     	; 0x29b0 <vfprintf+0x2b0>
    29a6:	b7 01       	movw	r22, r14
    29a8:	80 2f       	mov	r24, r16
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    29b0:	93 fc       	sbrc	r9, 3
    29b2:	09 c0       	rjmp	.+18     	; 0x29c6 <vfprintf+0x2c6>
    29b4:	55 20       	and	r5, r5
    29b6:	39 f0       	breq	.+14     	; 0x29c6 <vfprintf+0x2c6>
    29b8:	b7 01       	movw	r22, r14
    29ba:	80 e3       	ldi	r24, 0x30	; 48
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    29c2:	5a 94       	dec	r5
    29c4:	f7 cf       	rjmp	.-18     	; 0x29b4 <vfprintf+0x2b4>
    29c6:	97 fe       	sbrs	r9, 7
    29c8:	4c c0       	rjmp	.+152    	; 0x2a62 <vfprintf+0x362>
    29ca:	46 01       	movw	r8, r12
    29cc:	d7 fe       	sbrs	r13, 7
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <vfprintf+0x2d4>
    29d0:	81 2c       	mov	r8, r1
    29d2:	91 2c       	mov	r9, r1
    29d4:	c6 01       	movw	r24, r12
    29d6:	88 19       	sub	r24, r8
    29d8:	99 09       	sbc	r25, r9
    29da:	f3 01       	movw	r30, r6
    29dc:	e8 0f       	add	r30, r24
    29de:	f9 1f       	adc	r31, r25
    29e0:	ed 87       	std	Y+13, r30	; 0x0d
    29e2:	fe 87       	std	Y+14, r31	; 0x0e
    29e4:	96 01       	movw	r18, r12
    29e6:	24 19       	sub	r18, r4
    29e8:	31 09       	sbc	r19, r1
    29ea:	2f 87       	std	Y+15, r18	; 0x0f
    29ec:	38 8b       	std	Y+16, r19	; 0x10
    29ee:	01 2f       	mov	r16, r17
    29f0:	10 e0       	ldi	r17, 0x00	; 0
    29f2:	11 95       	neg	r17
    29f4:	01 95       	neg	r16
    29f6:	11 09       	sbc	r17, r1
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	83 16       	cp	r8, r19
    29fc:	93 06       	cpc	r9, r19
    29fe:	29 f4       	brne	.+10     	; 0x2a0a <vfprintf+0x30a>
    2a00:	b7 01       	movw	r22, r14
    2a02:	8e e2       	ldi	r24, 0x2E	; 46
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2a0a:	c8 14       	cp	r12, r8
    2a0c:	d9 04       	cpc	r13, r9
    2a0e:	4c f0       	brlt	.+18     	; 0x2a22 <vfprintf+0x322>
    2a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a12:	98 89       	ldd	r25, Y+16	; 0x10
    2a14:	88 15       	cp	r24, r8
    2a16:	99 05       	cpc	r25, r9
    2a18:	24 f4       	brge	.+8      	; 0x2a22 <vfprintf+0x322>
    2a1a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2a1c:	fe 85       	ldd	r31, Y+14	; 0x0e
    2a1e:	81 81       	ldd	r24, Z+1	; 0x01
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <vfprintf+0x324>
    2a22:	80 e3       	ldi	r24, 0x30	; 48
    2a24:	f1 e0       	ldi	r31, 0x01	; 1
    2a26:	8f 1a       	sub	r8, r31
    2a28:	91 08       	sbc	r9, r1
    2a2a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a2c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a2e:	2f 5f       	subi	r18, 0xFF	; 255
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	2d 87       	std	Y+13, r18	; 0x0d
    2a34:	3e 87       	std	Y+14, r19	; 0x0e
    2a36:	80 16       	cp	r8, r16
    2a38:	91 06       	cpc	r9, r17
    2a3a:	2c f0       	brlt	.+10     	; 0x2a46 <vfprintf+0x346>
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2a44:	d9 cf       	rjmp	.-78     	; 0x29f8 <vfprintf+0x2f8>
    2a46:	c8 14       	cp	r12, r8
    2a48:	d9 04       	cpc	r13, r9
    2a4a:	41 f4       	brne	.+16     	; 0x2a5c <vfprintf+0x35c>
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	96 33       	cpi	r25, 0x36	; 54
    2a50:	20 f4       	brcc	.+8      	; 0x2a5a <vfprintf+0x35a>
    2a52:	95 33       	cpi	r25, 0x35	; 53
    2a54:	19 f4       	brne	.+6      	; 0x2a5c <vfprintf+0x35c>
    2a56:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a58:	34 ff       	sbrs	r19, 4
    2a5a:	81 e3       	ldi	r24, 0x31	; 49
    2a5c:	b7 01       	movw	r22, r14
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	4e c0       	rjmp	.+156    	; 0x2afe <vfprintf+0x3fe>
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	81 33       	cpi	r24, 0x31	; 49
    2a66:	19 f0       	breq	.+6      	; 0x2a6e <vfprintf+0x36e>
    2a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a6a:	9f 7e       	andi	r25, 0xEF	; 239
    2a6c:	9c 87       	std	Y+12, r25	; 0x0c
    2a6e:	b7 01       	movw	r22, r14
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2a76:	11 11       	cpse	r17, r1
    2a78:	05 c0       	rjmp	.+10     	; 0x2a84 <vfprintf+0x384>
    2a7a:	94 fc       	sbrc	r9, 4
    2a7c:	18 c0       	rjmp	.+48     	; 0x2aae <vfprintf+0x3ae>
    2a7e:	85 e6       	ldi	r24, 0x65	; 101
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	17 c0       	rjmp	.+46     	; 0x2ab2 <vfprintf+0x3b2>
    2a84:	b7 01       	movw	r22, r14
    2a86:	8e e2       	ldi	r24, 0x2E	; 46
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2a8e:	1e 5f       	subi	r17, 0xFE	; 254
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	01 e0       	ldi	r16, 0x01	; 1
    2a94:	08 0f       	add	r16, r24
    2a96:	f3 01       	movw	r30, r6
    2a98:	e8 0f       	add	r30, r24
    2a9a:	f1 1d       	adc	r31, r1
    2a9c:	80 81       	ld	r24, Z
    2a9e:	b7 01       	movw	r22, r14
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2aa6:	80 2f       	mov	r24, r16
    2aa8:	01 13       	cpse	r16, r17
    2aaa:	f3 cf       	rjmp	.-26     	; 0x2a92 <vfprintf+0x392>
    2aac:	e6 cf       	rjmp	.-52     	; 0x2a7a <vfprintf+0x37a>
    2aae:	85 e4       	ldi	r24, 0x45	; 69
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	b7 01       	movw	r22, r14
    2ab4:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2ab8:	d7 fc       	sbrc	r13, 7
    2aba:	06 c0       	rjmp	.+12     	; 0x2ac8 <vfprintf+0x3c8>
    2abc:	c1 14       	cp	r12, r1
    2abe:	d1 04       	cpc	r13, r1
    2ac0:	41 f4       	brne	.+16     	; 0x2ad2 <vfprintf+0x3d2>
    2ac2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ac4:	e4 ff       	sbrs	r30, 4
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <vfprintf+0x3d2>
    2ac8:	d1 94       	neg	r13
    2aca:	c1 94       	neg	r12
    2acc:	d1 08       	sbc	r13, r1
    2ace:	8d e2       	ldi	r24, 0x2D	; 45
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <vfprintf+0x3d4>
    2ad2:	8b e2       	ldi	r24, 0x2B	; 43
    2ad4:	b7 01       	movw	r22, r14
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2adc:	80 e3       	ldi	r24, 0x30	; 48
    2ade:	2a e0       	ldi	r18, 0x0A	; 10
    2ae0:	c2 16       	cp	r12, r18
    2ae2:	d1 04       	cpc	r13, r1
    2ae4:	2c f0       	brlt	.+10     	; 0x2af0 <vfprintf+0x3f0>
    2ae6:	8f 5f       	subi	r24, 0xFF	; 255
    2ae8:	fa e0       	ldi	r31, 0x0A	; 10
    2aea:	cf 1a       	sub	r12, r31
    2aec:	d1 08       	sbc	r13, r1
    2aee:	f7 cf       	rjmp	.-18     	; 0x2ade <vfprintf+0x3de>
    2af0:	b7 01       	movw	r22, r14
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2af8:	b7 01       	movw	r22, r14
    2afa:	c6 01       	movw	r24, r12
    2afc:	c0 96       	adiw	r24, 0x30	; 48
    2afe:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2b02:	54 c1       	rjmp	.+680    	; 0x2dac <vfprintf+0x6ac>
    2b04:	83 36       	cpi	r24, 0x63	; 99
    2b06:	31 f0       	breq	.+12     	; 0x2b14 <vfprintf+0x414>
    2b08:	83 37       	cpi	r24, 0x73	; 115
    2b0a:	79 f0       	breq	.+30     	; 0x2b2a <vfprintf+0x42a>
    2b0c:	83 35       	cpi	r24, 0x53	; 83
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <vfprintf+0x412>
    2b10:	56 c0       	rjmp	.+172    	; 0x2bbe <vfprintf+0x4be>
    2b12:	20 c0       	rjmp	.+64     	; 0x2b54 <vfprintf+0x454>
    2b14:	56 01       	movw	r10, r12
    2b16:	32 e0       	ldi	r19, 0x02	; 2
    2b18:	a3 0e       	add	r10, r19
    2b1a:	b1 1c       	adc	r11, r1
    2b1c:	f6 01       	movw	r30, r12
    2b1e:	80 81       	ld	r24, Z
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	01 e0       	ldi	r16, 0x01	; 1
    2b24:	10 e0       	ldi	r17, 0x00	; 0
    2b26:	63 01       	movw	r12, r6
    2b28:	12 c0       	rjmp	.+36     	; 0x2b4e <vfprintf+0x44e>
    2b2a:	56 01       	movw	r10, r12
    2b2c:	f2 e0       	ldi	r31, 0x02	; 2
    2b2e:	af 0e       	add	r10, r31
    2b30:	b1 1c       	adc	r11, r1
    2b32:	f6 01       	movw	r30, r12
    2b34:	c0 80       	ld	r12, Z
    2b36:	d1 80       	ldd	r13, Z+1	; 0x01
    2b38:	96 fe       	sbrs	r9, 6
    2b3a:	03 c0       	rjmp	.+6      	; 0x2b42 <vfprintf+0x442>
    2b3c:	61 2f       	mov	r22, r17
    2b3e:	70 e0       	ldi	r23, 0x00	; 0
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <vfprintf+0x446>
    2b42:	6f ef       	ldi	r22, 0xFF	; 255
    2b44:	7f ef       	ldi	r23, 0xFF	; 255
    2b46:	c6 01       	movw	r24, r12
    2b48:	0e 94 03 18 	call	0x3006	; 0x3006 <strnlen>
    2b4c:	8c 01       	movw	r16, r24
    2b4e:	f9 2d       	mov	r31, r9
    2b50:	ff 77       	andi	r31, 0x7F	; 127
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <vfprintf+0x47c>
    2b54:	56 01       	movw	r10, r12
    2b56:	22 e0       	ldi	r18, 0x02	; 2
    2b58:	a2 0e       	add	r10, r18
    2b5a:	b1 1c       	adc	r11, r1
    2b5c:	f6 01       	movw	r30, r12
    2b5e:	c0 80       	ld	r12, Z
    2b60:	d1 80       	ldd	r13, Z+1	; 0x01
    2b62:	96 fe       	sbrs	r9, 6
    2b64:	03 c0       	rjmp	.+6      	; 0x2b6c <vfprintf+0x46c>
    2b66:	61 2f       	mov	r22, r17
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <vfprintf+0x470>
    2b6c:	6f ef       	ldi	r22, 0xFF	; 255
    2b6e:	7f ef       	ldi	r23, 0xFF	; 255
    2b70:	c6 01       	movw	r24, r12
    2b72:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <strnlen_P>
    2b76:	8c 01       	movw	r16, r24
    2b78:	f9 2d       	mov	r31, r9
    2b7a:	f0 68       	ori	r31, 0x80	; 128
    2b7c:	9f 2e       	mov	r9, r31
    2b7e:	f3 fd       	sbrc	r31, 3
    2b80:	1a c0       	rjmp	.+52     	; 0x2bb6 <vfprintf+0x4b6>
    2b82:	85 2d       	mov	r24, r5
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	08 17       	cp	r16, r24
    2b88:	19 07       	cpc	r17, r25
    2b8a:	a8 f4       	brcc	.+42     	; 0x2bb6 <vfprintf+0x4b6>
    2b8c:	b7 01       	movw	r22, r14
    2b8e:	80 e2       	ldi	r24, 0x20	; 32
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2b96:	5a 94       	dec	r5
    2b98:	f4 cf       	rjmp	.-24     	; 0x2b82 <vfprintf+0x482>
    2b9a:	f6 01       	movw	r30, r12
    2b9c:	97 fc       	sbrc	r9, 7
    2b9e:	85 91       	lpm	r24, Z+
    2ba0:	97 fe       	sbrs	r9, 7
    2ba2:	81 91       	ld	r24, Z+
    2ba4:	6f 01       	movw	r12, r30
    2ba6:	b7 01       	movw	r22, r14
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2bae:	51 10       	cpse	r5, r1
    2bb0:	5a 94       	dec	r5
    2bb2:	01 50       	subi	r16, 0x01	; 1
    2bb4:	11 09       	sbc	r17, r1
    2bb6:	01 15       	cp	r16, r1
    2bb8:	11 05       	cpc	r17, r1
    2bba:	79 f7       	brne	.-34     	; 0x2b9a <vfprintf+0x49a>
    2bbc:	f7 c0       	rjmp	.+494    	; 0x2dac <vfprintf+0x6ac>
    2bbe:	84 36       	cpi	r24, 0x64	; 100
    2bc0:	11 f0       	breq	.+4      	; 0x2bc6 <vfprintf+0x4c6>
    2bc2:	89 36       	cpi	r24, 0x69	; 105
    2bc4:	61 f5       	brne	.+88     	; 0x2c1e <vfprintf+0x51e>
    2bc6:	56 01       	movw	r10, r12
    2bc8:	97 fe       	sbrs	r9, 7
    2bca:	09 c0       	rjmp	.+18     	; 0x2bde <vfprintf+0x4de>
    2bcc:	24 e0       	ldi	r18, 0x04	; 4
    2bce:	a2 0e       	add	r10, r18
    2bd0:	b1 1c       	adc	r11, r1
    2bd2:	f6 01       	movw	r30, r12
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	0a c0       	rjmp	.+20     	; 0x2bf2 <vfprintf+0x4f2>
    2bde:	f2 e0       	ldi	r31, 0x02	; 2
    2be0:	af 0e       	add	r10, r31
    2be2:	b1 1c       	adc	r11, r1
    2be4:	f6 01       	movw	r30, r12
    2be6:	60 81       	ld	r22, Z
    2be8:	71 81       	ldd	r23, Z+1	; 0x01
    2bea:	07 2e       	mov	r0, r23
    2bec:	00 0c       	add	r0, r0
    2bee:	88 0b       	sbc	r24, r24
    2bf0:	99 0b       	sbc	r25, r25
    2bf2:	f9 2d       	mov	r31, r9
    2bf4:	ff 76       	andi	r31, 0x6F	; 111
    2bf6:	9f 2e       	mov	r9, r31
    2bf8:	97 ff       	sbrs	r25, 7
    2bfa:	09 c0       	rjmp	.+18     	; 0x2c0e <vfprintf+0x50e>
    2bfc:	90 95       	com	r25
    2bfe:	80 95       	com	r24
    2c00:	70 95       	com	r23
    2c02:	61 95       	neg	r22
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	8f 4f       	sbci	r24, 0xFF	; 255
    2c08:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0a:	f0 68       	ori	r31, 0x80	; 128
    2c0c:	9f 2e       	mov	r9, r31
    2c0e:	2a e0       	ldi	r18, 0x0A	; 10
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	a3 01       	movw	r20, r6
    2c14:	0e 94 81 18 	call	0x3102	; 0x3102 <__ultoa_invert>
    2c18:	c8 2e       	mov	r12, r24
    2c1a:	c6 18       	sub	r12, r6
    2c1c:	3f c0       	rjmp	.+126    	; 0x2c9c <vfprintf+0x59c>
    2c1e:	09 2d       	mov	r16, r9
    2c20:	85 37       	cpi	r24, 0x75	; 117
    2c22:	21 f4       	brne	.+8      	; 0x2c2c <vfprintf+0x52c>
    2c24:	0f 7e       	andi	r16, 0xEF	; 239
    2c26:	2a e0       	ldi	r18, 0x0A	; 10
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	1d c0       	rjmp	.+58     	; 0x2c66 <vfprintf+0x566>
    2c2c:	09 7f       	andi	r16, 0xF9	; 249
    2c2e:	8f 36       	cpi	r24, 0x6F	; 111
    2c30:	91 f0       	breq	.+36     	; 0x2c56 <vfprintf+0x556>
    2c32:	18 f4       	brcc	.+6      	; 0x2c3a <vfprintf+0x53a>
    2c34:	88 35       	cpi	r24, 0x58	; 88
    2c36:	59 f0       	breq	.+22     	; 0x2c4e <vfprintf+0x54e>
    2c38:	c3 c0       	rjmp	.+390    	; 0x2dc0 <vfprintf+0x6c0>
    2c3a:	80 37       	cpi	r24, 0x70	; 112
    2c3c:	19 f0       	breq	.+6      	; 0x2c44 <vfprintf+0x544>
    2c3e:	88 37       	cpi	r24, 0x78	; 120
    2c40:	11 f0       	breq	.+4      	; 0x2c46 <vfprintf+0x546>
    2c42:	be c0       	rjmp	.+380    	; 0x2dc0 <vfprintf+0x6c0>
    2c44:	00 61       	ori	r16, 0x10	; 16
    2c46:	04 ff       	sbrs	r16, 4
    2c48:	09 c0       	rjmp	.+18     	; 0x2c5c <vfprintf+0x55c>
    2c4a:	04 60       	ori	r16, 0x04	; 4
    2c4c:	07 c0       	rjmp	.+14     	; 0x2c5c <vfprintf+0x55c>
    2c4e:	94 fe       	sbrs	r9, 4
    2c50:	08 c0       	rjmp	.+16     	; 0x2c62 <vfprintf+0x562>
    2c52:	06 60       	ori	r16, 0x06	; 6
    2c54:	06 c0       	rjmp	.+12     	; 0x2c62 <vfprintf+0x562>
    2c56:	28 e0       	ldi	r18, 0x08	; 8
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	05 c0       	rjmp	.+10     	; 0x2c66 <vfprintf+0x566>
    2c5c:	20 e1       	ldi	r18, 0x10	; 16
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <vfprintf+0x566>
    2c62:	20 e1       	ldi	r18, 0x10	; 16
    2c64:	32 e0       	ldi	r19, 0x02	; 2
    2c66:	56 01       	movw	r10, r12
    2c68:	07 ff       	sbrs	r16, 7
    2c6a:	09 c0       	rjmp	.+18     	; 0x2c7e <vfprintf+0x57e>
    2c6c:	84 e0       	ldi	r24, 0x04	; 4
    2c6e:	a8 0e       	add	r10, r24
    2c70:	b1 1c       	adc	r11, r1
    2c72:	f6 01       	movw	r30, r12
    2c74:	60 81       	ld	r22, Z
    2c76:	71 81       	ldd	r23, Z+1	; 0x01
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	08 c0       	rjmp	.+16     	; 0x2c8e <vfprintf+0x58e>
    2c7e:	f2 e0       	ldi	r31, 0x02	; 2
    2c80:	af 0e       	add	r10, r31
    2c82:	b1 1c       	adc	r11, r1
    2c84:	f6 01       	movw	r30, r12
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	a3 01       	movw	r20, r6
    2c90:	0e 94 81 18 	call	0x3102	; 0x3102 <__ultoa_invert>
    2c94:	c8 2e       	mov	r12, r24
    2c96:	c6 18       	sub	r12, r6
    2c98:	0f 77       	andi	r16, 0x7F	; 127
    2c9a:	90 2e       	mov	r9, r16
    2c9c:	96 fe       	sbrs	r9, 6
    2c9e:	0b c0       	rjmp	.+22     	; 0x2cb6 <vfprintf+0x5b6>
    2ca0:	09 2d       	mov	r16, r9
    2ca2:	0e 7f       	andi	r16, 0xFE	; 254
    2ca4:	c1 16       	cp	r12, r17
    2ca6:	50 f4       	brcc	.+20     	; 0x2cbc <vfprintf+0x5bc>
    2ca8:	94 fe       	sbrs	r9, 4
    2caa:	0a c0       	rjmp	.+20     	; 0x2cc0 <vfprintf+0x5c0>
    2cac:	92 fc       	sbrc	r9, 2
    2cae:	08 c0       	rjmp	.+16     	; 0x2cc0 <vfprintf+0x5c0>
    2cb0:	09 2d       	mov	r16, r9
    2cb2:	0e 7e       	andi	r16, 0xEE	; 238
    2cb4:	05 c0       	rjmp	.+10     	; 0x2cc0 <vfprintf+0x5c0>
    2cb6:	dc 2c       	mov	r13, r12
    2cb8:	09 2d       	mov	r16, r9
    2cba:	03 c0       	rjmp	.+6      	; 0x2cc2 <vfprintf+0x5c2>
    2cbc:	dc 2c       	mov	r13, r12
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <vfprintf+0x5c2>
    2cc0:	d1 2e       	mov	r13, r17
    2cc2:	04 ff       	sbrs	r16, 4
    2cc4:	0d c0       	rjmp	.+26     	; 0x2ce0 <vfprintf+0x5e0>
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	ec 0d       	add	r30, r12
    2cca:	f1 1d       	adc	r31, r1
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 33       	cpi	r24, 0x30	; 48
    2cd0:	11 f4       	brne	.+4      	; 0x2cd6 <vfprintf+0x5d6>
    2cd2:	09 7e       	andi	r16, 0xE9	; 233
    2cd4:	09 c0       	rjmp	.+18     	; 0x2ce8 <vfprintf+0x5e8>
    2cd6:	02 ff       	sbrs	r16, 2
    2cd8:	06 c0       	rjmp	.+12     	; 0x2ce6 <vfprintf+0x5e6>
    2cda:	d3 94       	inc	r13
    2cdc:	d3 94       	inc	r13
    2cde:	04 c0       	rjmp	.+8      	; 0x2ce8 <vfprintf+0x5e8>
    2ce0:	80 2f       	mov	r24, r16
    2ce2:	86 78       	andi	r24, 0x86	; 134
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <vfprintf+0x5e8>
    2ce6:	d3 94       	inc	r13
    2ce8:	03 fd       	sbrc	r16, 3
    2cea:	11 c0       	rjmp	.+34     	; 0x2d0e <vfprintf+0x60e>
    2cec:	00 ff       	sbrs	r16, 0
    2cee:	06 c0       	rjmp	.+12     	; 0x2cfc <vfprintf+0x5fc>
    2cf0:	1c 2d       	mov	r17, r12
    2cf2:	d5 14       	cp	r13, r5
    2cf4:	80 f4       	brcc	.+32     	; 0x2d16 <vfprintf+0x616>
    2cf6:	15 0d       	add	r17, r5
    2cf8:	1d 19       	sub	r17, r13
    2cfa:	0d c0       	rjmp	.+26     	; 0x2d16 <vfprintf+0x616>
    2cfc:	d5 14       	cp	r13, r5
    2cfe:	58 f4       	brcc	.+22     	; 0x2d16 <vfprintf+0x616>
    2d00:	b7 01       	movw	r22, r14
    2d02:	80 e2       	ldi	r24, 0x20	; 32
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2d0a:	d3 94       	inc	r13
    2d0c:	f7 cf       	rjmp	.-18     	; 0x2cfc <vfprintf+0x5fc>
    2d0e:	d5 14       	cp	r13, r5
    2d10:	10 f4       	brcc	.+4      	; 0x2d16 <vfprintf+0x616>
    2d12:	5d 18       	sub	r5, r13
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <vfprintf+0x618>
    2d16:	51 2c       	mov	r5, r1
    2d18:	04 ff       	sbrs	r16, 4
    2d1a:	10 c0       	rjmp	.+32     	; 0x2d3c <vfprintf+0x63c>
    2d1c:	b7 01       	movw	r22, r14
    2d1e:	80 e3       	ldi	r24, 0x30	; 48
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2d26:	02 ff       	sbrs	r16, 2
    2d28:	17 c0       	rjmp	.+46     	; 0x2d58 <vfprintf+0x658>
    2d2a:	01 fd       	sbrc	r16, 1
    2d2c:	03 c0       	rjmp	.+6      	; 0x2d34 <vfprintf+0x634>
    2d2e:	88 e7       	ldi	r24, 0x78	; 120
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <vfprintf+0x638>
    2d34:	88 e5       	ldi	r24, 0x58	; 88
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	b7 01       	movw	r22, r14
    2d3a:	0c c0       	rjmp	.+24     	; 0x2d54 <vfprintf+0x654>
    2d3c:	80 2f       	mov	r24, r16
    2d3e:	86 78       	andi	r24, 0x86	; 134
    2d40:	59 f0       	breq	.+22     	; 0x2d58 <vfprintf+0x658>
    2d42:	01 ff       	sbrs	r16, 1
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vfprintf+0x64a>
    2d46:	8b e2       	ldi	r24, 0x2B	; 43
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <vfprintf+0x64c>
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	07 fd       	sbrc	r16, 7
    2d4e:	8d e2       	ldi	r24, 0x2D	; 45
    2d50:	b7 01       	movw	r22, r14
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2d58:	c1 16       	cp	r12, r17
    2d5a:	38 f4       	brcc	.+14     	; 0x2d6a <vfprintf+0x66a>
    2d5c:	b7 01       	movw	r22, r14
    2d5e:	80 e3       	ldi	r24, 0x30	; 48
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2d66:	11 50       	subi	r17, 0x01	; 1
    2d68:	f7 cf       	rjmp	.-18     	; 0x2d58 <vfprintf+0x658>
    2d6a:	ca 94       	dec	r12
    2d6c:	f3 01       	movw	r30, r6
    2d6e:	ec 0d       	add	r30, r12
    2d70:	f1 1d       	adc	r31, r1
    2d72:	80 81       	ld	r24, Z
    2d74:	b7 01       	movw	r22, r14
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2d7c:	c1 10       	cpse	r12, r1
    2d7e:	f5 cf       	rjmp	.-22     	; 0x2d6a <vfprintf+0x66a>
    2d80:	15 c0       	rjmp	.+42     	; 0x2dac <vfprintf+0x6ac>
    2d82:	f4 e0       	ldi	r31, 0x04	; 4
    2d84:	f5 15       	cp	r31, r5
    2d86:	60 f5       	brcc	.+88     	; 0x2de0 <vfprintf+0x6e0>
    2d88:	84 e0       	ldi	r24, 0x04	; 4
    2d8a:	58 1a       	sub	r5, r24
    2d8c:	93 fe       	sbrs	r9, 3
    2d8e:	1f c0       	rjmp	.+62     	; 0x2dce <vfprintf+0x6ce>
    2d90:	01 11       	cpse	r16, r1
    2d92:	27 c0       	rjmp	.+78     	; 0x2de2 <vfprintf+0x6e2>
    2d94:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d96:	23 ff       	sbrs	r18, 3
    2d98:	2a c0       	rjmp	.+84     	; 0x2dee <vfprintf+0x6ee>
    2d9a:	0e e7       	ldi	r16, 0x7E	; 126
    2d9c:	12 e0       	ldi	r17, 0x02	; 2
    2d9e:	39 2d       	mov	r19, r9
    2da0:	30 71       	andi	r19, 0x10	; 16
    2da2:	93 2e       	mov	r9, r19
    2da4:	f8 01       	movw	r30, r16
    2da6:	84 91       	lpm	r24, Z
    2da8:	81 11       	cpse	r24, r1
    2daa:	24 c0       	rjmp	.+72     	; 0x2df4 <vfprintf+0x6f4>
    2dac:	55 20       	and	r5, r5
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <vfprintf+0x6b2>
    2db0:	e4 cc       	rjmp	.-1592   	; 0x277a <vfprintf+0x7a>
    2db2:	b7 01       	movw	r22, r14
    2db4:	80 e2       	ldi	r24, 0x20	; 32
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2dbc:	5a 94       	dec	r5
    2dbe:	f6 cf       	rjmp	.-20     	; 0x2dac <vfprintf+0x6ac>
    2dc0:	f7 01       	movw	r30, r14
    2dc2:	86 81       	ldd	r24, Z+6	; 0x06
    2dc4:	97 81       	ldd	r25, Z+7	; 0x07
    2dc6:	26 c0       	rjmp	.+76     	; 0x2e14 <vfprintf+0x714>
    2dc8:	8f ef       	ldi	r24, 0xFF	; 255
    2dca:	9f ef       	ldi	r25, 0xFF	; 255
    2dcc:	23 c0       	rjmp	.+70     	; 0x2e14 <vfprintf+0x714>
    2dce:	b7 01       	movw	r22, r14
    2dd0:	80 e2       	ldi	r24, 0x20	; 32
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2dd8:	5a 94       	dec	r5
    2dda:	51 10       	cpse	r5, r1
    2ddc:	f8 cf       	rjmp	.-16     	; 0x2dce <vfprintf+0x6ce>
    2dde:	d8 cf       	rjmp	.-80     	; 0x2d90 <vfprintf+0x690>
    2de0:	51 2c       	mov	r5, r1
    2de2:	b7 01       	movw	r22, r14
    2de4:	80 2f       	mov	r24, r16
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2dec:	d3 cf       	rjmp	.-90     	; 0x2d94 <vfprintf+0x694>
    2dee:	02 e8       	ldi	r16, 0x82	; 130
    2df0:	12 e0       	ldi	r17, 0x02	; 2
    2df2:	d5 cf       	rjmp	.-86     	; 0x2d9e <vfprintf+0x69e>
    2df4:	91 10       	cpse	r9, r1
    2df6:	80 52       	subi	r24, 0x20	; 32
    2df8:	b7 01       	movw	r22, r14
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	0e 94 0e 18 	call	0x301c	; 0x301c <fputc>
    2e00:	0f 5f       	subi	r16, 0xFF	; 255
    2e02:	1f 4f       	sbci	r17, 0xFF	; 255
    2e04:	cf cf       	rjmp	.-98     	; 0x2da4 <vfprintf+0x6a4>
    2e06:	23 e0       	ldi	r18, 0x03	; 3
    2e08:	25 15       	cp	r18, r5
    2e0a:	10 f4       	brcc	.+4      	; 0x2e10 <vfprintf+0x710>
    2e0c:	83 e0       	ldi	r24, 0x03	; 3
    2e0e:	bd cf       	rjmp	.-134    	; 0x2d8a <vfprintf+0x68a>
    2e10:	51 2c       	mov	r5, r1
    2e12:	c0 cf       	rjmp	.-128    	; 0x2d94 <vfprintf+0x694>
    2e14:	60 96       	adiw	r28, 0x10	; 16
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	bf 90       	pop	r11
    2e2c:	af 90       	pop	r10
    2e2e:	9f 90       	pop	r9
    2e30:	8f 90       	pop	r8
    2e32:	7f 90       	pop	r7
    2e34:	6f 90       	pop	r6
    2e36:	5f 90       	pop	r5
    2e38:	4f 90       	pop	r4
    2e3a:	3f 90       	pop	r3
    2e3c:	2f 90       	pop	r2
    2e3e:	08 95       	ret

00002e40 <__ftoa_engine>:
    2e40:	28 30       	cpi	r18, 0x08	; 8
    2e42:	08 f0       	brcs	.+2      	; 0x2e46 <__ftoa_engine+0x6>
    2e44:	27 e0       	ldi	r18, 0x07	; 7
    2e46:	33 27       	eor	r19, r19
    2e48:	da 01       	movw	r26, r20
    2e4a:	99 0f       	add	r25, r25
    2e4c:	31 1d       	adc	r19, r1
    2e4e:	87 fd       	sbrc	r24, 7
    2e50:	91 60       	ori	r25, 0x01	; 1
    2e52:	00 96       	adiw	r24, 0x00	; 0
    2e54:	61 05       	cpc	r22, r1
    2e56:	71 05       	cpc	r23, r1
    2e58:	39 f4       	brne	.+14     	; 0x2e68 <__ftoa_engine+0x28>
    2e5a:	32 60       	ori	r19, 0x02	; 2
    2e5c:	2e 5f       	subi	r18, 0xFE	; 254
    2e5e:	3d 93       	st	X+, r19
    2e60:	30 e3       	ldi	r19, 0x30	; 48
    2e62:	2a 95       	dec	r18
    2e64:	e1 f7       	brne	.-8      	; 0x2e5e <__ftoa_engine+0x1e>
    2e66:	08 95       	ret
    2e68:	9f 3f       	cpi	r25, 0xFF	; 255
    2e6a:	30 f0       	brcs	.+12     	; 0x2e78 <__ftoa_engine+0x38>
    2e6c:	80 38       	cpi	r24, 0x80	; 128
    2e6e:	71 05       	cpc	r23, r1
    2e70:	61 05       	cpc	r22, r1
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <__ftoa_engine+0x36>
    2e74:	3c 5f       	subi	r19, 0xFC	; 252
    2e76:	3c 5f       	subi	r19, 0xFC	; 252
    2e78:	3d 93       	st	X+, r19
    2e7a:	91 30       	cpi	r25, 0x01	; 1
    2e7c:	08 f0       	brcs	.+2      	; 0x2e80 <__ftoa_engine+0x40>
    2e7e:	80 68       	ori	r24, 0x80	; 128
    2e80:	91 1d       	adc	r25, r1
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	1f 93       	push	r17
    2e88:	0f 93       	push	r16
    2e8a:	ff 92       	push	r15
    2e8c:	ef 92       	push	r14
    2e8e:	19 2f       	mov	r17, r25
    2e90:	98 7f       	andi	r25, 0xF8	; 248
    2e92:	96 95       	lsr	r25
    2e94:	e9 2f       	mov	r30, r25
    2e96:	96 95       	lsr	r25
    2e98:	96 95       	lsr	r25
    2e9a:	e9 0f       	add	r30, r25
    2e9c:	ff 27       	eor	r31, r31
    2e9e:	e0 52       	subi	r30, 0x20	; 32
    2ea0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea2:	99 27       	eor	r25, r25
    2ea4:	33 27       	eor	r19, r19
    2ea6:	ee 24       	eor	r14, r14
    2ea8:	ff 24       	eor	r15, r15
    2eaa:	a7 01       	movw	r20, r14
    2eac:	e7 01       	movw	r28, r14
    2eae:	05 90       	lpm	r0, Z+
    2eb0:	08 94       	sec
    2eb2:	07 94       	ror	r0
    2eb4:	28 f4       	brcc	.+10     	; 0x2ec0 <__ftoa_engine+0x80>
    2eb6:	36 0f       	add	r19, r22
    2eb8:	e7 1e       	adc	r14, r23
    2eba:	f8 1e       	adc	r15, r24
    2ebc:	49 1f       	adc	r20, r25
    2ebe:	51 1d       	adc	r21, r1
    2ec0:	66 0f       	add	r22, r22
    2ec2:	77 1f       	adc	r23, r23
    2ec4:	88 1f       	adc	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	06 94       	lsr	r0
    2eca:	a1 f7       	brne	.-24     	; 0x2eb4 <__ftoa_engine+0x74>
    2ecc:	05 90       	lpm	r0, Z+
    2ece:	07 94       	ror	r0
    2ed0:	28 f4       	brcc	.+10     	; 0x2edc <__ftoa_engine+0x9c>
    2ed2:	e7 0e       	add	r14, r23
    2ed4:	f8 1e       	adc	r15, r24
    2ed6:	49 1f       	adc	r20, r25
    2ed8:	56 1f       	adc	r21, r22
    2eda:	c1 1d       	adc	r28, r1
    2edc:	77 0f       	add	r23, r23
    2ede:	88 1f       	adc	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	66 1f       	adc	r22, r22
    2ee4:	06 94       	lsr	r0
    2ee6:	a1 f7       	brne	.-24     	; 0x2ed0 <__ftoa_engine+0x90>
    2ee8:	05 90       	lpm	r0, Z+
    2eea:	07 94       	ror	r0
    2eec:	28 f4       	brcc	.+10     	; 0x2ef8 <__ftoa_engine+0xb8>
    2eee:	f8 0e       	add	r15, r24
    2ef0:	49 1f       	adc	r20, r25
    2ef2:	56 1f       	adc	r21, r22
    2ef4:	c7 1f       	adc	r28, r23
    2ef6:	d1 1d       	adc	r29, r1
    2ef8:	88 0f       	add	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	66 1f       	adc	r22, r22
    2efe:	77 1f       	adc	r23, r23
    2f00:	06 94       	lsr	r0
    2f02:	a1 f7       	brne	.-24     	; 0x2eec <__ftoa_engine+0xac>
    2f04:	05 90       	lpm	r0, Z+
    2f06:	07 94       	ror	r0
    2f08:	20 f4       	brcc	.+8      	; 0x2f12 <__ftoa_engine+0xd2>
    2f0a:	49 0f       	add	r20, r25
    2f0c:	56 1f       	adc	r21, r22
    2f0e:	c7 1f       	adc	r28, r23
    2f10:	d8 1f       	adc	r29, r24
    2f12:	99 0f       	add	r25, r25
    2f14:	66 1f       	adc	r22, r22
    2f16:	77 1f       	adc	r23, r23
    2f18:	88 1f       	adc	r24, r24
    2f1a:	06 94       	lsr	r0
    2f1c:	a9 f7       	brne	.-22     	; 0x2f08 <__ftoa_engine+0xc8>
    2f1e:	84 91       	lpm	r24, Z
    2f20:	10 95       	com	r17
    2f22:	17 70       	andi	r17, 0x07	; 7
    2f24:	41 f0       	breq	.+16     	; 0x2f36 <__ftoa_engine+0xf6>
    2f26:	d6 95       	lsr	r29
    2f28:	c7 95       	ror	r28
    2f2a:	57 95       	ror	r21
    2f2c:	47 95       	ror	r20
    2f2e:	f7 94       	ror	r15
    2f30:	e7 94       	ror	r14
    2f32:	1a 95       	dec	r17
    2f34:	c1 f7       	brne	.-16     	; 0x2f26 <__ftoa_engine+0xe6>
    2f36:	e6 e8       	ldi	r30, 0x86	; 134
    2f38:	f2 e0       	ldi	r31, 0x02	; 2
    2f3a:	68 94       	set
    2f3c:	15 90       	lpm	r1, Z+
    2f3e:	15 91       	lpm	r17, Z+
    2f40:	35 91       	lpm	r19, Z+
    2f42:	65 91       	lpm	r22, Z+
    2f44:	95 91       	lpm	r25, Z+
    2f46:	05 90       	lpm	r0, Z+
    2f48:	7f e2       	ldi	r23, 0x2F	; 47
    2f4a:	73 95       	inc	r23
    2f4c:	e1 18       	sub	r14, r1
    2f4e:	f1 0a       	sbc	r15, r17
    2f50:	43 0b       	sbc	r20, r19
    2f52:	56 0b       	sbc	r21, r22
    2f54:	c9 0b       	sbc	r28, r25
    2f56:	d0 09       	sbc	r29, r0
    2f58:	c0 f7       	brcc	.-16     	; 0x2f4a <__ftoa_engine+0x10a>
    2f5a:	e1 0c       	add	r14, r1
    2f5c:	f1 1e       	adc	r15, r17
    2f5e:	43 1f       	adc	r20, r19
    2f60:	56 1f       	adc	r21, r22
    2f62:	c9 1f       	adc	r28, r25
    2f64:	d0 1d       	adc	r29, r0
    2f66:	7e f4       	brtc	.+30     	; 0x2f86 <__ftoa_engine+0x146>
    2f68:	70 33       	cpi	r23, 0x30	; 48
    2f6a:	11 f4       	brne	.+4      	; 0x2f70 <__ftoa_engine+0x130>
    2f6c:	8a 95       	dec	r24
    2f6e:	e6 cf       	rjmp	.-52     	; 0x2f3c <__ftoa_engine+0xfc>
    2f70:	e8 94       	clt
    2f72:	01 50       	subi	r16, 0x01	; 1
    2f74:	30 f0       	brcs	.+12     	; 0x2f82 <__ftoa_engine+0x142>
    2f76:	08 0f       	add	r16, r24
    2f78:	0a f4       	brpl	.+2      	; 0x2f7c <__ftoa_engine+0x13c>
    2f7a:	00 27       	eor	r16, r16
    2f7c:	02 17       	cp	r16, r18
    2f7e:	08 f4       	brcc	.+2      	; 0x2f82 <__ftoa_engine+0x142>
    2f80:	20 2f       	mov	r18, r16
    2f82:	23 95       	inc	r18
    2f84:	02 2f       	mov	r16, r18
    2f86:	7a 33       	cpi	r23, 0x3A	; 58
    2f88:	28 f0       	brcs	.+10     	; 0x2f94 <__ftoa_engine+0x154>
    2f8a:	79 e3       	ldi	r23, 0x39	; 57
    2f8c:	7d 93       	st	X+, r23
    2f8e:	2a 95       	dec	r18
    2f90:	e9 f7       	brne	.-6      	; 0x2f8c <__ftoa_engine+0x14c>
    2f92:	10 c0       	rjmp	.+32     	; 0x2fb4 <__ftoa_engine+0x174>
    2f94:	7d 93       	st	X+, r23
    2f96:	2a 95       	dec	r18
    2f98:	89 f6       	brne	.-94     	; 0x2f3c <__ftoa_engine+0xfc>
    2f9a:	06 94       	lsr	r0
    2f9c:	97 95       	ror	r25
    2f9e:	67 95       	ror	r22
    2fa0:	37 95       	ror	r19
    2fa2:	17 95       	ror	r17
    2fa4:	17 94       	ror	r1
    2fa6:	e1 18       	sub	r14, r1
    2fa8:	f1 0a       	sbc	r15, r17
    2faa:	43 0b       	sbc	r20, r19
    2fac:	56 0b       	sbc	r21, r22
    2fae:	c9 0b       	sbc	r28, r25
    2fb0:	d0 09       	sbc	r29, r0
    2fb2:	98 f0       	brcs	.+38     	; 0x2fda <__ftoa_engine+0x19a>
    2fb4:	23 95       	inc	r18
    2fb6:	7e 91       	ld	r23, -X
    2fb8:	73 95       	inc	r23
    2fba:	7a 33       	cpi	r23, 0x3A	; 58
    2fbc:	08 f0       	brcs	.+2      	; 0x2fc0 <__ftoa_engine+0x180>
    2fbe:	70 e3       	ldi	r23, 0x30	; 48
    2fc0:	7c 93       	st	X, r23
    2fc2:	20 13       	cpse	r18, r16
    2fc4:	b8 f7       	brcc	.-18     	; 0x2fb4 <__ftoa_engine+0x174>
    2fc6:	7e 91       	ld	r23, -X
    2fc8:	70 61       	ori	r23, 0x10	; 16
    2fca:	7d 93       	st	X+, r23
    2fcc:	30 f0       	brcs	.+12     	; 0x2fda <__ftoa_engine+0x19a>
    2fce:	83 95       	inc	r24
    2fd0:	71 e3       	ldi	r23, 0x31	; 49
    2fd2:	7d 93       	st	X+, r23
    2fd4:	70 e3       	ldi	r23, 0x30	; 48
    2fd6:	2a 95       	dec	r18
    2fd8:	e1 f7       	brne	.-8      	; 0x2fd2 <__ftoa_engine+0x192>
    2fda:	11 24       	eor	r1, r1
    2fdc:	ef 90       	pop	r14
    2fde:	ff 90       	pop	r15
    2fe0:	0f 91       	pop	r16
    2fe2:	1f 91       	pop	r17
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	99 27       	eor	r25, r25
    2fea:	87 fd       	sbrc	r24, 7
    2fec:	90 95       	com	r25
    2fee:	08 95       	ret

00002ff0 <strnlen_P>:
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	05 90       	lpm	r0, Z+
    2ff4:	61 50       	subi	r22, 0x01	; 1
    2ff6:	70 40       	sbci	r23, 0x00	; 0
    2ff8:	01 10       	cpse	r0, r1
    2ffa:	d8 f7       	brcc	.-10     	; 0x2ff2 <strnlen_P+0x2>
    2ffc:	80 95       	com	r24
    2ffe:	90 95       	com	r25
    3000:	8e 0f       	add	r24, r30
    3002:	9f 1f       	adc	r25, r31
    3004:	08 95       	ret

00003006 <strnlen>:
    3006:	fc 01       	movw	r30, r24
    3008:	61 50       	subi	r22, 0x01	; 1
    300a:	70 40       	sbci	r23, 0x00	; 0
    300c:	01 90       	ld	r0, Z+
    300e:	01 10       	cpse	r0, r1
    3010:	d8 f7       	brcc	.-10     	; 0x3008 <strnlen+0x2>
    3012:	80 95       	com	r24
    3014:	90 95       	com	r25
    3016:	8e 0f       	add	r24, r30
    3018:	9f 1f       	adc	r25, r31
    301a:	08 95       	ret

0000301c <fputc>:
    301c:	0f 93       	push	r16
    301e:	1f 93       	push	r17
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	fb 01       	movw	r30, r22
    3026:	23 81       	ldd	r18, Z+3	; 0x03
    3028:	21 fd       	sbrc	r18, 1
    302a:	03 c0       	rjmp	.+6      	; 0x3032 <fputc+0x16>
    302c:	8f ef       	ldi	r24, 0xFF	; 255
    302e:	9f ef       	ldi	r25, 0xFF	; 255
    3030:	2c c0       	rjmp	.+88     	; 0x308a <fputc+0x6e>
    3032:	22 ff       	sbrs	r18, 2
    3034:	16 c0       	rjmp	.+44     	; 0x3062 <fputc+0x46>
    3036:	46 81       	ldd	r20, Z+6	; 0x06
    3038:	57 81       	ldd	r21, Z+7	; 0x07
    303a:	24 81       	ldd	r18, Z+4	; 0x04
    303c:	35 81       	ldd	r19, Z+5	; 0x05
    303e:	42 17       	cp	r20, r18
    3040:	53 07       	cpc	r21, r19
    3042:	44 f4       	brge	.+16     	; 0x3054 <fputc+0x38>
    3044:	a0 81       	ld	r26, Z
    3046:	b1 81       	ldd	r27, Z+1	; 0x01
    3048:	9d 01       	movw	r18, r26
    304a:	2f 5f       	subi	r18, 0xFF	; 255
    304c:	3f 4f       	sbci	r19, 0xFF	; 255
    304e:	20 83       	st	Z, r18
    3050:	31 83       	std	Z+1, r19	; 0x01
    3052:	8c 93       	st	X, r24
    3054:	26 81       	ldd	r18, Z+6	; 0x06
    3056:	37 81       	ldd	r19, Z+7	; 0x07
    3058:	2f 5f       	subi	r18, 0xFF	; 255
    305a:	3f 4f       	sbci	r19, 0xFF	; 255
    305c:	26 83       	std	Z+6, r18	; 0x06
    305e:	37 83       	std	Z+7, r19	; 0x07
    3060:	14 c0       	rjmp	.+40     	; 0x308a <fputc+0x6e>
    3062:	8b 01       	movw	r16, r22
    3064:	ec 01       	movw	r28, r24
    3066:	fb 01       	movw	r30, r22
    3068:	00 84       	ldd	r0, Z+8	; 0x08
    306a:	f1 85       	ldd	r31, Z+9	; 0x09
    306c:	e0 2d       	mov	r30, r0
    306e:	19 95       	eicall
    3070:	89 2b       	or	r24, r25
    3072:	e1 f6       	brne	.-72     	; 0x302c <fputc+0x10>
    3074:	d8 01       	movw	r26, r16
    3076:	16 96       	adiw	r26, 0x06	; 6
    3078:	8d 91       	ld	r24, X+
    307a:	9c 91       	ld	r25, X
    307c:	17 97       	sbiw	r26, 0x07	; 7
    307e:	01 96       	adiw	r24, 0x01	; 1
    3080:	16 96       	adiw	r26, 0x06	; 6
    3082:	8d 93       	st	X+, r24
    3084:	9c 93       	st	X, r25
    3086:	17 97       	sbiw	r26, 0x07	; 7
    3088:	ce 01       	movw	r24, r28
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	08 95       	ret

00003094 <snprintf>:
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	2e 97       	sbiw	r28, 0x0e	; 14
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0e 89       	ldd	r16, Y+22	; 0x16
    30a8:	1f 89       	ldd	r17, Y+23	; 0x17
    30aa:	88 8d       	ldd	r24, Y+24	; 0x18
    30ac:	99 8d       	ldd	r25, Y+25	; 0x19
    30ae:	26 e0       	ldi	r18, 0x06	; 6
    30b0:	2c 83       	std	Y+4, r18	; 0x04
    30b2:	09 83       	std	Y+1, r16	; 0x01
    30b4:	1a 83       	std	Y+2, r17	; 0x02
    30b6:	97 ff       	sbrs	r25, 7
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <snprintf+0x2a>
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e8       	ldi	r25, 0x80	; 128
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	8d 83       	std	Y+5, r24	; 0x05
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	ae 01       	movw	r20, r28
    30c6:	44 5e       	subi	r20, 0xE4	; 228
    30c8:	5f 4f       	sbci	r21, 0xFF	; 255
    30ca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    30cc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    30ce:	ce 01       	movw	r24, r28
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	0e 94 80 13 	call	0x2700	; 0x2700 <vfprintf>
    30d6:	4d 81       	ldd	r20, Y+5	; 0x05
    30d8:	5e 81       	ldd	r21, Y+6	; 0x06
    30da:	57 fd       	sbrc	r21, 7
    30dc:	0a c0       	rjmp	.+20     	; 0x30f2 <snprintf+0x5e>
    30de:	2f 81       	ldd	r18, Y+7	; 0x07
    30e0:	38 85       	ldd	r19, Y+8	; 0x08
    30e2:	42 17       	cp	r20, r18
    30e4:	53 07       	cpc	r21, r19
    30e6:	0c f4       	brge	.+2      	; 0x30ea <snprintf+0x56>
    30e8:	9a 01       	movw	r18, r20
    30ea:	f8 01       	movw	r30, r16
    30ec:	e2 0f       	add	r30, r18
    30ee:	f3 1f       	adc	r31, r19
    30f0:	10 82       	st	Z, r1
    30f2:	2e 96       	adiw	r28, 0x0e	; 14
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    3100:	08 95       	ret

00003102 <__ultoa_invert>:
    3102:	fa 01       	movw	r30, r20
    3104:	aa 27       	eor	r26, r26
    3106:	28 30       	cpi	r18, 0x08	; 8
    3108:	51 f1       	breq	.+84     	; 0x315e <__ultoa_invert+0x5c>
    310a:	20 31       	cpi	r18, 0x10	; 16
    310c:	81 f1       	breq	.+96     	; 0x316e <__ultoa_invert+0x6c>
    310e:	e8 94       	clt
    3110:	6f 93       	push	r22
    3112:	6e 7f       	andi	r22, 0xFE	; 254
    3114:	6e 5f       	subi	r22, 0xFE	; 254
    3116:	7f 4f       	sbci	r23, 0xFF	; 255
    3118:	8f 4f       	sbci	r24, 0xFF	; 255
    311a:	9f 4f       	sbci	r25, 0xFF	; 255
    311c:	af 4f       	sbci	r26, 0xFF	; 255
    311e:	b1 e0       	ldi	r27, 0x01	; 1
    3120:	3e d0       	rcall	.+124    	; 0x319e <__ultoa_invert+0x9c>
    3122:	b4 e0       	ldi	r27, 0x04	; 4
    3124:	3c d0       	rcall	.+120    	; 0x319e <__ultoa_invert+0x9c>
    3126:	67 0f       	add	r22, r23
    3128:	78 1f       	adc	r23, r24
    312a:	89 1f       	adc	r24, r25
    312c:	9a 1f       	adc	r25, r26
    312e:	a1 1d       	adc	r26, r1
    3130:	68 0f       	add	r22, r24
    3132:	79 1f       	adc	r23, r25
    3134:	8a 1f       	adc	r24, r26
    3136:	91 1d       	adc	r25, r1
    3138:	a1 1d       	adc	r26, r1
    313a:	6a 0f       	add	r22, r26
    313c:	71 1d       	adc	r23, r1
    313e:	81 1d       	adc	r24, r1
    3140:	91 1d       	adc	r25, r1
    3142:	a1 1d       	adc	r26, r1
    3144:	20 d0       	rcall	.+64     	; 0x3186 <__ultoa_invert+0x84>
    3146:	09 f4       	brne	.+2      	; 0x314a <__ultoa_invert+0x48>
    3148:	68 94       	set
    314a:	3f 91       	pop	r19
    314c:	2a e0       	ldi	r18, 0x0A	; 10
    314e:	26 9f       	mul	r18, r22
    3150:	11 24       	eor	r1, r1
    3152:	30 19       	sub	r19, r0
    3154:	30 5d       	subi	r19, 0xD0	; 208
    3156:	31 93       	st	Z+, r19
    3158:	de f6       	brtc	.-74     	; 0x3110 <__ultoa_invert+0xe>
    315a:	cf 01       	movw	r24, r30
    315c:	08 95       	ret
    315e:	46 2f       	mov	r20, r22
    3160:	47 70       	andi	r20, 0x07	; 7
    3162:	40 5d       	subi	r20, 0xD0	; 208
    3164:	41 93       	st	Z+, r20
    3166:	b3 e0       	ldi	r27, 0x03	; 3
    3168:	0f d0       	rcall	.+30     	; 0x3188 <__ultoa_invert+0x86>
    316a:	c9 f7       	brne	.-14     	; 0x315e <__ultoa_invert+0x5c>
    316c:	f6 cf       	rjmp	.-20     	; 0x315a <__ultoa_invert+0x58>
    316e:	46 2f       	mov	r20, r22
    3170:	4f 70       	andi	r20, 0x0F	; 15
    3172:	40 5d       	subi	r20, 0xD0	; 208
    3174:	4a 33       	cpi	r20, 0x3A	; 58
    3176:	18 f0       	brcs	.+6      	; 0x317e <__ultoa_invert+0x7c>
    3178:	49 5d       	subi	r20, 0xD9	; 217
    317a:	31 fd       	sbrc	r19, 1
    317c:	40 52       	subi	r20, 0x20	; 32
    317e:	41 93       	st	Z+, r20
    3180:	02 d0       	rcall	.+4      	; 0x3186 <__ultoa_invert+0x84>
    3182:	a9 f7       	brne	.-22     	; 0x316e <__ultoa_invert+0x6c>
    3184:	ea cf       	rjmp	.-44     	; 0x315a <__ultoa_invert+0x58>
    3186:	b4 e0       	ldi	r27, 0x04	; 4
    3188:	a6 95       	lsr	r26
    318a:	97 95       	ror	r25
    318c:	87 95       	ror	r24
    318e:	77 95       	ror	r23
    3190:	67 95       	ror	r22
    3192:	ba 95       	dec	r27
    3194:	c9 f7       	brne	.-14     	; 0x3188 <__ultoa_invert+0x86>
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	61 05       	cpc	r22, r1
    319a:	71 05       	cpc	r23, r1
    319c:	08 95       	ret
    319e:	9b 01       	movw	r18, r22
    31a0:	ac 01       	movw	r20, r24
    31a2:	0a 2e       	mov	r0, r26
    31a4:	06 94       	lsr	r0
    31a6:	57 95       	ror	r21
    31a8:	47 95       	ror	r20
    31aa:	37 95       	ror	r19
    31ac:	27 95       	ror	r18
    31ae:	ba 95       	dec	r27
    31b0:	c9 f7       	brne	.-14     	; 0x31a4 <__ultoa_invert+0xa2>
    31b2:	62 0f       	add	r22, r18
    31b4:	73 1f       	adc	r23, r19
    31b6:	84 1f       	adc	r24, r20
    31b8:	95 1f       	adc	r25, r21
    31ba:	a0 1d       	adc	r26, r0
    31bc:	08 95       	ret

000031be <_exit>:
    31be:	f8 94       	cli

000031c0 <__stop_program>:
    31c0:	ff cf       	rjmp	.-2      	; 0x31c0 <__stop_program>
