
evog_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001bc  00802000  00003922  000039b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  008021bc  008021bc  00003b72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003b72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000808  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017ec5  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004aca  00000000  00000000  0001c2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003643  00000000  00000000  00020da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013a0  00000000  00000000  000243ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f46  00000000  00000000  0002578c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a1c  00000000  00000000  0002c6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  000320ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__ctors_end>
       4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
       c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      10:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      14:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      18:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      1c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      20:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      24:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      28:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      2c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      30:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      34:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      38:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__vector_14>
      3c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      40:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      44:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      48:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      4c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      50:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      54:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      58:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      5c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      60:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      64:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      68:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      6c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      70:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__vector_28>
      74:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      78:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      7c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      80:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      84:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      88:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      8c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      90:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      94:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      98:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      9c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      a0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      a4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      a8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      ac:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      b0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      b4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      b8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      bc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      c0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      c4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      c8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      cc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      d0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      d4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      d8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      dc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      e0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      e4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      e8:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__vector_58>
      ec:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      f0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      f4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      f8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
      fc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     100:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     104:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     108:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     10c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     110:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     114:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     118:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     11c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_71>
     120:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_72>
     124:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_73>
     128:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_74>
     12c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     130:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     134:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     138:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     13c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     140:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     144:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     148:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     14c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     150:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     154:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     158:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     15c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     160:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     164:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     168:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     16c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     170:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     174:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     178:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     17c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     180:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     184:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     188:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     18c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     190:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     194:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     198:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     19c:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1a0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1a4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1a8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1ac:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1b0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1b4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1b8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1bc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1c0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1c4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1c8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1cc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1d0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1d4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1d8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1dc:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1e0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1e4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1e8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1ec:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1f0:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1f4:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1f8:	0c 94 24 02 	jmp	0x448	; 0x448 <__bad_interrupt>
     1fc:	50 04       	cpc	r5, r0
     1fe:	8f 04       	cpc	r8, r15
     200:	a1 04       	cpc	r10, r1
     202:	17 05       	cpc	r17, r7
     204:	17 05       	cpc	r17, r7
     206:	17 05       	cpc	r17, r7
     208:	17 05       	cpc	r17, r7
     20a:	17 05       	cpc	r17, r7
     20c:	6e 04       	cpc	r6, r14
     20e:	72 04       	cpc	r7, r2
     210:	72 04       	cpc	r7, r2
     212:	79 04       	cpc	r7, r9
     214:	17 05       	cpc	r17, r7
     216:	17 05       	cpc	r17, r7
     218:	17 05       	cpc	r17, r7
     21a:	83 04       	cpc	r8, r3
     21c:	07 63       	ori	r16, 0x37	; 55
     21e:	42 36       	cpi	r20, 0x62	; 98
     220:	b7 9b       	sbis	0x16, 7	; 22
     222:	d8 a7       	std	Y+40, r29	; 0x28
     224:	1a 39       	cpi	r17, 0x9A	; 154
     226:	68 56       	subi	r22, 0x68	; 104
     228:	18 ae       	std	Y+56, r1	; 0x38
     22a:	ba ab       	std	Y+50, r27	; 0x32
     22c:	55 8c       	ldd	r5, Z+29	; 0x1d
     22e:	1d 3c       	cpi	r17, 0xCD	; 205
     230:	b7 cc       	rjmp	.-1682   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     232:	57 63       	ori	r21, 0x37	; 55
     234:	bd 6d       	ori	r27, 0xDD	; 221
     236:	ed fd       	.word	0xfded	; ????
     238:	75 3e       	cpi	r23, 0xE5	; 229
     23a:	f6 17       	cp	r31, r22
     23c:	72 31       	cpi	r23, 0x12	; 18
     23e:	bf 00       	.word	0x00bf	; ????
     240:	00 00       	nop
     242:	80 3f       	cpi	r24, 0xF0	; 240
     244:	08 00       	.word	0x0008	; ????
     246:	00 00       	nop
     248:	be 92       	st	-X, r11
     24a:	24 49       	sbci	r18, 0x94	; 148
     24c:	12 3e       	cpi	r17, 0xE2	; 226
     24e:	ab aa       	std	Y+51, r10	; 0x33
     250:	aa 2a       	or	r10, r26
     252:	be cd       	rjmp	.-1156   	; 0xfffffdd0 <__eeprom_end+0xff7efdd0>
     254:	cc cc       	rjmp	.-1640   	; 0xfffffbee <__eeprom_end+0xff7efbee>
     256:	4c 3e       	cpi	r20, 0xEC	; 236
     258:	00 00       	nop
     25a:	00 80       	ld	r0, Z
     25c:	be ab       	std	Y+54, r27	; 0x36
     25e:	aa aa       	std	Y+50, r10	; 0x32
     260:	aa 3e       	cpi	r26, 0xEA	; 234
     262:	00 00       	nop
     264:	00 00       	nop
     266:	bf 00       	.word	0x00bf	; ????
     268:	00 00       	nop
     26a:	80 3f       	cpi	r24, 0xF0	; 240
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	00 08       	sbc	r0, r0
     272:	41 78       	andi	r20, 0x81	; 129
     274:	d3 bb       	out	0x13, r29	; 19
     276:	43 87       	std	Z+11, r20	; 0x0b
     278:	d1 13       	cpse	r29, r17
     27a:	3d 19       	sub	r19, r13
     27c:	0e 3c       	cpi	r16, 0xCE	; 206
     27e:	c3 bd       	out	0x23, r28	; 35
     280:	42 82       	std	Z+2, r4	; 0x02
     282:	ad 2b       	or	r26, r29
     284:	3e 68       	ori	r19, 0x8E	; 142
     286:	ec 82       	std	Y+4, r14	; 0x04
     288:	76 be       	out	0x36, r7	; 54
     28a:	d9 8f       	std	Y+25, r29	; 0x19
     28c:	e1 a9       	ldd	r30, Z+49	; 0x31
     28e:	3e 4c       	sbci	r19, 0xCE	; 206
     290:	80 ef       	ldi	r24, 0xF0	; 240
     292:	ff be       	out	0x3f, r15	; 63
     294:	01 c4       	rjmp	.+2050   	; 0xa98 <_ZN10ComHandler6handleEcNS_5com_eE+0x36>
     296:	ff 7f       	andi	r31, 0xFF	; 255
     298:	3f 00       	.word	0x003f	; ????
     29a:	00 00       	nop
	...

0000029e <__trampolines_start>:
     29e:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x52>
     2a2:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1e0>
     2a6:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
     2aa:	0c 94 83 04 	jmp	0x906	; 0x906 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xb8>
     2ae:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xa4>
     2b2:	0c 94 8f 04 	jmp	0x91e	; 0x91e <_ZN10ComHandler13changeHandlerENS_8change_eE+0xd0>
     2b6:	0c 94 a1 04 	jmp	0x942	; 0x942 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xf4>
     2ba:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <_ZN10ComHandler13changeHandlerENS_8change_eE+0x8e>

000002be <__trampolines_end>:
     2be:	6e 61       	ori	r22, 0x1E	; 30
     2c0:	6e 00       	.word	0x006e	; ????

000002c2 <__c.2332>:
     2c2:	69 6e 66 00                                         inf.

000002c6 <pstr_nan>:
     2c6:	4e 41 4e                                            NAN

000002c9 <pstr_inity>:
     2c9:	49 4e 49 54 59                                      INITY

000002ce <pstr_inf>:
     2ce:	49 4e 46                                            INF

000002d1 <pwr_m10>:
     2d1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2e1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002e9 <pwr_p10>:
     2e9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2f9:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     309:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     319:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     329:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     339:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     349:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     359:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     369:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     379:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     389:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     399:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     3a9:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     3b9:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     3c9:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     3d9:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     3e9:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     3f9:	3d 27 00                                            ='.

000003fc <__ctors_end>:
     3fc:	11 24       	eor	r1, r1
     3fe:	1f be       	out	0x3f, r1	; 63
     400:	cf ef       	ldi	r28, 0xFF	; 255
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df e3       	ldi	r29, 0x3F	; 63
     406:	de bf       	out	0x3e, r29	; 62
     408:	00 e0       	ldi	r16, 0x00	; 0
     40a:	0c bf       	out	0x3c, r16	; 60
     40c:	18 be       	out	0x38, r1	; 56
     40e:	19 be       	out	0x39, r1	; 57
     410:	1a be       	out	0x3a, r1	; 58
     412:	1b be       	out	0x3b, r1	; 59

00000414 <__do_copy_data>:
     414:	11 e2       	ldi	r17, 0x21	; 33
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b0 e2       	ldi	r27, 0x20	; 32
     41a:	e2 e2       	ldi	r30, 0x22	; 34
     41c:	f9 e3       	ldi	r31, 0x39	; 57
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	0b bf       	out	0x3b, r16	; 59
     422:	02 c0       	rjmp	.+4      	; 0x428 <__do_copy_data+0x14>
     424:	07 90       	elpm	r0, Z+
     426:	0d 92       	st	X+, r0
     428:	ac 3b       	cpi	r26, 0xBC	; 188
     42a:	b1 07       	cpc	r27, r17
     42c:	d9 f7       	brne	.-10     	; 0x424 <__do_copy_data+0x10>
     42e:	1b be       	out	0x3b, r1	; 59

00000430 <__do_clear_bss>:
     430:	22 e2       	ldi	r18, 0x22	; 34
     432:	ac eb       	ldi	r26, 0xBC	; 188
     434:	b1 e2       	ldi	r27, 0x21	; 33
     436:	01 c0       	rjmp	.+2      	; 0x43a <.do_clear_bss_start>

00000438 <.do_clear_bss_loop>:
     438:	1d 92       	st	X+, r1

0000043a <.do_clear_bss_start>:
     43a:	ac 37       	cpi	r26, 0x7C	; 124
     43c:	b2 07       	cpc	r27, r18
     43e:	e1 f7       	brne	.-8      	; 0x438 <.do_clear_bss_loop>
     440:	0e 94 6d 10 	call	0x20da	; 0x20da <main>
     444:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <_exit>

00000448 <__bad_interrupt>:
     448:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000044c <__vector_71>:
	}
}

void Adca::flush()
{
	ADCA_CTRLA |= ADC_FLUSH_bm;
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	08 b6       	in	r0, 0x38	; 56
     458:	0f 92       	push	r0
     45a:	18 be       	out	0x38, r1	; 56
     45c:	8f 93       	push	r24
     45e:	9f 93       	push	r25
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 c7 21 	sts	0x21C7, r24	; 0x8021c7 <_ZN4Adca7ch0flagE>
     466:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     46a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     46e:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <_ZN4Adca3ch0E>
     472:	90 93 c3 21 	sts	0x21C3, r25	; 0x8021c3 <_ZN4Adca3ch0E+0x1>
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	0f 90       	pop	r0
     47c:	08 be       	out	0x38, r0	; 56
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_72>:
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	08 b6       	in	r0, 0x38	; 56
     494:	0f 92       	push	r0
     496:	18 be       	out	0x38, r1	; 56
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <_ZN4Adca7ch1flagE>
     4a2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     4a6:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     4aa:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <_ZN4Adca3ch1E>
     4ae:	90 93 c1 21 	sts	0x21C1, r25	; 0x8021c1 <_ZN4Adca3ch1E+0x1>
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	0f 90       	pop	r0
     4b8:	08 be       	out	0x38, r0	; 56
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_73>:
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	08 b6       	in	r0, 0x38	; 56
     4d0:	0f 92       	push	r0
     4d2:	18 be       	out	0x38, r1	; 56
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 c5 21 	sts	0x21C5, r24	; 0x8021c5 <_ZN4Adca7ch2flagE>
     4de:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     4e2:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     4e6:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <_ZN4Adca3ch2E>
     4ea:	90 93 bf 21 	sts	0x21BF, r25	; 0x8021bf <_ZN4Adca3ch2E+0x1>
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	0f 90       	pop	r0
     4f4:	08 be       	out	0x38, r0	; 56
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_74>:
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	08 b6       	in	r0, 0x38	; 56
     50c:	0f 92       	push	r0
     50e:	18 be       	out	0x38, r1	; 56
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <_ZN4Adca7ch3flagE>
     51a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     51e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     522:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <__data_end>
     526:	90 93 bd 21 	sts	0x21BD, r25	; 0x8021bd <__data_end+0x1>
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	0f 90       	pop	r0
     530:	08 be       	out	0x38, r0	; 56
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <_ZN4Adca21startSingleConversionENS_9channel_eE>:
     53c:	61 30       	cpi	r22, 0x01	; 1
     53e:	61 f0       	breq	.+24     	; 0x558 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x1c>
     540:	28 f0       	brcs	.+10     	; 0x54c <_ZN4Adca21startSingleConversionENS_9channel_eE+0x10>
     542:	62 30       	cpi	r22, 0x02	; 2
     544:	79 f0       	breq	.+30     	; 0x564 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x28>
     546:	63 30       	cpi	r22, 0x03	; 3
     548:	99 f0       	breq	.+38     	; 0x570 <_ZN4Adca21startSingleConversionENS_9channel_eE+0x34>
     54a:	08 95       	ret
     54c:	10 92 c7 21 	sts	0x21C7, r1	; 0x8021c7 <_ZN4Adca7ch0flagE>
     550:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     554:	84 60       	ori	r24, 0x04	; 4
     556:	11 c0       	rjmp	.+34     	; 0x57a <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     558:	10 92 c6 21 	sts	0x21C6, r1	; 0x8021c6 <_ZN4Adca7ch1flagE>
     55c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     560:	88 60       	ori	r24, 0x08	; 8
     562:	0b c0       	rjmp	.+22     	; 0x57a <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     564:	10 92 c5 21 	sts	0x21C5, r1	; 0x8021c5 <_ZN4Adca7ch2flagE>
     568:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	05 c0       	rjmp	.+10     	; 0x57a <_ZN4Adca21startSingleConversionENS_9channel_eE+0x3e>
     570:	10 92 c4 21 	sts	0x21C4, r1	; 0x8021c4 <_ZN4Adca7ch3flagE>
     574:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     578:	80 62       	ori	r24, 0x20	; 32
     57a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
     57e:	08 95       	ret

00000580 <_ZN4Adca14waitConversionENS_9channel_eE>:
}

void Adca::waitConversion(channel_e channel)
{
	switch (channel) {
     580:	61 30       	cpi	r22, 0x01	; 1
     582:	59 f0       	breq	.+22     	; 0x59a <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     584:	28 f0       	brcs	.+10     	; 0x590 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     586:	62 30       	cpi	r22, 0x02	; 2
     588:	69 f0       	breq	.+26     	; 0x5a4 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     58a:	63 30       	cpi	r22, 0x03	; 3
     58c:	81 f0       	breq	.+32     	; 0x5ae <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     58e:	08 95       	ret
		case CH_0: while (!ch0flag) ; break;
     590:	80 91 c7 21 	lds	r24, 0x21C7	; 0x8021c7 <_ZN4Adca7ch0flagE>
     594:	88 23       	and	r24, r24
     596:	e1 f3       	breq	.-8      	; 0x590 <_ZN4Adca14waitConversionENS_9channel_eE+0x10>
     598:	08 95       	ret
		case CH_1: while (!ch1flag) ; break;
     59a:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <_ZN4Adca7ch1flagE>
     59e:	88 23       	and	r24, r24
     5a0:	e1 f3       	breq	.-8      	; 0x59a <_ZN4Adca14waitConversionENS_9channel_eE+0x1a>
     5a2:	08 95       	ret
		case CH_2: while (!ch2flag) ; break;
     5a4:	80 91 c5 21 	lds	r24, 0x21C5	; 0x8021c5 <_ZN4Adca7ch2flagE>
     5a8:	88 23       	and	r24, r24
     5aa:	e1 f3       	breq	.-8      	; 0x5a4 <_ZN4Adca14waitConversionENS_9channel_eE+0x24>
     5ac:	08 95       	ret
		case CH_3: while (!ch3flag) ; break;
     5ae:	80 91 c4 21 	lds	r24, 0x21C4	; 0x8021c4 <_ZN4Adca7ch3flagE>
     5b2:	88 23       	and	r24, r24
     5b4:	e1 f3       	breq	.-8      	; 0x5ae <_ZN4Adca14waitConversionENS_9channel_eE+0x2e>
     5b6:	08 95       	ret

000005b8 <_ZN4Adca11readChannelENS_9channel_eE>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

uint16_t Adca::readChannel(channel_e channel)
{
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	8c 01       	movw	r16, r24
     5c0:	c6 2f       	mov	r28, r22
	startSingleConversion(channel);
     5c2:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4Adca21startSingleConversionENS_9channel_eE>
	waitConversion(channel);
     5c6:	6c 2f       	mov	r22, r28
     5c8:	c8 01       	movw	r24, r16
     5ca:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN4Adca14waitConversionENS_9channel_eE>
	switch (channel) {
     5ce:	c1 30       	cpi	r28, 0x01	; 1
     5d0:	79 f0       	breq	.+30     	; 0x5f0 <_ZN4Adca11readChannelENS_9channel_eE+0x38>
     5d2:	48 f0       	brcs	.+18     	; 0x5e6 <_ZN4Adca11readChannelENS_9channel_eE+0x2e>
     5d4:	c2 30       	cpi	r28, 0x02	; 2
     5d6:	89 f0       	breq	.+34     	; 0x5fa <_ZN4Adca11readChannelENS_9channel_eE+0x42>
     5d8:	c3 30       	cpi	r28, 0x03	; 3
     5da:	a1 f4       	brne	.+40     	; 0x604 <_ZN4Adca11readChannelENS_9channel_eE+0x4c>
		case CH_0: return ADCA_CH0RES;
		case CH_1: return ADCA_CH1RES;
		case CH_2: return ADCA_CH2RES;
		case CH_3: return ADCA_CH3RES;
     5dc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
     5e0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
     5e4:	11 c0       	rjmp	.+34     	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
uint16_t Adca::readChannel(channel_e channel)
{
	startSingleConversion(channel);
	waitConversion(channel);
	switch (channel) {
		case CH_0: return ADCA_CH0RES;
     5e6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     5ea:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_1: return ADCA_CH1RES;
     5f0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
     5f4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_2: return ADCA_CH2RES;
     5fa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
     5fe:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
     602:	02 c0       	rjmp	.+4      	; 0x608 <_ZN4Adca11readChannelENS_9channel_eE+0x50>
		case CH_3: return ADCA_CH3RES;
	}
	return 0;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
}
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <_ZN4Adca9enableADCEv>:
//=== ENABLERS ===//
//================//

void Adca::enableADC()
{
	adc = true;
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	fc 01       	movw	r30, r24
     614:	21 83       	std	Z+1, r18	; 0x01
	ADCA_CTRLA |= ADC_ENABLE_bm;
     616:	e0 e0       	ldi	r30, 0x00	; 0
     618:	f2 e0       	ldi	r31, 0x02	; 2
     61a:	80 81       	ld	r24, Z
     61c:	81 60       	ori	r24, 0x01	; 1
     61e:	80 83       	st	Z, r24
     620:	08 95       	ret

00000622 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

Adca::Adca(prescaler_e prescaler, Utils::interruptLevel_e interruptLevel)
     622:	fc 01       	movw	r30, r24
	ADCA_EVCTRL = (eventMode << ADC_EVACT_gp)|(ADCA_EVCTRL & ~ADC_EVACT_gm);
}

void Adca::setPrescaler(prescaler_e prescaler)
{
	this->prescaler = prescaler;
     624:	65 87       	std	Z+13, r22	; 0x0d
	ADCA_PRESCALER = prescaler;
     626:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
	ADCA_CTRLB = (currentLimitation << ADC_CURRLIMIT_gp)|(ADCA_CTRLB & ~ADC_CURRLIMIT_gm);
}

void Adca::setConversionMode(conversionMode_e conversionMode)
{
	this->conversionMode = conversionMode;
     62a:	14 82       	std	Z+4, r1	; 0x04
	switch(conversionMode) {
		case CM_UNSIGNED: ADCA_CTRLB &= ~ADC_CONMODE_bm; break;
     62c:	a1 e0       	ldi	r26, 0x01	; 1
     62e:	b2 e0       	ldi	r27, 0x02	; 2
     630:	8c 91       	ld	r24, X
     632:	8f 7e       	andi	r24, 0xEF	; 239
     634:	8c 93       	st	X, r24

void Adca::setChannelInputMode(channel_e channel, cim_e cim)
{
	switch (channel) {
		case CH_0:
			cim0 = cim;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	82 8b       	std	Z+18, r24	; 0x12
			ADCA_CH0_CTRL = (cim << ADC_CH_INPUTMODE_gp)|(ADCA_CH0_CTRL & ~ADC_CH_INPUTMODE_gm);
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b2 e0       	ldi	r27, 0x02	; 2
     63e:	8c 91       	ld	r24, X
     640:	8c 7f       	andi	r24, 0xFC	; 252
     642:	81 60       	ori	r24, 0x01	; 1
     644:	8c 93       	st	X, r24

void Adca::setMuxSelectionPositiveInput(channel_e channel, mspi_e mspi)
{
	switch (channel) {
		case CH_0:
			mspi0 = mspi;
     646:	16 8a       	std	Z+22, r1	; 0x16
			ADCA_CH0_MUXCTRL = ((mspi&0x0f) << ADC_CH_MUXPOS_gp)|(ADCA_CH0_MUXCTRL & ~ADC_CH_MUXPOS_gm);
     648:	a1 e2       	ldi	r26, 0x21	; 33
     64a:	b2 e0       	ldi	r27, 0x02	; 2
     64c:	8c 91       	ld	r24, X
     64e:	87 78       	andi	r24, 0x87	; 135
     650:	8c 93       	st	X, r24

void Adca::enableInterrupt(channel_e channel, Utils::interruptLevel_e il)
{
	switch (channel) {
		case CH_0:
			il0 = il;
     652:	42 a3       	std	Z+34, r20	; 0x22
			ADCA_CH0_INTCTRL = (il << ADC_CH_INTLVL_gp)|(ADCA_CH0_INTCTRL & ~ADC_CH_INTLVL_gm);
     654:	a2 e2       	ldi	r26, 0x22	; 34
     656:	b2 e0       	ldi	r27, 0x02	; 2
     658:	8c 91       	ld	r24, X
     65a:	8c 7f       	andi	r24, 0xFC	; 252
     65c:	48 2b       	or	r20, r24
     65e:	4c 93       	st	X, r20
	setPrescaler(prescaler);
	setConversionMode(CM_UNSIGNED);
	setChannelInputMode(CH_0, CIM_SINGLEENDED);
	setMuxSelectionPositiveInput(CH_0, MSPI_PIN0);
	enableInterrupt(CH_0, interruptLevel);
	enableADC();
     660:	cf 01       	movw	r24, r30
     662:	0c 94 08 03 	jmp	0x610	; 0x610 <_ZN4Adca9enableADCEv>

00000666 <_ZN10ComHandlerC1ENS_7state_eEP4Tcc0P7UsartE0P7UsartC1>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

ComHandler::ComHandler(state_e state, Tcc0* myTimer0, UsartE0* myUsart0, UsartC1* myUsart1)
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
{
	ComHandler::state = state;
     66a:	60 93 12 22 	sts	0x2212, r22	; 0x802212 <_ZN10ComHandler5stateE>
	ComHandler::myTimer0 = myTimer0;
     66e:	40 93 cc 21 	sts	0x21CC, r20	; 0x8021cc <_ZN10ComHandler8myTimer0E>
     672:	50 93 cd 21 	sts	0x21CD, r21	; 0x8021cd <_ZN10ComHandler8myTimer0E+0x1>
	ComHandler::myUsart0 = myUsart0;
     676:	20 93 ca 21 	sts	0x21CA, r18	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     67a:	30 93 cb 21 	sts	0x21CB, r19	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
	ComHandler::myUsart1 = myUsart1;
     67e:	00 93 c8 21 	sts	0x21C8, r16	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     682:	10 93 c9 21 	sts	0x21C9, r17	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
}
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <_ZN10ComHandler6updateEv>:
//=== STATIC FUNCTIONS ===//
//========================//

void ComHandler::update()
{
	switch(state) {
     68c:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	09 f0       	breq	.+2      	; 0x696 <_ZN10ComHandler6updateEv+0xa>
     694:	4d c0       	rjmp	.+154    	; 0x730 <_ZN10ComHandler6updateEv+0xa4>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile double time_ms;
	static volatile double timeIncrement_ms;
	double getTime_ms(){return time_ms;};
     696:	60 91 17 22 	lds	r22, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
     69a:	70 91 18 22 	lds	r23, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
     69e:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
     6a2:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
		default: break;
		
		case HEATING:
		if (myTimer0->getTime_ms() - timeFlag_ms > HEATING_DURATION_ms)
     6a6:	20 91 0e 22 	lds	r18, 0x220E	; 0x80220e <_ZN10ComHandler11timeFlag_msE>
     6aa:	30 91 0f 22 	lds	r19, 0x220F	; 0x80220f <_ZN10ComHandler11timeFlag_msE+0x1>
     6ae:	40 91 10 22 	lds	r20, 0x2210	; 0x802210 <_ZN10ComHandler11timeFlag_msE+0x2>
     6b2:	50 91 11 22 	lds	r21, 0x2211	; 0x802211 <_ZN10ComHandler11timeFlag_msE+0x3>
     6b6:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e4       	ldi	r19, 0x40	; 64
     6be:	4c e9       	ldi	r20, 0x9C	; 156
     6c0:	56 e4       	ldi	r21, 0x46	; 70
     6c2:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	9c f5       	brge	.+102    	; 0x730 <_ZN10ComHandler6updateEv+0xa4>
		{
			state = IDLE;
     6ca:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <_ZN10ComHandler5stateE>
			switch (ComHandler::com) {
     6ce:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_ZN10ComHandler3comE>
     6d2:	88 23       	and	r24, r24
     6d4:	19 f0       	breq	.+6      	; 0x6dc <_ZN10ComHandler6updateEv+0x50>
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	b1 f0       	breq	.+44     	; 0x706 <_ZN10ComHandler6updateEv+0x7a>
     6da:	08 95       	ret
				case USART0:
				myUsart0->sendChar(CHANGED_TO_IDLE);
     6dc:	61 ef       	ldi	r22, 0xF1	; 241
     6de:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     6e2:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     6e6:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_ZN7UsartE08sendCharEc>
				myUsart0->sendChar('\r');
     6ea:	6d e0       	ldi	r22, 0x0D	; 13
     6ec:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     6f0:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     6f4:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_ZN7UsartE08sendCharEc>
				myUsart0->sendChar('\0');
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     6fe:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     702:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <_ZN7UsartE08sendCharEc>
				break;
				case USART1:
				myUsart1->sendChar(CHANGED_TO_IDLE);
     706:	61 ef       	ldi	r22, 0xF1	; 241
     708:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     70c:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     710:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7UsartC18sendCharEc>
				myUsart1->sendChar('\r');
     714:	6d e0       	ldi	r22, 0x0D	; 13
     716:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     71a:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     71e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7UsartC18sendCharEc>
				myUsart1->sendChar('\0');
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     728:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     72c:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <_ZN7UsartC18sendCharEc>
     730:	08 95       	ret

00000732 <_ZN10ComHandler10sendAnswerEv>:
	}
}

void ComHandler::sendAnswer()
{
	switch(com) {
     732:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_ZN10ComHandler3comE>
		default:
		case USART0:
		myUsart0->sendString(Utils::txBuf);
		break;
		case USART1:
		myUsart1->sendString(Utils::txBuf);
     736:	6a e3       	ldi	r22, 0x3A	; 58
     738:	72 e2       	ldi	r23, 0x22	; 34
	}
}

void ComHandler::sendAnswer()
{
	switch(com) {
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	31 f0       	breq	.+12     	; 0x74a <_ZN10ComHandler10sendAnswerEv+0x18>
		default:
		case USART0:
		myUsart0->sendString(Utils::txBuf);
     73e:	80 91 ca 21 	lds	r24, 0x21CA	; 0x8021ca <_ZN10ComHandler8myUsart0E>
     742:	90 91 cb 21 	lds	r25, 0x21CB	; 0x8021cb <_ZN10ComHandler8myUsart0E+0x1>
     746:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <_ZN7UsartE010sendStringEPKc>
		break;
		case USART1:
		myUsart1->sendString(Utils::txBuf);
     74a:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <_ZN10ComHandler8myUsart1E>
     74e:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <_ZN10ComHandler8myUsart1E+0x1>
     752:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <_ZN7UsartC110sendStringEPKc>

00000756 <_ZN10ComHandler9fetchDataEv>:
//=== PRIVATE FUNCTIONS ===//
//=========================//

char ComHandler::fetchData()
{
	switch(com) {
     756:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_ZN10ComHandler3comE>
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	49 f0       	breq	.+18     	; 0x770 <_ZN10ComHandler9fetchDataEv+0x1a>
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
     75e:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <_ZN7UsartE07rxcFlagE>
		default:
		case USART0:
		while(!(myUsart0->isRXC())) ;
     762:	88 23       	and	r24, r24
     764:	e1 f3       	breq	.-8      	; 0x75e <_ZN10ComHandler9fetchDataEv+0x8>
	void setRXC(bool b){rxcFlag = b;};
     766:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <_ZN7UsartE07rxcFlagE>
	char getChar(){return rxChar;};
     76a:	80 91 38 22 	lds	r24, 0x2238	; 0x802238 <_ZN7UsartE06rxCharE>
     76e:	08 95       	ret
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
     770:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <_ZN7UsartC17rxcFlagE>
		myUsart0->setRXC(false);
		return myUsart0->getChar();

		case USART1:
		while(!(myUsart1->isRXC())) ;
     774:	88 23       	and	r24, r24
     776:	e1 f3       	breq	.-8      	; 0x770 <_ZN10ComHandler9fetchDataEv+0x1a>
	void setRXC(bool b){rxcFlag = b;};
     778:	10 92 37 22 	sts	0x2237, r1	; 0x802237 <_ZN7UsartC17rxcFlagE>
	char getChar(){return rxChar;};
     77c:	80 91 36 22 	lds	r24, 0x2236	; 0x802236 <_ZN7UsartC16rxCharE>
		myUsart1->setRXC(false);
		return myUsart1->getChar();
	}
}
     780:	08 95       	ret

00000782 <_ZN10ComHandler15questionHandlerENS_10question_eE>:

void ComHandler::questionHandler(question_e q)
{
	switch(q)
     782:	63 3a       	cpi	r22, 0xA3	; 163
     784:	09 f4       	brne	.+2      	; 0x788 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x6>
     786:	47 c0       	rjmp	.+142    	; 0x816 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x94>
     788:	28 f4       	brcc	.+10     	; 0x794 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x12>
     78a:	60 3a       	cpi	r22, 0xA0	; 160
     78c:	91 f0       	breq	.+36     	; 0x7b2 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x30>
     78e:	61 3a       	cpi	r22, 0xA1	; 161
     790:	51 f1       	breq	.+84     	; 0x7e6 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x64>
     792:	53 c0       	rjmp	.+166    	; 0x83a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xb8>
     794:	68 3a       	cpi	r22, 0xA8	; 168
     796:	09 f4       	brne	.+2      	; 0x79a <_ZN10ComHandler15questionHandlerENS_10question_eE+0x18>
     798:	44 c0       	rjmp	.+136    	; 0x822 <_ZN10ComHandler15questionHandlerENS_10question_eE+0xa0>
     79a:	69 3a       	cpi	r22, 0xA9	; 169
     79c:	09 f4       	brne	.+2      	; 0x7a0 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x1e>
     79e:	47 c0       	rjmp	.+142    	; 0x82e <_ZN10ComHandler15questionHandlerENS_10question_eE+0xac>
     7a0:	64 3a       	cpi	r22, 0xA4	; 164
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x24>
     7a4:	4a c0       	rjmp	.+148    	; 0x83a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xb8>
		Utils::txBuf[0] = q + 0x10;
		snprintf(Utils::txBuf+1, TX_LEN-1, "20170610\r");
		break;
		
		case QUESTION_TIME:
		Utils::txBuf[0] = q + 0x10;
     7a6:	84 eb       	ldi	r24, 0xB4	; 180
     7a8:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "123456\r");
     7ac:	6d e1       	ldi	r22, 0x1D	; 29
     7ae:	70 e2       	ldi	r23, 0x20	; 32
     7b0:	2d c0       	rjmp	.+90     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
void ComHandler::questionHandler(question_e q)
{
	switch(q)
	{
		case QUESTION_STATE:
		Utils::txBuf[0] = q + 0x10;
     7b2:	80 eb       	ldi	r24, 0xB0	; 176
     7b4:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "%d\r", state);
     7b8:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     7bc:	1f 92       	push	r1
     7be:	8f 93       	push	r24
     7c0:	89 e0       	ldi	r24, 0x09	; 9
     7c2:	90 e2       	ldi	r25, 0x20	; 32
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	1f 92       	push	r1
     7ca:	8f e3       	ldi	r24, 0x3F	; 63
     7cc:	8f 93       	push	r24
     7ce:	8b e3       	ldi	r24, 0x3B	; 59
     7d0:	92 e2       	ldi	r25, 0x22	; 34
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <snprintf>
		break;
     7da:	8d b7       	in	r24, 0x3d	; 61
     7dc:	9e b7       	in	r25, 0x3e	; 62
     7de:	08 96       	adiw	r24, 0x08	; 8
     7e0:	8d bf       	out	0x3d, r24	; 61
     7e2:	9e bf       	out	0x3e, r25	; 62
     7e4:	32 c0       	rjmp	.+100    	; 0x84a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xc8>
		
		case QUESTION_HEATING:
		Utils::txBuf[0] = q + 0x10;
     7e6:	81 eb       	ldi	r24, 0xB1	; 177
     7e8:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		if (state == IDLE) snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     7ec:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     7f0:	81 11       	cpse	r24, r1
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <_ZN10ComHandler15questionHandlerENS_10question_eE+0x78>
     7f4:	6a e1       	ldi	r22, 0x1A	; 26
     7f6:	70 e2       	ldi	r23, 0x20	; 32
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		else if (state == HEATING) snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
     7fa:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	19 f4       	brne	.+6      	; 0x808 <_ZN10ComHandler15questionHandlerENS_10question_eE+0x86>
     802:	6d e0       	ldi	r22, 0x0D	; 13
     804:	70 e2       	ldi	r23, 0x20	; 32
     806:	02 c0       	rjmp	.+4      	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		else snprintf(Utils::txBuf+1, TX_LEN-1, "2\r");
     808:	60 e1       	ldi	r22, 0x10	; 16
     80a:	70 e2       	ldi	r23, 0x20	; 32
     80c:	8b e3       	ldi	r24, 0x3B	; 59
     80e:	92 e2       	ldi	r25, 0x22	; 34
     810:	0e 94 8f 1b 	call	0x371e	; 0x371e <strcpy>
     814:	1a c0       	rjmp	.+52     	; 0x84a <_ZN10ComHandler15questionHandlerENS_10question_eE+0xc8>
		break;
		
		case QUESTION_DATE:
		Utils::txBuf[0] = q + 0x10;
     816:	83 eb       	ldi	r24, 0xB3	; 179
     818:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "20170610\r");
     81c:	63 e1       	ldi	r22, 0x13	; 19
     81e:	70 e2       	ldi	r23, 0x20	; 32
     820:	f5 cf       	rjmp	.-22     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		Utils::txBuf[0] = q + 0x10;
		snprintf(Utils::txBuf+1, TX_LEN-1, "123456\r");
		break;
		
		case QUESTION_ROOM_TEMPERATURE:
		Utils::txBuf[0] = q + 0x10;
     822:	88 eb       	ldi	r24, 0xB8	; 184
     824:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "250\r");
     828:	65 e2       	ldi	r22, 0x25	; 37
     82a:	70 e2       	ldi	r23, 0x20	; 32
     82c:	ef cf       	rjmp	.-34     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		break;
		
		case QUESTION_SENSOR_TEMPERATURE:
		Utils::txBuf[0] = q + 0x10;
     82e:	89 eb       	ldi	r24, 0xB9	; 185
     830:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		snprintf(Utils::txBuf+1, TX_LEN-1, "340\r");
     834:	6a e2       	ldi	r22, 0x2A	; 42
     836:	70 e2       	ldi	r23, 0x20	; 32
     838:	e9 cf       	rjmp	.-46     	; 0x80c <_ZN10ComHandler15questionHandlerENS_10question_eE+0x8a>
		break;
		
		default:
		Utils::txBuf[0] = UNKNOWN_COMMAND;
     83a:	80 ee       	ldi	r24, 0xE0	; 224
     83c:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		Utils::txBuf[1] = '\r';
     840:	8d e0       	ldi	r24, 0x0D	; 13
     842:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <_ZN5Utils5txBufE+0x1>
		Utils::txBuf[2] = '\0';
     846:	10 92 3c 22 	sts	0x223C, r1	; 0x80223c <_ZN5Utils5txBufE+0x2>
		break;
	}
	sendAnswer();
     84a:	0c 94 99 03 	jmp	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>

0000084e <_ZN10ComHandler13changeHandlerENS_8change_eE>:
}

void ComHandler::changeHandler(change_e c)
{
     84e:	8f 92       	push	r8
     850:	9f 92       	push	r9
     852:	af 92       	push	r10
     854:	bf 92       	push	r11
     856:	cf 92       	push	r12
     858:	df 92       	push	r13
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	62 97       	sbiw	r28, 0x12	; 18
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	de bf       	out	0x3e, r29	; 62
     870:	7c 01       	movw	r14, r24
	int index = 0;
	bool r = false;
	double gascal_o2_pct, gascal_co2_pct;
	char* decayed_buf = &Utils::txBuf[0];
     872:	8a e3       	ldi	r24, 0x3A	; 58
     874:	92 e2       	ldi	r25, 0x22	; 34
     876:	89 8b       	std	Y+17, r24	; 0x11
     878:	9a 8b       	std	Y+18, r25	; 0x12
	char** endptr1 = &decayed_buf;
	char** endptr2 = endptr1;
	
	Utils::txBuf[0] = c+0x10;
     87a:	80 e1       	ldi	r24, 0x10	; 16
     87c:	86 0f       	add	r24, r22
     87e:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
	switch (c)
     882:	86 2f       	mov	r24, r22
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	fc 01       	movw	r30, r24
     888:	e0 5c       	subi	r30, 0xC0	; 192
     88a:	f1 09       	sbc	r31, r1
     88c:	e0 31       	cpi	r30, 0x10	; 16
     88e:	f1 05       	cpc	r31, r1
     890:	08 f0       	brcs	.+2      	; 0x894 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x46>
     892:	cd c0       	rjmp	.+410    	; 0xa2e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1e0>
     894:	88 27       	eor	r24, r24
     896:	e2 50       	subi	r30, 0x02	; 2
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	8f 4f       	sbci	r24, 0xFF	; 255
     89c:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__tablejump2__>
	{
		case CHANGE_TO_HEATING:
		if (state == IDLE) {
     8a0:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     8a4:	81 11       	cpse	r24, r1
     8a6:	1e c0       	rjmp	.+60     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = HEATING;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     8ae:	6a e1       	ldi	r22, 0x1A	; 26
     8b0:	70 e2       	ldi	r23, 0x20	; 32
     8b2:	8b e3       	ldi	r24, 0x3B	; 59
     8b4:	92 e2       	ldi	r25, 0x22	; 34
     8b6:	0e 94 8f 1b 	call	0x371e	; 0x371e <strcpy>
     8ba:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
     8be:	90 91 18 22 	lds	r25, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
     8c2:	a0 91 19 22 	lds	r26, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
     8c6:	b0 91 1a 22 	lds	r27, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
			timeFlag_ms = myTimer0->getTime_ms();
     8ca:	80 93 0e 22 	sts	0x220E, r24	; 0x80220e <_ZN10ComHandler11timeFlag_msE>
     8ce:	90 93 0f 22 	sts	0x220F, r25	; 0x80220f <_ZN10ComHandler11timeFlag_msE+0x1>
     8d2:	a0 93 10 22 	sts	0x2210, r26	; 0x802210 <_ZN10ComHandler11timeFlag_msE+0x2>
     8d6:	b0 93 11 22 	sts	0x2211, r27	; 0x802211 <_ZN10ComHandler11timeFlag_msE+0x3>
     8da:	b1 c0       	rjmp	.+354    	; 0xa3e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f0>
		}
		sendAnswer();
		break;

		case CHANGE_TO_DATA_SAMPLE:
		if (state == IDLE) {
     8dc:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     8e0:	88 23       	and	r24, r24
     8e2:	d1 f0       	breq	.+52     	; 0x918 <_ZN10ComHandler13changeHandlerENS_8change_eE+0xca>
		if (state == IDLE) {
			state = HEATING;
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
			timeFlag_ms = myTimer0->getTime_ms();
		} else {
			snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
     8e4:	6d e0       	ldi	r22, 0x0D	; 13
     8e6:	70 e2       	ldi	r23, 0x20	; 32
     8e8:	8b e3       	ldi	r24, 0x3B	; 59
     8ea:	92 e2       	ldi	r25, 0x22	; 34
     8ec:	0e 94 8f 1b 	call	0x371e	; 0x371e <strcpy>
     8f0:	a6 c0       	rjmp	.+332    	; 0xa3e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f0>
		}
		sendAnswer();
		break;

		case CHANGE_START_DATA_SAMPLE:
		if (state == IDLE) {
     8f2:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     8f6:	81 11       	cpse	r24, r1
     8f8:	f5 cf       	rjmp	.-22     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = DATA_SAMPLE;
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			TestHandler::start_test();
     900:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN11TestHandler10start_testEv>
     904:	9e c0       	rjmp	.+316    	; 0xa42 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f4>
			sendAnswer();
		}
		break;
		
		case CHANGE_STOP_DATA_SAMPLE:
		if (state == DATA_SAMPLE) {
     906:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     90a:	84 30       	cpi	r24, 0x04	; 4
     90c:	59 f7       	brne	.-42     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = IDLE;
     90e:	10 92 12 22 	sts	0x2212, r1	; 0x802212 <_ZN10ComHandler5stateE>
	static void zero_chamber(uint16_t);
	
public:
	static void flow_acq();
	static void start_test();
	static void stop_test() {stopFlag = true;};
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 1b 22 	sts	0x221B, r24	; 0x80221b <_ZN11TestHandler8stopFlagE>
		sendAnswer();
		break;

		case CHANGE_TO_DATA_SAMPLE:
		if (state == IDLE) {
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     918:	6a e1       	ldi	r22, 0x1A	; 26
     91a:	70 e2       	ldi	r23, 0x20	; 32
     91c:	e5 cf       	rjmp	.-54     	; 0x8e8 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x9a>
		}
		sendAnswer();
		break;
		
		case CHANGE_TO_AUTOCAL:
		if (state == IDLE) {
     91e:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     922:	81 11       	cpse	r24, r1
     924:	df cf       	rjmp	.-66     	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			state = AUTOCAL;
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     92c:	6a e1       	ldi	r22, 0x1A	; 26
     92e:	70 e2       	ldi	r23, 0x20	; 32
     930:	8b e3       	ldi	r24, 0x3B	; 59
     932:	92 e2       	ldi	r25, 0x22	; 34
     934:	0e 94 8f 1b 	call	0x371e	; 0x371e <strcpy>
			sendAnswer();
     938:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
			TestHandler::start_aircal();
     93c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN11TestHandler12start_aircalEv>
     940:	80 c0       	rjmp	.+256    	; 0xa42 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f4>
     942:	8e ec       	ldi	r24, 0xCE	; 206
     944:	c8 2e       	mov	r12, r24
     946:	81 e2       	ldi	r24, 0x21	; 33
     948:	d8 2e       	mov	r13, r24
     94a:	0a e3       	ldi	r16, 0x3A	; 58
     94c:	12 e2       	ldi	r17, 0x22	; 34
		break;
		
		case CHANGE_TO_GASCAL:
		while (!r) // breaks off when '\r' is received
		{
			rxBuf[index++] = fetchData(); // append to buffer
     94e:	c7 01       	movw	r24, r14
     950:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN10ComHandler9fetchDataEv>
     954:	f6 01       	movw	r30, r12
     956:	81 93       	st	Z+, r24
     958:	6f 01       	movw	r12, r30
			if (Utils::txBuf[index-1] == '\r') r = true;
     95a:	f8 01       	movw	r30, r16
     95c:	81 91       	ld	r24, Z+
     95e:	8f 01       	movw	r16, r30
			sendAnswer();
		}
		break;
		
		case CHANGE_TO_GASCAL:
		while (!r) // breaks off when '\r' is received
     960:	8d 30       	cpi	r24, 0x0D	; 13
     962:	a9 f7       	brne	.-22     	; 0x94e <_ZN10ComHandler13changeHandlerENS_8change_eE+0x100>
		{
			rxBuf[index++] = fetchData(); // append to buffer
			if (Utils::txBuf[index-1] == '\r') r = true;
		}
		gascal_o2_pct = strtod(Utils::txBuf, endptr1); // read O2
     964:	be 01       	movw	r22, r28
     966:	6f 5e       	subi	r22, 0xEF	; 239
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	8a e3       	ldi	r24, 0x3A	; 58
     96c:	92 e2       	ldi	r25, 0x22	; 34
     96e:	0e 94 28 19 	call	0x3250	; 0x3250 <strtod>
     972:	6b 01       	movw	r12, r22
     974:	7c 01       	movw	r14, r24
		gascal_co2_pct = strtod(*endptr1, endptr2); // read CO2
     976:	be 01       	movw	r22, r28
     978:	6f 5e       	subi	r22, 0xEF	; 239
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	89 89       	ldd	r24, Y+17	; 0x11
     97e:	9a 89       	ldd	r25, Y+18	; 0x12
     980:	0e 94 28 19 	call	0x3250	; 0x3250 <strtod>
     984:	4b 01       	movw	r8, r22
     986:	5c 01       	movw	r10, r24
		memset(Utils::txBuf,'\0', *endptr2-Utils::txBuf); // clear buffer
     988:	49 89       	ldd	r20, Y+17	; 0x11
     98a:	5a 89       	ldd	r21, Y+18	; 0x12
     98c:	4a 53       	subi	r20, 0x3A	; 58
     98e:	52 42       	sbci	r21, 0x22	; 34
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	8a e3       	ldi	r24, 0x3A	; 58
     996:	92 e2       	ldi	r25, 0x22	; 34
     998:	0e 94 88 1b 	call	0x3710	; 0x3710 <memset>
		if (gascal_o2_pct < 0 || gascal_o2_pct > 100 ||
			gascal_co2_pct < 0 || gascal_co2_pct > 100 ||
			gascal_o2_pct + gascal_co2_pct > 100 || state != IDLE) // error cases
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	c7 01       	movw	r24, r14
     9a4:	b6 01       	movw	r22, r12
     9a6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__cmpsf2>
     9aa:	87 fd       	sbrc	r24, 7
     9ac:	9b cf       	rjmp	.-202    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			if (Utils::txBuf[index-1] == '\r') r = true;
		}
		gascal_o2_pct = strtod(Utils::txBuf, endptr1); // read O2
		gascal_co2_pct = strtod(*endptr1, endptr2); // read CO2
		memset(Utils::txBuf,'\0', *endptr2-Utils::txBuf); // clear buffer
		if (gascal_o2_pct < 0 || gascal_o2_pct > 100 ||
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	48 ec       	ldi	r20, 0xC8	; 200
     9b4:	52 e4       	ldi	r21, 0x42	; 66
     9b6:	c7 01       	movw	r24, r14
     9b8:	b6 01       	movw	r22, r12
     9ba:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
     9be:	18 16       	cp	r1, r24
     9c0:	0c f4       	brge	.+2      	; 0x9c4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x176>
     9c2:	90 cf       	rjmp	.-224    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	a9 01       	movw	r20, r18
     9ca:	c5 01       	movw	r24, r10
     9cc:	b4 01       	movw	r22, r8
     9ce:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__cmpsf2>
     9d2:	87 fd       	sbrc	r24, 7
     9d4:	87 cf       	rjmp	.-242    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			gascal_co2_pct < 0 || gascal_co2_pct > 100 ||
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	48 ec       	ldi	r20, 0xC8	; 200
     9dc:	52 e4       	ldi	r21, 0x42	; 66
     9de:	c5 01       	movw	r24, r10
     9e0:	b4 01       	movw	r22, r8
     9e2:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
     9e6:	18 16       	cp	r1, r24
     9e8:	0c f4       	brge	.+2      	; 0x9ec <_ZN10ComHandler13changeHandlerENS_8change_eE+0x19e>
     9ea:	7c cf       	rjmp	.-264    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
     9ec:	a5 01       	movw	r20, r10
     9ee:	94 01       	movw	r18, r8
     9f0:	c7 01       	movw	r24, r14
     9f2:	b6 01       	movw	r22, r12
     9f4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	48 ec       	ldi	r20, 0xC8	; 200
     9fe:	52 e4       	ldi	r21, 0x42	; 66
     a00:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	0c f4       	brge	.+2      	; 0xa0a <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1bc>
     a08:	6d cf       	rjmp	.-294    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
			gascal_o2_pct + gascal_co2_pct > 100 || state != IDLE) // error cases
     a0a:	80 91 12 22 	lds	r24, 0x2212	; 0x802212 <_ZN10ComHandler5stateE>
     a0e:	81 11       	cpse	r24, r1
     a10:	69 cf       	rjmp	.-302    	; 0x8e4 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x96>
		{
			snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
			sendAnswer();
		} else {
			//snprintf(Utils::txBuf+1, TX_LEN-1, "0 %.2f %.2f\r", gascal_o2_pct, gascal_co2_pct); // debug
			state = GASCAL;
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <_ZN10ComHandler5stateE>
			snprintf(Utils::txBuf+1, TX_LEN-1, "0\r");
     a18:	6a e1       	ldi	r22, 0x1A	; 26
     a1a:	70 e2       	ldi	r23, 0x20	; 32
     a1c:	8b e3       	ldi	r24, 0x3B	; 59
     a1e:	92 e2       	ldi	r25, 0x22	; 34
     a20:	0e 94 8f 1b 	call	0x371e	; 0x371e <strcpy>
			sendAnswer();
     a24:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
			TestHandler::start_gascal();
     a28:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN11TestHandler12start_gascalEv>
     a2c:	0a c0       	rjmp	.+20     	; 0xa42 <_ZN10ComHandler13changeHandlerENS_8change_eE+0x1f4>
		snprintf(Utils::txBuf+1, TX_LEN-1, "1\r");
		sendAnswer();
		break;
		
		default:
		Utils::txBuf[0] = UNKNOWN_COMMAND;
     a2e:	80 ee       	ldi	r24, 0xE0	; 224
     a30:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		Utils::txBuf[1] = '\r';
     a34:	8d e0       	ldi	r24, 0x0D	; 13
     a36:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <_ZN5Utils5txBufE+0x1>
		Utils::txBuf[2] = '\0';
     a3a:	10 92 3c 22 	sts	0x223C, r1	; 0x80223c <_ZN5Utils5txBufE+0x2>
		sendAnswer();
     a3e:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
		break;
	}
     a42:	62 96       	adiw	r28, 0x12	; 18
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	9f 90       	pop	r9
     a5e:	8f 90       	pop	r8
     a60:	08 95       	ret

00000a62 <_ZN10ComHandler6handleEcNS_5com_eE>:
//========================//

void ComHandler::handle(char c, com_e com)
{
	com = com;
	if ((c >> 4) == 0x0A) questionHandler((question_e)c); // Questions commands
     a62:	26 2f       	mov	r18, r22
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	44 e0       	ldi	r20, 0x04	; 4
     a68:	35 95       	asr	r19
     a6a:	27 95       	ror	r18
     a6c:	4a 95       	dec	r20
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <_ZN10ComHandler6handleEcNS_5com_eE+0x6>
     a70:	2a 30       	cpi	r18, 0x0A	; 10
     a72:	31 05       	cpc	r19, r1
     a74:	11 f4       	brne	.+4      	; 0xa7a <_ZN10ComHandler6handleEcNS_5com_eE+0x18>
     a76:	0c 94 c1 03 	jmp	0x782	; 0x782 <_ZN10ComHandler15questionHandlerENS_10question_eE>
	else if ((c >> 4) == 0x0C) changeHandler((change_e)c); // Change states
     a7a:	2c 30       	cpi	r18, 0x0C	; 12
     a7c:	31 05       	cpc	r19, r1
     a7e:	11 f4       	brne	.+4      	; 0xa84 <_ZN10ComHandler6handleEcNS_5com_eE+0x22>
     a80:	0c 94 27 04 	jmp	0x84e	; 0x84e <_ZN10ComHandler13changeHandlerENS_8change_eE>
	else if (c == '\r') ; // ignore
     a84:	6d 30       	cpi	r22, 0x0D	; 13
     a86:	51 f0       	breq	.+20     	; 0xa9c <_ZN10ComHandler6handleEcNS_5com_eE+0x3a>
	else {
		Utils::txBuf[0] = UNKNOWN_COMMAND;
     a88:	80 ee       	ldi	r24, 0xE0	; 224
     a8a:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <_ZN5Utils5txBufE>
		Utils::txBuf[1] = '\r';
     a8e:	8d e0       	ldi	r24, 0x0D	; 13
     a90:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <_ZN5Utils5txBufE+0x1>
		Utils::txBuf[2] = '\0';
     a94:	10 92 3c 22 	sts	0x223C, r1	; 0x80223c <_ZN5Utils5txBufE+0x2>
		sendAnswer();
     a98:	0c 94 99 03 	jmp	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
     a9c:	08 95       	ret

00000a9e <_ZN9Ms5525dso8readCoefENS_6coef_eE>:
//=========================//
//=== PRIVATE FUNCTIONS ===//
//=========================//

uint16_t Ms5525dso::readCoef(coef_e c)
{
     a9e:	df 92       	push	r13
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	a8 97       	sbiw	r28, 0x28	; 40
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	8c 01       	movw	r16, r24
     ab8:	d6 2e       	mov	r13, r22
	const char err[] = "Error: could not read flow sensor PROM.";
     aba:	88 e2       	ldi	r24, 0x28	; 40
     abc:	eb e4       	ldi	r30, 0x4B	; 75
     abe:	f0 e2       	ldi	r31, 0x20	; 32
     ac0:	de 01       	movw	r26, r28
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	01 90       	ld	r0, Z+
     ac6:	0d 92       	st	X+, r0
     ac8:	8a 95       	dec	r24
     aca:	e1 f7       	brne	.-8      	; 0xac4 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x26>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	f8 01       	movw	r30, r16
     ad0:	63 81       	ldd	r22, Z+3	; 0x03
     ad2:	84 81       	ldd	r24, Z+4	; 0x04
     ad4:	95 81       	ldd	r25, Z+5	; 0x05
     ad6:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     ada:	f8 01       	movw	r30, r16
     adc:	84 81       	ldd	r24, Z+4	; 0x04
     ade:	95 81       	ldd	r25, Z+5	; 0x05
     ae0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     ae4:	f8 01       	movw	r30, r16
     ae6:	24 81       	ldd	r18, Z+4	; 0x04
     ae8:	35 81       	ldd	r19, Z+5	; 0x05
     aea:	81 11       	cpse	r24, r1
     aec:	2e c0       	rjmp	.+92     	; 0xb4a <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xac>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(c);
     aee:	6d 2d       	mov	r22, r13
     af0:	c9 01       	movw	r24, r18
     af2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	63 e0       	ldi	r22, 0x03	; 3
     afa:	f8 01       	movw	r30, r16
     afc:	84 81       	ldd	r24, Z+4	; 0x04
     afe:	95 81       	ldd	r25, Z+5	; 0x05
     b00:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     b04:	f8 01       	movw	r30, r16
     b06:	84 81       	ldd	r24, Z+4	; 0x04
     b08:	95 81       	ldd	r25, Z+5	; 0x05
     b0a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     b0e:	f8 01       	movw	r30, r16
     b10:	24 81       	ldd	r18, Z+4	; 0x04
     b12:	35 81       	ldd	r19, Z+5	; 0x05
     b14:	88 23       	and	r24, r24
     b16:	49 f0       	breq	.+18     	; 0xb2a <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x8c>
		myTwie->errorHandler(err);
     b18:	be 01       	movw	r22, r28
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	c9 01       	movw	r24, r18
     b20:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN4Twie12errorHandlerEPKc>
		return 0;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	5a c0       	rjmp	.+180    	; 0xbde <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x140>
	}
	
	myTwie->setAddress(address, Twie::DIR_READ);
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	f8 01       	movw	r30, r16
     b2e:	63 81       	ldd	r22, Z+3	; 0x03
     b30:	c9 01       	movw	r24, r18
     b32:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     b36:	f8 01       	movw	r30, r16
     b38:	84 81       	ldd	r24, Z+4	; 0x04
     b3a:	95 81       	ldd	r25, Z+5	; 0x05
     b3c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     b40:	f8 01       	movw	r30, r16
     b42:	24 81       	ldd	r18, Z+4	; 0x04
     b44:	35 81       	ldd	r19, Z+5	; 0x05
     b46:	88 23       	and	r24, r24
     b48:	61 f0       	breq	.+24     	; 0xb62 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0xc4>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     b4a:	41 e0       	ldi	r20, 0x01	; 1
     b4c:	63 e0       	ldi	r22, 0x03	; 3
     b4e:	c9 01       	movw	r24, r18
     b50:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     b54:	be 01       	movw	r22, r28
     b56:	6f 5f       	subi	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	f8 01       	movw	r30, r16
     b5c:	84 81       	ldd	r24, Z+4	; 0x04
     b5e:	95 81       	ldd	r25, Z+5	; 0x05
     b60:	df cf       	rjmp	.-66     	; 0xb20 <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x82>
		return 0;
	}
	uint16_t temp = myTwie->getData(Twie::AA_ACK) << 8;
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	c9 01       	movw	r24, r18
     b66:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     b6a:	e8 2e       	mov	r14, r24
     b6c:	f1 2c       	mov	r15, r1
     b6e:	fe 2c       	mov	r15, r14
     b70:	ee 24       	eor	r14, r14
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	62 e0       	ldi	r22, 0x02	; 2
     b76:	f8 01       	movw	r30, r16
     b78:	84 81       	ldd	r24, Z+4	; 0x04
     b7a:	95 81       	ldd	r25, Z+5	; 0x05
     b7c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	temp |= myTwie->getData(Twie::AA_NACK);
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	f8 01       	movw	r30, r16
     b84:	84 81       	ldd	r24, Z+4	; 0x04
     b86:	95 81       	ldd	r25, Z+5	; 0x05
     b88:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     b8c:	e8 2a       	or	r14, r24
	
	int i = (c-0xA0)/2;
     b8e:	6d 2d       	mov	r22, r13
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	60 5a       	subi	r22, 0xA0	; 160
     b94:	71 09       	sbc	r23, r1
     b96:	77 ff       	sbrs	r23, 7
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <_ZN9Ms5525dso8readCoefENS_6coef_eE+0x100>
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	75 95       	asr	r23
     ba0:	67 95       	ror	r22
	snprintf(Utils::txBuf,TX_LEN,"\tC%d: %u (0x%04x)\tQ%u: %d\r\n",i,temp,temp,i,Qs[i-1]);
     ba2:	f8 01       	movw	r30, r16
     ba4:	e6 0f       	add	r30, r22
     ba6:	f7 1f       	adc	r31, r23
     ba8:	87 89       	ldd	r24, Z+23	; 0x17
     baa:	1f 92       	push	r1
     bac:	8f 93       	push	r24
     bae:	7f 93       	push	r23
     bb0:	6f 93       	push	r22
     bb2:	ff 92       	push	r15
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	ef 92       	push	r14
     bba:	7f 93       	push	r23
     bbc:	6f 93       	push	r22
     bbe:	8f e2       	ldi	r24, 0x2F	; 47
     bc0:	90 e2       	ldi	r25, 0x20	; 32
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	1f 92       	push	r1
     bc8:	80 e4       	ldi	r24, 0x40	; 64
     bca:	8f 93       	push	r24
     bcc:	8a e3       	ldi	r24, 0x3A	; 58
     bce:	92 e2       	ldi	r25, 0x22	; 34
     bd0:	9f 93       	push	r25
     bd2:	8f 93       	push	r24
     bd4:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <snprintf>
	
	return temp;
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	c7 01       	movw	r24, r14
}
     bde:	a8 96       	adiw	r28, 0x28	; 40
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	08 95       	ret

00000bf4 <_ZN9Ms5525dso5resetEv>:
//========================//
//=== PUBLIC FUNCTIONS ===//
//========================//

void Ms5525dso::reset()
{
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	a4 97       	sbiw	r28, 0x24	; 36
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not reset flow sensor.";
     c08:	84 e2       	ldi	r24, 0x24	; 36
     c0a:	e3 e7       	ldi	r30, 0x73	; 115
     c0c:	f0 e2       	ldi	r31, 0x20	; 32
     c0e:	de 01       	movw	r26, r28
     c10:	11 96       	adiw	r26, 0x01	; 1
     c12:	01 90       	ld	r0, Z+
     c14:	0d 92       	st	X+, r0
     c16:	8a 95       	dec	r24
     c18:	e1 f7       	brne	.-8      	; 0xc12 <_ZN9Ms5525dso5resetEv+0x1e>
		
	myTwie->setAddress(address, Twie::DIR_WRITE);
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	f8 01       	movw	r30, r16
     c1e:	63 81       	ldd	r22, Z+3	; 0x03
     c20:	84 81       	ldd	r24, Z+4	; 0x04
     c22:	95 81       	ldd	r25, Z+5	; 0x05
     c24:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     c28:	f8 01       	movw	r30, r16
     c2a:	84 81       	ldd	r24, Z+4	; 0x04
     c2c:	95 81       	ldd	r25, Z+5	; 0x05
     c2e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     c32:	f8 01       	movw	r30, r16
     c34:	24 81       	ldd	r18, Z+4	; 0x04
     c36:	35 81       	ldd	r19, Z+5	; 0x05
     c38:	88 23       	and	r24, r24
     c3a:	31 f0       	breq	.+12     	; 0xc48 <_ZN9Ms5525dso5resetEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	63 e0       	ldi	r22, 0x03	; 3
     c40:	c9 01       	movw	r24, r18
     c42:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     c46:	12 c0       	rjmp	.+36     	; 0xc6c <_ZN9Ms5525dso5resetEv+0x78>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x1E);
     c48:	6e e1       	ldi	r22, 0x1E	; 30
     c4a:	c9 01       	movw	r24, r18
     c4c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	63 e0       	ldi	r22, 0x03	; 3
     c54:	f8 01       	movw	r30, r16
     c56:	84 81       	ldd	r24, Z+4	; 0x04
     c58:	95 81       	ldd	r25, Z+5	; 0x05
     c5a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     c5e:	f8 01       	movw	r30, r16
     c60:	84 81       	ldd	r24, Z+4	; 0x04
     c62:	95 81       	ldd	r25, Z+5	; 0x05
     c64:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     c68:	88 23       	and	r24, r24
     c6a:	49 f0       	breq	.+18     	; 0xc7e <_ZN9Ms5525dso5resetEv+0x8a>
		myTwie->errorHandler(err);
     c6c:	be 01       	movw	r22, r28
     c6e:	6f 5f       	subi	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	f8 01       	movw	r30, r16
     c74:	84 81       	ldd	r24, Z+4	; 0x04
     c76:	95 81       	ldd	r25, Z+5	; 0x05
     c78:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN4Twie12errorHandlerEPKc>
		return;
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <_ZN9Ms5525dso5resetEv+0x92>
	}
	
	Utils::delay_ms(3);
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN5Utils8delay_msEj>
}
     c86:	a4 96       	adiw	r28, 0x24	; 36
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <_ZN9Ms5525dso8readPROMEv>:

void Ms5525dso::readPROM()
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
	C1 = readCoef(C1_addr);
     c9c:	62 ea       	ldi	r22, 0xA2	; 162
     c9e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     ca2:	8e 83       	std	Y+6, r24	; 0x06
     ca4:	9f 83       	std	Y+7, r25	; 0x07
	C2 = readCoef(C2_addr);
     ca6:	64 ea       	ldi	r22, 0xA4	; 164
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cae:	88 87       	std	Y+8, r24	; 0x08
     cb0:	99 87       	std	Y+9, r25	; 0x09
	C3 = readCoef(C3_addr);
     cb2:	66 ea       	ldi	r22, 0xA6	; 166
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cba:	8a 87       	std	Y+10, r24	; 0x0a
     cbc:	9b 87       	std	Y+11, r25	; 0x0b
	C4 = readCoef(C4_addr);
     cbe:	68 ea       	ldi	r22, 0xA8	; 168
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cc6:	8c 87       	std	Y+12, r24	; 0x0c
     cc8:	9d 87       	std	Y+13, r25	; 0x0d
	C5 = readCoef(C5_addr);
     cca:	6a ea       	ldi	r22, 0xAA	; 170
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cd2:	8e 87       	std	Y+14, r24	; 0x0e
     cd4:	9f 87       	std	Y+15, r25	; 0x0f
	C6 = readCoef(C6_addr);
     cd6:	6c ea       	ldi	r22, 0xAC	; 172
     cd8:	ce 01       	movw	r24, r28
     cda:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN9Ms5525dso8readCoefENS_6coef_eE>
     cde:	88 8b       	std	Y+16, r24	; 0x10
     ce0:	99 8b       	std	Y+17, r25	; 0x11
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <_ZN9Ms5525dsoC1ENS_5osr_sEhP4Twie>:
		
//===================//
//=== CONSTRUCTOR ===//
//===================//

Ms5525dso::Ms5525dso(osr_s osr, uint8_t address, Twie* myTwie)
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
     cf8:	6a 01       	movw	r12, r20
     cfa:	e6 2e       	mov	r14, r22
     cfc:	6e e0       	ldi	r22, 0x0E	; 14
     cfe:	6a 8b       	std	Y+18, r22	; 0x12
     d00:	50 e1       	ldi	r21, 0x10	; 16
     d02:	5b 8b       	std	Y+19, r21	; 0x13
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	8c 8b       	std	Y+20, r24	; 0x14
     d08:	35 e0       	ldi	r19, 0x05	; 5
     d0a:	3d 8b       	std	Y+21, r19	; 0x15
     d0c:	8e 8b       	std	Y+22, r24	; 0x16
     d0e:	95 e1       	ldi	r25, 0x15	; 21
     d10:	9f 8b       	std	Y+23, r25	; 0x17
     d12:	68 8f       	std	Y+24, r22	; 0x18
     d14:	59 8f       	std	Y+25, r21	; 0x19
     d16:	8a 8f       	std	Y+26, r24	; 0x1a
     d18:	3b 8f       	std	Y+27, r19	; 0x1b
     d1a:	8c 8f       	std	Y+28, r24	; 0x1c
     d1c:	9d 8f       	std	Y+29, r25	; 0x1d
{
	this->osr = osr;
     d1e:	c8 82       	st	Y, r12
     d20:	d9 82       	std	Y+1, r13	; 0x01
     d22:	ea 82       	std	Y+2, r14	; 0x02
	this->address = address;
     d24:	2b 83       	std	Y+3, r18	; 0x03
	this->myTwie = myTwie;
     d26:	0c 83       	std	Y+4, r16	; 0x04
     d28:	1d 83       	std	Y+5, r17	; 0x05
	
	reset();
     d2a:	ce 01       	movw	r24, r28
     d2c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN9Ms5525dso5resetEv>
	readPROM();
     d30:	ce 01       	movw	r24, r28
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
	this->osr = osr;
	this->address = address;
	this->myTwie = myTwie;
	
	reset();
	readPROM();
     d40:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <_ZN9Ms5525dso8readPROMEv>

00000d44 <_ZN9Ms5525dso15convertPressureEv>:
	C5 = readCoef(C5_addr);
	C6 = readCoef(C6_addr);
}

void Ms5525dso::convertPressure()
{
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	e2 97       	sbiw	r28, 0x32	; 50
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert pressure in flow sensor.";
     d58:	82 e3       	ldi	r24, 0x32	; 50
     d5a:	e7 e9       	ldi	r30, 0x97	; 151
     d5c:	f0 e2       	ldi	r31, 0x20	; 32
     d5e:	de 01       	movw	r26, r28
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	01 90       	ld	r0, Z+
     d64:	0d 92       	st	X+, r0
     d66:	8a 95       	dec	r24
     d68:	e1 f7       	brne	.-8      	; 0xd62 <_ZN9Ms5525dso15convertPressureEv+0x1e>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	f8 01       	movw	r30, r16
     d6e:	63 81       	ldd	r22, Z+3	; 0x03
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	95 81       	ldd	r25, Z+5	; 0x05
     d74:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     d78:	f8 01       	movw	r30, r16
     d7a:	84 81       	ldd	r24, Z+4	; 0x04
     d7c:	95 81       	ldd	r25, Z+5	; 0x05
     d7e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     d82:	f8 01       	movw	r30, r16
     d84:	24 81       	ldd	r18, Z+4	; 0x04
     d86:	35 81       	ldd	r19, Z+5	; 0x05
     d88:	88 23       	and	r24, r24
     d8a:	31 f0       	breq	.+12     	; 0xd98 <_ZN9Ms5525dso15convertPressureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	63 e0       	ldi	r22, 0x03	; 3
     d90:	c9 01       	movw	r24, r18
     d92:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     d96:	14 c0       	rjmp	.+40     	; 0xdc0 <_ZN9Ms5525dso15convertPressureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x40 + osr.cmd);
     d98:	f8 01       	movw	r30, r16
     d9a:	60 81       	ld	r22, Z
     d9c:	60 5c       	subi	r22, 0xC0	; 192
     d9e:	c9 01       	movw	r24, r18
     da0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     da4:	41 e0       	ldi	r20, 0x01	; 1
     da6:	63 e0       	ldi	r22, 0x03	; 3
     da8:	f8 01       	movw	r30, r16
     daa:	84 81       	ldd	r24, Z+4	; 0x04
     dac:	95 81       	ldd	r25, Z+5	; 0x05
     dae:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     db2:	f8 01       	movw	r30, r16
     db4:	84 81       	ldd	r24, Z+4	; 0x04
     db6:	95 81       	ldd	r25, Z+5	; 0x05
     db8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     dbc:	88 23       	and	r24, r24
     dbe:	49 f0       	breq	.+18     	; 0xdd2 <_ZN9Ms5525dso15convertPressureEv+0x8e>
		myTwie->errorHandler(err);
     dc0:	be 01       	movw	r22, r28
     dc2:	6f 5f       	subi	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	f8 01       	movw	r30, r16
     dc8:	84 81       	ldd	r24, Z+4	; 0x04
     dca:	95 81       	ldd	r25, Z+5	; 0x05
     dcc:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN4Twie12errorHandlerEPKc>
		return;
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <_ZN9Ms5525dso15convertPressureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     dd2:	f8 01       	movw	r30, r16
     dd4:	81 81       	ldd	r24, Z+1	; 0x01
     dd6:	92 81       	ldd	r25, Z+2	; 0x02
     dd8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN5Utils8delay_usEj>
}
     ddc:	e2 96       	adiw	r28, 0x32	; 50
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <_ZN9Ms5525dso18convertTemperatureEv>:

void Ms5525dso::convertTemperature()
{	
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	e5 97       	sbiw	r28, 0x35	; 53
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not convert temperature in flow sensor.";
     e00:	85 e3       	ldi	r24, 0x35	; 53
     e02:	e9 ec       	ldi	r30, 0xC9	; 201
     e04:	f0 e2       	ldi	r31, 0x20	; 32
     e06:	de 01       	movw	r26, r28
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	01 90       	ld	r0, Z+
     e0c:	0d 92       	st	X+, r0
     e0e:	8a 95       	dec	r24
     e10:	e1 f7       	brne	.-8      	; 0xe0a <_ZN9Ms5525dso18convertTemperatureEv+0x1e>

	myTwie->setAddress(address, Twie::DIR_WRITE);
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	f8 01       	movw	r30, r16
     e16:	63 81       	ldd	r22, Z+3	; 0x03
     e18:	84 81       	ldd	r24, Z+4	; 0x04
     e1a:	95 81       	ldd	r25, Z+5	; 0x05
     e1c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     e20:	f8 01       	movw	r30, r16
     e22:	84 81       	ldd	r24, Z+4	; 0x04
     e24:	95 81       	ldd	r25, Z+5	; 0x05
     e26:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     e2a:	f8 01       	movw	r30, r16
     e2c:	24 81       	ldd	r18, Z+4	; 0x04
     e2e:	35 81       	ldd	r19, Z+5	; 0x05
     e30:	88 23       	and	r24, r24
     e32:	31 f0       	breq	.+12     	; 0xe40 <_ZN9Ms5525dso18convertTemperatureEv+0x54>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	63 e0       	ldi	r22, 0x03	; 3
     e38:	c9 01       	movw	r24, r18
     e3a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <_ZN9Ms5525dso18convertTemperatureEv+0x7c>
		myTwie->errorHandler(err);
		return;
	}
	myTwie->setData(0x50 + osr.cmd);
     e40:	f8 01       	movw	r30, r16
     e42:	60 81       	ld	r22, Z
     e44:	60 5b       	subi	r22, 0xB0	; 176
     e46:	c9 01       	movw	r24, r18
     e48:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     e4c:	41 e0       	ldi	r20, 0x01	; 1
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	f8 01       	movw	r30, r16
     e52:	84 81       	ldd	r24, Z+4	; 0x04
     e54:	95 81       	ldd	r25, Z+5	; 0x05
     e56:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     e5a:	f8 01       	movw	r30, r16
     e5c:	84 81       	ldd	r24, Z+4	; 0x04
     e5e:	95 81       	ldd	r25, Z+5	; 0x05
     e60:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     e64:	88 23       	and	r24, r24
     e66:	49 f0       	breq	.+18     	; 0xe7a <_ZN9Ms5525dso18convertTemperatureEv+0x8e>
		myTwie->errorHandler(err);
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	f8 01       	movw	r30, r16
     e70:	84 81       	ldd	r24, Z+4	; 0x04
     e72:	95 81       	ldd	r25, Z+5	; 0x05
     e74:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN4Twie12errorHandlerEPKc>
		return;
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <_ZN9Ms5525dso18convertTemperatureEv+0x98>
	}
	Utils::delay_us(osr.delay_us);
     e7a:	f8 01       	movw	r30, r16
     e7c:	81 81       	ldd	r24, Z+1	; 0x01
     e7e:	92 81       	ldd	r25, Z+2	; 0x02
     e80:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN5Utils8delay_usEj>
}
     e84:	e5 96       	adiw	r28, 0x35	; 53
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	08 95       	ret

00000e94 <_ZN9Ms5525dso7readADCEv>:

uint32_t Ms5525dso::readADC()
{
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	aa 97       	sbiw	r28, 0x2a	; 42
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	8c 01       	movw	r16, r24
	const char err[] = "Error: could not read ADC in flow sensor.";
     eac:	8a e2       	ldi	r24, 0x2A	; 42
     eae:	ee ef       	ldi	r30, 0xFE	; 254
     eb0:	f0 e2       	ldi	r31, 0x20	; 32
     eb2:	de 01       	movw	r26, r28
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	01 90       	ld	r0, Z+
     eb8:	0d 92       	st	X+, r0
     eba:	8a 95       	dec	r24
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <_ZN9Ms5525dso7readADCEv+0x22>
	
	myTwie->setAddress(address, Twie::DIR_WRITE);
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	f8 01       	movw	r30, r16
     ec2:	63 81       	ldd	r22, Z+3	; 0x03
     ec4:	84 81       	ldd	r24, Z+4	; 0x04
     ec6:	95 81       	ldd	r25, Z+5	; 0x05
     ec8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     ecc:	f8 01       	movw	r30, r16
     ece:	84 81       	ldd	r24, Z+4	; 0x04
     ed0:	95 81       	ldd	r25, Z+5	; 0x05
     ed2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     ed6:	f8 01       	movw	r30, r16
     ed8:	24 81       	ldd	r18, Z+4	; 0x04
     eda:	35 81       	ldd	r19, Z+5	; 0x05
     edc:	81 11       	cpse	r24, r1
     ede:	2f c0       	rjmp	.+94     	; 0xf3e <_ZN9Ms5525dso7readADCEv+0xaa>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
		myTwie->errorHandler(err);
		return 0;
	}
	myTwie->setData(0x00);
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	c9 01       	movw	r24, r18
     ee4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN4Twie7setDataEh>
	myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	63 e0       	ldi	r22, 0x03	; 3
     eec:	f8 01       	movw	r30, r16
     eee:	84 81       	ldd	r24, Z+4	; 0x04
     ef0:	95 81       	ldd	r25, Z+5	; 0x05
     ef2:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	if (myTwie->isError()) {
     ef6:	f8 01       	movw	r30, r16
     ef8:	84 81       	ldd	r24, Z+4	; 0x04
     efa:	95 81       	ldd	r25, Z+5	; 0x05
     efc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     f00:	f8 01       	movw	r30, r16
     f02:	24 81       	ldd	r18, Z+4	; 0x04
     f04:	35 81       	ldd	r19, Z+5	; 0x05
     f06:	88 23       	and	r24, r24
     f08:	51 f0       	breq	.+20     	; 0xf1e <_ZN9Ms5525dso7readADCEv+0x8a>
		myTwie->errorHandler(err);
     f0a:	be 01       	movw	r22, r28
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	c9 01       	movw	r24, r18
     f12:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN4Twie12errorHandlerEPKc>
		return 0;
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	cb 01       	movw	r24, r22
     f1c:	4a c0       	rjmp	.+148    	; 0xfb2 <_ZN9Ms5525dso7readADCEv+0x11e>
	}
		
	myTwie->setAddress(address, Twie::DIR_READ);
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	f8 01       	movw	r30, r16
     f22:	63 81       	ldd	r22, Z+3	; 0x03
     f24:	c9 01       	movw	r24, r18
     f26:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN4Twie10setAddressEhNS_11direction_eE>
	if (myTwie->isError()) {
     f2a:	f8 01       	movw	r30, r16
     f2c:	84 81       	ldd	r24, Z+4	; 0x04
     f2e:	95 81       	ldd	r25, Z+5	; 0x05
     f30:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN4Twie7isErrorEv>
     f34:	f8 01       	movw	r30, r16
     f36:	24 81       	ldd	r18, Z+4	; 0x04
     f38:	35 81       	ldd	r19, Z+5	; 0x05
     f3a:	88 23       	and	r24, r24
     f3c:	61 f0       	breq	.+24     	; 0xf56 <_ZN9Ms5525dso7readADCEv+0xc2>
		myTwie->setCommand(Twie::COM_STOP, Twie::AA_NACK);
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	63 e0       	ldi	r22, 0x03	; 3
     f42:	c9 01       	movw	r24, r18
     f44:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
		myTwie->errorHandler(err);
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	f8 01       	movw	r30, r16
     f50:	84 81       	ldd	r24, Z+4	; 0x04
     f52:	95 81       	ldd	r25, Z+5	; 0x05
     f54:	de cf       	rjmp	.-68     	; 0xf12 <_ZN9Ms5525dso7readADCEv+0x7e>
		return 0;
	}
	
	uint32_t b1 = myTwie->getData(Twie::AA_ACK);
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	c9 01       	movw	r24, r18
     f5a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     f5e:	e8 2e       	mov	r14, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	62 e0       	ldi	r22, 0x02	; 2
     f64:	f8 01       	movw	r30, r16
     f66:	84 81       	ldd	r24, Z+4	; 0x04
     f68:	95 81       	ldd	r25, Z+5	; 0x05
     f6a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b2 = myTwie->getData(Twie::AA_ACK);
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	f8 01       	movw	r30, r16
     f72:	84 81       	ldd	r24, Z+4	; 0x04
     f74:	95 81       	ldd	r25, Z+5	; 0x05
     f76:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
     f7a:	f8 2e       	mov	r15, r24
	myTwie->setCommand(Twie::COM_BYTEREC, Twie::AA_ACK);
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	62 e0       	ldi	r22, 0x02	; 2
     f80:	f8 01       	movw	r30, r16
     f82:	84 81       	ldd	r24, Z+4	; 0x04
     f84:	95 81       	ldd	r25, Z+5	; 0x05
     f86:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>
	uint32_t b3 = myTwie->getData(Twie::AA_NACK);
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	f8 01       	movw	r30, r16
     f8e:	84 81       	ldd	r24, Z+4	; 0x04
     f90:	95 81       	ldd	r25, Z+5	; 0x05
     f92:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN4Twie7getDataENS_19acknowledgeAction_eE>
	
	return (b1 << 16)|(b2 << 8)|b3;
     f96:	4f 2d       	mov	r20, r15
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	76 2f       	mov	r23, r22
     fa0:	65 2f       	mov	r22, r21
     fa2:	54 2f       	mov	r21, r20
     fa4:	44 27       	eor	r20, r20
     fa6:	6e 29       	or	r22, r14
     fa8:	8a 01       	movw	r16, r20
     faa:	9b 01       	movw	r18, r22
     fac:	08 2b       	or	r16, r24
     fae:	c9 01       	movw	r24, r18
     fb0:	b8 01       	movw	r22, r16
}
     fb2:	aa 96       	adiw	r28, 0x2a	; 42
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	08 95       	ret

00000fc6 <_ZN9Ms5525dso4readEv>:

Ms5525dso::data_s Ms5525dso::read()
{	
     fc6:	2f 92       	push	r2
     fc8:	3f 92       	push	r3
     fca:	4f 92       	push	r4
     fcc:	5f 92       	push	r5
     fce:	6f 92       	push	r6
     fd0:	7f 92       	push	r7
     fd2:	8f 92       	push	r8
     fd4:	9f 92       	push	r9
     fd6:	af 92       	push	r10
     fd8:	bf 92       	push	r11
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	6a 97       	sbiw	r28, 0x1a	; 26
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	1c 01       	movw	r2, r24
	convertPressure();
     ff6:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN9Ms5525dso15convertPressureEv>
	uint32_t D1 = readADC();
     ffa:	c1 01       	movw	r24, r2
     ffc:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN9Ms5525dso7readADCEv>
    1000:	4b 01       	movw	r8, r22
    1002:	5c 01       	movw	r10, r24
	convertTemperature();
    1004:	c1 01       	movw	r24, r2
    1006:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN9Ms5525dso18convertTemperatureEv>
	uint32_t D2 = readADC();
    100a:	c1 01       	movw	r24, r2
    100c:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN9Ms5525dso7readADCEv>
    1010:	2b 01       	movw	r4, r22
    1012:	3c 01       	movw	r6, r24
			
	double dT = D2 - C5*pow(2,Q5);
    1014:	f1 01       	movw	r30, r2
    1016:	66 89       	ldd	r22, Z+22	; 0x16
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e4       	ldi	r25, 0x40	; 64
    102e:	0e 94 ad 13 	call	0x275a	; 0x275a <pow>
    1032:	6b 01       	movw	r12, r22
    1034:	7c 01       	movw	r14, r24
    1036:	c3 01       	movw	r24, r6
    1038:	b2 01       	movw	r22, r4
    103a:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    103e:	2b 01       	movw	r4, r22
    1040:	3c 01       	movw	r6, r24
    1042:	f1 01       	movw	r30, r2
    1044:	66 85       	ldd	r22, Z+14	; 0x0e
    1046:	77 85       	ldd	r23, Z+15	; 0x0f
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1050:	a7 01       	movw	r20, r14
    1052:	96 01       	movw	r18, r12
    1054:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	c3 01       	movw	r24, r6
    105e:	b2 01       	movw	r22, r4
    1060:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1064:	6b 01       	movw	r12, r22
    1066:	7c 01       	movw	r14, r24
	double TEMP = 2000 + dT*C6/pow(2,Q6);
    1068:	f1 01       	movw	r30, r2
    106a:	67 89       	ldd	r22, Z+23	; 0x17
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e4       	ldi	r25, 0x40	; 64
    1082:	0e 94 ad 13 	call	0x275a	; 0x275a <pow>
    1086:	2b 01       	movw	r4, r22
    1088:	3c 01       	movw	r6, r24
		
	double OFF = C2*pow(2,Q2) + dT*C4/pow(2,Q4);
    108a:	f1 01       	movw	r30, r2
    108c:	63 89       	ldd	r22, Z+19	; 0x13
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e4       	ldi	r25, 0x40	; 64
    10a4:	0e 94 ad 13 	call	0x275a	; 0x275a <pow>
    10a8:	69 87       	std	Y+9, r22	; 0x09
    10aa:	7a 87       	std	Y+10, r23	; 0x0a
    10ac:	8b 87       	std	Y+11, r24	; 0x0b
    10ae:	9c 87       	std	Y+12, r25	; 0x0c
    10b0:	f1 01       	movw	r30, r2
    10b2:	65 89       	ldd	r22, Z+21	; 0x15
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e4       	ldi	r25, 0x40	; 64
    10ca:	0e 94 ad 13 	call	0x275a	; 0x275a <pow>
    10ce:	6d 87       	std	Y+13, r22	; 0x0d
    10d0:	7e 87       	std	Y+14, r23	; 0x0e
    10d2:	8f 87       	std	Y+15, r24	; 0x0f
    10d4:	98 8b       	std	Y+16, r25	; 0x10
	double SENS = C1*pow(2,Q1) + dT*C3/pow(2,Q3);
    10d6:	f1 01       	movw	r30, r2
    10d8:	62 89       	ldd	r22, Z+18	; 0x12
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e4       	ldi	r25, 0x40	; 64
    10f0:	0e 94 ad 13 	call	0x275a	; 0x275a <pow>
    10f4:	69 8b       	std	Y+17, r22	; 0x11
    10f6:	7a 8b       	std	Y+18, r23	; 0x12
    10f8:	8b 8b       	std	Y+19, r24	; 0x13
    10fa:	9c 8b       	std	Y+20, r25	; 0x14
    10fc:	f1 01       	movw	r30, r2
    10fe:	64 89       	ldd	r22, Z+20	; 0x14
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e4       	ldi	r25, 0x40	; 64
    1116:	0e 94 ad 13 	call	0x275a	; 0x275a <pow>
    111a:	6d 8b       	std	Y+21, r22	; 0x15
    111c:	7e 8b       	std	Y+22, r23	; 0x16
    111e:	8f 8b       	std	Y+23, r24	; 0x17
    1120:	98 8f       	std	Y+24, r25	; 0x18
	double P = (D1*SENS/pow(2,21) - OFF)/pow(2,15);
	
	data_s data;
	data.pressure = P/100.;
	data.temperature = TEMP/100.;
    1122:	f1 01       	movw	r30, r2
    1124:	60 89       	ldd	r22, Z+16	; 0x10
    1126:	71 89       	ldd	r23, Z+17	; 0x11
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1130:	a7 01       	movw	r20, r14
    1132:	96 01       	movw	r18, r12
    1134:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1138:	a3 01       	movw	r20, r6
    113a:	92 01       	movw	r18, r4
    113c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a ef       	ldi	r20, 0xFA	; 250
    1146:	54 e4       	ldi	r21, 0x44	; 68
    1148:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	48 ec       	ldi	r20, 0xC8	; 200
    1152:	52 e4       	ldi	r21, 0x42	; 66
    1154:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    1158:	16 2f       	mov	r17, r22
    115a:	07 2f       	mov	r16, r23
    115c:	89 8f       	std	Y+25, r24	; 0x19
    115e:	9a 8f       	std	Y+26, r25	; 0x1a
	return data;
    1160:	f1 01       	movw	r30, r2
    1162:	62 85       	ldd	r22, Z+10	; 0x0a
    1164:	73 85       	ldd	r23, Z+11	; 0x0b
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    116e:	a7 01       	movw	r20, r14
    1170:	96 01       	movw	r18, r12
    1172:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1176:	2d 89       	ldd	r18, Y+21	; 0x15
    1178:	3e 89       	ldd	r19, Y+22	; 0x16
    117a:	4f 89       	ldd	r20, Y+23	; 0x17
    117c:	58 8d       	ldd	r21, Y+24	; 0x18
    117e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    1182:	2b 01       	movw	r4, r22
    1184:	3c 01       	movw	r6, r24
    1186:	f1 01       	movw	r30, r2
    1188:	66 81       	ldd	r22, Z+6	; 0x06
    118a:	77 81       	ldd	r23, Z+7	; 0x07
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1194:	29 89       	ldd	r18, Y+17	; 0x11
    1196:	3a 89       	ldd	r19, Y+18	; 0x12
    1198:	4b 89       	ldd	r20, Y+19	; 0x13
    119a:	5c 89       	ldd	r21, Y+20	; 0x14
    119c:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	c3 01       	movw	r24, r6
    11a6:	b2 01       	movw	r22, r4
    11a8:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    11ac:	2b 01       	movw	r4, r22
    11ae:	3c 01       	movw	r6, r24
    11b0:	c5 01       	movw	r24, r10
    11b2:	b4 01       	movw	r22, r8
    11b4:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	c3 01       	movw	r24, r6
    11be:	b2 01       	movw	r22, r4
    11c0:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	55 e3       	ldi	r21, 0x35	; 53
    11cc:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    11d0:	4b 01       	movw	r8, r22
    11d2:	5c 01       	movw	r10, r24
    11d4:	f1 01       	movw	r30, r2
    11d6:	64 85       	ldd	r22, Z+12	; 0x0c
    11d8:	75 85       	ldd	r23, Z+13	; 0x0d
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    11e2:	a7 01       	movw	r20, r14
    11e4:	96 01       	movw	r18, r12
    11e6:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    11ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    11ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    11ee:	4f 85       	ldd	r20, Y+15	; 0x0f
    11f0:	58 89       	ldd	r21, Y+16	; 0x10
    11f2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    11f6:	6b 01       	movw	r12, r22
    11f8:	7c 01       	movw	r14, r24
    11fa:	f1 01       	movw	r30, r2
    11fc:	60 85       	ldd	r22, Z+8	; 0x08
    11fe:	71 85       	ldd	r23, Z+9	; 0x09
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1208:	29 85       	ldd	r18, Y+9	; 0x09
    120a:	3a 85       	ldd	r19, Y+10	; 0x0a
    120c:	4b 85       	ldd	r20, Y+11	; 0x0b
    120e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1210:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	c7 01       	movw	r24, r14
    121a:	b6 01       	movw	r22, r12
    121c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    1220:	9b 01       	movw	r18, r22
    1222:	ac 01       	movw	r20, r24
    1224:	c5 01       	movw	r24, r10
    1226:	b4 01       	movw	r22, r8
    1228:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	58 e3       	ldi	r21, 0x38	; 56
    1234:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	48 ec       	ldi	r20, 0xC8	; 200
    123e:	52 e4       	ldi	r21, 0x42	; 66
    1240:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    1244:	9b 01       	movw	r18, r22
    1246:	ab 01       	movw	r20, r22
    1248:	bc 01       	movw	r22, r24
    124a:	49 83       	std	Y+1, r20	; 0x01
    124c:	5a 83       	std	Y+2, r21	; 0x02
    124e:	6b 83       	std	Y+3, r22	; 0x03
    1250:	7c 83       	std	Y+4, r23	; 0x04
    1252:	81 2f       	mov	r24, r17
    1254:	90 2f       	mov	r25, r16
    1256:	a9 8d       	ldd	r26, Y+25	; 0x19
    1258:	ba 8d       	ldd	r27, Y+26	; 0x1a
    125a:	8d 83       	std	Y+5, r24	; 0x05
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	af 83       	std	Y+7, r26	; 0x07
    1260:	b8 87       	std	Y+8, r27	; 0x08
    1262:	3a 81       	ldd	r19, Y+2	; 0x02
    1264:	4b 81       	ldd	r20, Y+3	; 0x03
    1266:	5c 81       	ldd	r21, Y+4	; 0x04
    1268:	61 2f       	mov	r22, r17
    126a:	7e 81       	ldd	r23, Y+6	; 0x06
}
    126c:	8f 81       	ldd	r24, Y+7	; 0x07
    126e:	98 85       	ldd	r25, Y+8	; 0x08
    1270:	6a 96       	adiw	r28, 0x1a	; 26
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	bf 90       	pop	r11
    1288:	af 90       	pop	r10
    128a:	9f 90       	pop	r9
    128c:	8f 90       	pop	r8
    128e:	7f 90       	pop	r7
    1290:	6f 90       	pop	r6
    1292:	5f 90       	pop	r5
    1294:	4f 90       	pop	r4
    1296:	3f 90       	pop	r3
    1298:	2f 90       	pop	r2
    129a:	08 95       	ret

0000129c <_ZN4PumpC1Ev>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Pump::Pump()
    129c:	fc 01       	movw	r30, r24
{
	PORTC_DIRSET = PIN3_bm;
    129e:	98 e0       	ldi	r25, 0x08	; 8
    12a0:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	on = true;
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
    12a4:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
    12a8:	10 82       	st	Z, r1
    12aa:	08 95       	ret

000012ac <_ZN4Pump6turnOnEv>:
//=== PUBLIC FUNCTIONS ===//
//========================//

void Pump::turnOn()
{
	PORTC_OUTSET = PIN3_bm;
    12ac:	28 e0       	ldi	r18, 0x08	; 8
    12ae:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	on = true;
    12b2:	21 e0       	ldi	r18, 0x01	; 1
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18
    12b8:	08 95       	ret

000012ba <_ZN4Pump7turnOffEv>:
}

void Pump::turnOff()
{
	PORTC_OUTCLR = PIN3_bm;
    12ba:	28 e0       	ldi	r18, 0x08	; 8
    12bc:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	on = false;
    12c0:	fc 01       	movw	r30, r24
    12c2:	10 82       	st	Z, r1
    12c4:	08 95       	ret

000012c6 <__vector_14>:
}

void Tcc0::enableTimerErrorInterrupt(Utils::interruptLevel_e timerErrorLevel)
{
	this->timerErrorLevel = timerErrorLevel;
	TCC0_INTCTRLA = (timerErrorLevel << TC0_ERRINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_ERRINTLVL_gm);
    12c6:	1f 92       	push	r1
    12c8:	0f 92       	push	r0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	0f 92       	push	r0
    12ce:	11 24       	eor	r1, r1
    12d0:	08 b6       	in	r0, 0x38	; 56
    12d2:	0f 92       	push	r0
    12d4:	18 be       	out	0x38, r1	; 56
    12d6:	09 b6       	in	r0, 0x39	; 57
    12d8:	0f 92       	push	r0
    12da:	19 be       	out	0x39, r1	; 57
    12dc:	0b b6       	in	r0, 0x3b	; 59
    12de:	0f 92       	push	r0
    12e0:	1b be       	out	0x3b, r1	; 59
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
    12fa:	60 91 13 22 	lds	r22, 0x2213	; 0x802213 <_ZN4Tcc016timeIncrement_msE>
    12fe:	70 91 14 22 	lds	r23, 0x2214	; 0x802214 <_ZN4Tcc016timeIncrement_msE+0x1>
    1302:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <_ZN4Tcc016timeIncrement_msE+0x2>
    1306:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <_ZN4Tcc016timeIncrement_msE+0x3>
    130a:	20 91 17 22 	lds	r18, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    130e:	30 91 18 22 	lds	r19, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1312:	40 91 19 22 	lds	r20, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1316:	50 91 1a 22 	lds	r21, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    131a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    131e:	60 93 17 22 	sts	0x2217, r22	; 0x802217 <_ZN4Tcc07time_msE>
    1322:	70 93 18 22 	sts	0x2218, r23	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1326:	80 93 19 22 	sts	0x2219, r24	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    132a:	90 93 1a 22 	sts	0x221A, r25	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    132e:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN10ComHandler6updateEv>
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0b be       	out	0x3b, r0	; 59
    134e:	0f 90       	pop	r0
    1350:	09 be       	out	0x39, r0	; 57
    1352:	0f 90       	pop	r0
    1354:	08 be       	out	0x38, r0	; 56
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>:
}

void Tcc0::enableTimerOverflowInterrupt(Utils::interruptLevel_e timerOverflowLevel)
{
	this->timerOverflowLevel = timerOverflowLevel;
    1360:	fc 01       	movw	r30, r24
    1362:	67 87       	std	Z+15, r22	; 0x0f
	TCC0_INTCTRLA = (timerOverflowLevel << TC0_OVFINTLVL_gp)|(TCC0_INTCTRLA & ~TC0_OVFINTLVL_gm);
    1364:	e6 e0       	ldi	r30, 0x06	; 6
    1366:	f8 e0       	ldi	r31, 0x08	; 8
    1368:	80 81       	ld	r24, Z
    136a:	8c 7f       	andi	r24, 0xFC	; 252
    136c:	68 2b       	or	r22, r24
    136e:	60 83       	st	Z, r22
    1370:	08 95       	ret

00001372 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
    1372:	0f 93       	push	r16
//=== SETTERS ===//
//===============//

void Tcc0::setClockSource(clockSource_e clockSource)
{
	this->clockSource = clockSource;
    1374:	fc 01       	movw	r30, r24
    1376:	60 83       	st	Z, r22
	TCC0_CTRLA = clockSource;
    1378:	60 93 00 08 	sts	0x0800, r22	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
//===================//

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
    137c:	20 93 13 22 	sts	0x2213, r18	; 0x802213 <_ZN4Tcc016timeIncrement_msE>
    1380:	30 93 14 22 	sts	0x2214, r19	; 0x802214 <_ZN4Tcc016timeIncrement_msE+0x1>
    1384:	40 93 15 22 	sts	0x2215, r20	; 0x802215 <_ZN4Tcc016timeIncrement_msE+0x2>
    1388:	50 93 16 22 	sts	0x2216, r21	; 0x802216 <_ZN4Tcc016timeIncrement_msE+0x3>
	enableTimerOverflowInterrupt(level);
    138c:	60 2f       	mov	r22, r16
}
    138e:	0f 91       	pop	r16

Tcc0::Tcc0(clockSource_e clockSource, double timeIncrement_ms, Utils::interruptLevel_e level)
{
	setClockSource(clockSource);
	this->timeIncrement_ms = timeIncrement_ms;
	enableTimerOverflowInterrupt(level);
    1390:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <_ZN4Tcc028enableTimerOverflowInterruptEN5Utils16interruptLevel_eE>

00001394 <_ZN11TestHandlerC1EN5Utils8gascal_sEP4AdcaP9Ms5525dsoP4PumpP4Tcc0P7UsartE0P7UsartC1P5ValveSF_SF_>:
		myUsart0->sendString(Utils::txBuf);
		myUsart1->sendString(Utils::txBuf);
	}
	myUsart0->setRXC(false);
	myUsart1->setRXC(false);
}
    1394:	8f 92       	push	r8
    1396:	9f 92       	push	r9
    1398:	af 92       	push	r10
    139a:	bf 92       	push	r11
    139c:	cf 92       	push	r12
    139e:	df 92       	push	r13
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	28 97       	sbiw	r28, 0x08	; 8
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	09 83       	std	Y+1, r16	; 0x01
    13b8:	1a 83       	std	Y+2, r17	; 0x02
    13ba:	2b 83       	std	Y+3, r18	; 0x03
    13bc:	3c 83       	std	Y+4, r19	; 0x04
    13be:	4d 83       	std	Y+5, r20	; 0x05
    13c0:	5e 83       	std	Y+6, r21	; 0x06
    13c2:	6f 83       	std	Y+7, r22	; 0x07
    13c4:	78 87       	std	Y+8, r23	; 0x08
    13c6:	88 e0       	ldi	r24, 0x08	; 8
    13c8:	fe 01       	movw	r30, r28
    13ca:	31 96       	adiw	r30, 0x01	; 1
    13cc:	ae e2       	ldi	r26, 0x2E	; 46
    13ce:	b2 e2       	ldi	r27, 0x22	; 34
    13d0:	01 90       	ld	r0, Z+
    13d2:	0d 92       	st	X+, r0
    13d4:	8a 95       	dec	r24
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <_ZN11TestHandlerC1EN5Utils8gascal_sEP4AdcaP9Ms5525dsoP4PumpP4Tcc0P7UsartE0P7UsartC1P5ValveSF_SF_+0x3c>
    13d8:	e0 92 2c 22 	sts	0x222C, r14	; 0x80222c <_ZN11TestHandler5myAdcE>
    13dc:	f0 92 2d 22 	sts	0x222D, r15	; 0x80222d <_ZN11TestHandler5myAdcE+0x1>
    13e0:	c0 92 2a 22 	sts	0x222A, r12	; 0x80222a <_ZN11TestHandler12myFlowSensorE>
    13e4:	d0 92 2b 22 	sts	0x222B, r13	; 0x80222b <_ZN11TestHandler12myFlowSensorE+0x1>
    13e8:	a0 92 28 22 	sts	0x2228, r10	; 0x802228 <_ZN11TestHandler6myPumpE>
    13ec:	b0 92 29 22 	sts	0x2229, r11	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    13f0:	80 92 26 22 	sts	0x2226, r8	; 0x802226 <_ZN11TestHandler7myTimerE>
    13f4:	90 92 27 22 	sts	0x2227, r9	; 0x802227 <_ZN11TestHandler7myTimerE+0x1>
    13f8:	88 8d       	ldd	r24, Y+24	; 0x18
    13fa:	99 8d       	ldd	r25, Y+25	; 0x19
    13fc:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <_ZN11TestHandler8myUsart0E>
    1400:	90 93 25 22 	sts	0x2225, r25	; 0x802225 <_ZN11TestHandler8myUsart0E+0x1>
    1404:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1406:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1408:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <_ZN11TestHandler8myUsart1E>
    140c:	90 93 23 22 	sts	0x2223, r25	; 0x802223 <_ZN11TestHandler8myUsart1E+0x1>
    1410:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1412:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1414:	80 93 20 22 	sts	0x2220, r24	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1418:	90 93 21 22 	sts	0x2221, r25	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    141c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    141e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1420:	80 93 1e 22 	sts	0x221E, r24	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1424:	90 93 1f 22 	sts	0x221F, r25	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1428:	88 a1       	ldd	r24, Y+32	; 0x20
    142a:	99 a1       	ldd	r25, Y+33	; 0x21
    142c:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <_ZN11TestHandler11outputValveE>
    1430:	90 93 1d 22 	sts	0x221D, r25	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1434:	28 96       	adiw	r28, 0x08	; 8
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	08 95       	ret

00001454 <_ZN11TestHandler12oversampleO2Ej>:
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	8c 01       	movw	r16, r24
    1466:	c0 e0       	ldi	r28, 0x00	; 0
    1468:	d0 e0       	ldi	r29, 0x00	; 0
    146a:	c1 2c       	mov	r12, r1
    146c:	d1 2c       	mov	r13, r1
    146e:	76 01       	movw	r14, r12
    1470:	c0 17       	cp	r28, r16
    1472:	d1 07       	cpc	r29, r17
    1474:	69 f0       	breq	.+26     	; 0x1490 <_ZN11TestHandler12oversampleO2Ej+0x3c>
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	80 91 2c 22 	lds	r24, 0x222C	; 0x80222c <_ZN11TestHandler5myAdcE>
    147c:	90 91 2d 22 	lds	r25, 0x222D	; 0x80222d <_ZN11TestHandler5myAdcE+0x1>
    1480:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN4Adca11readChannelENS_9channel_eE>
    1484:	c8 0e       	add	r12, r24
    1486:	d9 1e       	adc	r13, r25
    1488:	e1 1c       	adc	r14, r1
    148a:	f1 1c       	adc	r15, r1
    148c:	21 96       	adiw	r28, 0x01	; 1
    148e:	f0 cf       	rjmp	.-32     	; 0x1470 <_ZN11TestHandler12oversampleO2Ej+0x1c>
    1490:	c7 01       	movw	r24, r14
    1492:	b6 01       	movw	r22, r12
    1494:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1498:	6b 01       	movw	r12, r22
    149a:	7c 01       	movw	r14, r24
    149c:	be 01       	movw	r22, r28
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    14a6:	9b 01       	movw	r18, r22
    14a8:	ac 01       	movw	r20, r24
    14aa:	c7 01       	movw	r24, r14
    14ac:	b6 01       	movw	r22, r12
    14ae:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	08 95       	ret

000014c4 <_ZN11TestHandler13o2_counts2pctEd>:
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	ce e2       	ldi	r28, 0x2E	; 46
    14ca:	d2 e2       	ldi	r29, 0x22	; 34
    14cc:	28 81       	ld	r18, Y
    14ce:	39 81       	ldd	r19, Y+1	; 0x01
    14d0:	4a 81       	ldd	r20, Y+2	; 0x02
    14d2:	5b 81       	ldd	r21, Y+3	; 0x03
    14d4:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    14d8:	2c 81       	ldd	r18, Y+4	; 0x04
    14da:	3d 81       	ldd	r19, Y+5	; 0x05
    14dc:	4e 81       	ldd	r20, Y+6	; 0x06
    14de:	5f 81       	ldd	r21, Y+7	; 0x07
    14e0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <_ZN11TestHandler12zero_chamberEj>:
    14ea:	4f 92       	push	r4
    14ec:	5f 92       	push	r5
    14ee:	6f 92       	push	r6
    14f0:	7f 92       	push	r7
    14f2:	8f 92       	push	r8
    14f4:	9f 92       	push	r9
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	6c 01       	movw	r12, r24
    1504:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1508:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    150c:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1510:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1514:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    1518:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    151c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
    1520:	e1 2c       	mov	r14, r1
    1522:	f1 2c       	mov	r15, r1
    1524:	60 91 17 22 	lds	r22, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1528:	70 91 18 22 	lds	r23, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    152c:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1530:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1534:	a3 01       	movw	r20, r6
    1536:	92 01       	movw	r18, r4
    1538:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    153c:	4b 01       	movw	r8, r22
    153e:	5c 01       	movw	r10, r24
    1540:	c7 01       	movw	r24, r14
    1542:	b6 01       	movw	r22, r12
    1544:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1548:	9b 01       	movw	r18, r22
    154a:	ac 01       	movw	r20, r24
    154c:	c5 01       	movw	r24, r10
    154e:	b4 01       	movw	r22, r8
    1550:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__cmpsf2>
    1554:	87 fd       	sbrc	r24, 7
    1556:	e6 cf       	rjmp	.-52     	; 0x1524 <_ZN11TestHandler12zero_chamberEj+0x3a>
    1558:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    155c:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>

0000157c <_ZN11TestHandler10start_testEv>:

void TestHandler::start_test()
{
    157c:	2f 92       	push	r2
    157e:	3f 92       	push	r3
    1580:	4f 92       	push	r4
    1582:	5f 92       	push	r5
    1584:	6f 92       	push	r6
    1586:	7f 92       	push	r7
    1588:	8f 92       	push	r8
    158a:	9f 92       	push	r9
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	60 97       	sbiw	r28, 0x10	; 16
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	00 e1       	ldi	r16, 0x10	; 16
    15ac:	10 e0       	ldi	r17, 0x00	; 0
	const uint16_t AUTOZERO_DURATION_ms = 30000;
	const double FLOW_THRESHOLD = 0.075;
	const double VE_GAIN = 0.0741;
	
	// Zero-flow set
	double zero_press = 0;
    15ae:	19 86       	std	Y+9, r1	; 0x09
    15b0:	1a 86       	std	Y+10, r1	; 0x0a
    15b2:	1b 86       	std	Y+11, r1	; 0x0b
    15b4:	1c 86       	std	Y+12, r1	; 0x0c
	for (int i = 0; i < ZERO_FLOW_NUMBER_OF_SAMPLES; i++) {
		Ms5525dso::data_s zero = myFlowSensor->read();
    15b6:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <_ZN11TestHandler12myFlowSensorE>
    15ba:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <_ZN11TestHandler12myFlowSensorE+0x1>
    15be:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN9Ms5525dso4readEv>
    15c2:	29 83       	std	Y+1, r18	; 0x01
    15c4:	3a 83       	std	Y+2, r19	; 0x02
    15c6:	4b 83       	std	Y+3, r20	; 0x03
    15c8:	5c 83       	std	Y+4, r21	; 0x04
    15ca:	6d 83       	std	Y+5, r22	; 0x05
    15cc:	7e 83       	std	Y+6, r23	; 0x06
    15ce:	8f 83       	std	Y+7, r24	; 0x07
    15d0:	98 87       	std	Y+8, r25	; 0x08
		zero_press += zero.pressure/ZERO_FLOW_NUMBER_OF_SAMPLES;
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	5d e3       	ldi	r21, 0x3D	; 61
    15da:	69 81       	ldd	r22, Y+1	; 0x01
    15dc:	7a 81       	ldd	r23, Y+2	; 0x02
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    15e6:	9b 01       	movw	r18, r22
    15e8:	ac 01       	movw	r20, r24
    15ea:	69 85       	ldd	r22, Y+9	; 0x09
    15ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    15f6:	69 87       	std	Y+9, r22	; 0x09
    15f8:	7a 87       	std	Y+10, r23	; 0x0a
    15fa:	8b 87       	std	Y+11, r24	; 0x0b
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	01 50       	subi	r16, 0x01	; 1
    1600:	11 09       	sbc	r17, r1
	const double FLOW_THRESHOLD = 0.075;
	const double VE_GAIN = 0.0741;
	
	// Zero-flow set
	double zero_press = 0;
	for (int i = 0; i < ZERO_FLOW_NUMBER_OF_SAMPLES; i++) {
    1602:	c9 f6       	brne	.-78     	; 0x15b6 <_ZN11TestHandler10start_testEv+0x3a>
    1604:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1608:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    160c:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1610:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1614:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1618:	90 91 18 22 	lds	r25, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    161c:	a0 91 19 22 	lds	r26, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1620:	b0 91 1a 22 	lds	r27, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1624:	8d 87       	std	Y+13, r24	; 0x0d
    1626:	9e 87       	std	Y+14, r25	; 0x0e
    1628:	af 87       	std	Y+15, r26	; 0x0f
    162a:	b8 8b       	std	Y+16, r27	; 0x10
	
	double totalVE = 0;
	double outputTimeFlag = myTimer->getTime_ms();
	double sampleTimeFlag = myTimer->getTime_ms();
	
	sampleValve->close();
    162c:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1630:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1634:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	outputValve->open();
    1638:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    163c:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1640:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
	myPump->turnOn();
    1644:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    1648:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    164c:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN4Pump6turnOnEv>
	}

// 	snprintf(Utils::txBuf, TX_LEN, "sep=,\r\nTime [ms],O2 [%], VE [l]\r\n");
// 	ComHandler::sendAnswer();
	
	double totalVE = 0;
    1650:	81 2c       	mov	r8, r1
    1652:	91 2c       	mov	r9, r1
    1654:	54 01       	movw	r10, r8
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    1656:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <_ZN7UsartE07rxcFlagE>
	
	sampleValve->close();
	outputValve->open();
	myPump->turnOn();
	
	while (!(myUsart0->isRXC()) || !(myUsart1->isRXC()) || !(stopFlag))
    165a:	88 23       	and	r24, r24
    165c:	c9 f1       	breq	.+114    	; 0x16d0 <_ZN11TestHandler10start_testEv+0x154>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    165e:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <_ZN7UsartC17rxcFlagE>
    1662:	88 23       	and	r24, r24
    1664:	a9 f1       	breq	.+106    	; 0x16d0 <_ZN11TestHandler10start_testEv+0x154>
    1666:	80 91 1b 22 	lds	r24, 0x221B	; 0x80221b <_ZN11TestHandler8stopFlagE>
    166a:	88 23       	and	r24, r24
    166c:	89 f1       	breq	.+98     	; 0x16d0 <_ZN11TestHandler10start_testEv+0x154>
	void setRXC(bool b){rxcFlag = b;};
    166e:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <_ZN7UsartE07rxcFlagE>
	void setRXC(bool b){rxcFlag = b;};
    1672:	10 92 37 22 	sts	0x2237, r1	; 0x802237 <_ZN7UsartC17rxcFlagE>
		if (diff > FLOW_THRESHOLD) sampleValve->open();
		else sampleValve->close();
	}
	myUsart0->setRXC(false);
	myUsart1->setRXC(false);
	stopFlag = false;
    1676:	10 92 1b 22 	sts	0x221B, r1	; 0x80221b <_ZN11TestHandler8stopFlagE>
	
	sampleValve->open();
    167a:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    167e:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1682:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
	zero_chamber(AUTOZERO_DURATION_ms);
    1686:	80 e3       	ldi	r24, 0x30	; 48
    1688:	95 e7       	ldi	r25, 0x75	; 117
    168a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN11TestHandler12zero_chamberEj>
	sampleValve->close();
    168e:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1692:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1696:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	myPump->turnOff();
    169a:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    169e:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
}
    16a2:	60 96       	adiw	r28, 0x10	; 16
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	bf 90       	pop	r11
    16ba:	af 90       	pop	r10
    16bc:	9f 90       	pop	r9
    16be:	8f 90       	pop	r8
    16c0:	7f 90       	pop	r7
    16c2:	6f 90       	pop	r6
    16c4:	5f 90       	pop	r5
    16c6:	4f 90       	pop	r4
    16c8:	3f 90       	pop	r3
    16ca:	2f 90       	pop	r2
	stopFlag = false;
	
	sampleValve->open();
	zero_chamber(AUTOZERO_DURATION_ms);
	sampleValve->close();
	myPump->turnOff();
    16cc:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <_ZN4Pump7turnOffEv>
    16d0:	c0 90 17 22 	lds	r12, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    16d4:	d0 90 18 22 	lds	r13, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    16d8:	e0 90 19 22 	lds	r14, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    16dc:	f0 90 1a 22 	lds	r15, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
	while (!(myUsart0->isRXC()) || !(myUsart1->isRXC()) || !(stopFlag))
	{
		double timeNow_ms = myTimer->getTime_ms();
		
		// Handle output valve
		if (outputValve->isOpen() && timeNow_ms - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
    16e0:	00 91 1c 22 	lds	r16, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    16e4:	10 91 1d 22 	lds	r17, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    16e8:	d8 01       	movw	r26, r16
    16ea:	11 96       	adiw	r26, 0x01	; 1
    16ec:	8c 91       	ld	r24, X
    16ee:	88 23       	and	r24, r24
    16f0:	81 f0       	breq	.+32     	; 0x1712 <_ZN11TestHandler10start_testEv+0x196>
    16f2:	a3 01       	movw	r20, r6
    16f4:	92 01       	movw	r18, r4
    16f6:	c7 01       	movw	r24, r14
    16f8:	b6 01       	movw	r22, r12
    16fa:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a ef       	ldi	r20, 0xFA	; 250
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    170a:	18 16       	cp	r1, r24
    170c:	0c f4       	brge	.+2      	; 0x1710 <_ZN11TestHandler10start_testEv+0x194>
    170e:	c4 c0       	rjmp	.+392    	; 0x1898 <_ZN11TestHandler10start_testEv+0x31c>
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <_ZN11TestHandler10start_testEv+0x1b4>
			outputTimeFlag = timeNow_ms;
			outputValve->close();
		} else if (outputValve->isClosed() && timeNow_ms - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
    1712:	a3 01       	movw	r20, r6
    1714:	92 01       	movw	r18, r4
    1716:	c7 01       	movw	r24, r14
    1718:	b6 01       	movw	r22, r12
    171a:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4a ef       	ldi	r20, 0xFA	; 250
    1724:	55 e4       	ldi	r21, 0x45	; 69
    1726:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    172a:	18 16       	cp	r1, r24
    172c:	0c f4       	brge	.+2      	; 0x1730 <_ZN11TestHandler10start_testEv+0x1b4>
    172e:	b8 c0       	rjmp	.+368    	; 0x18a0 <_ZN11TestHandler10start_testEv+0x324>
			outputTimeFlag = timeNow_ms;
			outputValve->open();
		}
		
		// Handle o2 sample
		if (timeNow_ms - sampleTimeFlag > SAMPLE_PERIOD_ms) {
    1730:	2d 85       	ldd	r18, Y+13	; 0x0d
    1732:	3e 85       	ldd	r19, Y+14	; 0x0e
    1734:	4f 85       	ldd	r20, Y+15	; 0x0f
    1736:	58 89       	ldd	r21, Y+16	; 0x10
    1738:	c7 01       	movw	r24, r14
    173a:	b6 01       	movw	r22, r12
    173c:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e4       	ldi	r19, 0x40	; 64
    1744:	4c e1       	ldi	r20, 0x1C	; 28
    1746:	56 e4       	ldi	r21, 0x46	; 70
    1748:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    174c:	18 16       	cp	r1, r24
    174e:	0c f0       	brlt	.+2      	; 0x1752 <_ZN11TestHandler10start_testEv+0x1d6>
    1750:	60 c0       	rjmp	.+192    	; 0x1812 <_ZN11TestHandler10start_testEv+0x296>
			sampleTimeFlag = timeNow_ms;
			double o2_pct = o2_counts2pct(oversampleO2(OVERSAMPLE_COEFF));
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	94 e0       	ldi	r25, 0x04	; 4
    1756:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN11TestHandler12oversampleO2Ej>
    175a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN11TestHandler13o2_counts2pctEd>
    175e:	16 2f       	mov	r17, r22
    1760:	07 2f       	mov	r16, r23
    1762:	38 2e       	mov	r3, r24
    1764:	29 2e       	mov	r2, r25
			double ve_l = VE_GAIN*totalVE;
    1766:	2e eb       	ldi	r18, 0xBE	; 190
    1768:	31 ec       	ldi	r19, 0xC1	; 193
    176a:	47 e9       	ldi	r20, 0x97	; 151
    176c:	5d e3       	ldi	r21, 0x3D	; 61
    176e:	c5 01       	movw	r24, r10
    1770:	b4 01       	movw	r22, r8
    1772:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1776:	b6 2e       	mov	r11, r22
    1778:	a7 2e       	mov	r10, r23
    177a:	98 2e       	mov	r9, r24
    177c:	89 2e       	mov	r8, r25
			snprintf(Utils::txBuf, TX_LEN, "%04d;%03d;%02.2f;%01.2f;%01.2f;%02.2f;%02.2f;%01.2f\r\n", (int)(timeNow_ms/1000), 0, ve_l, 0., 0., ve_l*6, o2_pct, 0.);
    177e:	1f 92       	push	r1
    1780:	1f 92       	push	r1
    1782:	1f 92       	push	r1
    1784:	1f 92       	push	r1
    1786:	2f 92       	push	r2
    1788:	3f 92       	push	r3
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 ec       	ldi	r20, 0xC0	; 192
    1794:	50 e4       	ldi	r21, 0x40	; 64
    1796:	d5 01       	movw	r26, r10
    1798:	f4 01       	movw	r30, r8
    179a:	6b 2f       	mov	r22, r27
    179c:	7a 2f       	mov	r23, r26
    179e:	8f 2f       	mov	r24, r31
    17a0:	9e 2f       	mov	r25, r30
    17a2:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    17a6:	9f 93       	push	r25
    17a8:	8f 93       	push	r24
    17aa:	7f 93       	push	r23
    17ac:	6f 93       	push	r22
    17ae:	1f 92       	push	r1
    17b0:	1f 92       	push	r1
    17b2:	1f 92       	push	r1
    17b4:	1f 92       	push	r1
    17b6:	1f 92       	push	r1
    17b8:	1f 92       	push	r1
    17ba:	1f 92       	push	r1
    17bc:	1f 92       	push	r1
    17be:	8f 92       	push	r8
    17c0:	9f 92       	push	r9
    17c2:	af 92       	push	r10
    17c4:	bf 92       	push	r11
    17c6:	1f 92       	push	r1
    17c8:	1f 92       	push	r1
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a e7       	ldi	r20, 0x7A	; 122
    17d0:	54 e4       	ldi	r21, 0x44	; 68
    17d2:	c7 01       	movw	r24, r14
    17d4:	b6 01       	movw	r22, r12
    17d6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    17da:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__fixsfsi>
    17de:	7f 93       	push	r23
    17e0:	6f 93       	push	r22
    17e2:	ae e7       	ldi	r26, 0x7E	; 126
    17e4:	b1 e2       	ldi	r27, 0x21	; 33
    17e6:	bf 93       	push	r27
    17e8:	af 93       	push	r26
    17ea:	1f 92       	push	r1
    17ec:	f0 e4       	ldi	r31, 0x40	; 64
    17ee:	ff 93       	push	r31
    17f0:	8a e3       	ldi	r24, 0x3A	; 58
    17f2:	92 e2       	ldi	r25, 0x22	; 34
    17f4:	9f 93       	push	r25
    17f6:	8f 93       	push	r24
    17f8:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <snprintf>
			ComHandler::sendAnswer();
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0e 94 99 03 	call	0x732	; 0x732 <_ZN10ComHandler10sendAnswerEv>
			outputValve->open();
		}
		
		// Handle o2 sample
		if (timeNow_ms - sampleTimeFlag > SAMPLE_PERIOD_ms) {
			sampleTimeFlag = timeNow_ms;
    1804:	cd 86       	std	Y+13, r12	; 0x0d
    1806:	de 86       	std	Y+14, r13	; 0x0e
    1808:	ef 86       	std	Y+15, r14	; 0x0f
    180a:	f8 8a       	std	Y+16, r15	; 0x10
			double o2_pct = o2_counts2pct(oversampleO2(OVERSAMPLE_COEFF));
			double ve_l = VE_GAIN*totalVE;
			snprintf(Utils::txBuf, TX_LEN, "%04d;%03d;%02.2f;%01.2f;%01.2f;%02.2f;%02.2f;%01.2f\r\n", (int)(timeNow_ms/1000), 0, ve_l, 0., 0., ve_l*6, o2_pct, 0.);
			ComHandler::sendAnswer();
			totalVE = 0;
    180c:	81 2c       	mov	r8, r1
    180e:	91 2c       	mov	r9, r1
    1810:	54 01       	movw	r10, r8
		}
		
		// Handle sample valve
		Ms5525dso::data_s data = myFlowSensor->read();
    1812:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <_ZN11TestHandler12myFlowSensorE>
    1816:	90 91 2b 22 	lds	r25, 0x222B	; 0x80222b <_ZN11TestHandler12myFlowSensorE+0x1>
    181a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN9Ms5525dso4readEv>
    181e:	29 83       	std	Y+1, r18	; 0x01
    1820:	3a 83       	std	Y+2, r19	; 0x02
    1822:	4b 83       	std	Y+3, r20	; 0x03
    1824:	5c 83       	std	Y+4, r21	; 0x04
    1826:	6d 83       	std	Y+5, r22	; 0x05
    1828:	7e 83       	std	Y+6, r23	; 0x06
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	98 87       	std	Y+8, r25	; 0x08
		double diff = data.pressure - zero_press;
    182e:	29 85       	ldd	r18, Y+9	; 0x09
    1830:	3a 85       	ldd	r19, Y+10	; 0x0a
    1832:	4b 85       	ldd	r20, Y+11	; 0x0b
    1834:	5c 85       	ldd	r21, Y+12	; 0x0c
    1836:	69 81       	ldd	r22, Y+1	; 0x01
    1838:	7a 81       	ldd	r23, Y+2	; 0x02
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1842:	6b 01       	movw	r12, r22
    1844:	7c 01       	movw	r14, r24
		if (diff >= 0) totalVE += sqrt(diff);
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	a9 01       	movw	r20, r18
    184c:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1850:	87 fd       	sbrc	r24, 7
    1852:	0c c0       	rjmp	.+24     	; 0x186c <_ZN11TestHandler10start_testEv+0x2f0>
    1854:	c7 01       	movw	r24, r14
    1856:	b6 01       	movw	r22, r12
    1858:	0e 94 03 14 	call	0x2806	; 0x2806 <sqrt>
    185c:	9b 01       	movw	r18, r22
    185e:	ac 01       	movw	r20, r24
    1860:	c5 01       	movw	r24, r10
    1862:	b4 01       	movw	r22, r8
    1864:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    1868:	4b 01       	movw	r8, r22
    186a:	5c 01       	movw	r10, r24
		if (diff > FLOW_THRESHOLD) sampleValve->open();
    186c:	2a e9       	ldi	r18, 0x9A	; 154
    186e:	39 e9       	ldi	r19, 0x99	; 153
    1870:	49 e9       	ldi	r20, 0x99	; 153
    1872:	5d e3       	ldi	r21, 0x3D	; 61
    1874:	c7 01       	movw	r24, r14
    1876:	b6 01       	movw	r22, r12
    1878:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    187c:	20 91 1e 22 	lds	r18, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1880:	30 91 1f 22 	lds	r19, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1884:	18 16       	cp	r1, r24
    1886:	24 f4       	brge	.+8      	; 0x1890 <_ZN11TestHandler10start_testEv+0x314>
    1888:	c9 01       	movw	r24, r18
    188a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
    188e:	e3 ce       	rjmp	.-570    	; 0x1656 <_ZN11TestHandler10start_testEv+0xda>
		else sampleValve->close();
    1890:	c9 01       	movw	r24, r18
    1892:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	
	sampleValve->close();
	outputValve->open();
	myPump->turnOn();
	
	while (!(myUsart0->isRXC()) || !(myUsart1->isRXC()) || !(stopFlag))
    1896:	df ce       	rjmp	.-578    	; 0x1656 <_ZN11TestHandler10start_testEv+0xda>
		double timeNow_ms = myTimer->getTime_ms();
		
		// Handle output valve
		if (outputValve->isOpen() && timeNow_ms - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
			outputValve->close();
    1898:	c8 01       	movw	r24, r16
    189a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <_ZN11TestHandler10start_testEv+0x32a>
		} else if (outputValve->isClosed() && timeNow_ms - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
			outputValve->open();
    18a0:	c8 01       	movw	r24, r16
    18a2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
		// Handle output valve
		if (outputValve->isOpen() && timeNow_ms - outputTimeFlag > OUTPUT_OPEN_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
			outputValve->close();
		} else if (outputValve->isClosed() && timeNow_ms - outputTimeFlag > OUTPUT_CLOSE_DURATION_ms) {
			outputTimeFlag = timeNow_ms;
    18a6:	26 01       	movw	r4, r12
    18a8:	37 01       	movw	r6, r14
    18aa:	42 cf       	rjmp	.-380    	; 0x1730 <_ZN11TestHandler10start_testEv+0x1b4>

000018ac <_ZN11TestHandler12start_gascalEv>:
	sampleValve->close();
	myPump->turnOff();
}

Utils::gascal_s TestHandler::start_gascal()
{
    18ac:	4f 92       	push	r4
    18ae:	5f 92       	push	r5
    18b0:	6f 92       	push	r6
    18b2:	7f 92       	push	r7
    18b4:	8f 92       	push	r8
    18b6:	9f 92       	push	r9
    18b8:	af 92       	push	r10
    18ba:	bf 92       	push	r11
    18bc:	cf 92       	push	r12
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	2c 97       	sbiw	r28, 0x0c	; 12
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    18d8:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    18dc:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    18e0:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>

	double avgSample = 0, avgGascal = 0;
	double sampleCounts = 0, gasCounts = 0;
	double targetTimeFlag = myTimer->getTime_ms();
	
	sampleValve->open();
    18e4:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    18e8:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    18ec:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
	gascalValve->close();
    18f0:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    18f4:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    18f8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	outputValve->close();
    18fc:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    1900:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1904:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	myPump->turnOn();
    1908:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    190c:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    1910:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN4Pump6turnOnEv>
	
	uint8_t i = 0;
    1914:	10 e0       	ldi	r17, 0x00	; 0
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const uint16_t FINAL_AUTOZERO_DURATION_ms = 30000;
	const double GASCAL_PCT = 17;
	const double SAMPLE_PCT = 20.97;

	double avgSample = 0, avgGascal = 0;
    1916:	19 86       	std	Y+9, r1	; 0x09
    1918:	1a 86       	std	Y+10, r1	; 0x0a
    191a:	1b 86       	std	Y+11, r1	; 0x0b
    191c:	1c 86       	std	Y+12, r1	; 0x0c
    191e:	81 2c       	mov	r8, r1
    1920:	91 2c       	mov	r9, r1
    1922:	54 01       	movw	r10, r8
    1924:	c0 90 17 22 	lds	r12, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1928:	d0 90 18 22 	lds	r13, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    192c:	e0 90 19 22 	lds	r14, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1930:	f0 90 1a 22 	lds	r15, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
    1934:	e0 91 1e 22 	lds	r30, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1938:	f0 91 1f 22 	lds	r31, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer->getTime_ms();

		// Handle sample and gascal valve
		if (sampleValve->isOpen() && timeNow - targetTimeFlag > SAMPLE_OPEN_DURATION_ms) {
    193c:	81 81       	ldd	r24, Z+1	; 0x01
    193e:	88 23       	and	r24, r24
    1940:	79 f1       	breq	.+94     	; 0x19a0 <_ZN11TestHandler12start_gascalEv+0xf4>
    1942:	a3 01       	movw	r20, r6
    1944:	92 01       	movw	r18, r4
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e8       	ldi	r19, 0x80	; 128
    1952:	4b e3       	ldi	r20, 0x3B	; 59
    1954:	56 e4       	ldi	r21, 0x46	; 70
    1956:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    195a:	18 16       	cp	r1, r24
    195c:	0c f5       	brge	.+66     	; 0x19a0 <_ZN11TestHandler12start_gascalEv+0xf4>
			
			targetTimeFlag = timeNow;
			sampleCounts = oversampleO2(OVERSAMPLE_COEFF);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	94 e0       	ldi	r25, 0x04	; 4
    1962:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN11TestHandler12oversampleO2Ej>
			avgSample += sampleCounts/NUMBER_OF_REPETITIONS;
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	5e e3       	ldi	r21, 0x3E	; 62
    196e:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	c5 01       	movw	r24, r10
    1978:	b4 01       	movw	r22, r8
    197a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    197e:	4b 01       	movw	r8, r22
    1980:	5c 01       	movw	r10, r24
			
			sampleValve->close();
    1982:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1986:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    198a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
			zero_chamber(CHAMBER_ZERO_ms);
    198e:	88 eb       	ldi	r24, 0xB8	; 184
    1990:	9b e0       	ldi	r25, 0x0B	; 11
    1992:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN11TestHandler12zero_chamberEj>
			gascalValve->open();
    1996:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    199a:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    199e:	a3 c0       	rjmp	.+326    	; 0x1ae6 <_ZN11TestHandler12start_gascalEv+0x23a>
    19a0:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    19a4:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
			
		} else if (gascalValve->isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    19a8:	81 81       	ldd	r24, Z+1	; 0x01
    19aa:	81 11       	cpse	r24, r1
    19ac:	68 c0       	rjmp	.+208    	; 0x1a7e <_ZN11TestHandler12start_gascalEv+0x1d2>
	gascalValve->close();
	outputValve->close();
	myPump->turnOn();
	
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    19ae:	18 30       	cpi	r17, 0x08	; 8
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <_ZN11TestHandler12start_gascalEv+0x108>
    19b2:	b8 cf       	rjmp	.-144    	; 0x1924 <_ZN11TestHandler12start_gascalEv+0x78>
			gascalValve->close();
			zero_chamber(CHAMBER_ZERO_ms);
			sampleValve->open();
		}
	}
	gascalValve->close();
    19b4:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    19b8:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    19bc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	sampleValve->open();
    19c0:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    19c4:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    19c8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
	zero_chamber(FINAL_AUTOZERO_DURATION_ms);
    19cc:	80 e3       	ldi	r24, 0x30	; 48
    19ce:	95 e7       	ldi	r25, 0x75	; 117
    19d0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN11TestHandler12zero_chamberEj>
	sampleValve->close();
    19d4:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    19d8:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    19dc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	myPump->turnOff();
    19e0:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    19e4:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    19e8:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN4Pump7turnOffEv>
	
	// Output gascal coefficients
// 	snprintf(Utils::txBuf, TX_LEN, "avgSample: %.3f counts\r\navgGascal: %.3f counts\r\n", avgSample, avgGascal);
// 	ComHandler::sendAnswer();
	Utils::gascal_s result;
	result.gain = (SAMPLE_PCT - GASCAL_PCT)/(avgSample-avgGascal);
    19ec:	29 85       	ldd	r18, Y+9	; 0x09
    19ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    19f0:	4b 85       	ldd	r20, Y+11	; 0x0b
    19f2:	5c 85       	ldd	r21, Y+12	; 0x0c
    19f4:	c5 01       	movw	r24, r10
    19f6:	b4 01       	movw	r22, r8
    19f8:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    19fc:	9b 01       	movw	r18, r22
    19fe:	ac 01       	movw	r20, r24
    1a00:	68 e7       	ldi	r22, 0x78	; 120
    1a02:	74 e1       	ldi	r23, 0x14	; 20
    1a04:	8e e7       	ldi	r24, 0x7E	; 126
    1a06:	90 e4       	ldi	r25, 0x40	; 64
    1a08:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__divsf3>
    1a0c:	fb 01       	movw	r30, r22
	result.offset = SAMPLE_PCT - result.gain*avgSample;
// 	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f[%%/counts]\r\nOffset: %.3f%%\r\n", result.gain, result.offset);
// 	ComHandler::sendAnswer();
	return result;
    1a0e:	f6 2e       	mov	r15, r22
    1a10:	ab 01       	movw	r20, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	49 83       	std	Y+1, r20	; 0x01
    1a16:	5a 83       	std	Y+2, r21	; 0x02
    1a18:	6b 83       	std	Y+3, r22	; 0x03
    1a1a:	7c 83       	std	Y+4, r23	; 0x04
    1a1c:	9f 01       	movw	r18, r30
    1a1e:	ac 01       	movw	r20, r24
    1a20:	c5 01       	movw	r24, r10
    1a22:	b4 01       	movw	r22, r8
    1a24:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1a28:	9b 01       	movw	r18, r22
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	6f e8       	ldi	r22, 0x8F	; 143
    1a2e:	72 ec       	ldi	r23, 0xC2	; 194
    1a30:	87 ea       	ldi	r24, 0xA7	; 167
    1a32:	91 e4       	ldi	r25, 0x41	; 65
    1a34:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1a38:	e6 2f       	mov	r30, r22
    1a3a:	46 2f       	mov	r20, r22
    1a3c:	57 2f       	mov	r21, r23
    1a3e:	bc 01       	movw	r22, r24
    1a40:	4d 83       	std	Y+5, r20	; 0x05
    1a42:	5e 83       	std	Y+6, r21	; 0x06
    1a44:	6f 83       	std	Y+7, r22	; 0x07
    1a46:	78 87       	std	Y+8, r23	; 0x08
    1a48:	2f 2d       	mov	r18, r15
    1a4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a4c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a4e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a50:	6e 2f       	mov	r22, r30
    1a52:	7e 81       	ldd	r23, Y+6	; 0x06
    1a54:	8f 81       	ldd	r24, Y+7	; 0x07
    1a56:	98 85       	ldd	r25, Y+8	; 0x08
}
    1a58:	2c 96       	adiw	r28, 0x0c	; 12
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	bf 90       	pop	r11
    1a6e:	af 90       	pop	r10
    1a70:	9f 90       	pop	r9
    1a72:	8f 90       	pop	r8
    1a74:	7f 90       	pop	r7
    1a76:	6f 90       	pop	r6
    1a78:	5f 90       	pop	r5
    1a7a:	4f 90       	pop	r4
    1a7c:	08 95       	ret
			
			sampleValve->close();
			zero_chamber(CHAMBER_ZERO_ms);
			gascalValve->open();
			
		} else if (gascalValve->isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
    1a7e:	a3 01       	movw	r20, r6
    1a80:	92 01       	movw	r18, r4
    1a82:	c7 01       	movw	r24, r14
    1a84:	b6 01       	movw	r22, r12
    1a86:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e8       	ldi	r19, 0x80	; 128
    1a8e:	4b e3       	ldi	r20, 0x3B	; 59
    1a90:	56 e4       	ldi	r21, 0x46	; 70
    1a92:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	0c f0       	brlt	.+2      	; 0x1a9c <_ZN11TestHandler12start_gascalEv+0x1f0>
    1a9a:	89 cf       	rjmp	.-238    	; 0x19ae <_ZN11TestHandler12start_gascalEv+0x102>
			
			targetTimeFlag = timeNow;
			gasCounts = oversampleO2(OVERSAMPLE_COEFF);
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	94 e0       	ldi	r25, 0x04	; 4
    1aa0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN11TestHandler12oversampleO2Ej>
			avgGascal += gasCounts/NUMBER_OF_REPETITIONS;
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	5e e3       	ldi	r21, 0x3E	; 62
    1aac:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1ab0:	9b 01       	movw	r18, r22
    1ab2:	ac 01       	movw	r20, r24
    1ab4:	69 85       	ldd	r22, Y+9	; 0x09
    1ab6:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ab8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aba:	9c 85       	ldd	r25, Y+12	; 0x0c
    1abc:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    1ac0:	69 87       	std	Y+9, r22	; 0x09
    1ac2:	7a 87       	std	Y+10, r23	; 0x0a
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
			
// 			snprintf(Utils::txBuf, TX_LEN, "Rep: %d\r\nSample: %.3f\r\nGas: %.3f", i, sampleCounts, gasCounts);
// 			ComHandler::sendAnswer();
			i++;
    1ac8:	1f 5f       	subi	r17, 0xFF	; 255
			
			gascalValve->close();
    1aca:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1ace:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1ad2:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
			zero_chamber(CHAMBER_ZERO_ms);
    1ad6:	88 eb       	ldi	r24, 0xB8	; 184
    1ad8:	9b e0       	ldi	r25, 0x0B	; 11
    1ada:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN11TestHandler12zero_chamberEj>
			sampleValve->open();
    1ade:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <_ZN11TestHandler11sampleValveE>
    1ae2:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <_ZN11TestHandler11sampleValveE+0x1>
    1ae6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
			zero_chamber(CHAMBER_ZERO_ms);
			gascalValve->open();
			
		} else if (gascalValve->isOpen() && timeNow - targetTimeFlag > GASCAL_OPEN_DURATION_ms) {
			
			targetTimeFlag = timeNow;
    1aea:	26 01       	movw	r4, r12
    1aec:	37 01       	movw	r6, r14
    1aee:	5f cf       	rjmp	.-322    	; 0x19ae <_ZN11TestHandler12start_gascalEv+0x102>

00001af0 <_ZN11TestHandler12start_aircalEv>:
// 	ComHandler::sendAnswer();
	return result;
}

Utils::gascal_s TestHandler::start_aircal()
{
    1af0:	2f 92       	push	r2
    1af2:	3f 92       	push	r3
    1af4:	4f 92       	push	r4
    1af6:	5f 92       	push	r5
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	28 97       	sbiw	r28, 0x08	; 8
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	40 90 17 22 	lds	r4, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1b20:	50 90 18 22 	lds	r5, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1b24:	60 90 19 22 	lds	r6, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1b28:	70 90 1a 22 	lds	r7, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
	const double SAMPLE_PCT = 20.97;

	double avgCounts = 0, counts = 0;
	double targetTimeFlag = myTimer->getTime_ms();
	
	gascalValve->open();
    1b2c:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1b30:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1b34:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
	outputValve->close();
    1b38:	80 91 1c 22 	lds	r24, 0x221C	; 0x80221c <_ZN11TestHandler11outputValveE>
    1b3c:	90 91 1d 22 	lds	r25, 0x221D	; 0x80221d <_ZN11TestHandler11outputValveE+0x1>
    1b40:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	myPump->turnOn();
    1b44:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    1b48:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    1b4c:	0e 94 56 09 	call	0x12ac	; 0x12ac <_ZN4Pump6turnOnEv>
	
	uint8_t i = 0;
    1b50:	10 e0       	ldi	r17, 0x00	; 0
	const uint16_t VALVE_OPEN_DURATION_ms = 12000;
	const uint16_t OVERSAMPLE_COEFF = 1024;
	const uint16_t FINAL_AUTOZERO_DURATION_ms = 30000;
	const double SAMPLE_PCT = 20.97;

	double avgCounts = 0, counts = 0;
    1b52:	c1 2c       	mov	r12, r1
    1b54:	d1 2c       	mov	r13, r1
    1b56:	76 01       	movw	r14, r12
	
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
		double timeNow = myTimer->getTime_ms();
		
		if (gascalValve->isOpen() && timeNow - targetTimeFlag > VALVE_OPEN_DURATION_ms) {
    1b58:	20 90 20 22 	lds	r2, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1b5c:	30 90 21 22 	lds	r3, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
	gascalValve->open();
	outputValve->close();
	myPump->turnOn();
	
	uint8_t i = 0;
	while (i < NUMBER_OF_REPETITIONS) {
    1b60:	18 30       	cpi	r17, 0x08	; 8
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <_ZN11TestHandler12start_aircalEv+0x76>
    1b64:	40 c0       	rjmp	.+128    	; 0x1be6 <_ZN11TestHandler12start_aircalEv+0xf6>
    1b66:	80 90 17 22 	lds	r8, 0x2217	; 0x802217 <_ZN4Tcc07time_msE>
    1b6a:	90 90 18 22 	lds	r9, 0x2218	; 0x802218 <_ZN4Tcc07time_msE+0x1>
    1b6e:	a0 90 19 22 	lds	r10, 0x2219	; 0x802219 <_ZN4Tcc07time_msE+0x2>
    1b72:	b0 90 1a 22 	lds	r11, 0x221A	; 0x80221a <_ZN4Tcc07time_msE+0x3>
		double timeNow = myTimer->getTime_ms();
		
		if (gascalValve->isOpen() && timeNow - targetTimeFlag > VALVE_OPEN_DURATION_ms) {
    1b76:	f1 01       	movw	r30, r2
    1b78:	81 81       	ldd	r24, Z+1	; 0x01
    1b7a:	88 23       	and	r24, r24
    1b7c:	89 f3       	breq	.-30     	; 0x1b60 <_ZN11TestHandler12start_aircalEv+0x70>
    1b7e:	a3 01       	movw	r20, r6
    1b80:	92 01       	movw	r18, r4
    1b82:	c5 01       	movw	r24, r10
    1b84:	b4 01       	movw	r22, r8
    1b86:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e8       	ldi	r19, 0x80	; 128
    1b8e:	4b e3       	ldi	r20, 0x3B	; 59
    1b90:	56 e4       	ldi	r21, 0x46	; 70
    1b92:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	1c f7       	brge	.-58     	; 0x1b60 <_ZN11TestHandler12start_aircalEv+0x70>
			
			targetTimeFlag = timeNow;
			counts = oversampleO2(OVERSAMPLE_COEFF);
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	94 e0       	ldi	r25, 0x04	; 4
    1b9e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN11TestHandler12oversampleO2Ej>
			avgCounts += counts/NUMBER_OF_REPETITIONS;
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	5e e3       	ldi	r21, 0x3E	; 62
    1baa:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    1bba:	6b 01       	movw	r12, r22
    1bbc:	7c 01       	movw	r14, r24
			
// 			snprintf(Utils::txBuf, TX_LEN, "Rep: %d\r\nCounts: %.3f", i, counts);
// 			ComHandler::sendAnswer();
			i++;
    1bbe:	1f 5f       	subi	r17, 0xFF	; 255
			
			gascalValve->close();
    1bc0:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1bc4:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1bc8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
			zero_chamber(CHAMBER_ZERO_ms);
    1bcc:	88 eb       	ldi	r24, 0xB8	; 184
    1bce:	9b e0       	ldi	r25, 0x0B	; 11
    1bd0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN11TestHandler12zero_chamberEj>
			gascalValve->open();
    1bd4:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1bd8:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1bdc:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
    1be0:	24 01       	movw	r4, r8
    1be2:	35 01       	movw	r6, r10
    1be4:	b9 cf       	rjmp	.-142    	; 0x1b58 <_ZN11TestHandler12start_aircalEv+0x68>
		}
	}
	gascalValve->open();
    1be6:	c1 01       	movw	r24, r2
    1be8:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Valve4openEv>
	zero_chamber(FINAL_AUTOZERO_DURATION_ms);
    1bec:	80 e3       	ldi	r24, 0x30	; 48
    1bee:	95 e7       	ldi	r25, 0x75	; 117
    1bf0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN11TestHandler12zero_chamberEj>
	gascalValve->close();
    1bf4:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <_ZN11TestHandler11gascalValveE>
    1bf8:	90 91 21 22 	lds	r25, 0x2221	; 0x802221 <_ZN11TestHandler11gascalValveE+0x1>
    1bfc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5Valve5closeEv>
	myPump->turnOff();
    1c00:	80 91 28 22 	lds	r24, 0x2228	; 0x802228 <_ZN11TestHandler6myPumpE>
    1c04:	90 91 29 22 	lds	r25, 0x2229	; 0x802229 <_ZN11TestHandler6myPumpE+0x1>
    1c08:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN4Pump7turnOffEv>
	
	// Output aircal coefficients
// 	snprintf(Utils::txBuf, TX_LEN, "avgCounts: %.3f counts\r\n", avgCounts);
// 	ComHandler::sendAnswer();
	Utils::gascal_s result;
	result.gain = gascal.gain;
    1c0c:	60 91 2e 22 	lds	r22, 0x222E	; 0x80222e <_ZN11TestHandler6gascalE>
    1c10:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <_ZN11TestHandler6gascalE+0x1>
    1c14:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <_ZN11TestHandler6gascalE+0x2>
    1c18:	70 91 31 22 	lds	r23, 0x2231	; 0x802231 <_ZN11TestHandler6gascalE+0x3>
	result.offset = SAMPLE_PCT - result.gain*avgCounts;
// 	snprintf(Utils::txBuf, TX_LEN, "Gain: %.3f[%%/counts]\r\nOffset: %.3f%%\r\n", result.gain, result.offset);
// 	ComHandler::sendAnswer();
	return result;
    1c1c:	16 2f       	mov	r17, r22
    1c1e:	86 2f       	mov	r24, r22
    1c20:	9f 2f       	mov	r25, r31
    1c22:	ae 2f       	mov	r26, r30
    1c24:	b7 2f       	mov	r27, r23
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	ab 83       	std	Y+3, r26	; 0x03
    1c2c:	bc 83       	std	Y+4, r27	; 0x04
    1c2e:	26 2f       	mov	r18, r22
    1c30:	3f 2f       	mov	r19, r31
    1c32:	4e 2f       	mov	r20, r30
    1c34:	57 2f       	mov	r21, r23
    1c36:	c7 01       	movw	r24, r14
    1c38:	b6 01       	movw	r22, r12
    1c3a:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1c3e:	9b 01       	movw	r18, r22
    1c40:	ac 01       	movw	r20, r24
    1c42:	6f e8       	ldi	r22, 0x8F	; 143
    1c44:	72 ec       	ldi	r23, 0xC2	; 194
    1c46:	87 ea       	ldi	r24, 0xA7	; 167
    1c48:	91 e4       	ldi	r25, 0x41	; 65
    1c4a:	0e 94 6f 11 	call	0x22de	; 0x22de <__subsf3>
    1c4e:	e6 2f       	mov	r30, r22
    1c50:	46 2f       	mov	r20, r22
    1c52:	57 2f       	mov	r21, r23
    1c54:	bc 01       	movw	r22, r24
    1c56:	4d 83       	std	Y+5, r20	; 0x05
    1c58:	5e 83       	std	Y+6, r21	; 0x06
    1c5a:	6f 83       	std	Y+7, r22	; 0x07
    1c5c:	78 87       	std	Y+8, r23	; 0x08
    1c5e:	21 2f       	mov	r18, r17
    1c60:	3a 81       	ldd	r19, Y+2	; 0x02
    1c62:	4b 81       	ldd	r20, Y+3	; 0x03
    1c64:	5c 81       	ldd	r21, Y+4	; 0x04
    1c66:	6e 2f       	mov	r22, r30
    1c68:	7e 81       	ldd	r23, Y+6	; 0x06
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	98 85       	ldd	r25, Y+8	; 0x08
    1c6e:	28 96       	adiw	r28, 0x08	; 8
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	cf 90       	pop	r12
    1c82:	bf 90       	pop	r11
    1c84:	af 90       	pop	r10
    1c86:	9f 90       	pop	r9
    1c88:	8f 90       	pop	r8
    1c8a:	7f 90       	pop	r7
    1c8c:	6f 90       	pop	r6
    1c8e:	5f 90       	pop	r5
    1c90:	4f 90       	pop	r4
    1c92:	3f 90       	pop	r3
    1c94:	2f 90       	pop	r2
    1c96:	08 95       	ret

00001c98 <_ZN4Twie8waitReadEv>:
}

void Twie::setBaudRate(uint8_t baudRate)
{
	this->baudRate = baudRate;
	TWIE_MASTER_BAUD = baudRate;
    1c98:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
    1c9c:	87 ff       	sbrs	r24, 7
    1c9e:	fc cf       	rjmp	.-8      	; 0x1c98 <_ZN4Twie8waitReadEv>
    1ca0:	08 95       	ret

00001ca2 <_ZN4Twie9waitWriteEv>:
    1ca2:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
    1ca6:	86 ff       	sbrs	r24, 6
    1ca8:	fc cf       	rjmp	.-8      	; 0x1ca2 <_ZN4Twie9waitWriteEv>
    1caa:	08 95       	ret

00001cac <_ZN4Twie7isErrorEv>:
    1cac:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7004a4>
    1cb0:	9c 71       	andi	r25, 0x1C	; 28
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <_ZN4Twie7isErrorEv+0xc>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	08 95       	ret

00001cba <_ZN4Twie12errorHandlerEPKc>:
    1cba:	08 95       	ret

00001cbc <_ZN4Twie12enableMasterEv>:
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	25 83       	std	Z+5, r18	; 0x05
    1cc2:	e1 ea       	ldi	r30, 0xA1	; 161
    1cc4:	f4 e0       	ldi	r31, 0x04	; 4
    1cc6:	80 81       	ld	r24, Z
    1cc8:	88 60       	ori	r24, 0x08	; 8
    1cca:	80 83       	st	Z, r24
    1ccc:	08 95       	ret

00001cce <_ZN4Twie15enableSmartModeEv>:
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 87       	std	Z+8, r18	; 0x08
    1cd4:	e2 ea       	ldi	r30, 0xA2	; 162
    1cd6:	f4 e0       	ldi	r31, 0x04	; 4
    1cd8:	80 81       	ld	r24, Z
    1cda:	81 60       	ori	r24, 0x01	; 1
    1cdc:	80 83       	st	Z, r24
    1cde:	08 95       	ret

00001ce0 <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>:
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	66 83       	std	Z+6, r22	; 0x06
    1ce4:	e2 ea       	ldi	r30, 0xA2	; 162
    1ce6:	f4 e0       	ldi	r31, 0x04	; 4
    1ce8:	80 81       	ld	r24, Z
    1cea:	94 e0       	ldi	r25, 0x04	; 4
    1cec:	69 9f       	mul	r22, r25
    1cee:	b0 01       	movw	r22, r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	83 7f       	andi	r24, 0xF3	; 243
    1cf4:	68 2b       	or	r22, r24
    1cf6:	60 83       	st	Z, r22
    1cf8:	08 95       	ret

00001cfa <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>:
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	61 87       	std	Z+9, r22	; 0x09
    1cfe:	66 23       	and	r22, r22
    1d00:	19 f0       	breq	.+6      	; 0x1d08 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0xe>
    1d02:	61 30       	cpi	r22, 0x01	; 1
    1d04:	29 f0       	breq	.+10     	; 0x1d10 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x16>
    1d06:	08 95       	ret
    1d08:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d0c:	8b 7f       	andi	r24, 0xFB	; 251
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE+0x1c>
    1d10:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d14:	84 60       	ori	r24, 0x04	; 4
    1d16:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d1a:	08 95       	ret

00001d1c <_ZN4Twie7getDataENS_19acknowledgeAction_eE>:
    1d1c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
    1d20:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
    1d24:	08 95       	ret

00001d26 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE>:
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	ec 01       	movw	r28, r24
    1d2e:	16 2f       	mov	r17, r22
    1d30:	64 2f       	mov	r22, r20
    1d32:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN4Twie20setAcknowledgeActionENS_19acknowledgeAction_eE>
    1d36:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d3a:	8c 7f       	andi	r24, 0xFC	; 252
    1d3c:	81 2b       	or	r24, r17
    1d3e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7004a3>
    1d42:	12 30       	cpi	r17, 0x02	; 2
    1d44:	31 f4       	brne	.+12     	; 0x1d52 <_ZN4Twie10setCommandENS_9command_eENS_19acknowledgeAction_eE+0x2c>
    1d46:	ce 01       	movw	r24, r28
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <_ZN4Twie8waitReadEv>
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	08 95       	ret

00001d5a <_ZN4Twie10setBusIdleEv>:
    1d5a:	e4 ea       	ldi	r30, 0xA4	; 164
    1d5c:	f4 e0       	ldi	r31, 0x04	; 4
    1d5e:	80 81       	ld	r24, Z
    1d60:	81 60       	ori	r24, 0x01	; 1
    1d62:	80 83       	st	Z, r24
    1d64:	08 95       	ret

00001d66 <_ZN4TwieC1EhNS_5ibt_eE>:
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	ec 01       	movw	r28, r24
    1d6c:	6a 87       	std	Y+10, r22	; 0x0a
    1d6e:	4e 83       	std	Y+6, r20	; 0x06
    1d70:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7004a5>
    1d74:	64 2f       	mov	r22, r20
    1d76:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN4Twie21setInactiveBusTimeoutENS_5ibt_eE>
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN4Twie15enableSmartModeEv>
    1d80:	ce 01       	movw	r24, r28
    1d82:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN4Twie12enableMasterEv>
    1d86:	ce 01       	movw	r24, r28
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <_ZN4Twie10setBusIdleEv>

00001d90 <_ZN4Twie10setAddressEhNS_11direction_eE>:
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
		TWIE_MASTER_ADDR = (address << 1) | 1;
    1d90:	66 0f       	add	r22, r22
	TWIE_MASTER_BAUD = baudRate;
}

void Twie::setAddress(uint8_t address, direction_e direction)
{
	if (direction == DIR_READ) {
    1d92:	41 30       	cpi	r20, 0x01	; 1
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <_ZN4Twie10setAddressEhNS_11direction_eE+0x10>
		TWIE_MASTER_ADDR = (address << 1) | 1;
    1d96:	61 60       	ori	r22, 0x01	; 1
    1d98:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitRead();
    1d9c:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <_ZN4Twie8waitReadEv>
	} else {
		TWIE_MASTER_ADDR = (address << 1);
    1da0:	60 93 a6 04 	sts	0x04A6, r22	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7004a6>
		waitWrite();
    1da4:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_ZN4Twie9waitWriteEv>

00001da8 <_ZN4Twie7setDataEh>:
	}
}

void Twie::setData(uint8_t data)
{
	TWIE_MASTER_DATA = data;
    1da8:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7004a7>
	waitWrite();
    1dac:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_ZN4Twie9waitWriteEv>

00001db0 <__vector_28>:
}

void UsartC1::setCharacterSize(characterSize_e characterSize)
{
	this->characterSize = characterSize;
	USARTC1_CTRLC = (characterSize << USART_CHSIZE_gp)|(USARTC1_CTRLC & ~USART_CHSIZE_gm);
    1db0:	1f 92       	push	r1
    1db2:	0f 92       	push	r0
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	0f 92       	push	r0
    1db8:	11 24       	eor	r1, r1
    1dba:	08 b6       	in	r0, 0x38	; 56
    1dbc:	0f 92       	push	r0
    1dbe:	18 be       	out	0x38, r1	; 56
    1dc0:	8f 93       	push	r24
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	80 93 37 22 	sts	0x2237, r24	; 0x802237 <_ZN7UsartC17rxcFlagE>
    1dc8:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1dcc:	80 93 36 22 	sts	0x2236, r24	; 0x802236 <_ZN7UsartC16rxCharE>
    1dd0:	8f 91       	pop	r24
    1dd2:	0f 90       	pop	r0
    1dd4:	08 be       	out	0x38, r0	; 56
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	0f 90       	pop	r0
    1ddc:	1f 90       	pop	r1
    1dde:	18 95       	reti

00001de0 <_ZN7UsartC121waitDataRegisterEmptyEv>:
    1de0:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <__TEXT_REGION_LENGTH__+0x7008b1>
    1de4:	85 ff       	sbrs	r24, 5
    1de6:	fc cf       	rjmp	.-8      	; 0x1de0 <_ZN7UsartC121waitDataRegisterEmptyEv>
    1de8:	08 95       	ret

00001dea <_ZN7UsartC18sendCharEc>:
    1dea:	cf 93       	push	r28
    1dec:	c6 2f       	mov	r28, r22
    1dee:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN7UsartC121waitDataRegisterEmptyEv>
    1df2:	c0 93 b0 08 	sts	0x08B0, r28	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <_ZN7UsartC110sendStringEPKc>:
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	7c 01       	movw	r14, r24
    1e06:	8b 01       	movw	r16, r22
    1e08:	f8 01       	movw	r30, r16
    1e0a:	c1 91       	ld	r28, Z+
    1e0c:	8f 01       	movw	r16, r30
    1e0e:	cc 23       	and	r28, r28
    1e10:	31 f0       	breq	.+12     	; 0x1e1e <_ZN7UsartC110sendStringEPKc+0x24>
    1e12:	c7 01       	movw	r24, r14
    1e14:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN7UsartC121waitDataRegisterEmptyEv>
    1e18:	c0 93 b0 08 	sts	0x08B0, r28	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1e1c:	f5 cf       	rjmp	.-22     	; 0x1e08 <_ZN7UsartC110sendStringEPKc+0xe>
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	08 95       	ret

00001e2a <_ZN7UsartC130enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>:
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	60 83       	st	Z, r22
    1e2e:	e3 eb       	ldi	r30, 0xB3	; 179
    1e30:	f8 e0       	ldi	r31, 0x08	; 8
    1e32:	80 81       	ld	r24, Z
    1e34:	90 e1       	ldi	r25, 0x10	; 16
    1e36:	69 9f       	mul	r22, r25
    1e38:	b0 01       	movw	r22, r0
    1e3a:	11 24       	eor	r1, r1
    1e3c:	8f 7c       	andi	r24, 0xCF	; 207
    1e3e:	68 2b       	or	r22, r24
    1e40:	60 83       	st	Z, r22
    1e42:	08 95       	ret

00001e44 <_ZN7UsartC114enableReceiverEv>:
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	fc 01       	movw	r30, r24
    1e48:	23 83       	std	Z+3, r18	; 0x03
    1e4a:	e4 eb       	ldi	r30, 0xB4	; 180
    1e4c:	f8 e0       	ldi	r31, 0x08	; 8
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 61       	ori	r24, 0x10	; 16
    1e52:	80 83       	st	Z, r24
    1e54:	08 95       	ret

00001e56 <_ZN7UsartC117enableTransmitterEv>:
    1e56:	21 e0       	ldi	r18, 0x01	; 1
    1e58:	fc 01       	movw	r30, r24
    1e5a:	24 83       	std	Z+4, r18	; 0x04
    1e5c:	e4 eb       	ldi	r30, 0xB4	; 180
    1e5e:	f8 e0       	ldi	r31, 0x08	; 8
    1e60:	80 81       	ld	r24, Z
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	80 83       	st	Z, r24
    1e66:	08 95       	ret

00001e68 <_ZN7UsartC129enableDoubleTransmissionSpeedEv>:
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	25 83       	std	Z+5, r18	; 0x05
    1e6e:	e4 eb       	ldi	r30, 0xB4	; 180
    1e70:	f8 e0       	ldi	r31, 0x08	; 8
    1e72:	80 81       	ld	r24, Z
    1e74:	84 60       	ori	r24, 0x04	; 4
    1e76:	80 83       	st	Z, r24
    1e78:	08 95       	ret

00001e7a <_ZN7UsartC17setBSELEj>:
}

void UsartC1::setBSEL(uint16_t bsel)
{
	this->bsel = bsel;
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	63 87       	std	Z+11, r22	; 0x0b
    1e7e:	74 87       	std	Z+12, r23	; 0x0c
	USARTC1_BAUDCTRLA = bsel;
    1e80:	60 93 b6 08 	sts	0x08B6, r22	; 0x8008b6 <__TEXT_REGION_LENGTH__+0x7008b6>
	USARTC1_BAUDCTRLB = (bsel >> 8)|(USARTC1_BAUDCTRLB & 0x0F);
    1e84:	e7 eb       	ldi	r30, 0xB7	; 183
    1e86:	f8 e0       	ldi	r31, 0x08	; 8
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 70       	andi	r24, 0x0F	; 15
    1e8c:	78 2b       	or	r23, r24
    1e8e:	70 83       	st	Z, r23
    1e90:	08 95       	ret

00001e92 <_ZN7UsartC19setBSCALEEh>:
}

void UsartC1::setBSCALE(uint8_t bscale)
{
	this->bscale = bscale;
    1e92:	fc 01       	movw	r30, r24
    1e94:	65 87       	std	Z+13, r22	; 0x0d
	USARTC1_BAUDCTRLB = (bscale << USART_BSCALE_gp)|(USARTC1_BAUDCTRLB & ~USART_BSCALE_gm);
    1e96:	e7 eb       	ldi	r30, 0xB7	; 183
    1e98:	f8 e0       	ldi	r31, 0x08	; 8
    1e9a:	80 81       	ld	r24, Z
    1e9c:	90 e1       	ldi	r25, 0x10	; 16
    1e9e:	69 9f       	mul	r22, r25
    1ea0:	b0 01       	movw	r22, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	8f 70       	andi	r24, 0x0F	; 15
    1ea6:	68 2b       	or	r22, r24
    1ea8:	60 83       	st	Z, r22
    1eaa:	08 95       	ret

00001eac <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>:

//===================//
//=== CONSTRUCTOR ===//
//===================//

UsartC1::UsartC1(Usart::baudrate_s baudrate,Utils::interruptLevel_e receiveCompleteInterruptLevel)
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	ec 01       	movw	r28, r24
    1eb8:	f6 2e       	mov	r15, r22
    1eba:	07 2f       	mov	r16, r23
    1ebc:	12 2f       	mov	r17, r18
{
	setBSEL(baudrate.bsel);
    1ebe:	ba 01       	movw	r22, r20
    1ec0:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <_ZN7UsartC17setBSELEj>
	setBSCALE(baudrate.bscale);
    1ec4:	6f 2d       	mov	r22, r15
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN7UsartC19setBSCALEEh>
	if (baudrate.clk2x) enableDoubleTransmissionSpeed();
    1ecc:	00 23       	and	r16, r16
    1ece:	19 f0       	breq	.+6      	; 0x1ed6 <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE+0x2a>
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN7UsartC129enableDoubleTransmissionSpeedEv>
	enableReceiver();
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7UsartC114enableReceiverEv>
	enableTransmitter();
    1edc:	ce 01       	movw	r24, r28
    1ede:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN7UsartC117enableTransmitterEv>
	enableReceiveCompleteInterrupt(receiveCompleteInterruptLevel);
    1ee2:	61 2f       	mov	r22, r17
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_ZN7UsartC130enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>
	PORTC_DIRSET = PIN7_bm;
    1eea:	80 e8       	ldi	r24, 0x80	; 128
    1eec:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	08 95       	ret

00001efc <__vector_58>:
}

void UsartE0::setCharacterSize(characterSize_e characterSize)
{
	this->characterSize = characterSize;
	USARTE0_CTRLC = (characterSize << USART_CHSIZE_gp)|(USARTE0_CTRLC & ~USART_CHSIZE_gm);
    1efc:	1f 92       	push	r1
    1efe:	0f 92       	push	r0
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	0f 92       	push	r0
    1f04:	11 24       	eor	r1, r1
    1f06:	08 b6       	in	r0, 0x38	; 56
    1f08:	0f 92       	push	r0
    1f0a:	18 be       	out	0x38, r1	; 56
    1f0c:	8f 93       	push	r24
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 39 22 	sts	0x2239, r24	; 0x802239 <_ZN7UsartE07rxcFlagE>
    1f14:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1f18:	80 93 38 22 	sts	0x2238, r24	; 0x802238 <_ZN7UsartE06rxCharE>
    1f1c:	8f 91       	pop	r24
    1f1e:	0f 90       	pop	r0
    1f20:	08 be       	out	0x38, r0	; 56
    1f22:	0f 90       	pop	r0
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	0f 90       	pop	r0
    1f28:	1f 90       	pop	r1
    1f2a:	18 95       	reti

00001f2c <_ZN7UsartE021waitDataRegisterEmptyEv>:
    1f2c:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x700aa1>
    1f30:	85 ff       	sbrs	r24, 5
    1f32:	fc cf       	rjmp	.-8      	; 0x1f2c <_ZN7UsartE021waitDataRegisterEmptyEv>
    1f34:	08 95       	ret

00001f36 <_ZN7UsartE08sendCharEc>:
    1f36:	cf 93       	push	r28
    1f38:	c6 2f       	mov	r28, r22
    1f3a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7UsartE021waitDataRegisterEmptyEv>
    1f3e:	c0 93 a0 0a 	sts	0x0AA0, r28	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <_ZN7UsartE010sendStringEPKc>:
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	7c 01       	movw	r14, r24
    1f52:	8b 01       	movw	r16, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	c1 91       	ld	r28, Z+
    1f58:	8f 01       	movw	r16, r30
    1f5a:	cc 23       	and	r28, r28
    1f5c:	31 f0       	breq	.+12     	; 0x1f6a <_ZN7UsartE010sendStringEPKc+0x24>
    1f5e:	c7 01       	movw	r24, r14
    1f60:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7UsartE021waitDataRegisterEmptyEv>
    1f64:	c0 93 a0 0a 	sts	0x0AA0, r28	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1f68:	f5 cf       	rjmp	.-22     	; 0x1f54 <_ZN7UsartE010sendStringEPKc+0xe>
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	08 95       	ret

00001f76 <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>:
    1f76:	fc 01       	movw	r30, r24
    1f78:	60 83       	st	Z, r22
    1f7a:	e3 ea       	ldi	r30, 0xA3	; 163
    1f7c:	fa e0       	ldi	r31, 0x0A	; 10
    1f7e:	80 81       	ld	r24, Z
    1f80:	90 e1       	ldi	r25, 0x10	; 16
    1f82:	69 9f       	mul	r22, r25
    1f84:	b0 01       	movw	r22, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	8f 7c       	andi	r24, 0xCF	; 207
    1f8a:	68 2b       	or	r22, r24
    1f8c:	60 83       	st	Z, r22
    1f8e:	08 95       	ret

00001f90 <_ZN7UsartE014enableReceiverEv>:
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	fc 01       	movw	r30, r24
    1f94:	23 83       	std	Z+3, r18	; 0x03
    1f96:	e4 ea       	ldi	r30, 0xA4	; 164
    1f98:	fa e0       	ldi	r31, 0x0A	; 10
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 61       	ori	r24, 0x10	; 16
    1f9e:	80 83       	st	Z, r24
    1fa0:	08 95       	ret

00001fa2 <_ZN7UsartE017enableTransmitterEv>:
    1fa2:	21 e0       	ldi	r18, 0x01	; 1
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	24 83       	std	Z+4, r18	; 0x04
    1fa8:	e4 ea       	ldi	r30, 0xA4	; 164
    1faa:	fa e0       	ldi	r31, 0x0A	; 10
    1fac:	80 81       	ld	r24, Z
    1fae:	88 60       	ori	r24, 0x08	; 8
    1fb0:	80 83       	st	Z, r24
    1fb2:	08 95       	ret

00001fb4 <_ZN7UsartE029enableDoubleTransmissionSpeedEv>:
    1fb4:	21 e0       	ldi	r18, 0x01	; 1
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	25 83       	std	Z+5, r18	; 0x05
    1fba:	e4 ea       	ldi	r30, 0xA4	; 164
    1fbc:	fa e0       	ldi	r31, 0x0A	; 10
    1fbe:	80 81       	ld	r24, Z
    1fc0:	84 60       	ori	r24, 0x04	; 4
    1fc2:	80 83       	st	Z, r24
    1fc4:	08 95       	ret

00001fc6 <_ZN7UsartE07setBSELEj>:
}

void UsartE0::setBSEL(uint16_t bsel)
{
	this->bsel = bsel;
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	63 87       	std	Z+11, r22	; 0x0b
    1fca:	74 87       	std	Z+12, r23	; 0x0c
	USARTE0_BAUDCTRLA = bsel;
    1fcc:	60 93 a6 0a 	sts	0x0AA6, r22	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x700aa6>
	USARTE0_BAUDCTRLB = (bsel >> 8)|(USARTE0_BAUDCTRLB & 0x0F);
    1fd0:	e7 ea       	ldi	r30, 0xA7	; 167
    1fd2:	fa e0       	ldi	r31, 0x0A	; 10
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8f 70       	andi	r24, 0x0F	; 15
    1fd8:	78 2b       	or	r23, r24
    1fda:	70 83       	st	Z, r23
    1fdc:	08 95       	ret

00001fde <_ZN7UsartE09setBSCALEEh>:
}

void UsartE0::setBSCALE(uint8_t bscale)
{
	this->bscale = bscale;
    1fde:	fc 01       	movw	r30, r24
    1fe0:	65 87       	std	Z+13, r22	; 0x0d
	USARTE0_BAUDCTRLB = (bscale << USART_BSCALE_gp)|(USARTE0_BAUDCTRLB & ~USART_BSCALE_gm);
    1fe2:	e7 ea       	ldi	r30, 0xA7	; 167
    1fe4:	fa e0       	ldi	r31, 0x0A	; 10
    1fe6:	80 81       	ld	r24, Z
    1fe8:	90 e1       	ldi	r25, 0x10	; 16
    1fea:	69 9f       	mul	r22, r25
    1fec:	b0 01       	movw	r22, r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	8f 70       	andi	r24, 0x0F	; 15
    1ff2:	68 2b       	or	r22, r24
    1ff4:	60 83       	st	Z, r22
    1ff6:	08 95       	ret

00001ff8 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>:

//====================//
//=== CONSTRUCTORS ===//
//====================//

UsartE0::UsartE0(Usart::baudrate_s baudrate,Utils::interruptLevel_e receiveCompleteInterruptLevel)
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	ec 01       	movw	r28, r24
    2004:	f6 2e       	mov	r15, r22
    2006:	07 2f       	mov	r16, r23
    2008:	12 2f       	mov	r17, r18
{
	setBSEL(baudrate.bsel);
    200a:	ba 01       	movw	r22, r20
    200c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN7UsartE07setBSELEj>
	setBSCALE(baudrate.bscale);
    2010:	6f 2d       	mov	r22, r15
    2012:	ce 01       	movw	r24, r28
    2014:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZN7UsartE09setBSCALEEh>
	if (baudrate.clk2x) enableDoubleTransmissionSpeed();
    2018:	00 23       	and	r16, r16
    201a:	19 f0       	breq	.+6      	; 0x2022 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE+0x2a>
    201c:	ce 01       	movw	r24, r28
    201e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <_ZN7UsartE029enableDoubleTransmissionSpeedEv>
	enableReceiver();
    2022:	ce 01       	movw	r24, r28
    2024:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7UsartE014enableReceiverEv>
	enableTransmitter();
    2028:	ce 01       	movw	r24, r28
    202a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <_ZN7UsartE017enableTransmitterEv>
	enableReceiveCompleteInterrupt(receiveCompleteInterruptLevel);
    202e:	61 2f       	mov	r22, r17
    2030:	ce 01       	movw	r24, r28
    2032:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <_ZN7UsartE030enableReceiveCompleteInterruptEN5Utils16interruptLevel_eE>
	PORTE_DIRSET = PIN3_bm;
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
}
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	08 95       	ret

00002048 <_ZN5Utils14setSystemClockENS_13systemClock_eE>:

char Utils::txBuf[TX_LEN];

void Utils::setSystemClock(systemClock_e sc)
{
	OSC_CTRL |= 1 << sc; // enable oscillator
    2048:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	08 2e       	mov	r0, r24
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x10>
    2054:	44 0f       	add	r20, r20
    2056:	55 1f       	adc	r21, r21
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <_ZN5Utils14setSystemClockENS_13systemClock_eE+0xc>
    205c:	94 2b       	or	r25, r20
    205e:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while (!(OSC_STATUS & (1 << sc))) ; // wait until oscillator is ready
    2062:	20 91 51 00 	lds	r18, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	24 23       	and	r18, r20
    206a:	35 23       	and	r19, r21
    206c:	23 2b       	or	r18, r19
    206e:	c9 f3       	breq	.-14     	; 0x2062 <_ZN5Utils14setSystemClockENS_13systemClock_eE+0x1a>
	CCP = CCP_IOREG_gc; // trigger protection mechanism
    2070:	98 ed       	ldi	r25, 0xD8	; 216
    2072:	94 bf       	out	0x34, r25	; 52
	CLK_CTRL = sc << CLK_SCLKSEL_gp; // select system clock
    2074:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    2078:	08 95       	ret

0000207a <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>:
}

void Utils::enableInterruptLevel(interruptLevel_e il)
{
	PMIC_CTRL |= (1 << (il-1));
    207a:	e2 ea       	ldi	r30, 0xA2	; 162
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	40 81       	ld	r20, Z
    2080:	81 50       	subi	r24, 0x01	; 1
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	b9 01       	movw	r22, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x14>
    208a:	66 0f       	add	r22, r22
    208c:	77 1f       	adc	r23, r23
    208e:	8a 95       	dec	r24
    2090:	e2 f7       	brpl	.-8      	; 0x208a <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE+0x10>
    2092:	cb 01       	movw	r24, r22
    2094:	84 2b       	or	r24, r20
    2096:	80 83       	st	Z, r24
    2098:	08 95       	ret

0000209a <_ZN5Utils21globalInterruptEnableEv>:
}

void Utils::globalInterruptEnable()
{
	CPU_SREG |= CPU_I_bm;
    209a:	8f b7       	in	r24, 0x3f	; 63
    209c:	80 68       	ori	r24, 0x80	; 128
    209e:	8f bf       	out	0x3f, r24	; 63
    20a0:	08 95       	ret

000020a2 <_ZN5Utils8delay_msEj>:
}

void Utils::delay_ms(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_ms(1);
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	28 17       	cp	r18, r24
    20a8:	39 07       	cpc	r19, r25
    20aa:	49 f0       	breq	.+18     	; 0x20be <_ZN5Utils8delay_msEj+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20ac:	ef e3       	ldi	r30, 0x3F	; 63
    20ae:	ff e1       	ldi	r31, 0x1F	; 31
    20b0:	31 97       	sbiw	r30, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <_ZN5Utils8delay_msEj+0xe>
    20b4:	00 c0       	rjmp	.+0      	; 0x20b6 <_ZN5Utils8delay_msEj+0x14>
    20b6:	00 00       	nop
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	f4 cf       	rjmp	.-24     	; 0x20a6 <_ZN5Utils8delay_msEj+0x4>
    20be:	08 95       	ret

000020c0 <_ZN5Utils8delay_usEj>:
}

void Utils::delay_us(uint16_t u)
{
	for (uint16_t i = 0; i < u; i++) _delay_us(1);
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	28 17       	cp	r18, r24
    20c6:	39 07       	cpc	r19, r25
    20c8:	39 f0       	breq	.+14     	; 0x20d8 <_ZN5Utils8delay_usEj+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20ca:	4a e0       	ldi	r20, 0x0A	; 10
    20cc:	4a 95       	dec	r20
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <_ZN5Utils8delay_usEj+0xc>
    20d0:	00 c0       	rjmp	.+0      	; 0x20d2 <_ZN5Utils8delay_usEj+0x12>
    20d2:	2f 5f       	subi	r18, 0xFF	; 255
    20d4:	3f 4f       	sbci	r19, 0xFF	; 255
    20d6:	f6 cf       	rjmp	.-20     	; 0x20c4 <_ZN5Utils8delay_usEj+0x4>
    20d8:	08 95       	ret

000020da <main>:
//============//
//=== MAIN ===//
//============//

int main(void)
{
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	c2 59       	subi	r28, 0x92	; 146
    20e4:	d1 09       	sbc	r29, r1
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	de bf       	out	0x3e, r29	; 62
	Utils::setSystemClock(Utils::SC_32M); // 32MHz internal oscillator
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN5Utils14setSystemClockENS_13systemClock_eE>

	Adca myAdc(Adca::P_DIV512, Utils::IL_HIGH);
    20f0:	43 e0       	ldi	r20, 0x03	; 3
    20f2:	67 e0       	ldi	r22, 0x07	; 7
    20f4:	ce 01       	movw	r24, r28
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	0e 94 11 03 	call	0x622	; 0x622 <_ZN4AdcaC1ENS_11prescaler_eEN5Utils16interruptLevel_eE>
	Tcc0 myTimer(Tcc0::CS_DIV1, 2.048, Utils::IL_HIGH); // timeIncrement = 65536/32MHz
    20fc:	03 e0       	ldi	r16, 0x03	; 3
    20fe:	2f e6       	ldi	r18, 0x6F	; 111
    2100:	32 e1       	ldi	r19, 0x12	; 18
    2102:	43 e0       	ldi	r20, 0x03	; 3
    2104:	50 e4       	ldi	r21, 0x40	; 64
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	ce 01       	movw	r24, r28
    210a:	8b 5b       	subi	r24, 0xBB	; 187
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	0e 94 b9 09 	call	0x1372	; 0x1372 <_ZN4Tcc0C1ENS_13clockSource_eEdN5Utils16interruptLevel_eE>
	Twie myTwie(155, Twie::IBT_50US); // 155 = 100 kHz
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	6b e9       	ldi	r22, 0x9B	; 155
    2116:	ce 01       	movw	r24, r28
    2118:	89 58       	subi	r24, 0x89	; 137
    211a:	9f 4f       	sbci	r25, 0xFF	; 255
    211c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN4TwieC1EhNS_5ibt_eE>
	UsartE0 myUsart0(Usart::BAUD_115k2, Utils::IL_MEDIUM);
    2120:	40 91 b4 21 	lds	r20, 0x21B4	; 0x8021b4 <_ZN5Usart10BAUD_115k2E>
    2124:	50 91 b5 21 	lds	r21, 0x21B5	; 0x8021b5 <_ZN5Usart10BAUD_115k2E+0x1>
    2128:	60 91 b6 21 	lds	r22, 0x21B6	; 0x8021b6 <_ZN5Usart10BAUD_115k2E+0x2>
    212c:	70 91 b7 21 	lds	r23, 0x21B7	; 0x8021b7 <_ZN5Usart10BAUD_115k2E+0x3>
    2130:	3e 01       	movw	r6, r28
    2132:	89 e6       	ldi	r24, 0x69	; 105
    2134:	68 0e       	add	r6, r24
    2136:	71 1c       	adc	r7, r1
    2138:	22 e0       	ldi	r18, 0x02	; 2
    213a:	c3 01       	movw	r24, r6
    213c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN7UsartE0C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>
	UsartC1 myUsart1(Usart::BAUD_9k6, Utils::IL_MEDIUM);
    2140:	40 91 b8 21 	lds	r20, 0x21B8	; 0x8021b8 <_ZN5Usart8BAUD_9k6E>
    2144:	50 91 b9 21 	lds	r21, 0x21B9	; 0x8021b9 <_ZN5Usart8BAUD_9k6E+0x1>
    2148:	60 91 ba 21 	lds	r22, 0x21BA	; 0x8021ba <_ZN5Usart8BAUD_9k6E+0x2>
    214c:	70 91 bb 21 	lds	r23, 0x21BB	; 0x8021bb <_ZN5Usart8BAUD_9k6E+0x3>
    2150:	2e 01       	movw	r4, r28
    2152:	9b e5       	ldi	r25, 0x5B	; 91
    2154:	49 0e       	add	r4, r25
    2156:	51 1c       	adc	r5, r1
    2158:	22 e0       	ldi	r18, 0x02	; 2
    215a:	c2 01       	movw	r24, r4
    215c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN7UsartC1C1EN5Usart10baudrate_sEN5Utils16interruptLevel_eE>
	
	Pump myPump;
    2160:	ce 01       	movw	r24, r28
    2162:	8e 56       	subi	r24, 0x6E	; 110
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	0e 94 4e 09 	call	0x129c	; 0x129c <_ZN4PumpC1Ev>
	Valve sampleValve(1<<1);
    216a:	6e 01       	movw	r12, r28
    216c:	8e e8       	ldi	r24, 0x8E	; 142
    216e:	c8 0e       	add	r12, r24
    2170:	d1 1c       	adc	r13, r1
    2172:	62 e0       	ldi	r22, 0x02	; 2
    2174:	c6 01       	movw	r24, r12
    2176:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN5ValveC1Eh>
	Valve gascalValve(1<<2);
    217a:	7e 01       	movw	r14, r28
    217c:	9c e8       	ldi	r25, 0x8C	; 140
    217e:	e9 0e       	add	r14, r25
    2180:	f1 1c       	adc	r15, r1
    2182:	64 e0       	ldi	r22, 0x04	; 4
    2184:	c7 01       	movw	r24, r14
    2186:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN5ValveC1Eh>
	Valve outputValve(1<<4);
    218a:	5e 01       	movw	r10, r28
    218c:	8a e8       	ldi	r24, 0x8A	; 138
    218e:	a8 0e       	add	r10, r24
    2190:	b1 1c       	adc	r11, r1
    2192:	60 e1       	ldi	r22, 0x10	; 16
    2194:	c5 01       	movw	r24, r10
    2196:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN5ValveC1Eh>
	
	Utils::gascal_s gascal = {0.5,-86.392}; // TODO: EEPROM saving of cal coeffs
    219a:	88 e0       	ldi	r24, 0x08	; 8
    219c:	e1 e0       	ldi	r30, 0x01	; 1
    219e:	f0 e2       	ldi	r31, 0x20	; 32
    21a0:	de 01       	movw	r26, r28
    21a2:	ae 57       	subi	r26, 0x7E	; 126
    21a4:	bf 4f       	sbci	r27, 0xFF	; 255
    21a6:	01 90       	ld	r0, Z+
    21a8:	0d 92       	st	X+, r0
    21aa:	8a 95       	dec	r24
    21ac:	e1 f7       	brne	.-8      	; 0x21a6 <main+0xcc>
	Ms5525dso myFlowSensor(Ms5525dso::OSR4096, 0x76, &myTwie);
    21ae:	80 91 28 21 	lds	r24, 0x2128	; 0x802128 <_ZN9Ms5525dso7OSR4096E>
    21b2:	90 91 29 21 	lds	r25, 0x2129	; 0x802129 <_ZN9Ms5525dso7OSR4096E+0x1>
    21b6:	a0 91 2a 21 	lds	r26, 0x212A	; 0x80212a <_ZN9Ms5525dso7OSR4096E+0x2>
    21ba:	8e 01       	movw	r16, r28
    21bc:	09 58       	subi	r16, 0x89	; 137
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	26 e7       	ldi	r18, 0x76	; 118
    21c2:	ac 01       	movw	r20, r24
    21c4:	6a 2f       	mov	r22, r26
    21c6:	ce 01       	movw	r24, r28
    21c8:	87 96       	adiw	r24, 0x27	; 39
    21ca:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN9Ms5525dsoC1ENS_5osr_sEhP4Twie>
	TestHandler myTestHandler(gascal, &myAdc, &myFlowSensor, &myPump, &myTimer, &myUsart0, &myUsart1, &gascalValve, &sampleValve, &outputValve);
    21ce:	bf 92       	push	r11
    21d0:	af 92       	push	r10
    21d2:	df 92       	push	r13
    21d4:	cf 92       	push	r12
    21d6:	ff 92       	push	r15
    21d8:	ef 92       	push	r14
    21da:	5f 92       	push	r5
    21dc:	4f 92       	push	r4
    21de:	7f 92       	push	r7
    21e0:	6f 92       	push	r6
    21e2:	ce 01       	movw	r24, r28
    21e4:	8b 5b       	subi	r24, 0xBB	; 187
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	4c 01       	movw	r8, r24
    21ea:	83 5b       	subi	r24, 0xB3	; 179
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	5c 01       	movw	r10, r24
    21f0:	8b 56       	subi	r24, 0x6B	; 107
    21f2:	91 09       	sbc	r25, r1
    21f4:	6c 01       	movw	r12, r24
    21f6:	86 97       	sbiw	r24, 0x26	; 38
    21f8:	7c 01       	movw	r14, r24
    21fa:	ce 57       	subi	r28, 0x7E	; 126
    21fc:	df 4f       	sbci	r29, 0xFF	; 255
    21fe:	08 81       	ld	r16, Y
    2200:	c2 58       	subi	r28, 0x82	; 130
    2202:	d0 40       	sbci	r29, 0x00	; 0
    2204:	cd 57       	subi	r28, 0x7D	; 125
    2206:	df 4f       	sbci	r29, 0xFF	; 255
    2208:	18 81       	ld	r17, Y
    220a:	c3 58       	subi	r28, 0x83	; 131
    220c:	d0 40       	sbci	r29, 0x00	; 0
    220e:	cc 57       	subi	r28, 0x7C	; 124
    2210:	df 4f       	sbci	r29, 0xFF	; 255
    2212:	28 81       	ld	r18, Y
    2214:	c4 58       	subi	r28, 0x84	; 132
    2216:	d0 40       	sbci	r29, 0x00	; 0
    2218:	cb 57       	subi	r28, 0x7B	; 123
    221a:	df 4f       	sbci	r29, 0xFF	; 255
    221c:	38 81       	ld	r19, Y
    221e:	c5 58       	subi	r28, 0x85	; 133
    2220:	d0 40       	sbci	r29, 0x00	; 0
    2222:	ca 57       	subi	r28, 0x7A	; 122
    2224:	df 4f       	sbci	r29, 0xFF	; 255
    2226:	48 81       	ld	r20, Y
    2228:	c6 58       	subi	r28, 0x86	; 134
    222a:	d0 40       	sbci	r29, 0x00	; 0
    222c:	c9 57       	subi	r28, 0x79	; 121
    222e:	df 4f       	sbci	r29, 0xFF	; 255
    2230:	58 81       	ld	r21, Y
    2232:	c7 58       	subi	r28, 0x87	; 135
    2234:	d0 40       	sbci	r29, 0x00	; 0
    2236:	c8 57       	subi	r28, 0x78	; 120
    2238:	df 4f       	sbci	r29, 0xFF	; 255
    223a:	68 81       	ld	r22, Y
    223c:	c8 58       	subi	r28, 0x88	; 136
    223e:	d0 40       	sbci	r29, 0x00	; 0
    2240:	c7 57       	subi	r28, 0x77	; 119
    2242:	df 4f       	sbci	r29, 0xFF	; 255
    2244:	78 81       	ld	r23, Y
    2246:	c9 58       	subi	r28, 0x89	; 137
    2248:	d0 40       	sbci	r29, 0x00	; 0
    224a:	80 57       	subi	r24, 0x70	; 112
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN11TestHandlerC1EN5Utils8gascal_sEP4AdcaP9Ms5525dsoP4PumpP4Tcc0P7UsartE0P7UsartC1P5ValveSF_SF_>
	
	ComHandler myComHandler(ComHandler::IDLE, &myTimer, &myUsart0, &myUsart1);
    2252:	82 01       	movw	r16, r4
    2254:	93 01       	movw	r18, r6
    2256:	a4 01       	movw	r20, r8
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	ce 01       	movw	r24, r28
    225c:	80 57       	subi	r24, 0x70	; 112
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	0e 94 33 03 	call	0x666	; 0x666 <_ZN10ComHandlerC1ENS_7state_eEP4Tcc0P7UsartE0P7UsartC1>
	
	Utils::enableInterruptLevel(Utils::IL_MEDIUM);
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::enableInterruptLevel(Utils::IL_HIGH);
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN5Utils20enableInterruptLevelENS_16interruptLevel_eE>
	Utils::globalInterruptEnable();
    2270:	0e 94 4d 10 	call	0x209a	; 0x209a <_ZN5Utils21globalInterruptEnableEv>
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	de bf       	out	0x3e, r29	; 62
//=== PUBLIC VARIABLES ===//
//========================//
public:	
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    2278:	80 91 39 22 	lds	r24, 0x2239	; 0x802239 <_ZN7UsartE07rxcFlagE>

	while (true)
	{		
		if (myUsart0.isRXC())
    227c:	88 23       	and	r24, r24
    227e:	51 f0       	breq	.+20     	; 0x2294 <main+0x1ba>
	void setRXC(bool b){rxcFlag = b;};
    2280:	10 92 39 22 	sts	0x2239, r1	; 0x802239 <_ZN7UsartE07rxcFlagE>
	char getChar(){return rxChar;};
    2284:	60 91 38 22 	lds	r22, 0x2238	; 0x802238 <_ZN7UsartE06rxCharE>
		{
			myUsart0.setRXC(false);
			char c = myUsart0.getChar();
			myComHandler.handle(c, ComHandler::USART0);
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	ce 01       	movw	r24, r28
    228c:	80 57       	subi	r24, 0x70	; 112
    228e:	9f 4f       	sbci	r25, 0xFF	; 255
    2290:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN10ComHandler6handleEcNS_5com_eE>
//=== PUBLIC VARIABLES ===//
//========================//
public:
	static volatile bool rxcFlag;
	static volatile char rxChar;
	bool isRXC(){return rxcFlag;};
    2294:	80 91 37 22 	lds	r24, 0x2237	; 0x802237 <_ZN7UsartC17rxcFlagE>
//  		else if (c == 'c') gascal = start_gascal(myAdc, myPump, myTimer, myUsart0, sampleValve, gascalValve, outputValve);
//  		else if (c == 'd') gascal = start_aircal(gascal.gain, myAdc, myPump, myTimer, myUsart0, gascalValve, outputValve);
			// END OF DEBUG
		}
		
		if (myUsart1.isRXC())
    2298:	88 23       	and	r24, r24
    229a:	71 f3       	breq	.-36     	; 0x2278 <main+0x19e>
	void setRXC(bool b){rxcFlag = b;};
    229c:	10 92 37 22 	sts	0x2237, r1	; 0x802237 <_ZN7UsartC17rxcFlagE>
	char getChar(){return rxChar;};
    22a0:	60 91 36 22 	lds	r22, 0x2236	; 0x802236 <_ZN7UsartC16rxCharE>
		{
			myUsart1.setRXC(false);
			char d = myUsart1.getChar();
			myComHandler.handle(d, ComHandler::USART1);
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	ce 01       	movw	r24, r28
    22a8:	80 57       	subi	r24, 0x70	; 112
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN10ComHandler6handleEcNS_5com_eE>
    22b0:	e3 cf       	rjmp	.-58     	; 0x2278 <main+0x19e>

000022b2 <_ZN5ValveC1Eh>:
*/

#include "Valve.h"
#include <avr/io.h>

Valve::Valve(uint8_t pin)
    22b2:	fc 01       	movw	r30, r24
{
	this->pin = pin;
    22b4:	60 83       	st	Z, r22
	PORTC_DIRSET = pin;
    22b6:	60 93 41 06 	sts	0x0641, r22	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	open_b = true;
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    22ba:	80 81       	ld	r24, Z
    22bc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    22c0:	11 82       	std	Z+1, r1	; 0x01
    22c2:	08 95       	ret

000022c4 <_ZN5Valve4openEv>:
	close();
}

void Valve::open()
{
	PORTC_OUTSET = pin;
    22c4:	fc 01       	movw	r30, r24
    22c6:	20 81       	ld	r18, Z
    22c8:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	open_b = true;
    22cc:	21 e0       	ldi	r18, 0x01	; 1
    22ce:	21 83       	std	Z+1, r18	; 0x01
    22d0:	08 95       	ret

000022d2 <_ZN5Valve5closeEv>:
}

void Valve::close()
{
	PORTC_OUTCLR = pin;
    22d2:	fc 01       	movw	r30, r24
    22d4:	20 81       	ld	r18, Z
    22d6:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	open_b = false;
    22da:	11 82       	std	Z+1, r1	; 0x01
    22dc:	08 95       	ret

000022de <__subsf3>:
    22de:	50 58       	subi	r21, 0x80	; 128

000022e0 <__addsf3>:
    22e0:	bb 27       	eor	r27, r27
    22e2:	aa 27       	eor	r26, r26
    22e4:	0e 94 87 11 	call	0x230e	; 0x230e <__addsf3x>
    22e8:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    22ec:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    22f0:	38 f0       	brcs	.+14     	; 0x2300 <__addsf3+0x20>
    22f2:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    22f6:	20 f0       	brcs	.+8      	; 0x2300 <__addsf3+0x20>
    22f8:	39 f4       	brne	.+14     	; 0x2308 <__addsf3+0x28>
    22fa:	9f 3f       	cpi	r25, 0xFF	; 255
    22fc:	19 f4       	brne	.+6      	; 0x2304 <__addsf3+0x24>
    22fe:	26 f4       	brtc	.+8      	; 0x2308 <__addsf3+0x28>
    2300:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>
    2304:	0e f4       	brtc	.+2      	; 0x2308 <__addsf3+0x28>
    2306:	e0 95       	com	r30
    2308:	e7 fb       	bst	r30, 7
    230a:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>

0000230e <__addsf3x>:
    230e:	e9 2f       	mov	r30, r25
    2310:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    2314:	58 f3       	brcs	.-42     	; 0x22ec <__addsf3+0xc>
    2316:	ba 17       	cp	r27, r26
    2318:	62 07       	cpc	r22, r18
    231a:	73 07       	cpc	r23, r19
    231c:	84 07       	cpc	r24, r20
    231e:	95 07       	cpc	r25, r21
    2320:	20 f0       	brcs	.+8      	; 0x232a <__addsf3x+0x1c>
    2322:	79 f4       	brne	.+30     	; 0x2342 <__addsf3x+0x34>
    2324:	a6 f5       	brtc	.+104    	; 0x238e <__addsf3x+0x80>
    2326:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_zero>
    232a:	0e f4       	brtc	.+2      	; 0x232e <__addsf3x+0x20>
    232c:	e0 95       	com	r30
    232e:	0b 2e       	mov	r0, r27
    2330:	ba 2f       	mov	r27, r26
    2332:	a0 2d       	mov	r26, r0
    2334:	0b 01       	movw	r0, r22
    2336:	b9 01       	movw	r22, r18
    2338:	90 01       	movw	r18, r0
    233a:	0c 01       	movw	r0, r24
    233c:	ca 01       	movw	r24, r20
    233e:	a0 01       	movw	r20, r0
    2340:	11 24       	eor	r1, r1
    2342:	ff 27       	eor	r31, r31
    2344:	59 1b       	sub	r21, r25
    2346:	99 f0       	breq	.+38     	; 0x236e <__addsf3x+0x60>
    2348:	59 3f       	cpi	r21, 0xF9	; 249
    234a:	50 f4       	brcc	.+20     	; 0x2360 <__addsf3x+0x52>
    234c:	50 3e       	cpi	r21, 0xE0	; 224
    234e:	68 f1       	brcs	.+90     	; 0x23aa <__addsf3x+0x9c>
    2350:	1a 16       	cp	r1, r26
    2352:	f0 40       	sbci	r31, 0x00	; 0
    2354:	a2 2f       	mov	r26, r18
    2356:	23 2f       	mov	r18, r19
    2358:	34 2f       	mov	r19, r20
    235a:	44 27       	eor	r20, r20
    235c:	58 5f       	subi	r21, 0xF8	; 248
    235e:	f3 cf       	rjmp	.-26     	; 0x2346 <__addsf3x+0x38>
    2360:	46 95       	lsr	r20
    2362:	37 95       	ror	r19
    2364:	27 95       	ror	r18
    2366:	a7 95       	ror	r26
    2368:	f0 40       	sbci	r31, 0x00	; 0
    236a:	53 95       	inc	r21
    236c:	c9 f7       	brne	.-14     	; 0x2360 <__addsf3x+0x52>
    236e:	7e f4       	brtc	.+30     	; 0x238e <__addsf3x+0x80>
    2370:	1f 16       	cp	r1, r31
    2372:	ba 0b       	sbc	r27, r26
    2374:	62 0b       	sbc	r22, r18
    2376:	73 0b       	sbc	r23, r19
    2378:	84 0b       	sbc	r24, r20
    237a:	ba f0       	brmi	.+46     	; 0x23aa <__addsf3x+0x9c>
    237c:	91 50       	subi	r25, 0x01	; 1
    237e:	a1 f0       	breq	.+40     	; 0x23a8 <__addsf3x+0x9a>
    2380:	ff 0f       	add	r31, r31
    2382:	bb 1f       	adc	r27, r27
    2384:	66 1f       	adc	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	c2 f7       	brpl	.-16     	; 0x237c <__addsf3x+0x6e>
    238c:	0e c0       	rjmp	.+28     	; 0x23aa <__addsf3x+0x9c>
    238e:	ba 0f       	add	r27, r26
    2390:	62 1f       	adc	r22, r18
    2392:	73 1f       	adc	r23, r19
    2394:	84 1f       	adc	r24, r20
    2396:	48 f4       	brcc	.+18     	; 0x23aa <__addsf3x+0x9c>
    2398:	87 95       	ror	r24
    239a:	77 95       	ror	r23
    239c:	67 95       	ror	r22
    239e:	b7 95       	ror	r27
    23a0:	f7 95       	ror	r31
    23a2:	9e 3f       	cpi	r25, 0xFE	; 254
    23a4:	08 f0       	brcs	.+2      	; 0x23a8 <__addsf3x+0x9a>
    23a6:	b0 cf       	rjmp	.-160    	; 0x2308 <__addsf3+0x28>
    23a8:	93 95       	inc	r25
    23aa:	88 0f       	add	r24, r24
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <__addsf3x+0xa2>
    23ae:	99 27       	eor	r25, r25
    23b0:	ee 0f       	add	r30, r30
    23b2:	97 95       	ror	r25
    23b4:	87 95       	ror	r24
    23b6:	08 95       	ret

000023b8 <__cmpsf2>:
    23b8:	0e 94 c6 12 	call	0x258c	; 0x258c <__fp_cmp>
    23bc:	08 f4       	brcc	.+2      	; 0x23c0 <__cmpsf2+0x8>
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	08 95       	ret

000023c2 <__divsf3>:
    23c2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__divsf3x>
    23c6:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    23ca:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    23ce:	58 f0       	brcs	.+22     	; 0x23e6 <__divsf3+0x24>
    23d0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    23d4:	40 f0       	brcs	.+16     	; 0x23e6 <__divsf3+0x24>
    23d6:	29 f4       	brne	.+10     	; 0x23e2 <__divsf3+0x20>
    23d8:	5f 3f       	cpi	r21, 0xFF	; 255
    23da:	29 f0       	breq	.+10     	; 0x23e6 <__divsf3+0x24>
    23dc:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    23e0:	51 11       	cpse	r21, r1
    23e2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    23e6:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>

000023ea <__divsf3x>:
    23ea:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    23ee:	68 f3       	brcs	.-38     	; 0x23ca <__divsf3+0x8>

000023f0 <__divsf3_pse>:
    23f0:	99 23       	and	r25, r25
    23f2:	b1 f3       	breq	.-20     	; 0x23e0 <__divsf3+0x1e>
    23f4:	55 23       	and	r21, r21
    23f6:	91 f3       	breq	.-28     	; 0x23dc <__divsf3+0x1a>
    23f8:	95 1b       	sub	r25, r21
    23fa:	55 0b       	sbc	r21, r21
    23fc:	bb 27       	eor	r27, r27
    23fe:	aa 27       	eor	r26, r26
    2400:	62 17       	cp	r22, r18
    2402:	73 07       	cpc	r23, r19
    2404:	84 07       	cpc	r24, r20
    2406:	38 f0       	brcs	.+14     	; 0x2416 <__divsf3_pse+0x26>
    2408:	9f 5f       	subi	r25, 0xFF	; 255
    240a:	5f 4f       	sbci	r21, 0xFF	; 255
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	44 1f       	adc	r20, r20
    2412:	aa 1f       	adc	r26, r26
    2414:	a9 f3       	breq	.-22     	; 0x2400 <__divsf3_pse+0x10>
    2416:	35 d0       	rcall	.+106    	; 0x2482 <__divsf3_pse+0x92>
    2418:	0e 2e       	mov	r0, r30
    241a:	3a f0       	brmi	.+14     	; 0x242a <__divsf3_pse+0x3a>
    241c:	e0 e8       	ldi	r30, 0x80	; 128
    241e:	32 d0       	rcall	.+100    	; 0x2484 <__divsf3_pse+0x94>
    2420:	91 50       	subi	r25, 0x01	; 1
    2422:	50 40       	sbci	r21, 0x00	; 0
    2424:	e6 95       	lsr	r30
    2426:	00 1c       	adc	r0, r0
    2428:	ca f7       	brpl	.-14     	; 0x241c <__divsf3_pse+0x2c>
    242a:	2b d0       	rcall	.+86     	; 0x2482 <__divsf3_pse+0x92>
    242c:	fe 2f       	mov	r31, r30
    242e:	29 d0       	rcall	.+82     	; 0x2482 <__divsf3_pse+0x92>
    2430:	66 0f       	add	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	88 1f       	adc	r24, r24
    2436:	bb 1f       	adc	r27, r27
    2438:	26 17       	cp	r18, r22
    243a:	37 07       	cpc	r19, r23
    243c:	48 07       	cpc	r20, r24
    243e:	ab 07       	cpc	r26, r27
    2440:	b0 e8       	ldi	r27, 0x80	; 128
    2442:	09 f0       	breq	.+2      	; 0x2446 <__divsf3_pse+0x56>
    2444:	bb 0b       	sbc	r27, r27
    2446:	80 2d       	mov	r24, r0
    2448:	bf 01       	movw	r22, r30
    244a:	ff 27       	eor	r31, r31
    244c:	93 58       	subi	r25, 0x83	; 131
    244e:	5f 4f       	sbci	r21, 0xFF	; 255
    2450:	3a f0       	brmi	.+14     	; 0x2460 <__divsf3_pse+0x70>
    2452:	9e 3f       	cpi	r25, 0xFE	; 254
    2454:	51 05       	cpc	r21, r1
    2456:	78 f0       	brcs	.+30     	; 0x2476 <__divsf3_pse+0x86>
    2458:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    245c:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    2460:	5f 3f       	cpi	r21, 0xFF	; 255
    2462:	e4 f3       	brlt	.-8      	; 0x245c <__divsf3_pse+0x6c>
    2464:	98 3e       	cpi	r25, 0xE8	; 232
    2466:	d4 f3       	brlt	.-12     	; 0x245c <__divsf3_pse+0x6c>
    2468:	86 95       	lsr	r24
    246a:	77 95       	ror	r23
    246c:	67 95       	ror	r22
    246e:	b7 95       	ror	r27
    2470:	f7 95       	ror	r31
    2472:	9f 5f       	subi	r25, 0xFF	; 255
    2474:	c9 f7       	brne	.-14     	; 0x2468 <__divsf3_pse+0x78>
    2476:	88 0f       	add	r24, r24
    2478:	91 1d       	adc	r25, r1
    247a:	96 95       	lsr	r25
    247c:	87 95       	ror	r24
    247e:	97 f9       	bld	r25, 7
    2480:	08 95       	ret
    2482:	e1 e0       	ldi	r30, 0x01	; 1
    2484:	66 0f       	add	r22, r22
    2486:	77 1f       	adc	r23, r23
    2488:	88 1f       	adc	r24, r24
    248a:	bb 1f       	adc	r27, r27
    248c:	62 17       	cp	r22, r18
    248e:	73 07       	cpc	r23, r19
    2490:	84 07       	cpc	r24, r20
    2492:	ba 07       	cpc	r27, r26
    2494:	20 f0       	brcs	.+8      	; 0x249e <__divsf3_pse+0xae>
    2496:	62 1b       	sub	r22, r18
    2498:	73 0b       	sbc	r23, r19
    249a:	84 0b       	sbc	r24, r20
    249c:	ba 0b       	sbc	r27, r26
    249e:	ee 1f       	adc	r30, r30
    24a0:	88 f7       	brcc	.-30     	; 0x2484 <__divsf3_pse+0x94>
    24a2:	e0 95       	com	r30
    24a4:	08 95       	ret

000024a6 <__fixsfsi>:
    24a6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    24aa:	68 94       	set
    24ac:	b1 11       	cpse	r27, r1
    24ae:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    24b2:	08 95       	ret

000024b4 <__fixunssfsi>:
    24b4:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    24b8:	88 f0       	brcs	.+34     	; 0x24dc <__fixunssfsi+0x28>
    24ba:	9f 57       	subi	r25, 0x7F	; 127
    24bc:	98 f0       	brcs	.+38     	; 0x24e4 <__fixunssfsi+0x30>
    24be:	b9 2f       	mov	r27, r25
    24c0:	99 27       	eor	r25, r25
    24c2:	b7 51       	subi	r27, 0x17	; 23
    24c4:	b0 f0       	brcs	.+44     	; 0x24f2 <__fixunssfsi+0x3e>
    24c6:	e1 f0       	breq	.+56     	; 0x2500 <__fixunssfsi+0x4c>
    24c8:	66 0f       	add	r22, r22
    24ca:	77 1f       	adc	r23, r23
    24cc:	88 1f       	adc	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	1a f0       	brmi	.+6      	; 0x24d8 <__fixunssfsi+0x24>
    24d2:	ba 95       	dec	r27
    24d4:	c9 f7       	brne	.-14     	; 0x24c8 <__fixunssfsi+0x14>
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <__fixunssfsi+0x4c>
    24d8:	b1 30       	cpi	r27, 0x01	; 1
    24da:	91 f0       	breq	.+36     	; 0x2500 <__fixunssfsi+0x4c>
    24dc:	0e 94 34 13 	call	0x2668	; 0x2668 <__fp_zero>
    24e0:	b1 e0       	ldi	r27, 0x01	; 1
    24e2:	08 95       	ret
    24e4:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_zero>
    24e8:	67 2f       	mov	r22, r23
    24ea:	78 2f       	mov	r23, r24
    24ec:	88 27       	eor	r24, r24
    24ee:	b8 5f       	subi	r27, 0xF8	; 248
    24f0:	39 f0       	breq	.+14     	; 0x2500 <__fixunssfsi+0x4c>
    24f2:	b9 3f       	cpi	r27, 0xF9	; 249
    24f4:	cc f3       	brlt	.-14     	; 0x24e8 <__fixunssfsi+0x34>
    24f6:	86 95       	lsr	r24
    24f8:	77 95       	ror	r23
    24fa:	67 95       	ror	r22
    24fc:	b3 95       	inc	r27
    24fe:	d9 f7       	brne	.-10     	; 0x24f6 <__fixunssfsi+0x42>
    2500:	3e f4       	brtc	.+14     	; 0x2510 <__fixunssfsi+0x5c>
    2502:	90 95       	com	r25
    2504:	80 95       	com	r24
    2506:	70 95       	com	r23
    2508:	61 95       	neg	r22
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	8f 4f       	sbci	r24, 0xFF	; 255
    250e:	9f 4f       	sbci	r25, 0xFF	; 255
    2510:	08 95       	ret

00002512 <__floatunsisf>:
    2512:	e8 94       	clt
    2514:	09 c0       	rjmp	.+18     	; 0x2528 <__floatsisf+0x12>

00002516 <__floatsisf>:
    2516:	97 fb       	bst	r25, 7
    2518:	3e f4       	brtc	.+14     	; 0x2528 <__floatsisf+0x12>
    251a:	90 95       	com	r25
    251c:	80 95       	com	r24
    251e:	70 95       	com	r23
    2520:	61 95       	neg	r22
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	8f 4f       	sbci	r24, 0xFF	; 255
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	99 23       	and	r25, r25
    252a:	a9 f0       	breq	.+42     	; 0x2556 <__floatsisf+0x40>
    252c:	f9 2f       	mov	r31, r25
    252e:	96 e9       	ldi	r25, 0x96	; 150
    2530:	bb 27       	eor	r27, r27
    2532:	93 95       	inc	r25
    2534:	f6 95       	lsr	r31
    2536:	87 95       	ror	r24
    2538:	77 95       	ror	r23
    253a:	67 95       	ror	r22
    253c:	b7 95       	ror	r27
    253e:	f1 11       	cpse	r31, r1
    2540:	f8 cf       	rjmp	.-16     	; 0x2532 <__floatsisf+0x1c>
    2542:	fa f4       	brpl	.+62     	; 0x2582 <__floatsisf+0x6c>
    2544:	bb 0f       	add	r27, r27
    2546:	11 f4       	brne	.+4      	; 0x254c <__floatsisf+0x36>
    2548:	60 ff       	sbrs	r22, 0
    254a:	1b c0       	rjmp	.+54     	; 0x2582 <__floatsisf+0x6c>
    254c:	6f 5f       	subi	r22, 0xFF	; 255
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	8f 4f       	sbci	r24, 0xFF	; 255
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	16 c0       	rjmp	.+44     	; 0x2582 <__floatsisf+0x6c>
    2556:	88 23       	and	r24, r24
    2558:	11 f0       	breq	.+4      	; 0x255e <__floatsisf+0x48>
    255a:	96 e9       	ldi	r25, 0x96	; 150
    255c:	11 c0       	rjmp	.+34     	; 0x2580 <__floatsisf+0x6a>
    255e:	77 23       	and	r23, r23
    2560:	21 f0       	breq	.+8      	; 0x256a <__floatsisf+0x54>
    2562:	9e e8       	ldi	r25, 0x8E	; 142
    2564:	87 2f       	mov	r24, r23
    2566:	76 2f       	mov	r23, r22
    2568:	05 c0       	rjmp	.+10     	; 0x2574 <__floatsisf+0x5e>
    256a:	66 23       	and	r22, r22
    256c:	71 f0       	breq	.+28     	; 0x258a <__floatsisf+0x74>
    256e:	96 e8       	ldi	r25, 0x86	; 134
    2570:	86 2f       	mov	r24, r22
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	2a f0       	brmi	.+10     	; 0x2582 <__floatsisf+0x6c>
    2578:	9a 95       	dec	r25
    257a:	66 0f       	add	r22, r22
    257c:	77 1f       	adc	r23, r23
    257e:	88 1f       	adc	r24, r24
    2580:	da f7       	brpl	.-10     	; 0x2578 <__floatsisf+0x62>
    2582:	88 0f       	add	r24, r24
    2584:	96 95       	lsr	r25
    2586:	87 95       	ror	r24
    2588:	97 f9       	bld	r25, 7
    258a:	08 95       	ret

0000258c <__fp_cmp>:
    258c:	99 0f       	add	r25, r25
    258e:	00 08       	sbc	r0, r0
    2590:	55 0f       	add	r21, r21
    2592:	aa 0b       	sbc	r26, r26
    2594:	e0 e8       	ldi	r30, 0x80	; 128
    2596:	fe ef       	ldi	r31, 0xFE	; 254
    2598:	16 16       	cp	r1, r22
    259a:	17 06       	cpc	r1, r23
    259c:	e8 07       	cpc	r30, r24
    259e:	f9 07       	cpc	r31, r25
    25a0:	c0 f0       	brcs	.+48     	; 0x25d2 <__fp_cmp+0x46>
    25a2:	12 16       	cp	r1, r18
    25a4:	13 06       	cpc	r1, r19
    25a6:	e4 07       	cpc	r30, r20
    25a8:	f5 07       	cpc	r31, r21
    25aa:	98 f0       	brcs	.+38     	; 0x25d2 <__fp_cmp+0x46>
    25ac:	62 1b       	sub	r22, r18
    25ae:	73 0b       	sbc	r23, r19
    25b0:	84 0b       	sbc	r24, r20
    25b2:	95 0b       	sbc	r25, r21
    25b4:	39 f4       	brne	.+14     	; 0x25c4 <__fp_cmp+0x38>
    25b6:	0a 26       	eor	r0, r26
    25b8:	61 f0       	breq	.+24     	; 0x25d2 <__fp_cmp+0x46>
    25ba:	23 2b       	or	r18, r19
    25bc:	24 2b       	or	r18, r20
    25be:	25 2b       	or	r18, r21
    25c0:	21 f4       	brne	.+8      	; 0x25ca <__fp_cmp+0x3e>
    25c2:	08 95       	ret
    25c4:	0a 26       	eor	r0, r26
    25c6:	09 f4       	brne	.+2      	; 0x25ca <__fp_cmp+0x3e>
    25c8:	a1 40       	sbci	r26, 0x01	; 1
    25ca:	a6 95       	lsr	r26
    25cc:	8f ef       	ldi	r24, 0xFF	; 255
    25ce:	81 1d       	adc	r24, r1
    25d0:	81 1d       	adc	r24, r1
    25d2:	08 95       	ret

000025d4 <__fp_inf>:
    25d4:	97 f9       	bld	r25, 7
    25d6:	9f 67       	ori	r25, 0x7F	; 127
    25d8:	80 e8       	ldi	r24, 0x80	; 128
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	08 95       	ret

000025e0 <__fp_nan>:
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	80 ec       	ldi	r24, 0xC0	; 192
    25e4:	08 95       	ret

000025e6 <__fp_pscA>:
    25e6:	00 24       	eor	r0, r0
    25e8:	0a 94       	dec	r0
    25ea:	16 16       	cp	r1, r22
    25ec:	17 06       	cpc	r1, r23
    25ee:	18 06       	cpc	r1, r24
    25f0:	09 06       	cpc	r0, r25
    25f2:	08 95       	ret

000025f4 <__fp_pscB>:
    25f4:	00 24       	eor	r0, r0
    25f6:	0a 94       	dec	r0
    25f8:	12 16       	cp	r1, r18
    25fa:	13 06       	cpc	r1, r19
    25fc:	14 06       	cpc	r1, r20
    25fe:	05 06       	cpc	r0, r21
    2600:	08 95       	ret

00002602 <__fp_round>:
    2602:	09 2e       	mov	r0, r25
    2604:	03 94       	inc	r0
    2606:	00 0c       	add	r0, r0
    2608:	11 f4       	brne	.+4      	; 0x260e <__fp_round+0xc>
    260a:	88 23       	and	r24, r24
    260c:	52 f0       	brmi	.+20     	; 0x2622 <__fp_round+0x20>
    260e:	bb 0f       	add	r27, r27
    2610:	40 f4       	brcc	.+16     	; 0x2622 <__fp_round+0x20>
    2612:	bf 2b       	or	r27, r31
    2614:	11 f4       	brne	.+4      	; 0x261a <__fp_round+0x18>
    2616:	60 ff       	sbrs	r22, 0
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <__fp_round+0x20>
    261a:	6f 5f       	subi	r22, 0xFF	; 255
    261c:	7f 4f       	sbci	r23, 0xFF	; 255
    261e:	8f 4f       	sbci	r24, 0xFF	; 255
    2620:	9f 4f       	sbci	r25, 0xFF	; 255
    2622:	08 95       	ret

00002624 <__fp_split3>:
    2624:	57 fd       	sbrc	r21, 7
    2626:	90 58       	subi	r25, 0x80	; 128
    2628:	44 0f       	add	r20, r20
    262a:	55 1f       	adc	r21, r21
    262c:	59 f0       	breq	.+22     	; 0x2644 <__fp_splitA+0x10>
    262e:	5f 3f       	cpi	r21, 0xFF	; 255
    2630:	71 f0       	breq	.+28     	; 0x264e <__fp_splitA+0x1a>
    2632:	47 95       	ror	r20

00002634 <__fp_splitA>:
    2634:	88 0f       	add	r24, r24
    2636:	97 fb       	bst	r25, 7
    2638:	99 1f       	adc	r25, r25
    263a:	61 f0       	breq	.+24     	; 0x2654 <__fp_splitA+0x20>
    263c:	9f 3f       	cpi	r25, 0xFF	; 255
    263e:	79 f0       	breq	.+30     	; 0x265e <__fp_splitA+0x2a>
    2640:	87 95       	ror	r24
    2642:	08 95       	ret
    2644:	12 16       	cp	r1, r18
    2646:	13 06       	cpc	r1, r19
    2648:	14 06       	cpc	r1, r20
    264a:	55 1f       	adc	r21, r21
    264c:	f2 cf       	rjmp	.-28     	; 0x2632 <__fp_split3+0xe>
    264e:	46 95       	lsr	r20
    2650:	f1 df       	rcall	.-30     	; 0x2634 <__fp_splitA>
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <__fp_splitA+0x30>
    2654:	16 16       	cp	r1, r22
    2656:	17 06       	cpc	r1, r23
    2658:	18 06       	cpc	r1, r24
    265a:	99 1f       	adc	r25, r25
    265c:	f1 cf       	rjmp	.-30     	; 0x2640 <__fp_splitA+0xc>
    265e:	86 95       	lsr	r24
    2660:	71 05       	cpc	r23, r1
    2662:	61 05       	cpc	r22, r1
    2664:	08 94       	sec
    2666:	08 95       	ret

00002668 <__fp_zero>:
    2668:	e8 94       	clt

0000266a <__fp_szero>:
    266a:	bb 27       	eor	r27, r27
    266c:	66 27       	eor	r22, r22
    266e:	77 27       	eor	r23, r23
    2670:	cb 01       	movw	r24, r22
    2672:	97 f9       	bld	r25, 7
    2674:	08 95       	ret

00002676 <__gesf2>:
    2676:	0e 94 c6 12 	call	0x258c	; 0x258c <__fp_cmp>
    267a:	08 f4       	brcc	.+2      	; 0x267e <__gesf2+0x8>
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	08 95       	ret

00002680 <__mulsf3>:
    2680:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__mulsf3x>
    2684:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    2688:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    268c:	38 f0       	brcs	.+14     	; 0x269c <__mulsf3+0x1c>
    268e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    2692:	20 f0       	brcs	.+8      	; 0x269c <__mulsf3+0x1c>
    2694:	95 23       	and	r25, r21
    2696:	11 f0       	breq	.+4      	; 0x269c <__mulsf3+0x1c>
    2698:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    269c:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>
    26a0:	11 24       	eor	r1, r1
    26a2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>

000026a6 <__mulsf3x>:
    26a6:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    26aa:	70 f3       	brcs	.-36     	; 0x2688 <__mulsf3+0x8>

000026ac <__mulsf3_pse>:
    26ac:	95 9f       	mul	r25, r21
    26ae:	c1 f3       	breq	.-16     	; 0x26a0 <__mulsf3+0x20>
    26b0:	95 0f       	add	r25, r21
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	55 1f       	adc	r21, r21
    26b6:	62 9f       	mul	r22, r18
    26b8:	f0 01       	movw	r30, r0
    26ba:	72 9f       	mul	r23, r18
    26bc:	bb 27       	eor	r27, r27
    26be:	f0 0d       	add	r31, r0
    26c0:	b1 1d       	adc	r27, r1
    26c2:	63 9f       	mul	r22, r19
    26c4:	aa 27       	eor	r26, r26
    26c6:	f0 0d       	add	r31, r0
    26c8:	b1 1d       	adc	r27, r1
    26ca:	aa 1f       	adc	r26, r26
    26cc:	64 9f       	mul	r22, r20
    26ce:	66 27       	eor	r22, r22
    26d0:	b0 0d       	add	r27, r0
    26d2:	a1 1d       	adc	r26, r1
    26d4:	66 1f       	adc	r22, r22
    26d6:	82 9f       	mul	r24, r18
    26d8:	22 27       	eor	r18, r18
    26da:	b0 0d       	add	r27, r0
    26dc:	a1 1d       	adc	r26, r1
    26de:	62 1f       	adc	r22, r18
    26e0:	73 9f       	mul	r23, r19
    26e2:	b0 0d       	add	r27, r0
    26e4:	a1 1d       	adc	r26, r1
    26e6:	62 1f       	adc	r22, r18
    26e8:	83 9f       	mul	r24, r19
    26ea:	a0 0d       	add	r26, r0
    26ec:	61 1d       	adc	r22, r1
    26ee:	22 1f       	adc	r18, r18
    26f0:	74 9f       	mul	r23, r20
    26f2:	33 27       	eor	r19, r19
    26f4:	a0 0d       	add	r26, r0
    26f6:	61 1d       	adc	r22, r1
    26f8:	23 1f       	adc	r18, r19
    26fa:	84 9f       	mul	r24, r20
    26fc:	60 0d       	add	r22, r0
    26fe:	21 1d       	adc	r18, r1
    2700:	82 2f       	mov	r24, r18
    2702:	76 2f       	mov	r23, r22
    2704:	6a 2f       	mov	r22, r26
    2706:	11 24       	eor	r1, r1
    2708:	9f 57       	subi	r25, 0x7F	; 127
    270a:	50 40       	sbci	r21, 0x00	; 0
    270c:	9a f0       	brmi	.+38     	; 0x2734 <__mulsf3_pse+0x88>
    270e:	f1 f0       	breq	.+60     	; 0x274c <__mulsf3_pse+0xa0>
    2710:	88 23       	and	r24, r24
    2712:	4a f0       	brmi	.+18     	; 0x2726 <__mulsf3_pse+0x7a>
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	bb 1f       	adc	r27, r27
    271a:	66 1f       	adc	r22, r22
    271c:	77 1f       	adc	r23, r23
    271e:	88 1f       	adc	r24, r24
    2720:	91 50       	subi	r25, 0x01	; 1
    2722:	50 40       	sbci	r21, 0x00	; 0
    2724:	a9 f7       	brne	.-22     	; 0x2710 <__mulsf3_pse+0x64>
    2726:	9e 3f       	cpi	r25, 0xFE	; 254
    2728:	51 05       	cpc	r21, r1
    272a:	80 f0       	brcs	.+32     	; 0x274c <__mulsf3_pse+0xa0>
    272c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    2730:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    2734:	5f 3f       	cpi	r21, 0xFF	; 255
    2736:	e4 f3       	brlt	.-8      	; 0x2730 <__mulsf3_pse+0x84>
    2738:	98 3e       	cpi	r25, 0xE8	; 232
    273a:	d4 f3       	brlt	.-12     	; 0x2730 <__mulsf3_pse+0x84>
    273c:	86 95       	lsr	r24
    273e:	77 95       	ror	r23
    2740:	67 95       	ror	r22
    2742:	b7 95       	ror	r27
    2744:	f7 95       	ror	r31
    2746:	e7 95       	ror	r30
    2748:	9f 5f       	subi	r25, 0xFF	; 255
    274a:	c1 f7       	brne	.-16     	; 0x273c <__mulsf3_pse+0x90>
    274c:	fe 2b       	or	r31, r30
    274e:	88 0f       	add	r24, r24
    2750:	91 1d       	adc	r25, r1
    2752:	96 95       	lsr	r25
    2754:	87 95       	ror	r24
    2756:	97 f9       	bld	r25, 7
    2758:	08 95       	ret

0000275a <pow>:
    275a:	fa 01       	movw	r30, r20
    275c:	ee 0f       	add	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	30 96       	adiw	r30, 0x00	; 0
    2762:	21 05       	cpc	r18, r1
    2764:	31 05       	cpc	r19, r1
    2766:	a1 f1       	breq	.+104    	; 0x27d0 <pow+0x76>
    2768:	61 15       	cp	r22, r1
    276a:	71 05       	cpc	r23, r1
    276c:	61 f4       	brne	.+24     	; 0x2786 <pow+0x2c>
    276e:	80 38       	cpi	r24, 0x80	; 128
    2770:	bf e3       	ldi	r27, 0x3F	; 63
    2772:	9b 07       	cpc	r25, r27
    2774:	49 f1       	breq	.+82     	; 0x27c8 <pow+0x6e>
    2776:	68 94       	set
    2778:	90 38       	cpi	r25, 0x80	; 128
    277a:	81 05       	cpc	r24, r1
    277c:	61 f0       	breq	.+24     	; 0x2796 <pow+0x3c>
    277e:	80 38       	cpi	r24, 0x80	; 128
    2780:	bf ef       	ldi	r27, 0xFF	; 255
    2782:	9b 07       	cpc	r25, r27
    2784:	41 f0       	breq	.+16     	; 0x2796 <pow+0x3c>
    2786:	99 23       	and	r25, r25
    2788:	4a f5       	brpl	.+82     	; 0x27dc <pow+0x82>
    278a:	ff 3f       	cpi	r31, 0xFF	; 255
    278c:	e1 05       	cpc	r30, r1
    278e:	31 05       	cpc	r19, r1
    2790:	21 05       	cpc	r18, r1
    2792:	19 f1       	breq	.+70     	; 0x27da <pow+0x80>
    2794:	e8 94       	clt
    2796:	08 94       	sec
    2798:	e7 95       	ror	r30
    279a:	d9 01       	movw	r26, r18
    279c:	aa 23       	and	r26, r26
    279e:	29 f4       	brne	.+10     	; 0x27aa <pow+0x50>
    27a0:	ab 2f       	mov	r26, r27
    27a2:	be 2f       	mov	r27, r30
    27a4:	f8 5f       	subi	r31, 0xF8	; 248
    27a6:	d0 f3       	brcs	.-12     	; 0x279c <pow+0x42>
    27a8:	10 c0       	rjmp	.+32     	; 0x27ca <pow+0x70>
    27aa:	ff 5f       	subi	r31, 0xFF	; 255
    27ac:	70 f4       	brcc	.+28     	; 0x27ca <pow+0x70>
    27ae:	a6 95       	lsr	r26
    27b0:	e0 f7       	brcc	.-8      	; 0x27aa <pow+0x50>
    27b2:	f7 39       	cpi	r31, 0x97	; 151
    27b4:	50 f0       	brcs	.+20     	; 0x27ca <pow+0x70>
    27b6:	19 f0       	breq	.+6      	; 0x27be <pow+0x64>
    27b8:	ff 3a       	cpi	r31, 0xAF	; 175
    27ba:	38 f4       	brcc	.+14     	; 0x27ca <pow+0x70>
    27bc:	9f 77       	andi	r25, 0x7F	; 127
    27be:	9f 93       	push	r25
    27c0:	0d d0       	rcall	.+26     	; 0x27dc <pow+0x82>
    27c2:	0f 90       	pop	r0
    27c4:	07 fc       	sbrc	r0, 7
    27c6:	90 58       	subi	r25, 0x80	; 128
    27c8:	08 95       	ret
    27ca:	46 f0       	brts	.+16     	; 0x27dc <pow+0x82>
    27cc:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	80 e8       	ldi	r24, 0x80	; 128
    27d6:	9f e3       	ldi	r25, 0x3F	; 63
    27d8:	08 95       	ret
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	9f 77       	andi	r25, 0x7F	; 127
    27de:	5f 93       	push	r21
    27e0:	4f 93       	push	r20
    27e2:	3f 93       	push	r19
    27e4:	2f 93       	push	r18
    27e6:	0e 94 03 15 	call	0x2a06	; 0x2a06 <log>
    27ea:	2f 91       	pop	r18
    27ec:	3f 91       	pop	r19
    27ee:	4f 91       	pop	r20
    27f0:	5f 91       	pop	r21
    27f2:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    27f6:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <exp>
    27fa:	19 f4       	brne	.+6      	; 0x2802 <pow+0xa8>
    27fc:	16 f4       	brtc	.+4      	; 0x2802 <pow+0xa8>
    27fe:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>
    2802:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__fp_mpack>

00002806 <sqrt>:
    2806:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    280a:	b8 f3       	brcs	.-18     	; 0x27fa <pow+0xa0>
    280c:	99 23       	and	r25, r25
    280e:	c9 f3       	breq	.-14     	; 0x2802 <pow+0xa8>
    2810:	b6 f3       	brts	.-20     	; 0x27fe <pow+0xa4>
    2812:	9f 57       	subi	r25, 0x7F	; 127
    2814:	55 0b       	sbc	r21, r21
    2816:	87 ff       	sbrs	r24, 7
    2818:	0e 94 8b 14 	call	0x2916	; 0x2916 <__fp_norm2>
    281c:	00 24       	eor	r0, r0
    281e:	a0 e6       	ldi	r26, 0x60	; 96
    2820:	40 ea       	ldi	r20, 0xA0	; 160
    2822:	90 01       	movw	r18, r0
    2824:	80 58       	subi	r24, 0x80	; 128
    2826:	56 95       	lsr	r21
    2828:	97 95       	ror	r25
    282a:	28 f4       	brcc	.+10     	; 0x2836 <sqrt+0x30>
    282c:	80 5c       	subi	r24, 0xC0	; 192
    282e:	66 0f       	add	r22, r22
    2830:	77 1f       	adc	r23, r23
    2832:	88 1f       	adc	r24, r24
    2834:	20 f0       	brcs	.+8      	; 0x283e <sqrt+0x38>
    2836:	26 17       	cp	r18, r22
    2838:	37 07       	cpc	r19, r23
    283a:	48 07       	cpc	r20, r24
    283c:	30 f4       	brcc	.+12     	; 0x284a <sqrt+0x44>
    283e:	62 1b       	sub	r22, r18
    2840:	73 0b       	sbc	r23, r19
    2842:	84 0b       	sbc	r24, r20
    2844:	20 29       	or	r18, r0
    2846:	31 29       	or	r19, r1
    2848:	4a 2b       	or	r20, r26
    284a:	a6 95       	lsr	r26
    284c:	17 94       	ror	r1
    284e:	07 94       	ror	r0
    2850:	20 25       	eor	r18, r0
    2852:	31 25       	eor	r19, r1
    2854:	4a 27       	eor	r20, r26
    2856:	58 f7       	brcc	.-42     	; 0x282e <sqrt+0x28>
    2858:	66 0f       	add	r22, r22
    285a:	77 1f       	adc	r23, r23
    285c:	88 1f       	adc	r24, r24
    285e:	20 f0       	brcs	.+8      	; 0x2868 <sqrt+0x62>
    2860:	26 17       	cp	r18, r22
    2862:	37 07       	cpc	r19, r23
    2864:	48 07       	cpc	r20, r24
    2866:	30 f4       	brcc	.+12     	; 0x2874 <sqrt+0x6e>
    2868:	62 0b       	sbc	r22, r18
    286a:	73 0b       	sbc	r23, r19
    286c:	84 0b       	sbc	r24, r20
    286e:	20 0d       	add	r18, r0
    2870:	31 1d       	adc	r19, r1
    2872:	41 1d       	adc	r20, r1
    2874:	a0 95       	com	r26
    2876:	81 f7       	brne	.-32     	; 0x2858 <sqrt+0x52>
    2878:	b9 01       	movw	r22, r18
    287a:	84 2f       	mov	r24, r20
    287c:	91 58       	subi	r25, 0x81	; 129
    287e:	88 0f       	add	r24, r24
    2880:	96 95       	lsr	r25
    2882:	87 95       	ror	r24
    2884:	08 95       	ret
    2886:	29 f4       	brne	.+10     	; 0x2892 <sqrt+0x8c>
    2888:	16 f0       	brts	.+4      	; 0x288e <sqrt+0x88>
    288a:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    288e:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_zero>
    2892:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>

00002896 <exp>:
    2896:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    289a:	a8 f3       	brcs	.-22     	; 0x2886 <sqrt+0x80>
    289c:	96 38       	cpi	r25, 0x86	; 134
    289e:	a0 f7       	brcc	.-24     	; 0x2888 <sqrt+0x82>
    28a0:	07 f8       	bld	r0, 7
    28a2:	0f 92       	push	r0
    28a4:	e8 94       	clt
    28a6:	2b e3       	ldi	r18, 0x3B	; 59
    28a8:	3a ea       	ldi	r19, 0xAA	; 170
    28aa:	48 eb       	ldi	r20, 0xB8	; 184
    28ac:	5f e7       	ldi	r21, 0x7F	; 127
    28ae:	0e 94 56 13 	call	0x26ac	; 0x26ac <__mulsf3_pse>
    28b2:	0f 92       	push	r0
    28b4:	0f 92       	push	r0
    28b6:	0f 92       	push	r0
    28b8:	4d b7       	in	r20, 0x3d	; 61
    28ba:	5e b7       	in	r21, 0x3e	; 62
    28bc:	0f 92       	push	r0
    28be:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <modf>
    28c2:	ec e1       	ldi	r30, 0x1C	; 28
    28c4:	f2 e0       	ldi	r31, 0x02	; 2
    28c6:	0e 94 92 14 	call	0x2924	; 0x2924 <__fp_powser>
    28ca:	4f 91       	pop	r20
    28cc:	5f 91       	pop	r21
    28ce:	ef 91       	pop	r30
    28d0:	ff 91       	pop	r31
    28d2:	e5 95       	asr	r30
    28d4:	ee 1f       	adc	r30, r30
    28d6:	ff 1f       	adc	r31, r31
    28d8:	49 f0       	breq	.+18     	; 0x28ec <exp+0x56>
    28da:	fe 57       	subi	r31, 0x7E	; 126
    28dc:	e0 68       	ori	r30, 0x80	; 128
    28de:	44 27       	eor	r20, r20
    28e0:	ee 0f       	add	r30, r30
    28e2:	44 1f       	adc	r20, r20
    28e4:	fa 95       	dec	r31
    28e6:	e1 f7       	brne	.-8      	; 0x28e0 <exp+0x4a>
    28e8:	41 95       	neg	r20
    28ea:	55 0b       	sbc	r21, r21
    28ec:	0e 94 c5 14 	call	0x298a	; 0x298a <ldexp>
    28f0:	0f 90       	pop	r0
    28f2:	07 fe       	sbrs	r0, 7
    28f4:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <inverse>
    28f8:	08 95       	ret

000028fa <__fp_mpack>:
    28fa:	9f 3f       	cpi	r25, 0xFF	; 255
    28fc:	31 f0       	breq	.+12     	; 0x290a <__fp_mpack_finite+0xc>

000028fe <__fp_mpack_finite>:
    28fe:	91 50       	subi	r25, 0x01	; 1
    2900:	20 f4       	brcc	.+8      	; 0x290a <__fp_mpack_finite+0xc>
    2902:	87 95       	ror	r24
    2904:	77 95       	ror	r23
    2906:	67 95       	ror	r22
    2908:	b7 95       	ror	r27
    290a:	88 0f       	add	r24, r24
    290c:	91 1d       	adc	r25, r1
    290e:	96 95       	lsr	r25
    2910:	87 95       	ror	r24
    2912:	97 f9       	bld	r25, 7
    2914:	08 95       	ret

00002916 <__fp_norm2>:
    2916:	91 50       	subi	r25, 0x01	; 1
    2918:	50 40       	sbci	r21, 0x00	; 0
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	88 1f       	adc	r24, r24
    2920:	d2 f7       	brpl	.-12     	; 0x2916 <__fp_norm2>
    2922:	08 95       	ret

00002924 <__fp_powser>:
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	1f 93       	push	r17
    292a:	0f 93       	push	r16
    292c:	ff 92       	push	r15
    292e:	ef 92       	push	r14
    2930:	df 92       	push	r13
    2932:	7b 01       	movw	r14, r22
    2934:	8c 01       	movw	r16, r24
    2936:	68 94       	set
    2938:	06 c0       	rjmp	.+12     	; 0x2946 <__fp_powser+0x22>
    293a:	da 2e       	mov	r13, r26
    293c:	ef 01       	movw	r28, r30
    293e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__mulsf3x>
    2942:	fe 01       	movw	r30, r28
    2944:	e8 94       	clt
    2946:	a5 91       	lpm	r26, Z+
    2948:	25 91       	lpm	r18, Z+
    294a:	35 91       	lpm	r19, Z+
    294c:	45 91       	lpm	r20, Z+
    294e:	55 91       	lpm	r21, Z+
    2950:	a6 f3       	brts	.-24     	; 0x293a <__fp_powser+0x16>
    2952:	ef 01       	movw	r28, r30
    2954:	0e 94 87 11 	call	0x230e	; 0x230e <__addsf3x>
    2958:	fe 01       	movw	r30, r28
    295a:	97 01       	movw	r18, r14
    295c:	a8 01       	movw	r20, r16
    295e:	da 94       	dec	r13
    2960:	69 f7       	brne	.-38     	; 0x293c <__fp_powser+0x18>
    2962:	df 90       	pop	r13
    2964:	ef 90       	pop	r14
    2966:	ff 90       	pop	r15
    2968:	0f 91       	pop	r16
    296a:	1f 91       	pop	r17
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <inverse>:
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	80 e8       	ldi	r24, 0x80	; 128
    297c:	9f e3       	ldi	r25, 0x3F	; 63
    297e:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__divsf3>
    2982:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    2986:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__fp_mpack>

0000298a <ldexp>:
    298a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    298e:	d8 f3       	brcs	.-10     	; 0x2986 <inverse+0x14>
    2990:	99 23       	and	r25, r25
    2992:	c9 f3       	breq	.-14     	; 0x2986 <inverse+0x14>
    2994:	94 0f       	add	r25, r20
    2996:	51 1d       	adc	r21, r1
    2998:	a3 f3       	brvs	.-24     	; 0x2982 <inverse+0x10>
    299a:	91 50       	subi	r25, 0x01	; 1
    299c:	50 40       	sbci	r21, 0x00	; 0
    299e:	94 f0       	brlt	.+36     	; 0x29c4 <ldexp+0x3a>
    29a0:	59 f0       	breq	.+22     	; 0x29b8 <ldexp+0x2e>
    29a2:	88 23       	and	r24, r24
    29a4:	32 f0       	brmi	.+12     	; 0x29b2 <ldexp+0x28>
    29a6:	66 0f       	add	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	91 50       	subi	r25, 0x01	; 1
    29ae:	50 40       	sbci	r21, 0x00	; 0
    29b0:	c1 f7       	brne	.-16     	; 0x29a2 <ldexp+0x18>
    29b2:	9e 3f       	cpi	r25, 0xFE	; 254
    29b4:	51 05       	cpc	r21, r1
    29b6:	2c f7       	brge	.-54     	; 0x2982 <inverse+0x10>
    29b8:	88 0f       	add	r24, r24
    29ba:	91 1d       	adc	r25, r1
    29bc:	96 95       	lsr	r25
    29be:	87 95       	ror	r24
    29c0:	97 f9       	bld	r25, 7
    29c2:	08 95       	ret
    29c4:	5f 3f       	cpi	r21, 0xFF	; 255
    29c6:	ac f0       	brlt	.+42     	; 0x29f2 <ldexp+0x68>
    29c8:	98 3e       	cpi	r25, 0xE8	; 232
    29ca:	9c f0       	brlt	.+38     	; 0x29f2 <ldexp+0x68>
    29cc:	bb 27       	eor	r27, r27
    29ce:	86 95       	lsr	r24
    29d0:	77 95       	ror	r23
    29d2:	67 95       	ror	r22
    29d4:	b7 95       	ror	r27
    29d6:	08 f4       	brcc	.+2      	; 0x29da <ldexp+0x50>
    29d8:	b1 60       	ori	r27, 0x01	; 1
    29da:	93 95       	inc	r25
    29dc:	c1 f7       	brne	.-16     	; 0x29ce <ldexp+0x44>
    29de:	bb 0f       	add	r27, r27
    29e0:	58 f7       	brcc	.-42     	; 0x29b8 <ldexp+0x2e>
    29e2:	11 f4       	brne	.+4      	; 0x29e8 <ldexp+0x5e>
    29e4:	60 ff       	sbrs	r22, 0
    29e6:	e8 cf       	rjmp	.-48     	; 0x29b8 <ldexp+0x2e>
    29e8:	6f 5f       	subi	r22, 0xFF	; 255
    29ea:	7f 4f       	sbci	r23, 0xFF	; 255
    29ec:	8f 4f       	sbci	r24, 0xFF	; 255
    29ee:	9f 4f       	sbci	r25, 0xFF	; 255
    29f0:	e3 cf       	rjmp	.-58     	; 0x29b8 <ldexp+0x2e>
    29f2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    29f6:	16 f0       	brts	.+4      	; 0x29fc <ldexp+0x72>
    29f8:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__fp_mpack>
    29fc:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>
    2a00:	68 94       	set
    2a02:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>

00002a06 <log>:
    2a06:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    2a0a:	a8 f3       	brcs	.-22     	; 0x29f6 <ldexp+0x6c>
    2a0c:	99 23       	and	r25, r25
    2a0e:	c1 f3       	breq	.-16     	; 0x2a00 <ldexp+0x76>
    2a10:	ae f3       	brts	.-22     	; 0x29fc <ldexp+0x72>
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	1f 93       	push	r17
    2a18:	0f 93       	push	r16
    2a1a:	ff 92       	push	r15
    2a1c:	c9 2f       	mov	r28, r25
    2a1e:	dd 27       	eor	r29, r29
    2a20:	88 23       	and	r24, r24
    2a22:	2a f0       	brmi	.+10     	; 0x2a2e <log+0x28>
    2a24:	21 97       	sbiw	r28, 0x01	; 1
    2a26:	66 0f       	add	r22, r22
    2a28:	77 1f       	adc	r23, r23
    2a2a:	88 1f       	adc	r24, r24
    2a2c:	da f7       	brpl	.-10     	; 0x2a24 <log+0x1e>
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	5f eb       	ldi	r21, 0xBF	; 191
    2a36:	9f e3       	ldi	r25, 0x3F	; 63
    2a38:	88 39       	cpi	r24, 0x98	; 152
    2a3a:	20 f0       	brcs	.+8      	; 0x2a44 <log+0x3e>
    2a3c:	80 3e       	cpi	r24, 0xE0	; 224
    2a3e:	38 f0       	brcs	.+14     	; 0x2a4e <log+0x48>
    2a40:	21 96       	adiw	r28, 0x01	; 1
    2a42:	8f 77       	andi	r24, 0x7F	; 127
    2a44:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    2a48:	e4 e4       	ldi	r30, 0x44	; 68
    2a4a:	f2 e0       	ldi	r31, 0x02	; 2
    2a4c:	04 c0       	rjmp	.+8      	; 0x2a56 <log+0x50>
    2a4e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__addsf3>
    2a52:	e1 e7       	ldi	r30, 0x71	; 113
    2a54:	f2 e0       	ldi	r31, 0x02	; 2
    2a56:	0e 94 92 14 	call	0x2924	; 0x2924 <__fp_powser>
    2a5a:	8b 01       	movw	r16, r22
    2a5c:	be 01       	movw	r22, r28
    2a5e:	ec 01       	movw	r28, r24
    2a60:	fb 2e       	mov	r15, r27
    2a62:	6f 57       	subi	r22, 0x7F	; 127
    2a64:	71 09       	sbc	r23, r1
    2a66:	75 95       	asr	r23
    2a68:	77 1f       	adc	r23, r23
    2a6a:	88 0b       	sbc	r24, r24
    2a6c:	99 0b       	sbc	r25, r25
    2a6e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatsisf>
    2a72:	28 e1       	ldi	r18, 0x18	; 24
    2a74:	32 e7       	ldi	r19, 0x72	; 114
    2a76:	41 e3       	ldi	r20, 0x31	; 49
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__mulsf3x>
    2a7e:	af 2d       	mov	r26, r15
    2a80:	98 01       	movw	r18, r16
    2a82:	ae 01       	movw	r20, r28
    2a84:	ff 90       	pop	r15
    2a86:	0f 91       	pop	r16
    2a88:	1f 91       	pop	r17
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	0e 94 87 11 	call	0x230e	; 0x230e <__addsf3x>
    2a92:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>

00002a96 <modf>:
    2a96:	fa 01       	movw	r30, r20
    2a98:	dc 01       	movw	r26, r24
    2a9a:	aa 0f       	add	r26, r26
    2a9c:	bb 1f       	adc	r27, r27
    2a9e:	9b 01       	movw	r18, r22
    2aa0:	ac 01       	movw	r20, r24
    2aa2:	bf 57       	subi	r27, 0x7F	; 127
    2aa4:	28 f4       	brcc	.+10     	; 0x2ab0 <modf+0x1a>
    2aa6:	22 27       	eor	r18, r18
    2aa8:	33 27       	eor	r19, r19
    2aaa:	44 27       	eor	r20, r20
    2aac:	50 78       	andi	r21, 0x80	; 128
    2aae:	20 c0       	rjmp	.+64     	; 0x2af0 <modf+0x5a>
    2ab0:	b7 51       	subi	r27, 0x17	; 23
    2ab2:	90 f4       	brcc	.+36     	; 0x2ad8 <modf+0x42>
    2ab4:	ab 2f       	mov	r26, r27
    2ab6:	00 24       	eor	r0, r0
    2ab8:	46 95       	lsr	r20
    2aba:	37 95       	ror	r19
    2abc:	27 95       	ror	r18
    2abe:	01 1c       	adc	r0, r1
    2ac0:	a3 95       	inc	r26
    2ac2:	d2 f3       	brmi	.-12     	; 0x2ab8 <modf+0x22>
    2ac4:	00 20       	and	r0, r0
    2ac6:	71 f0       	breq	.+28     	; 0x2ae4 <modf+0x4e>
    2ac8:	22 0f       	add	r18, r18
    2aca:	33 1f       	adc	r19, r19
    2acc:	44 1f       	adc	r20, r20
    2ace:	b3 95       	inc	r27
    2ad0:	da f3       	brmi	.-10     	; 0x2ac8 <modf+0x32>
    2ad2:	0e d0       	rcall	.+28     	; 0x2af0 <modf+0x5a>
    2ad4:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__subsf3>
    2ad8:	61 30       	cpi	r22, 0x01	; 1
    2ada:	71 05       	cpc	r23, r1
    2adc:	a0 e8       	ldi	r26, 0x80	; 128
    2ade:	8a 07       	cpc	r24, r26
    2ae0:	b9 46       	sbci	r27, 0x69	; 105
    2ae2:	30 f4       	brcc	.+12     	; 0x2af0 <modf+0x5a>
    2ae4:	9b 01       	movw	r18, r22
    2ae6:	ac 01       	movw	r20, r24
    2ae8:	66 27       	eor	r22, r22
    2aea:	77 27       	eor	r23, r23
    2aec:	88 27       	eor	r24, r24
    2aee:	90 78       	andi	r25, 0x80	; 128
    2af0:	30 96       	adiw	r30, 0x00	; 0
    2af2:	21 f0       	breq	.+8      	; 0x2afc <modf+0x66>
    2af4:	20 83       	st	Z, r18
    2af6:	31 83       	std	Z+1, r19	; 0x01
    2af8:	42 83       	std	Z+2, r20	; 0x02
    2afa:	53 83       	std	Z+3, r21	; 0x03
    2afc:	08 95       	ret

00002afe <vfprintf>:
    2afe:	2f 92       	push	r2
    2b00:	3f 92       	push	r3
    2b02:	4f 92       	push	r4
    2b04:	5f 92       	push	r5
    2b06:	6f 92       	push	r6
    2b08:	7f 92       	push	r7
    2b0a:	8f 92       	push	r8
    2b0c:	9f 92       	push	r9
    2b0e:	af 92       	push	r10
    2b10:	bf 92       	push	r11
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	60 97       	sbiw	r28, 0x10	; 16
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	7c 01       	movw	r14, r24
    2b2e:	1b 01       	movw	r2, r22
    2b30:	6a 01       	movw	r12, r20
    2b32:	fc 01       	movw	r30, r24
    2b34:	16 82       	std	Z+6, r1	; 0x06
    2b36:	17 82       	std	Z+7, r1	; 0x07
    2b38:	83 81       	ldd	r24, Z+3	; 0x03
    2b3a:	81 ff       	sbrs	r24, 1
    2b3c:	44 c3       	rjmp	.+1672   	; 0x31c6 <vfprintf+0x6c8>
    2b3e:	9e 01       	movw	r18, r28
    2b40:	2f 5f       	subi	r18, 0xFF	; 255
    2b42:	3f 4f       	sbci	r19, 0xFF	; 255
    2b44:	39 01       	movw	r6, r18
    2b46:	f7 01       	movw	r30, r14
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	f1 01       	movw	r30, r2
    2b4c:	93 fd       	sbrc	r25, 3
    2b4e:	85 91       	lpm	r24, Z+
    2b50:	93 ff       	sbrs	r25, 3
    2b52:	81 91       	ld	r24, Z+
    2b54:	1f 01       	movw	r2, r30
    2b56:	88 23       	and	r24, r24
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <vfprintf+0x5e>
    2b5a:	31 c3       	rjmp	.+1634   	; 0x31be <vfprintf+0x6c0>
    2b5c:	85 32       	cpi	r24, 0x25	; 37
    2b5e:	39 f4       	brne	.+14     	; 0x2b6e <vfprintf+0x70>
    2b60:	93 fd       	sbrc	r25, 3
    2b62:	85 91       	lpm	r24, Z+
    2b64:	93 ff       	sbrs	r25, 3
    2b66:	81 91       	ld	r24, Z+
    2b68:	1f 01       	movw	r2, r30
    2b6a:	85 32       	cpi	r24, 0x25	; 37
    2b6c:	39 f4       	brne	.+14     	; 0x2b7c <vfprintf+0x7e>
    2b6e:	b7 01       	movw	r22, r14
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2b76:	56 01       	movw	r10, r12
    2b78:	65 01       	movw	r12, r10
    2b7a:	e5 cf       	rjmp	.-54     	; 0x2b46 <vfprintf+0x48>
    2b7c:	10 e0       	ldi	r17, 0x00	; 0
    2b7e:	51 2c       	mov	r5, r1
    2b80:	91 2c       	mov	r9, r1
    2b82:	ff e1       	ldi	r31, 0x1F	; 31
    2b84:	f9 15       	cp	r31, r9
    2b86:	d8 f0       	brcs	.+54     	; 0x2bbe <vfprintf+0xc0>
    2b88:	8b 32       	cpi	r24, 0x2B	; 43
    2b8a:	79 f0       	breq	.+30     	; 0x2baa <vfprintf+0xac>
    2b8c:	38 f4       	brcc	.+14     	; 0x2b9c <vfprintf+0x9e>
    2b8e:	80 32       	cpi	r24, 0x20	; 32
    2b90:	79 f0       	breq	.+30     	; 0x2bb0 <vfprintf+0xb2>
    2b92:	83 32       	cpi	r24, 0x23	; 35
    2b94:	a1 f4       	brne	.+40     	; 0x2bbe <vfprintf+0xc0>
    2b96:	f9 2d       	mov	r31, r9
    2b98:	f0 61       	ori	r31, 0x10	; 16
    2b9a:	2e c0       	rjmp	.+92     	; 0x2bf8 <vfprintf+0xfa>
    2b9c:	8d 32       	cpi	r24, 0x2D	; 45
    2b9e:	61 f0       	breq	.+24     	; 0x2bb8 <vfprintf+0xba>
    2ba0:	80 33       	cpi	r24, 0x30	; 48
    2ba2:	69 f4       	brne	.+26     	; 0x2bbe <vfprintf+0xc0>
    2ba4:	29 2d       	mov	r18, r9
    2ba6:	21 60       	ori	r18, 0x01	; 1
    2ba8:	2d c0       	rjmp	.+90     	; 0x2c04 <vfprintf+0x106>
    2baa:	39 2d       	mov	r19, r9
    2bac:	32 60       	ori	r19, 0x02	; 2
    2bae:	93 2e       	mov	r9, r19
    2bb0:	89 2d       	mov	r24, r9
    2bb2:	84 60       	ori	r24, 0x04	; 4
    2bb4:	98 2e       	mov	r9, r24
    2bb6:	2a c0       	rjmp	.+84     	; 0x2c0c <vfprintf+0x10e>
    2bb8:	e9 2d       	mov	r30, r9
    2bba:	e8 60       	ori	r30, 0x08	; 8
    2bbc:	15 c0       	rjmp	.+42     	; 0x2be8 <vfprintf+0xea>
    2bbe:	97 fc       	sbrc	r9, 7
    2bc0:	2d c0       	rjmp	.+90     	; 0x2c1c <vfprintf+0x11e>
    2bc2:	20 ed       	ldi	r18, 0xD0	; 208
    2bc4:	28 0f       	add	r18, r24
    2bc6:	2a 30       	cpi	r18, 0x0A	; 10
    2bc8:	88 f4       	brcc	.+34     	; 0x2bec <vfprintf+0xee>
    2bca:	96 fe       	sbrs	r9, 6
    2bcc:	06 c0       	rjmp	.+12     	; 0x2bda <vfprintf+0xdc>
    2bce:	3a e0       	ldi	r19, 0x0A	; 10
    2bd0:	13 9f       	mul	r17, r19
    2bd2:	20 0d       	add	r18, r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	12 2f       	mov	r17, r18
    2bd8:	19 c0       	rjmp	.+50     	; 0x2c0c <vfprintf+0x10e>
    2bda:	8a e0       	ldi	r24, 0x0A	; 10
    2bdc:	58 9e       	mul	r5, r24
    2bde:	20 0d       	add	r18, r0
    2be0:	11 24       	eor	r1, r1
    2be2:	52 2e       	mov	r5, r18
    2be4:	e9 2d       	mov	r30, r9
    2be6:	e0 62       	ori	r30, 0x20	; 32
    2be8:	9e 2e       	mov	r9, r30
    2bea:	10 c0       	rjmp	.+32     	; 0x2c0c <vfprintf+0x10e>
    2bec:	8e 32       	cpi	r24, 0x2E	; 46
    2bee:	31 f4       	brne	.+12     	; 0x2bfc <vfprintf+0xfe>
    2bf0:	96 fc       	sbrc	r9, 6
    2bf2:	e5 c2       	rjmp	.+1482   	; 0x31be <vfprintf+0x6c0>
    2bf4:	f9 2d       	mov	r31, r9
    2bf6:	f0 64       	ori	r31, 0x40	; 64
    2bf8:	9f 2e       	mov	r9, r31
    2bfa:	08 c0       	rjmp	.+16     	; 0x2c0c <vfprintf+0x10e>
    2bfc:	8c 36       	cpi	r24, 0x6C	; 108
    2bfe:	21 f4       	brne	.+8      	; 0x2c08 <vfprintf+0x10a>
    2c00:	29 2d       	mov	r18, r9
    2c02:	20 68       	ori	r18, 0x80	; 128
    2c04:	92 2e       	mov	r9, r18
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <vfprintf+0x10e>
    2c08:	88 36       	cpi	r24, 0x68	; 104
    2c0a:	41 f4       	brne	.+16     	; 0x2c1c <vfprintf+0x11e>
    2c0c:	f1 01       	movw	r30, r2
    2c0e:	93 fd       	sbrc	r25, 3
    2c10:	85 91       	lpm	r24, Z+
    2c12:	93 ff       	sbrs	r25, 3
    2c14:	81 91       	ld	r24, Z+
    2c16:	1f 01       	movw	r2, r30
    2c18:	81 11       	cpse	r24, r1
    2c1a:	b3 cf       	rjmp	.-154    	; 0x2b82 <vfprintf+0x84>
    2c1c:	9b eb       	ldi	r25, 0xBB	; 187
    2c1e:	98 0f       	add	r25, r24
    2c20:	93 30       	cpi	r25, 0x03	; 3
    2c22:	20 f4       	brcc	.+8      	; 0x2c2c <vfprintf+0x12e>
    2c24:	99 2d       	mov	r25, r9
    2c26:	90 61       	ori	r25, 0x10	; 16
    2c28:	80 5e       	subi	r24, 0xE0	; 224
    2c2a:	07 c0       	rjmp	.+14     	; 0x2c3a <vfprintf+0x13c>
    2c2c:	9b e9       	ldi	r25, 0x9B	; 155
    2c2e:	98 0f       	add	r25, r24
    2c30:	93 30       	cpi	r25, 0x03	; 3
    2c32:	08 f0       	brcs	.+2      	; 0x2c36 <vfprintf+0x138>
    2c34:	66 c1       	rjmp	.+716    	; 0x2f02 <vfprintf+0x404>
    2c36:	99 2d       	mov	r25, r9
    2c38:	9f 7e       	andi	r25, 0xEF	; 239
    2c3a:	96 ff       	sbrs	r25, 6
    2c3c:	16 e0       	ldi	r17, 0x06	; 6
    2c3e:	9f 73       	andi	r25, 0x3F	; 63
    2c40:	99 2e       	mov	r9, r25
    2c42:	85 36       	cpi	r24, 0x65	; 101
    2c44:	19 f4       	brne	.+6      	; 0x2c4c <vfprintf+0x14e>
    2c46:	90 64       	ori	r25, 0x40	; 64
    2c48:	99 2e       	mov	r9, r25
    2c4a:	08 c0       	rjmp	.+16     	; 0x2c5c <vfprintf+0x15e>
    2c4c:	86 36       	cpi	r24, 0x66	; 102
    2c4e:	21 f4       	brne	.+8      	; 0x2c58 <vfprintf+0x15a>
    2c50:	39 2f       	mov	r19, r25
    2c52:	30 68       	ori	r19, 0x80	; 128
    2c54:	93 2e       	mov	r9, r19
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <vfprintf+0x15e>
    2c58:	11 11       	cpse	r17, r1
    2c5a:	11 50       	subi	r17, 0x01	; 1
    2c5c:	97 fe       	sbrs	r9, 7
    2c5e:	07 c0       	rjmp	.+14     	; 0x2c6e <vfprintf+0x170>
    2c60:	1c 33       	cpi	r17, 0x3C	; 60
    2c62:	50 f4       	brcc	.+20     	; 0x2c78 <vfprintf+0x17a>
    2c64:	44 24       	eor	r4, r4
    2c66:	43 94       	inc	r4
    2c68:	41 0e       	add	r4, r17
    2c6a:	27 e0       	ldi	r18, 0x07	; 7
    2c6c:	0b c0       	rjmp	.+22     	; 0x2c84 <vfprintf+0x186>
    2c6e:	18 30       	cpi	r17, 0x08	; 8
    2c70:	38 f0       	brcs	.+14     	; 0x2c80 <vfprintf+0x182>
    2c72:	27 e0       	ldi	r18, 0x07	; 7
    2c74:	17 e0       	ldi	r17, 0x07	; 7
    2c76:	05 c0       	rjmp	.+10     	; 0x2c82 <vfprintf+0x184>
    2c78:	27 e0       	ldi	r18, 0x07	; 7
    2c7a:	9c e3       	ldi	r25, 0x3C	; 60
    2c7c:	49 2e       	mov	r4, r25
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <vfprintf+0x186>
    2c80:	21 2f       	mov	r18, r17
    2c82:	41 2c       	mov	r4, r1
    2c84:	56 01       	movw	r10, r12
    2c86:	84 e0       	ldi	r24, 0x04	; 4
    2c88:	a8 0e       	add	r10, r24
    2c8a:	b1 1c       	adc	r11, r1
    2c8c:	f6 01       	movw	r30, r12
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	04 2d       	mov	r16, r4
    2c98:	a3 01       	movw	r20, r6
    2c9a:	0e 94 84 1a 	call	0x3508	; 0x3508 <__ftoa_engine>
    2c9e:	6c 01       	movw	r12, r24
    2ca0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ca2:	fc 87       	std	Y+12, r31	; 0x0c
    2ca4:	f0 ff       	sbrs	r31, 0
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <vfprintf+0x1ae>
    2ca8:	f3 ff       	sbrs	r31, 3
    2caa:	06 c0       	rjmp	.+12     	; 0x2cb8 <vfprintf+0x1ba>
    2cac:	91 fc       	sbrc	r9, 1
    2cae:	06 c0       	rjmp	.+12     	; 0x2cbc <vfprintf+0x1be>
    2cb0:	92 fe       	sbrs	r9, 2
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <vfprintf+0x1c2>
    2cb4:	00 e2       	ldi	r16, 0x20	; 32
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <vfprintf+0x1c4>
    2cb8:	0d e2       	ldi	r16, 0x2D	; 45
    2cba:	03 c0       	rjmp	.+6      	; 0x2cc2 <vfprintf+0x1c4>
    2cbc:	0b e2       	ldi	r16, 0x2B	; 43
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <vfprintf+0x1c4>
    2cc0:	00 e0       	ldi	r16, 0x00	; 0
    2cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc4:	8c 70       	andi	r24, 0x0C	; 12
    2cc6:	19 f0       	breq	.+6      	; 0x2cce <vfprintf+0x1d0>
    2cc8:	01 11       	cpse	r16, r1
    2cca:	5a c2       	rjmp	.+1204   	; 0x3180 <vfprintf+0x682>
    2ccc:	9b c2       	rjmp	.+1334   	; 0x3204 <vfprintf+0x706>
    2cce:	97 fe       	sbrs	r9, 7
    2cd0:	10 c0       	rjmp	.+32     	; 0x2cf2 <vfprintf+0x1f4>
    2cd2:	4c 0c       	add	r4, r12
    2cd4:	fc 85       	ldd	r31, Y+12	; 0x0c
    2cd6:	f4 ff       	sbrs	r31, 4
    2cd8:	04 c0       	rjmp	.+8      	; 0x2ce2 <vfprintf+0x1e4>
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	81 33       	cpi	r24, 0x31	; 49
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <vfprintf+0x1e4>
    2ce0:	4a 94       	dec	r4
    2ce2:	14 14       	cp	r1, r4
    2ce4:	74 f5       	brge	.+92     	; 0x2d42 <vfprintf+0x244>
    2ce6:	28 e0       	ldi	r18, 0x08	; 8
    2ce8:	24 15       	cp	r18, r4
    2cea:	78 f5       	brcc	.+94     	; 0x2d4a <vfprintf+0x24c>
    2cec:	88 e0       	ldi	r24, 0x08	; 8
    2cee:	48 2e       	mov	r4, r24
    2cf0:	2c c0       	rjmp	.+88     	; 0x2d4a <vfprintf+0x24c>
    2cf2:	96 fc       	sbrc	r9, 6
    2cf4:	2a c0       	rjmp	.+84     	; 0x2d4a <vfprintf+0x24c>
    2cf6:	81 2f       	mov	r24, r17
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	8c 15       	cp	r24, r12
    2cfc:	9d 05       	cpc	r25, r13
    2cfe:	9c f0       	brlt	.+38     	; 0x2d26 <vfprintf+0x228>
    2d00:	3c ef       	ldi	r19, 0xFC	; 252
    2d02:	c3 16       	cp	r12, r19
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	d3 06       	cpc	r13, r19
    2d08:	74 f0       	brlt	.+28     	; 0x2d26 <vfprintf+0x228>
    2d0a:	89 2d       	mov	r24, r9
    2d0c:	80 68       	ori	r24, 0x80	; 128
    2d0e:	98 2e       	mov	r9, r24
    2d10:	0a c0       	rjmp	.+20     	; 0x2d26 <vfprintf+0x228>
    2d12:	e2 e0       	ldi	r30, 0x02	; 2
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	ec 0f       	add	r30, r28
    2d18:	fd 1f       	adc	r31, r29
    2d1a:	e1 0f       	add	r30, r17
    2d1c:	f1 1d       	adc	r31, r1
    2d1e:	80 81       	ld	r24, Z
    2d20:	80 33       	cpi	r24, 0x30	; 48
    2d22:	19 f4       	brne	.+6      	; 0x2d2a <vfprintf+0x22c>
    2d24:	11 50       	subi	r17, 0x01	; 1
    2d26:	11 11       	cpse	r17, r1
    2d28:	f4 cf       	rjmp	.-24     	; 0x2d12 <vfprintf+0x214>
    2d2a:	97 fe       	sbrs	r9, 7
    2d2c:	0e c0       	rjmp	.+28     	; 0x2d4a <vfprintf+0x24c>
    2d2e:	44 24       	eor	r4, r4
    2d30:	43 94       	inc	r4
    2d32:	41 0e       	add	r4, r17
    2d34:	81 2f       	mov	r24, r17
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	c8 16       	cp	r12, r24
    2d3a:	d9 06       	cpc	r13, r25
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <vfprintf+0x24a>
    2d3e:	1c 19       	sub	r17, r12
    2d40:	04 c0       	rjmp	.+8      	; 0x2d4a <vfprintf+0x24c>
    2d42:	44 24       	eor	r4, r4
    2d44:	43 94       	inc	r4
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <vfprintf+0x24c>
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    2d4a:	97 fe       	sbrs	r9, 7
    2d4c:	06 c0       	rjmp	.+12     	; 0x2d5a <vfprintf+0x25c>
    2d4e:	1c 14       	cp	r1, r12
    2d50:	1d 04       	cpc	r1, r13
    2d52:	34 f4       	brge	.+12     	; 0x2d60 <vfprintf+0x262>
    2d54:	c6 01       	movw	r24, r12
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	05 c0       	rjmp	.+10     	; 0x2d64 <vfprintf+0x266>
    2d5a:	85 e0       	ldi	r24, 0x05	; 5
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <vfprintf+0x266>
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	01 11       	cpse	r16, r1
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	11 23       	and	r17, r17
    2d6a:	31 f0       	breq	.+12     	; 0x2d78 <vfprintf+0x27a>
    2d6c:	21 2f       	mov	r18, r17
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	2f 5f       	subi	r18, 0xFF	; 255
    2d72:	3f 4f       	sbci	r19, 0xFF	; 255
    2d74:	82 0f       	add	r24, r18
    2d76:	93 1f       	adc	r25, r19
    2d78:	25 2d       	mov	r18, r5
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	82 17       	cp	r24, r18
    2d7e:	93 07       	cpc	r25, r19
    2d80:	14 f4       	brge	.+4      	; 0x2d86 <vfprintf+0x288>
    2d82:	58 1a       	sub	r5, r24
    2d84:	01 c0       	rjmp	.+2      	; 0x2d88 <vfprintf+0x28a>
    2d86:	51 2c       	mov	r5, r1
    2d88:	89 2d       	mov	r24, r9
    2d8a:	89 70       	andi	r24, 0x09	; 9
    2d8c:	49 f4       	brne	.+18     	; 0x2da0 <vfprintf+0x2a2>
    2d8e:	55 20       	and	r5, r5
    2d90:	39 f0       	breq	.+14     	; 0x2da0 <vfprintf+0x2a2>
    2d92:	b7 01       	movw	r22, r14
    2d94:	80 e2       	ldi	r24, 0x20	; 32
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2d9c:	5a 94       	dec	r5
    2d9e:	f7 cf       	rjmp	.-18     	; 0x2d8e <vfprintf+0x290>
    2da0:	00 23       	and	r16, r16
    2da2:	29 f0       	breq	.+10     	; 0x2dae <vfprintf+0x2b0>
    2da4:	b7 01       	movw	r22, r14
    2da6:	80 2f       	mov	r24, r16
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2dae:	93 fc       	sbrc	r9, 3
    2db0:	09 c0       	rjmp	.+18     	; 0x2dc4 <vfprintf+0x2c6>
    2db2:	55 20       	and	r5, r5
    2db4:	39 f0       	breq	.+14     	; 0x2dc4 <vfprintf+0x2c6>
    2db6:	b7 01       	movw	r22, r14
    2db8:	80 e3       	ldi	r24, 0x30	; 48
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2dc0:	5a 94       	dec	r5
    2dc2:	f7 cf       	rjmp	.-18     	; 0x2db2 <vfprintf+0x2b4>
    2dc4:	97 fe       	sbrs	r9, 7
    2dc6:	4c c0       	rjmp	.+152    	; 0x2e60 <vfprintf+0x362>
    2dc8:	46 01       	movw	r8, r12
    2dca:	d7 fe       	sbrs	r13, 7
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <vfprintf+0x2d4>
    2dce:	81 2c       	mov	r8, r1
    2dd0:	91 2c       	mov	r9, r1
    2dd2:	c6 01       	movw	r24, r12
    2dd4:	88 19       	sub	r24, r8
    2dd6:	99 09       	sbc	r25, r9
    2dd8:	f3 01       	movw	r30, r6
    2dda:	e8 0f       	add	r30, r24
    2ddc:	f9 1f       	adc	r31, r25
    2dde:	ed 87       	std	Y+13, r30	; 0x0d
    2de0:	fe 87       	std	Y+14, r31	; 0x0e
    2de2:	96 01       	movw	r18, r12
    2de4:	24 19       	sub	r18, r4
    2de6:	31 09       	sbc	r19, r1
    2de8:	2f 87       	std	Y+15, r18	; 0x0f
    2dea:	38 8b       	std	Y+16, r19	; 0x10
    2dec:	01 2f       	mov	r16, r17
    2dee:	10 e0       	ldi	r17, 0x00	; 0
    2df0:	11 95       	neg	r17
    2df2:	01 95       	neg	r16
    2df4:	11 09       	sbc	r17, r1
    2df6:	3f ef       	ldi	r19, 0xFF	; 255
    2df8:	83 16       	cp	r8, r19
    2dfa:	93 06       	cpc	r9, r19
    2dfc:	29 f4       	brne	.+10     	; 0x2e08 <vfprintf+0x30a>
    2dfe:	b7 01       	movw	r22, r14
    2e00:	8e e2       	ldi	r24, 0x2E	; 46
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2e08:	c8 14       	cp	r12, r8
    2e0a:	d9 04       	cpc	r13, r9
    2e0c:	4c f0       	brlt	.+18     	; 0x2e20 <vfprintf+0x322>
    2e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e10:	98 89       	ldd	r25, Y+16	; 0x10
    2e12:	88 15       	cp	r24, r8
    2e14:	99 05       	cpc	r25, r9
    2e16:	24 f4       	brge	.+8      	; 0x2e20 <vfprintf+0x322>
    2e18:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e1a:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e1c:	81 81       	ldd	r24, Z+1	; 0x01
    2e1e:	01 c0       	rjmp	.+2      	; 0x2e22 <vfprintf+0x324>
    2e20:	80 e3       	ldi	r24, 0x30	; 48
    2e22:	f1 e0       	ldi	r31, 0x01	; 1
    2e24:	8f 1a       	sub	r8, r31
    2e26:	91 08       	sbc	r9, r1
    2e28:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e2a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e2c:	2f 5f       	subi	r18, 0xFF	; 255
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	2d 87       	std	Y+13, r18	; 0x0d
    2e32:	3e 87       	std	Y+14, r19	; 0x0e
    2e34:	80 16       	cp	r8, r16
    2e36:	91 06       	cpc	r9, r17
    2e38:	2c f0       	brlt	.+10     	; 0x2e44 <vfprintf+0x346>
    2e3a:	b7 01       	movw	r22, r14
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2e42:	d9 cf       	rjmp	.-78     	; 0x2df6 <vfprintf+0x2f8>
    2e44:	c8 14       	cp	r12, r8
    2e46:	d9 04       	cpc	r13, r9
    2e48:	41 f4       	brne	.+16     	; 0x2e5a <vfprintf+0x35c>
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	96 33       	cpi	r25, 0x36	; 54
    2e4e:	20 f4       	brcc	.+8      	; 0x2e58 <vfprintf+0x35a>
    2e50:	95 33       	cpi	r25, 0x35	; 53
    2e52:	19 f4       	brne	.+6      	; 0x2e5a <vfprintf+0x35c>
    2e54:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e56:	34 ff       	sbrs	r19, 4
    2e58:	81 e3       	ldi	r24, 0x31	; 49
    2e5a:	b7 01       	movw	r22, r14
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	4e c0       	rjmp	.+156    	; 0x2efc <vfprintf+0x3fe>
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	81 33       	cpi	r24, 0x31	; 49
    2e64:	19 f0       	breq	.+6      	; 0x2e6c <vfprintf+0x36e>
    2e66:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e68:	9f 7e       	andi	r25, 0xEF	; 239
    2e6a:	9c 87       	std	Y+12, r25	; 0x0c
    2e6c:	b7 01       	movw	r22, r14
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2e74:	11 11       	cpse	r17, r1
    2e76:	05 c0       	rjmp	.+10     	; 0x2e82 <vfprintf+0x384>
    2e78:	94 fc       	sbrc	r9, 4
    2e7a:	18 c0       	rjmp	.+48     	; 0x2eac <vfprintf+0x3ae>
    2e7c:	85 e6       	ldi	r24, 0x65	; 101
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	17 c0       	rjmp	.+46     	; 0x2eb0 <vfprintf+0x3b2>
    2e82:	b7 01       	movw	r22, r14
    2e84:	8e e2       	ldi	r24, 0x2E	; 46
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2e8c:	1e 5f       	subi	r17, 0xFE	; 254
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	01 e0       	ldi	r16, 0x01	; 1
    2e92:	08 0f       	add	r16, r24
    2e94:	f3 01       	movw	r30, r6
    2e96:	e8 0f       	add	r30, r24
    2e98:	f1 1d       	adc	r31, r1
    2e9a:	80 81       	ld	r24, Z
    2e9c:	b7 01       	movw	r22, r14
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2ea4:	80 2f       	mov	r24, r16
    2ea6:	01 13       	cpse	r16, r17
    2ea8:	f3 cf       	rjmp	.-26     	; 0x2e90 <vfprintf+0x392>
    2eaa:	e6 cf       	rjmp	.-52     	; 0x2e78 <vfprintf+0x37a>
    2eac:	85 e4       	ldi	r24, 0x45	; 69
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	b7 01       	movw	r22, r14
    2eb2:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2eb6:	d7 fc       	sbrc	r13, 7
    2eb8:	06 c0       	rjmp	.+12     	; 0x2ec6 <vfprintf+0x3c8>
    2eba:	c1 14       	cp	r12, r1
    2ebc:	d1 04       	cpc	r13, r1
    2ebe:	41 f4       	brne	.+16     	; 0x2ed0 <vfprintf+0x3d2>
    2ec0:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ec2:	e4 ff       	sbrs	r30, 4
    2ec4:	05 c0       	rjmp	.+10     	; 0x2ed0 <vfprintf+0x3d2>
    2ec6:	d1 94       	neg	r13
    2ec8:	c1 94       	neg	r12
    2eca:	d1 08       	sbc	r13, r1
    2ecc:	8d e2       	ldi	r24, 0x2D	; 45
    2ece:	01 c0       	rjmp	.+2      	; 0x2ed2 <vfprintf+0x3d4>
    2ed0:	8b e2       	ldi	r24, 0x2B	; 43
    2ed2:	b7 01       	movw	r22, r14
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2eda:	80 e3       	ldi	r24, 0x30	; 48
    2edc:	2a e0       	ldi	r18, 0x0A	; 10
    2ede:	c2 16       	cp	r12, r18
    2ee0:	d1 04       	cpc	r13, r1
    2ee2:	2c f0       	brlt	.+10     	; 0x2eee <vfprintf+0x3f0>
    2ee4:	8f 5f       	subi	r24, 0xFF	; 255
    2ee6:	fa e0       	ldi	r31, 0x0A	; 10
    2ee8:	cf 1a       	sub	r12, r31
    2eea:	d1 08       	sbc	r13, r1
    2eec:	f7 cf       	rjmp	.-18     	; 0x2edc <vfprintf+0x3de>
    2eee:	b7 01       	movw	r22, r14
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2ef6:	b7 01       	movw	r22, r14
    2ef8:	c6 01       	movw	r24, r12
    2efa:	c0 96       	adiw	r24, 0x30	; 48
    2efc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2f00:	54 c1       	rjmp	.+680    	; 0x31aa <vfprintf+0x6ac>
    2f02:	83 36       	cpi	r24, 0x63	; 99
    2f04:	31 f0       	breq	.+12     	; 0x2f12 <vfprintf+0x414>
    2f06:	83 37       	cpi	r24, 0x73	; 115
    2f08:	79 f0       	breq	.+30     	; 0x2f28 <vfprintf+0x42a>
    2f0a:	83 35       	cpi	r24, 0x53	; 83
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <vfprintf+0x412>
    2f0e:	56 c0       	rjmp	.+172    	; 0x2fbc <vfprintf+0x4be>
    2f10:	20 c0       	rjmp	.+64     	; 0x2f52 <vfprintf+0x454>
    2f12:	56 01       	movw	r10, r12
    2f14:	32 e0       	ldi	r19, 0x02	; 2
    2f16:	a3 0e       	add	r10, r19
    2f18:	b1 1c       	adc	r11, r1
    2f1a:	f6 01       	movw	r30, r12
    2f1c:	80 81       	ld	r24, Z
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	01 e0       	ldi	r16, 0x01	; 1
    2f22:	10 e0       	ldi	r17, 0x00	; 0
    2f24:	63 01       	movw	r12, r6
    2f26:	12 c0       	rjmp	.+36     	; 0x2f4c <vfprintf+0x44e>
    2f28:	56 01       	movw	r10, r12
    2f2a:	f2 e0       	ldi	r31, 0x02	; 2
    2f2c:	af 0e       	add	r10, r31
    2f2e:	b1 1c       	adc	r11, r1
    2f30:	f6 01       	movw	r30, r12
    2f32:	c0 80       	ld	r12, Z
    2f34:	d1 80       	ldd	r13, Z+1	; 0x01
    2f36:	96 fe       	sbrs	r9, 6
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <vfprintf+0x442>
    2f3a:	61 2f       	mov	r22, r17
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <vfprintf+0x446>
    2f40:	6f ef       	ldi	r22, 0xFF	; 255
    2f42:	7f ef       	ldi	r23, 0xFF	; 255
    2f44:	c6 01       	movw	r24, r12
    2f46:	0e 94 96 1b 	call	0x372c	; 0x372c <strnlen>
    2f4a:	8c 01       	movw	r16, r24
    2f4c:	f9 2d       	mov	r31, r9
    2f4e:	ff 77       	andi	r31, 0x7F	; 127
    2f50:	14 c0       	rjmp	.+40     	; 0x2f7a <vfprintf+0x47c>
    2f52:	56 01       	movw	r10, r12
    2f54:	22 e0       	ldi	r18, 0x02	; 2
    2f56:	a2 0e       	add	r10, r18
    2f58:	b1 1c       	adc	r11, r1
    2f5a:	f6 01       	movw	r30, r12
    2f5c:	c0 80       	ld	r12, Z
    2f5e:	d1 80       	ldd	r13, Z+1	; 0x01
    2f60:	96 fe       	sbrs	r9, 6
    2f62:	03 c0       	rjmp	.+6      	; 0x2f6a <vfprintf+0x46c>
    2f64:	61 2f       	mov	r22, r17
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <vfprintf+0x470>
    2f6a:	6f ef       	ldi	r22, 0xFF	; 255
    2f6c:	7f ef       	ldi	r23, 0xFF	; 255
    2f6e:	c6 01       	movw	r24, r12
    2f70:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <strnlen_P>
    2f74:	8c 01       	movw	r16, r24
    2f76:	f9 2d       	mov	r31, r9
    2f78:	f0 68       	ori	r31, 0x80	; 128
    2f7a:	9f 2e       	mov	r9, r31
    2f7c:	f3 fd       	sbrc	r31, 3
    2f7e:	1a c0       	rjmp	.+52     	; 0x2fb4 <vfprintf+0x4b6>
    2f80:	85 2d       	mov	r24, r5
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	08 17       	cp	r16, r24
    2f86:	19 07       	cpc	r17, r25
    2f88:	a8 f4       	brcc	.+42     	; 0x2fb4 <vfprintf+0x4b6>
    2f8a:	b7 01       	movw	r22, r14
    2f8c:	80 e2       	ldi	r24, 0x20	; 32
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2f94:	5a 94       	dec	r5
    2f96:	f4 cf       	rjmp	.-24     	; 0x2f80 <vfprintf+0x482>
    2f98:	f6 01       	movw	r30, r12
    2f9a:	97 fc       	sbrc	r9, 7
    2f9c:	85 91       	lpm	r24, Z+
    2f9e:	97 fe       	sbrs	r9, 7
    2fa0:	81 91       	ld	r24, Z+
    2fa2:	6f 01       	movw	r12, r30
    2fa4:	b7 01       	movw	r22, r14
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    2fac:	51 10       	cpse	r5, r1
    2fae:	5a 94       	dec	r5
    2fb0:	01 50       	subi	r16, 0x01	; 1
    2fb2:	11 09       	sbc	r17, r1
    2fb4:	01 15       	cp	r16, r1
    2fb6:	11 05       	cpc	r17, r1
    2fb8:	79 f7       	brne	.-34     	; 0x2f98 <vfprintf+0x49a>
    2fba:	f7 c0       	rjmp	.+494    	; 0x31aa <vfprintf+0x6ac>
    2fbc:	84 36       	cpi	r24, 0x64	; 100
    2fbe:	11 f0       	breq	.+4      	; 0x2fc4 <vfprintf+0x4c6>
    2fc0:	89 36       	cpi	r24, 0x69	; 105
    2fc2:	61 f5       	brne	.+88     	; 0x301c <vfprintf+0x51e>
    2fc4:	56 01       	movw	r10, r12
    2fc6:	97 fe       	sbrs	r9, 7
    2fc8:	09 c0       	rjmp	.+18     	; 0x2fdc <vfprintf+0x4de>
    2fca:	24 e0       	ldi	r18, 0x04	; 4
    2fcc:	a2 0e       	add	r10, r18
    2fce:	b1 1c       	adc	r11, r1
    2fd0:	f6 01       	movw	r30, r12
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	0a c0       	rjmp	.+20     	; 0x2ff0 <vfprintf+0x4f2>
    2fdc:	f2 e0       	ldi	r31, 0x02	; 2
    2fde:	af 0e       	add	r10, r31
    2fe0:	b1 1c       	adc	r11, r1
    2fe2:	f6 01       	movw	r30, r12
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	07 2e       	mov	r0, r23
    2fea:	00 0c       	add	r0, r0
    2fec:	88 0b       	sbc	r24, r24
    2fee:	99 0b       	sbc	r25, r25
    2ff0:	f9 2d       	mov	r31, r9
    2ff2:	ff 76       	andi	r31, 0x6F	; 111
    2ff4:	9f 2e       	mov	r9, r31
    2ff6:	97 ff       	sbrs	r25, 7
    2ff8:	09 c0       	rjmp	.+18     	; 0x300c <vfprintf+0x50e>
    2ffa:	90 95       	com	r25
    2ffc:	80 95       	com	r24
    2ffe:	70 95       	com	r23
    3000:	61 95       	neg	r22
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	8f 4f       	sbci	r24, 0xFF	; 255
    3006:	9f 4f       	sbci	r25, 0xFF	; 255
    3008:	f0 68       	ori	r31, 0x80	; 128
    300a:	9f 2e       	mov	r9, r31
    300c:	2a e0       	ldi	r18, 0x0A	; 10
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	a3 01       	movw	r20, r6
    3012:	0e 94 14 1c 	call	0x3828	; 0x3828 <__ultoa_invert>
    3016:	c8 2e       	mov	r12, r24
    3018:	c6 18       	sub	r12, r6
    301a:	3f c0       	rjmp	.+126    	; 0x309a <vfprintf+0x59c>
    301c:	09 2d       	mov	r16, r9
    301e:	85 37       	cpi	r24, 0x75	; 117
    3020:	21 f4       	brne	.+8      	; 0x302a <vfprintf+0x52c>
    3022:	0f 7e       	andi	r16, 0xEF	; 239
    3024:	2a e0       	ldi	r18, 0x0A	; 10
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	1d c0       	rjmp	.+58     	; 0x3064 <vfprintf+0x566>
    302a:	09 7f       	andi	r16, 0xF9	; 249
    302c:	8f 36       	cpi	r24, 0x6F	; 111
    302e:	91 f0       	breq	.+36     	; 0x3054 <vfprintf+0x556>
    3030:	18 f4       	brcc	.+6      	; 0x3038 <vfprintf+0x53a>
    3032:	88 35       	cpi	r24, 0x58	; 88
    3034:	59 f0       	breq	.+22     	; 0x304c <vfprintf+0x54e>
    3036:	c3 c0       	rjmp	.+390    	; 0x31be <vfprintf+0x6c0>
    3038:	80 37       	cpi	r24, 0x70	; 112
    303a:	19 f0       	breq	.+6      	; 0x3042 <vfprintf+0x544>
    303c:	88 37       	cpi	r24, 0x78	; 120
    303e:	11 f0       	breq	.+4      	; 0x3044 <vfprintf+0x546>
    3040:	be c0       	rjmp	.+380    	; 0x31be <vfprintf+0x6c0>
    3042:	00 61       	ori	r16, 0x10	; 16
    3044:	04 ff       	sbrs	r16, 4
    3046:	09 c0       	rjmp	.+18     	; 0x305a <vfprintf+0x55c>
    3048:	04 60       	ori	r16, 0x04	; 4
    304a:	07 c0       	rjmp	.+14     	; 0x305a <vfprintf+0x55c>
    304c:	94 fe       	sbrs	r9, 4
    304e:	08 c0       	rjmp	.+16     	; 0x3060 <vfprintf+0x562>
    3050:	06 60       	ori	r16, 0x06	; 6
    3052:	06 c0       	rjmp	.+12     	; 0x3060 <vfprintf+0x562>
    3054:	28 e0       	ldi	r18, 0x08	; 8
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <vfprintf+0x566>
    305a:	20 e1       	ldi	r18, 0x10	; 16
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <vfprintf+0x566>
    3060:	20 e1       	ldi	r18, 0x10	; 16
    3062:	32 e0       	ldi	r19, 0x02	; 2
    3064:	56 01       	movw	r10, r12
    3066:	07 ff       	sbrs	r16, 7
    3068:	09 c0       	rjmp	.+18     	; 0x307c <vfprintf+0x57e>
    306a:	84 e0       	ldi	r24, 0x04	; 4
    306c:	a8 0e       	add	r10, r24
    306e:	b1 1c       	adc	r11, r1
    3070:	f6 01       	movw	r30, r12
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	08 c0       	rjmp	.+16     	; 0x308c <vfprintf+0x58e>
    307c:	f2 e0       	ldi	r31, 0x02	; 2
    307e:	af 0e       	add	r10, r31
    3080:	b1 1c       	adc	r11, r1
    3082:	f6 01       	movw	r30, r12
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a3 01       	movw	r20, r6
    308e:	0e 94 14 1c 	call	0x3828	; 0x3828 <__ultoa_invert>
    3092:	c8 2e       	mov	r12, r24
    3094:	c6 18       	sub	r12, r6
    3096:	0f 77       	andi	r16, 0x7F	; 127
    3098:	90 2e       	mov	r9, r16
    309a:	96 fe       	sbrs	r9, 6
    309c:	0b c0       	rjmp	.+22     	; 0x30b4 <vfprintf+0x5b6>
    309e:	09 2d       	mov	r16, r9
    30a0:	0e 7f       	andi	r16, 0xFE	; 254
    30a2:	c1 16       	cp	r12, r17
    30a4:	50 f4       	brcc	.+20     	; 0x30ba <vfprintf+0x5bc>
    30a6:	94 fe       	sbrs	r9, 4
    30a8:	0a c0       	rjmp	.+20     	; 0x30be <vfprintf+0x5c0>
    30aa:	92 fc       	sbrc	r9, 2
    30ac:	08 c0       	rjmp	.+16     	; 0x30be <vfprintf+0x5c0>
    30ae:	09 2d       	mov	r16, r9
    30b0:	0e 7e       	andi	r16, 0xEE	; 238
    30b2:	05 c0       	rjmp	.+10     	; 0x30be <vfprintf+0x5c0>
    30b4:	dc 2c       	mov	r13, r12
    30b6:	09 2d       	mov	r16, r9
    30b8:	03 c0       	rjmp	.+6      	; 0x30c0 <vfprintf+0x5c2>
    30ba:	dc 2c       	mov	r13, r12
    30bc:	01 c0       	rjmp	.+2      	; 0x30c0 <vfprintf+0x5c2>
    30be:	d1 2e       	mov	r13, r17
    30c0:	04 ff       	sbrs	r16, 4
    30c2:	0d c0       	rjmp	.+26     	; 0x30de <vfprintf+0x5e0>
    30c4:	fe 01       	movw	r30, r28
    30c6:	ec 0d       	add	r30, r12
    30c8:	f1 1d       	adc	r31, r1
    30ca:	80 81       	ld	r24, Z
    30cc:	80 33       	cpi	r24, 0x30	; 48
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <vfprintf+0x5d6>
    30d0:	09 7e       	andi	r16, 0xE9	; 233
    30d2:	09 c0       	rjmp	.+18     	; 0x30e6 <vfprintf+0x5e8>
    30d4:	02 ff       	sbrs	r16, 2
    30d6:	06 c0       	rjmp	.+12     	; 0x30e4 <vfprintf+0x5e6>
    30d8:	d3 94       	inc	r13
    30da:	d3 94       	inc	r13
    30dc:	04 c0       	rjmp	.+8      	; 0x30e6 <vfprintf+0x5e8>
    30de:	80 2f       	mov	r24, r16
    30e0:	86 78       	andi	r24, 0x86	; 134
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <vfprintf+0x5e8>
    30e4:	d3 94       	inc	r13
    30e6:	03 fd       	sbrc	r16, 3
    30e8:	11 c0       	rjmp	.+34     	; 0x310c <vfprintf+0x60e>
    30ea:	00 ff       	sbrs	r16, 0
    30ec:	06 c0       	rjmp	.+12     	; 0x30fa <vfprintf+0x5fc>
    30ee:	1c 2d       	mov	r17, r12
    30f0:	d5 14       	cp	r13, r5
    30f2:	80 f4       	brcc	.+32     	; 0x3114 <vfprintf+0x616>
    30f4:	15 0d       	add	r17, r5
    30f6:	1d 19       	sub	r17, r13
    30f8:	0d c0       	rjmp	.+26     	; 0x3114 <vfprintf+0x616>
    30fa:	d5 14       	cp	r13, r5
    30fc:	58 f4       	brcc	.+22     	; 0x3114 <vfprintf+0x616>
    30fe:	b7 01       	movw	r22, r14
    3100:	80 e2       	ldi	r24, 0x20	; 32
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    3108:	d3 94       	inc	r13
    310a:	f7 cf       	rjmp	.-18     	; 0x30fa <vfprintf+0x5fc>
    310c:	d5 14       	cp	r13, r5
    310e:	10 f4       	brcc	.+4      	; 0x3114 <vfprintf+0x616>
    3110:	5d 18       	sub	r5, r13
    3112:	01 c0       	rjmp	.+2      	; 0x3116 <vfprintf+0x618>
    3114:	51 2c       	mov	r5, r1
    3116:	04 ff       	sbrs	r16, 4
    3118:	10 c0       	rjmp	.+32     	; 0x313a <vfprintf+0x63c>
    311a:	b7 01       	movw	r22, r14
    311c:	80 e3       	ldi	r24, 0x30	; 48
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    3124:	02 ff       	sbrs	r16, 2
    3126:	17 c0       	rjmp	.+46     	; 0x3156 <vfprintf+0x658>
    3128:	01 fd       	sbrc	r16, 1
    312a:	03 c0       	rjmp	.+6      	; 0x3132 <vfprintf+0x634>
    312c:	88 e7       	ldi	r24, 0x78	; 120
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <vfprintf+0x638>
    3132:	88 e5       	ldi	r24, 0x58	; 88
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	b7 01       	movw	r22, r14
    3138:	0c c0       	rjmp	.+24     	; 0x3152 <vfprintf+0x654>
    313a:	80 2f       	mov	r24, r16
    313c:	86 78       	andi	r24, 0x86	; 134
    313e:	59 f0       	breq	.+22     	; 0x3156 <vfprintf+0x658>
    3140:	01 ff       	sbrs	r16, 1
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <vfprintf+0x64a>
    3144:	8b e2       	ldi	r24, 0x2B	; 43
    3146:	01 c0       	rjmp	.+2      	; 0x314a <vfprintf+0x64c>
    3148:	80 e2       	ldi	r24, 0x20	; 32
    314a:	07 fd       	sbrc	r16, 7
    314c:	8d e2       	ldi	r24, 0x2D	; 45
    314e:	b7 01       	movw	r22, r14
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    3156:	c1 16       	cp	r12, r17
    3158:	38 f4       	brcc	.+14     	; 0x3168 <vfprintf+0x66a>
    315a:	b7 01       	movw	r22, r14
    315c:	80 e3       	ldi	r24, 0x30	; 48
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    3164:	11 50       	subi	r17, 0x01	; 1
    3166:	f7 cf       	rjmp	.-18     	; 0x3156 <vfprintf+0x658>
    3168:	ca 94       	dec	r12
    316a:	f3 01       	movw	r30, r6
    316c:	ec 0d       	add	r30, r12
    316e:	f1 1d       	adc	r31, r1
    3170:	80 81       	ld	r24, Z
    3172:	b7 01       	movw	r22, r14
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    317a:	c1 10       	cpse	r12, r1
    317c:	f5 cf       	rjmp	.-22     	; 0x3168 <vfprintf+0x66a>
    317e:	15 c0       	rjmp	.+42     	; 0x31aa <vfprintf+0x6ac>
    3180:	f4 e0       	ldi	r31, 0x04	; 4
    3182:	f5 15       	cp	r31, r5
    3184:	60 f5       	brcc	.+88     	; 0x31de <vfprintf+0x6e0>
    3186:	84 e0       	ldi	r24, 0x04	; 4
    3188:	58 1a       	sub	r5, r24
    318a:	93 fe       	sbrs	r9, 3
    318c:	1f c0       	rjmp	.+62     	; 0x31cc <vfprintf+0x6ce>
    318e:	01 11       	cpse	r16, r1
    3190:	27 c0       	rjmp	.+78     	; 0x31e0 <vfprintf+0x6e2>
    3192:	2c 85       	ldd	r18, Y+12	; 0x0c
    3194:	23 ff       	sbrs	r18, 3
    3196:	2a c0       	rjmp	.+84     	; 0x31ec <vfprintf+0x6ee>
    3198:	0e eb       	ldi	r16, 0xBE	; 190
    319a:	12 e0       	ldi	r17, 0x02	; 2
    319c:	39 2d       	mov	r19, r9
    319e:	30 71       	andi	r19, 0x10	; 16
    31a0:	93 2e       	mov	r9, r19
    31a2:	f8 01       	movw	r30, r16
    31a4:	84 91       	lpm	r24, Z
    31a6:	81 11       	cpse	r24, r1
    31a8:	24 c0       	rjmp	.+72     	; 0x31f2 <vfprintf+0x6f4>
    31aa:	55 20       	and	r5, r5
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <vfprintf+0x6b2>
    31ae:	e4 cc       	rjmp	.-1592   	; 0x2b78 <vfprintf+0x7a>
    31b0:	b7 01       	movw	r22, r14
    31b2:	80 e2       	ldi	r24, 0x20	; 32
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    31ba:	5a 94       	dec	r5
    31bc:	f6 cf       	rjmp	.-20     	; 0x31aa <vfprintf+0x6ac>
    31be:	f7 01       	movw	r30, r14
    31c0:	86 81       	ldd	r24, Z+6	; 0x06
    31c2:	97 81       	ldd	r25, Z+7	; 0x07
    31c4:	26 c0       	rjmp	.+76     	; 0x3212 <vfprintf+0x714>
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	9f ef       	ldi	r25, 0xFF	; 255
    31ca:	23 c0       	rjmp	.+70     	; 0x3212 <vfprintf+0x714>
    31cc:	b7 01       	movw	r22, r14
    31ce:	80 e2       	ldi	r24, 0x20	; 32
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    31d6:	5a 94       	dec	r5
    31d8:	51 10       	cpse	r5, r1
    31da:	f8 cf       	rjmp	.-16     	; 0x31cc <vfprintf+0x6ce>
    31dc:	d8 cf       	rjmp	.-80     	; 0x318e <vfprintf+0x690>
    31de:	51 2c       	mov	r5, r1
    31e0:	b7 01       	movw	r22, r14
    31e2:	80 2f       	mov	r24, r16
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    31ea:	d3 cf       	rjmp	.-90     	; 0x3192 <vfprintf+0x694>
    31ec:	02 ec       	ldi	r16, 0xC2	; 194
    31ee:	12 e0       	ldi	r17, 0x02	; 2
    31f0:	d5 cf       	rjmp	.-86     	; 0x319c <vfprintf+0x69e>
    31f2:	91 10       	cpse	r9, r1
    31f4:	80 52       	subi	r24, 0x20	; 32
    31f6:	b7 01       	movw	r22, r14
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	0e 94 a1 1b 	call	0x3742	; 0x3742 <fputc>
    31fe:	0f 5f       	subi	r16, 0xFF	; 255
    3200:	1f 4f       	sbci	r17, 0xFF	; 255
    3202:	cf cf       	rjmp	.-98     	; 0x31a2 <vfprintf+0x6a4>
    3204:	23 e0       	ldi	r18, 0x03	; 3
    3206:	25 15       	cp	r18, r5
    3208:	10 f4       	brcc	.+4      	; 0x320e <vfprintf+0x710>
    320a:	83 e0       	ldi	r24, 0x03	; 3
    320c:	bd cf       	rjmp	.-134    	; 0x3188 <vfprintf+0x68a>
    320e:	51 2c       	mov	r5, r1
    3210:	c0 cf       	rjmp	.-128    	; 0x3192 <vfprintf+0x694>
    3212:	60 96       	adiw	r28, 0x10	; 16
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	bf 90       	pop	r11
    322a:	af 90       	pop	r10
    322c:	9f 90       	pop	r9
    322e:	8f 90       	pop	r8
    3230:	7f 90       	pop	r7
    3232:	6f 90       	pop	r6
    3234:	5f 90       	pop	r5
    3236:	4f 90       	pop	r4
    3238:	3f 90       	pop	r3
    323a:	2f 90       	pop	r2
    323c:	08 95       	ret

0000323e <__tablejump2__>:
    323e:	ee 0f       	add	r30, r30
    3240:	ff 1f       	adc	r31, r31
    3242:	88 1f       	adc	r24, r24
    3244:	8b bf       	out	0x3b, r24	; 59
    3246:	07 90       	elpm	r0, Z+
    3248:	f6 91       	elpm	r31, Z
    324a:	e0 2d       	mov	r30, r0
    324c:	1b be       	out	0x3b, r1	; 59
    324e:	19 94       	eijmp

00003250 <strtod>:
    3250:	8f 92       	push	r8
    3252:	9f 92       	push	r9
    3254:	af 92       	push	r10
    3256:	bf 92       	push	r11
    3258:	cf 92       	push	r12
    325a:	df 92       	push	r13
    325c:	ef 92       	push	r14
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	cf 93       	push	r28
    3266:	df 93       	push	r29
    3268:	ec 01       	movw	r28, r24
    326a:	6b 01       	movw	r12, r22
    326c:	61 15       	cp	r22, r1
    326e:	71 05       	cpc	r23, r1
    3270:	19 f0       	breq	.+6      	; 0x3278 <strtod+0x28>
    3272:	fb 01       	movw	r30, r22
    3274:	80 83       	st	Z, r24
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	7e 01       	movw	r14, r28
    327a:	ff ef       	ldi	r31, 0xFF	; 255
    327c:	ef 1a       	sub	r14, r31
    327e:	ff 0a       	sbc	r15, r31
    3280:	08 81       	ld	r16, Y
    3282:	80 2f       	mov	r24, r16
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <isspace>
    328a:	89 2b       	or	r24, r25
    328c:	11 f0       	breq	.+4      	; 0x3292 <strtod+0x42>
    328e:	e7 01       	movw	r28, r14
    3290:	f3 cf       	rjmp	.-26     	; 0x3278 <strtod+0x28>
    3292:	0d 32       	cpi	r16, 0x2D	; 45
    3294:	39 f4       	brne	.+14     	; 0x32a4 <strtod+0x54>
    3296:	7e 01       	movw	r14, r28
    3298:	82 e0       	ldi	r24, 0x02	; 2
    329a:	e8 0e       	add	r14, r24
    329c:	f1 1c       	adc	r15, r1
    329e:	09 81       	ldd	r16, Y+1	; 0x01
    32a0:	11 e0       	ldi	r17, 0x01	; 1
    32a2:	08 c0       	rjmp	.+16     	; 0x32b4 <strtod+0x64>
    32a4:	0b 32       	cpi	r16, 0x2B	; 43
    32a6:	29 f4       	brne	.+10     	; 0x32b2 <strtod+0x62>
    32a8:	7e 01       	movw	r14, r28
    32aa:	92 e0       	ldi	r25, 0x02	; 2
    32ac:	e9 0e       	add	r14, r25
    32ae:	f1 1c       	adc	r15, r1
    32b0:	09 81       	ldd	r16, Y+1	; 0x01
    32b2:	10 e0       	ldi	r17, 0x00	; 0
    32b4:	e7 01       	movw	r28, r14
    32b6:	21 97       	sbiw	r28, 0x01	; 1
    32b8:	43 e0       	ldi	r20, 0x03	; 3
    32ba:	50 e0       	ldi	r21, 0x00	; 0
    32bc:	6e ec       	ldi	r22, 0xCE	; 206
    32be:	72 e0       	ldi	r23, 0x02	; 2
    32c0:	ce 01       	movw	r24, r28
    32c2:	0e 94 65 1b 	call	0x36ca	; 0x36ca <strncasecmp_P>
    32c6:	89 2b       	or	r24, r25
    32c8:	c1 f4       	brne	.+48     	; 0x32fa <strtod+0xaa>
    32ca:	23 96       	adiw	r28, 0x03	; 3
    32cc:	45 e0       	ldi	r20, 0x05	; 5
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	69 ec       	ldi	r22, 0xC9	; 201
    32d2:	72 e0       	ldi	r23, 0x02	; 2
    32d4:	ce 01       	movw	r24, r28
    32d6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <strncasecmp_P>
    32da:	89 2b       	or	r24, r25
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <strtod+0x90>
    32de:	25 96       	adiw	r28, 0x05	; 5
    32e0:	c1 14       	cp	r12, r1
    32e2:	d1 04       	cpc	r13, r1
    32e4:	19 f0       	breq	.+6      	; 0x32ec <strtod+0x9c>
    32e6:	f6 01       	movw	r30, r12
    32e8:	c0 83       	st	Z, r28
    32ea:	d1 83       	std	Z+1, r29	; 0x01
    32ec:	11 11       	cpse	r17, r1
    32ee:	f6 c0       	rjmp	.+492    	; 0x34dc <strtod+0x28c>
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	70 e0       	ldi	r23, 0x00	; 0
    32f4:	80 e8       	ldi	r24, 0x80	; 128
    32f6:	9f e7       	ldi	r25, 0x7F	; 127
    32f8:	fa c0       	rjmp	.+500    	; 0x34ee <strtod+0x29e>
    32fa:	43 e0       	ldi	r20, 0x03	; 3
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	66 ec       	ldi	r22, 0xC6	; 198
    3300:	72 e0       	ldi	r23, 0x02	; 2
    3302:	ce 01       	movw	r24, r28
    3304:	0e 94 65 1b 	call	0x36ca	; 0x36ca <strncasecmp_P>
    3308:	89 2b       	or	r24, r25
    330a:	59 f4       	brne	.+22     	; 0x3322 <strtod+0xd2>
    330c:	c1 14       	cp	r12, r1
    330e:	d1 04       	cpc	r13, r1
    3310:	09 f4       	brne	.+2      	; 0x3314 <strtod+0xc4>
    3312:	e9 c0       	rjmp	.+466    	; 0x34e6 <strtod+0x296>
    3314:	f2 e0       	ldi	r31, 0x02	; 2
    3316:	ef 0e       	add	r14, r31
    3318:	f1 1c       	adc	r15, r1
    331a:	f6 01       	movw	r30, r12
    331c:	e0 82       	st	Z, r14
    331e:	f1 82       	std	Z+1, r15	; 0x01
    3320:	e2 c0       	rjmp	.+452    	; 0x34e6 <strtod+0x296>
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	a9 01       	movw	r20, r18
    3328:	c0 e0       	ldi	r28, 0x00	; 0
    332a:	d0 e0       	ldi	r29, 0x00	; 0
    332c:	f7 01       	movw	r30, r14
    332e:	60 ed       	ldi	r22, 0xD0	; 208
    3330:	a6 2e       	mov	r10, r22
    3332:	a0 0e       	add	r10, r16
    3334:	89 e0       	ldi	r24, 0x09	; 9
    3336:	8a 15       	cp	r24, r10
    3338:	30 f1       	brcs	.+76     	; 0x3386 <strtod+0x136>
    333a:	91 2f       	mov	r25, r17
    333c:	92 60       	ori	r25, 0x02	; 2
    333e:	b9 2e       	mov	r11, r25
    3340:	81 2f       	mov	r24, r17
    3342:	88 70       	andi	r24, 0x08	; 8
    3344:	12 ff       	sbrs	r17, 2
    3346:	04 c0       	rjmp	.+8      	; 0x3350 <strtod+0x100>
    3348:	81 11       	cpse	r24, r1
    334a:	24 c0       	rjmp	.+72     	; 0x3394 <strtod+0x144>
    334c:	21 96       	adiw	r28, 0x01	; 1
    334e:	22 c0       	rjmp	.+68     	; 0x3394 <strtod+0x144>
    3350:	81 11       	cpse	r24, r1
    3352:	21 97       	sbiw	r28, 0x01	; 1
    3354:	a5 e0       	ldi	r26, 0x05	; 5
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__muluhisi3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	aa 1f       	adc	r26, r26
    3366:	bb 1f       	adc	r27, r27
    3368:	9c 01       	movw	r18, r24
    336a:	ad 01       	movw	r20, r26
    336c:	2a 0d       	add	r18, r10
    336e:	31 1d       	adc	r19, r1
    3370:	41 1d       	adc	r20, r1
    3372:	51 1d       	adc	r21, r1
    3374:	28 39       	cpi	r18, 0x98	; 152
    3376:	89 e9       	ldi	r24, 0x99	; 153
    3378:	38 07       	cpc	r19, r24
    337a:	48 07       	cpc	r20, r24
    337c:	89 e1       	ldi	r24, 0x19	; 25
    337e:	58 07       	cpc	r21, r24
    3380:	48 f0       	brcs	.+18     	; 0x3394 <strtod+0x144>
    3382:	16 60       	ori	r17, 0x06	; 6
    3384:	06 c0       	rjmp	.+12     	; 0x3392 <strtod+0x142>
    3386:	9e ef       	ldi	r25, 0xFE	; 254
    3388:	a9 12       	cpse	r10, r25
    338a:	0a c0       	rjmp	.+20     	; 0x33a0 <strtod+0x150>
    338c:	13 fd       	sbrc	r17, 3
    338e:	40 c0       	rjmp	.+128    	; 0x3410 <strtod+0x1c0>
    3390:	18 60       	ori	r17, 0x08	; 8
    3392:	b1 2e       	mov	r11, r17
    3394:	8f ef       	ldi	r24, 0xFF	; 255
    3396:	e8 1a       	sub	r14, r24
    3398:	f8 0a       	sbc	r15, r24
    339a:	00 81       	ld	r16, Z
    339c:	1b 2d       	mov	r17, r11
    339e:	c6 cf       	rjmp	.-116    	; 0x332c <strtod+0xdc>
    33a0:	80 2f       	mov	r24, r16
    33a2:	8f 7d       	andi	r24, 0xDF	; 223
    33a4:	85 34       	cpi	r24, 0x45	; 69
    33a6:	a1 f5       	brne	.+104    	; 0x3410 <strtod+0x1c0>
    33a8:	80 81       	ld	r24, Z
    33aa:	8d 32       	cpi	r24, 0x2D	; 45
    33ac:	11 f4       	brne	.+4      	; 0x33b2 <strtod+0x162>
    33ae:	10 61       	ori	r17, 0x10	; 16
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <strtod+0x16e>
    33b2:	8b 32       	cpi	r24, 0x2B	; 43
    33b4:	21 f0       	breq	.+8      	; 0x33be <strtod+0x16e>
    33b6:	31 96       	adiw	r30, 0x01	; 1
    33b8:	61 e0       	ldi	r22, 0x01	; 1
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	04 c0       	rjmp	.+8      	; 0x33c6 <strtod+0x176>
    33be:	81 81       	ldd	r24, Z+1	; 0x01
    33c0:	32 96       	adiw	r30, 0x02	; 2
    33c2:	62 e0       	ldi	r22, 0x02	; 2
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	80 53       	subi	r24, 0x30	; 48
    33c8:	8a 30       	cpi	r24, 0x0A	; 10
    33ca:	18 f0       	brcs	.+6      	; 0x33d2 <strtod+0x182>
    33cc:	e6 1b       	sub	r30, r22
    33ce:	f7 0b       	sbc	r31, r23
    33d0:	1f c0       	rjmp	.+62     	; 0x3410 <strtod+0x1c0>
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	70 e0       	ldi	r23, 0x00	; 0
    33d6:	60 38       	cpi	r22, 0x80	; 128
    33d8:	9c e0       	ldi	r25, 0x0C	; 12
    33da:	79 07       	cpc	r23, r25
    33dc:	5c f4       	brge	.+22     	; 0x33f4 <strtod+0x1a4>
    33de:	db 01       	movw	r26, r22
    33e0:	aa 0f       	add	r26, r26
    33e2:	bb 1f       	adc	r27, r27
    33e4:	aa 0f       	add	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	6a 0f       	add	r22, r26
    33ea:	7b 1f       	adc	r23, r27
    33ec:	66 0f       	add	r22, r22
    33ee:	77 1f       	adc	r23, r23
    33f0:	68 0f       	add	r22, r24
    33f2:	71 1d       	adc	r23, r1
    33f4:	31 96       	adiw	r30, 0x01	; 1
    33f6:	df 01       	movw	r26, r30
    33f8:	11 97       	sbiw	r26, 0x01	; 1
    33fa:	8c 91       	ld	r24, X
    33fc:	80 53       	subi	r24, 0x30	; 48
    33fe:	8a 30       	cpi	r24, 0x0A	; 10
    3400:	50 f3       	brcs	.-44     	; 0x33d6 <strtod+0x186>
    3402:	14 ff       	sbrs	r17, 4
    3404:	03 c0       	rjmp	.+6      	; 0x340c <strtod+0x1bc>
    3406:	71 95       	neg	r23
    3408:	61 95       	neg	r22
    340a:	71 09       	sbc	r23, r1
    340c:	c6 0f       	add	r28, r22
    340e:	d7 1f       	adc	r29, r23
    3410:	11 ff       	sbrs	r17, 1
    3412:	08 c0       	rjmp	.+16     	; 0x3424 <strtod+0x1d4>
    3414:	c1 14       	cp	r12, r1
    3416:	d1 04       	cpc	r13, r1
    3418:	29 f0       	breq	.+10     	; 0x3424 <strtod+0x1d4>
    341a:	cf 01       	movw	r24, r30
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f6 01       	movw	r30, r12
    3420:	80 83       	st	Z, r24
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	ca 01       	movw	r24, r20
    3426:	b9 01       	movw	r22, r18
    3428:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    342c:	21 2f       	mov	r18, r17
    342e:	23 70       	andi	r18, 0x03	; 3
    3430:	23 30       	cpi	r18, 0x03	; 3
    3432:	19 f0       	breq	.+6      	; 0x343a <strtod+0x1ea>
    3434:	4b 01       	movw	r8, r22
    3436:	5c 01       	movw	r10, r24
    3438:	06 c0       	rjmp	.+12     	; 0x3446 <strtod+0x1f6>
    343a:	4b 01       	movw	r8, r22
    343c:	5c 01       	movw	r10, r24
    343e:	b7 fa       	bst	r11, 7
    3440:	b0 94       	com	r11
    3442:	b7 f8       	bld	r11, 7
    3444:	b0 94       	com	r11
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	a9 01       	movw	r20, r18
    344c:	c5 01       	movw	r24, r10
    344e:	b4 01       	movw	r22, r8
    3450:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__cmpsf2>
    3454:	88 23       	and	r24, r24
    3456:	09 f4       	brne	.+2      	; 0x345a <strtod+0x20a>
    3458:	3e c0       	rjmp	.+124    	; 0x34d6 <strtod+0x286>
    345a:	d7 ff       	sbrs	r29, 7
    345c:	06 c0       	rjmp	.+12     	; 0x346a <strtod+0x21a>
    345e:	d1 95       	neg	r29
    3460:	c1 95       	neg	r28
    3462:	d1 09       	sbc	r29, r1
    3464:	05 ee       	ldi	r16, 0xE5	; 229
    3466:	12 e0       	ldi	r17, 0x02	; 2
    3468:	02 c0       	rjmp	.+4      	; 0x346e <strtod+0x21e>
    346a:	0d ef       	ldi	r16, 0xFD	; 253
    346c:	12 e0       	ldi	r17, 0x02	; 2
    346e:	68 01       	movw	r12, r16
    3470:	f8 e1       	ldi	r31, 0x18	; 24
    3472:	cf 1a       	sub	r12, r31
    3474:	d1 08       	sbc	r13, r1
    3476:	90 e2       	ldi	r25, 0x20	; 32
    3478:	e9 2e       	mov	r14, r25
    347a:	f1 2c       	mov	r15, r1
    347c:	ce 15       	cp	r28, r14
    347e:	df 05       	cpc	r29, r15
    3480:	74 f0       	brlt	.+28     	; 0x349e <strtod+0x24e>
    3482:	f8 01       	movw	r30, r16
    3484:	25 91       	lpm	r18, Z+
    3486:	35 91       	lpm	r19, Z+
    3488:	45 91       	lpm	r20, Z+
    348a:	54 91       	lpm	r21, Z
    348c:	c5 01       	movw	r24, r10
    348e:	b4 01       	movw	r22, r8
    3490:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    3494:	4b 01       	movw	r8, r22
    3496:	5c 01       	movw	r10, r24
    3498:	ce 19       	sub	r28, r14
    349a:	df 09       	sbc	r29, r15
    349c:	ef cf       	rjmp	.-34     	; 0x347c <strtod+0x22c>
    349e:	04 50       	subi	r16, 0x04	; 4
    34a0:	11 09       	sbc	r17, r1
    34a2:	f5 94       	asr	r15
    34a4:	e7 94       	ror	r14
    34a6:	0c 15       	cp	r16, r12
    34a8:	1d 05       	cpc	r17, r13
    34aa:	41 f7       	brne	.-48     	; 0x347c <strtod+0x22c>
    34ac:	8a 2d       	mov	r24, r10
    34ae:	88 0f       	add	r24, r24
    34b0:	8b 2d       	mov	r24, r11
    34b2:	88 1f       	adc	r24, r24
    34b4:	8f 3f       	cpi	r24, 0xFF	; 255
    34b6:	49 f0       	breq	.+18     	; 0x34ca <strtod+0x27a>
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	a9 01       	movw	r20, r18
    34be:	c5 01       	movw	r24, r10
    34c0:	b4 01       	movw	r22, r8
    34c2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__cmpsf2>
    34c6:	81 11       	cpse	r24, r1
    34c8:	06 c0       	rjmp	.+12     	; 0x34d6 <strtod+0x286>
    34ca:	82 e2       	ldi	r24, 0x22	; 34
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	80 93 7a 22 	sts	0x227A, r24	; 0x80227a <errno>
    34d2:	90 93 7b 22 	sts	0x227B, r25	; 0x80227b <errno+0x1>
    34d6:	c5 01       	movw	r24, r10
    34d8:	b4 01       	movw	r22, r8
    34da:	09 c0       	rjmp	.+18     	; 0x34ee <strtod+0x29e>
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	80 e8       	ldi	r24, 0x80	; 128
    34e2:	9f ef       	ldi	r25, 0xFF	; 255
    34e4:	04 c0       	rjmp	.+8      	; 0x34ee <strtod+0x29e>
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	80 ec       	ldi	r24, 0xC0	; 192
    34ec:	9f e7       	ldi	r25, 0x7F	; 127
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	bf 90       	pop	r11
    3500:	af 90       	pop	r10
    3502:	9f 90       	pop	r9
    3504:	8f 90       	pop	r8
    3506:	08 95       	ret

00003508 <__ftoa_engine>:
    3508:	28 30       	cpi	r18, 0x08	; 8
    350a:	08 f0       	brcs	.+2      	; 0x350e <__ftoa_engine+0x6>
    350c:	27 e0       	ldi	r18, 0x07	; 7
    350e:	33 27       	eor	r19, r19
    3510:	da 01       	movw	r26, r20
    3512:	99 0f       	add	r25, r25
    3514:	31 1d       	adc	r19, r1
    3516:	87 fd       	sbrc	r24, 7
    3518:	91 60       	ori	r25, 0x01	; 1
    351a:	00 96       	adiw	r24, 0x00	; 0
    351c:	61 05       	cpc	r22, r1
    351e:	71 05       	cpc	r23, r1
    3520:	39 f4       	brne	.+14     	; 0x3530 <__ftoa_engine+0x28>
    3522:	32 60       	ori	r19, 0x02	; 2
    3524:	2e 5f       	subi	r18, 0xFE	; 254
    3526:	3d 93       	st	X+, r19
    3528:	30 e3       	ldi	r19, 0x30	; 48
    352a:	2a 95       	dec	r18
    352c:	e1 f7       	brne	.-8      	; 0x3526 <__ftoa_engine+0x1e>
    352e:	08 95       	ret
    3530:	9f 3f       	cpi	r25, 0xFF	; 255
    3532:	30 f0       	brcs	.+12     	; 0x3540 <__ftoa_engine+0x38>
    3534:	80 38       	cpi	r24, 0x80	; 128
    3536:	71 05       	cpc	r23, r1
    3538:	61 05       	cpc	r22, r1
    353a:	09 f0       	breq	.+2      	; 0x353e <__ftoa_engine+0x36>
    353c:	3c 5f       	subi	r19, 0xFC	; 252
    353e:	3c 5f       	subi	r19, 0xFC	; 252
    3540:	3d 93       	st	X+, r19
    3542:	91 30       	cpi	r25, 0x01	; 1
    3544:	08 f0       	brcs	.+2      	; 0x3548 <__ftoa_engine+0x40>
    3546:	80 68       	ori	r24, 0x80	; 128
    3548:	91 1d       	adc	r25, r1
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	1f 93       	push	r17
    3550:	0f 93       	push	r16
    3552:	ff 92       	push	r15
    3554:	ef 92       	push	r14
    3556:	19 2f       	mov	r17, r25
    3558:	98 7f       	andi	r25, 0xF8	; 248
    355a:	96 95       	lsr	r25
    355c:	e9 2f       	mov	r30, r25
    355e:	96 95       	lsr	r25
    3560:	96 95       	lsr	r25
    3562:	e9 0f       	add	r30, r25
    3564:	ff 27       	eor	r31, r31
    3566:	e5 5a       	subi	r30, 0xA5	; 165
    3568:	fc 4f       	sbci	r31, 0xFC	; 252
    356a:	99 27       	eor	r25, r25
    356c:	33 27       	eor	r19, r19
    356e:	ee 24       	eor	r14, r14
    3570:	ff 24       	eor	r15, r15
    3572:	a7 01       	movw	r20, r14
    3574:	e7 01       	movw	r28, r14
    3576:	05 90       	lpm	r0, Z+
    3578:	08 94       	sec
    357a:	07 94       	ror	r0
    357c:	28 f4       	brcc	.+10     	; 0x3588 <__ftoa_engine+0x80>
    357e:	36 0f       	add	r19, r22
    3580:	e7 1e       	adc	r14, r23
    3582:	f8 1e       	adc	r15, r24
    3584:	49 1f       	adc	r20, r25
    3586:	51 1d       	adc	r21, r1
    3588:	66 0f       	add	r22, r22
    358a:	77 1f       	adc	r23, r23
    358c:	88 1f       	adc	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	06 94       	lsr	r0
    3592:	a1 f7       	brne	.-24     	; 0x357c <__ftoa_engine+0x74>
    3594:	05 90       	lpm	r0, Z+
    3596:	07 94       	ror	r0
    3598:	28 f4       	brcc	.+10     	; 0x35a4 <__ftoa_engine+0x9c>
    359a:	e7 0e       	add	r14, r23
    359c:	f8 1e       	adc	r15, r24
    359e:	49 1f       	adc	r20, r25
    35a0:	56 1f       	adc	r21, r22
    35a2:	c1 1d       	adc	r28, r1
    35a4:	77 0f       	add	r23, r23
    35a6:	88 1f       	adc	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	66 1f       	adc	r22, r22
    35ac:	06 94       	lsr	r0
    35ae:	a1 f7       	brne	.-24     	; 0x3598 <__ftoa_engine+0x90>
    35b0:	05 90       	lpm	r0, Z+
    35b2:	07 94       	ror	r0
    35b4:	28 f4       	brcc	.+10     	; 0x35c0 <__ftoa_engine+0xb8>
    35b6:	f8 0e       	add	r15, r24
    35b8:	49 1f       	adc	r20, r25
    35ba:	56 1f       	adc	r21, r22
    35bc:	c7 1f       	adc	r28, r23
    35be:	d1 1d       	adc	r29, r1
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	66 1f       	adc	r22, r22
    35c6:	77 1f       	adc	r23, r23
    35c8:	06 94       	lsr	r0
    35ca:	a1 f7       	brne	.-24     	; 0x35b4 <__ftoa_engine+0xac>
    35cc:	05 90       	lpm	r0, Z+
    35ce:	07 94       	ror	r0
    35d0:	20 f4       	brcc	.+8      	; 0x35da <__ftoa_engine+0xd2>
    35d2:	49 0f       	add	r20, r25
    35d4:	56 1f       	adc	r21, r22
    35d6:	c7 1f       	adc	r28, r23
    35d8:	d8 1f       	adc	r29, r24
    35da:	99 0f       	add	r25, r25
    35dc:	66 1f       	adc	r22, r22
    35de:	77 1f       	adc	r23, r23
    35e0:	88 1f       	adc	r24, r24
    35e2:	06 94       	lsr	r0
    35e4:	a9 f7       	brne	.-22     	; 0x35d0 <__ftoa_engine+0xc8>
    35e6:	84 91       	lpm	r24, Z
    35e8:	10 95       	com	r17
    35ea:	17 70       	andi	r17, 0x07	; 7
    35ec:	41 f0       	breq	.+16     	; 0x35fe <__ftoa_engine+0xf6>
    35ee:	d6 95       	lsr	r29
    35f0:	c7 95       	ror	r28
    35f2:	57 95       	ror	r21
    35f4:	47 95       	ror	r20
    35f6:	f7 94       	ror	r15
    35f8:	e7 94       	ror	r14
    35fa:	1a 95       	dec	r17
    35fc:	c1 f7       	brne	.-16     	; 0x35ee <__ftoa_engine+0xe6>
    35fe:	e1 e0       	ldi	r30, 0x01	; 1
    3600:	f3 e0       	ldi	r31, 0x03	; 3
    3602:	68 94       	set
    3604:	15 90       	lpm	r1, Z+
    3606:	15 91       	lpm	r17, Z+
    3608:	35 91       	lpm	r19, Z+
    360a:	65 91       	lpm	r22, Z+
    360c:	95 91       	lpm	r25, Z+
    360e:	05 90       	lpm	r0, Z+
    3610:	7f e2       	ldi	r23, 0x2F	; 47
    3612:	73 95       	inc	r23
    3614:	e1 18       	sub	r14, r1
    3616:	f1 0a       	sbc	r15, r17
    3618:	43 0b       	sbc	r20, r19
    361a:	56 0b       	sbc	r21, r22
    361c:	c9 0b       	sbc	r28, r25
    361e:	d0 09       	sbc	r29, r0
    3620:	c0 f7       	brcc	.-16     	; 0x3612 <__ftoa_engine+0x10a>
    3622:	e1 0c       	add	r14, r1
    3624:	f1 1e       	adc	r15, r17
    3626:	43 1f       	adc	r20, r19
    3628:	56 1f       	adc	r21, r22
    362a:	c9 1f       	adc	r28, r25
    362c:	d0 1d       	adc	r29, r0
    362e:	7e f4       	brtc	.+30     	; 0x364e <__ftoa_engine+0x146>
    3630:	70 33       	cpi	r23, 0x30	; 48
    3632:	11 f4       	brne	.+4      	; 0x3638 <__ftoa_engine+0x130>
    3634:	8a 95       	dec	r24
    3636:	e6 cf       	rjmp	.-52     	; 0x3604 <__ftoa_engine+0xfc>
    3638:	e8 94       	clt
    363a:	01 50       	subi	r16, 0x01	; 1
    363c:	30 f0       	brcs	.+12     	; 0x364a <__ftoa_engine+0x142>
    363e:	08 0f       	add	r16, r24
    3640:	0a f4       	brpl	.+2      	; 0x3644 <__ftoa_engine+0x13c>
    3642:	00 27       	eor	r16, r16
    3644:	02 17       	cp	r16, r18
    3646:	08 f4       	brcc	.+2      	; 0x364a <__ftoa_engine+0x142>
    3648:	20 2f       	mov	r18, r16
    364a:	23 95       	inc	r18
    364c:	02 2f       	mov	r16, r18
    364e:	7a 33       	cpi	r23, 0x3A	; 58
    3650:	28 f0       	brcs	.+10     	; 0x365c <__ftoa_engine+0x154>
    3652:	79 e3       	ldi	r23, 0x39	; 57
    3654:	7d 93       	st	X+, r23
    3656:	2a 95       	dec	r18
    3658:	e9 f7       	brne	.-6      	; 0x3654 <__ftoa_engine+0x14c>
    365a:	10 c0       	rjmp	.+32     	; 0x367c <__ftoa_engine+0x174>
    365c:	7d 93       	st	X+, r23
    365e:	2a 95       	dec	r18
    3660:	89 f6       	brne	.-94     	; 0x3604 <__ftoa_engine+0xfc>
    3662:	06 94       	lsr	r0
    3664:	97 95       	ror	r25
    3666:	67 95       	ror	r22
    3668:	37 95       	ror	r19
    366a:	17 95       	ror	r17
    366c:	17 94       	ror	r1
    366e:	e1 18       	sub	r14, r1
    3670:	f1 0a       	sbc	r15, r17
    3672:	43 0b       	sbc	r20, r19
    3674:	56 0b       	sbc	r21, r22
    3676:	c9 0b       	sbc	r28, r25
    3678:	d0 09       	sbc	r29, r0
    367a:	98 f0       	brcs	.+38     	; 0x36a2 <__ftoa_engine+0x19a>
    367c:	23 95       	inc	r18
    367e:	7e 91       	ld	r23, -X
    3680:	73 95       	inc	r23
    3682:	7a 33       	cpi	r23, 0x3A	; 58
    3684:	08 f0       	brcs	.+2      	; 0x3688 <__ftoa_engine+0x180>
    3686:	70 e3       	ldi	r23, 0x30	; 48
    3688:	7c 93       	st	X, r23
    368a:	20 13       	cpse	r18, r16
    368c:	b8 f7       	brcc	.-18     	; 0x367c <__ftoa_engine+0x174>
    368e:	7e 91       	ld	r23, -X
    3690:	70 61       	ori	r23, 0x10	; 16
    3692:	7d 93       	st	X+, r23
    3694:	30 f0       	brcs	.+12     	; 0x36a2 <__ftoa_engine+0x19a>
    3696:	83 95       	inc	r24
    3698:	71 e3       	ldi	r23, 0x31	; 49
    369a:	7d 93       	st	X+, r23
    369c:	70 e3       	ldi	r23, 0x30	; 48
    369e:	2a 95       	dec	r18
    36a0:	e1 f7       	brne	.-8      	; 0x369a <__ftoa_engine+0x192>
    36a2:	11 24       	eor	r1, r1
    36a4:	ef 90       	pop	r14
    36a6:	ff 90       	pop	r15
    36a8:	0f 91       	pop	r16
    36aa:	1f 91       	pop	r17
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	99 27       	eor	r25, r25
    36b2:	87 fd       	sbrc	r24, 7
    36b4:	90 95       	com	r25
    36b6:	08 95       	ret

000036b8 <isspace>:
    36b8:	91 11       	cpse	r25, r1
    36ba:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__ctype_isfalse>
    36be:	80 32       	cpi	r24, 0x20	; 32
    36c0:	19 f0       	breq	.+6      	; 0x36c8 <isspace+0x10>
    36c2:	89 50       	subi	r24, 0x09	; 9
    36c4:	85 50       	subi	r24, 0x05	; 5
    36c6:	c8 f7       	brcc	.-14     	; 0x36ba <isspace+0x2>
    36c8:	08 95       	ret

000036ca <strncasecmp_P>:
    36ca:	fb 01       	movw	r30, r22
    36cc:	dc 01       	movw	r26, r24
    36ce:	41 50       	subi	r20, 0x01	; 1
    36d0:	50 40       	sbci	r21, 0x00	; 0
    36d2:	88 f0       	brcs	.+34     	; 0x36f6 <strncasecmp_P+0x2c>
    36d4:	8d 91       	ld	r24, X+
    36d6:	81 34       	cpi	r24, 0x41	; 65
    36d8:	1c f0       	brlt	.+6      	; 0x36e0 <strncasecmp_P+0x16>
    36da:	8b 35       	cpi	r24, 0x5B	; 91
    36dc:	0c f4       	brge	.+2      	; 0x36e0 <strncasecmp_P+0x16>
    36de:	80 5e       	subi	r24, 0xE0	; 224
    36e0:	65 91       	lpm	r22, Z+
    36e2:	61 34       	cpi	r22, 0x41	; 65
    36e4:	1c f0       	brlt	.+6      	; 0x36ec <strncasecmp_P+0x22>
    36e6:	6b 35       	cpi	r22, 0x5B	; 91
    36e8:	0c f4       	brge	.+2      	; 0x36ec <strncasecmp_P+0x22>
    36ea:	60 5e       	subi	r22, 0xE0	; 224
    36ec:	86 1b       	sub	r24, r22
    36ee:	61 11       	cpse	r22, r1
    36f0:	71 f3       	breq	.-36     	; 0x36ce <strncasecmp_P+0x4>
    36f2:	99 0b       	sbc	r25, r25
    36f4:	08 95       	ret
    36f6:	88 1b       	sub	r24, r24
    36f8:	fc cf       	rjmp	.-8      	; 0x36f2 <strncasecmp_P+0x28>

000036fa <strnlen_P>:
    36fa:	fc 01       	movw	r30, r24
    36fc:	05 90       	lpm	r0, Z+
    36fe:	61 50       	subi	r22, 0x01	; 1
    3700:	70 40       	sbci	r23, 0x00	; 0
    3702:	01 10       	cpse	r0, r1
    3704:	d8 f7       	brcc	.-10     	; 0x36fc <strnlen_P+0x2>
    3706:	80 95       	com	r24
    3708:	90 95       	com	r25
    370a:	8e 0f       	add	r24, r30
    370c:	9f 1f       	adc	r25, r31
    370e:	08 95       	ret

00003710 <memset>:
    3710:	dc 01       	movw	r26, r24
    3712:	01 c0       	rjmp	.+2      	; 0x3716 <memset+0x6>
    3714:	6d 93       	st	X+, r22
    3716:	41 50       	subi	r20, 0x01	; 1
    3718:	50 40       	sbci	r21, 0x00	; 0
    371a:	e0 f7       	brcc	.-8      	; 0x3714 <memset+0x4>
    371c:	08 95       	ret

0000371e <strcpy>:
    371e:	fb 01       	movw	r30, r22
    3720:	dc 01       	movw	r26, r24
    3722:	01 90       	ld	r0, Z+
    3724:	0d 92       	st	X+, r0
    3726:	00 20       	and	r0, r0
    3728:	e1 f7       	brne	.-8      	; 0x3722 <strcpy+0x4>
    372a:	08 95       	ret

0000372c <strnlen>:
    372c:	fc 01       	movw	r30, r24
    372e:	61 50       	subi	r22, 0x01	; 1
    3730:	70 40       	sbci	r23, 0x00	; 0
    3732:	01 90       	ld	r0, Z+
    3734:	01 10       	cpse	r0, r1
    3736:	d8 f7       	brcc	.-10     	; 0x372e <strnlen+0x2>
    3738:	80 95       	com	r24
    373a:	90 95       	com	r25
    373c:	8e 0f       	add	r24, r30
    373e:	9f 1f       	adc	r25, r31
    3740:	08 95       	ret

00003742 <fputc>:
    3742:	0f 93       	push	r16
    3744:	1f 93       	push	r17
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	fb 01       	movw	r30, r22
    374c:	23 81       	ldd	r18, Z+3	; 0x03
    374e:	21 fd       	sbrc	r18, 1
    3750:	03 c0       	rjmp	.+6      	; 0x3758 <fputc+0x16>
    3752:	8f ef       	ldi	r24, 0xFF	; 255
    3754:	9f ef       	ldi	r25, 0xFF	; 255
    3756:	2c c0       	rjmp	.+88     	; 0x37b0 <fputc+0x6e>
    3758:	22 ff       	sbrs	r18, 2
    375a:	16 c0       	rjmp	.+44     	; 0x3788 <fputc+0x46>
    375c:	46 81       	ldd	r20, Z+6	; 0x06
    375e:	57 81       	ldd	r21, Z+7	; 0x07
    3760:	24 81       	ldd	r18, Z+4	; 0x04
    3762:	35 81       	ldd	r19, Z+5	; 0x05
    3764:	42 17       	cp	r20, r18
    3766:	53 07       	cpc	r21, r19
    3768:	44 f4       	brge	.+16     	; 0x377a <fputc+0x38>
    376a:	a0 81       	ld	r26, Z
    376c:	b1 81       	ldd	r27, Z+1	; 0x01
    376e:	9d 01       	movw	r18, r26
    3770:	2f 5f       	subi	r18, 0xFF	; 255
    3772:	3f 4f       	sbci	r19, 0xFF	; 255
    3774:	20 83       	st	Z, r18
    3776:	31 83       	std	Z+1, r19	; 0x01
    3778:	8c 93       	st	X, r24
    377a:	26 81       	ldd	r18, Z+6	; 0x06
    377c:	37 81       	ldd	r19, Z+7	; 0x07
    377e:	2f 5f       	subi	r18, 0xFF	; 255
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	26 83       	std	Z+6, r18	; 0x06
    3784:	37 83       	std	Z+7, r19	; 0x07
    3786:	14 c0       	rjmp	.+40     	; 0x37b0 <fputc+0x6e>
    3788:	8b 01       	movw	r16, r22
    378a:	ec 01       	movw	r28, r24
    378c:	fb 01       	movw	r30, r22
    378e:	00 84       	ldd	r0, Z+8	; 0x08
    3790:	f1 85       	ldd	r31, Z+9	; 0x09
    3792:	e0 2d       	mov	r30, r0
    3794:	19 95       	eicall
    3796:	89 2b       	or	r24, r25
    3798:	e1 f6       	brne	.-72     	; 0x3752 <fputc+0x10>
    379a:	d8 01       	movw	r26, r16
    379c:	16 96       	adiw	r26, 0x06	; 6
    379e:	8d 91       	ld	r24, X+
    37a0:	9c 91       	ld	r25, X
    37a2:	17 97       	sbiw	r26, 0x07	; 7
    37a4:	01 96       	adiw	r24, 0x01	; 1
    37a6:	16 96       	adiw	r26, 0x06	; 6
    37a8:	8d 93       	st	X+, r24
    37aa:	9c 93       	st	X, r25
    37ac:	17 97       	sbiw	r26, 0x07	; 7
    37ae:	ce 01       	movw	r24, r28
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	08 95       	ret

000037ba <snprintf>:
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	2e 97       	sbiw	r28, 0x0e	; 14
    37c8:	cd bf       	out	0x3d, r28	; 61
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	0e 89       	ldd	r16, Y+22	; 0x16
    37ce:	1f 89       	ldd	r17, Y+23	; 0x17
    37d0:	88 8d       	ldd	r24, Y+24	; 0x18
    37d2:	99 8d       	ldd	r25, Y+25	; 0x19
    37d4:	26 e0       	ldi	r18, 0x06	; 6
    37d6:	2c 83       	std	Y+4, r18	; 0x04
    37d8:	09 83       	std	Y+1, r16	; 0x01
    37da:	1a 83       	std	Y+2, r17	; 0x02
    37dc:	97 ff       	sbrs	r25, 7
    37de:	02 c0       	rjmp	.+4      	; 0x37e4 <snprintf+0x2a>
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	90 e8       	ldi	r25, 0x80	; 128
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	8d 83       	std	Y+5, r24	; 0x05
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	ae 01       	movw	r20, r28
    37ec:	44 5e       	subi	r20, 0xE4	; 228
    37ee:	5f 4f       	sbci	r21, 0xFF	; 255
    37f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    37f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    37f4:	ce 01       	movw	r24, r28
    37f6:	01 96       	adiw	r24, 0x01	; 1
    37f8:	0e 94 7f 15 	call	0x2afe	; 0x2afe <vfprintf>
    37fc:	4d 81       	ldd	r20, Y+5	; 0x05
    37fe:	5e 81       	ldd	r21, Y+6	; 0x06
    3800:	57 fd       	sbrc	r21, 7
    3802:	0a c0       	rjmp	.+20     	; 0x3818 <snprintf+0x5e>
    3804:	2f 81       	ldd	r18, Y+7	; 0x07
    3806:	38 85       	ldd	r19, Y+8	; 0x08
    3808:	42 17       	cp	r20, r18
    380a:	53 07       	cpc	r21, r19
    380c:	0c f4       	brge	.+2      	; 0x3810 <snprintf+0x56>
    380e:	9a 01       	movw	r18, r20
    3810:	f8 01       	movw	r30, r16
    3812:	e2 0f       	add	r30, r18
    3814:	f3 1f       	adc	r31, r19
    3816:	10 82       	st	Z, r1
    3818:	2e 96       	adiw	r28, 0x0e	; 14
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	df 91       	pop	r29
    3820:	cf 91       	pop	r28
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	08 95       	ret

00003828 <__ultoa_invert>:
    3828:	fa 01       	movw	r30, r20
    382a:	aa 27       	eor	r26, r26
    382c:	28 30       	cpi	r18, 0x08	; 8
    382e:	51 f1       	breq	.+84     	; 0x3884 <__ultoa_invert+0x5c>
    3830:	20 31       	cpi	r18, 0x10	; 16
    3832:	81 f1       	breq	.+96     	; 0x3894 <__ultoa_invert+0x6c>
    3834:	e8 94       	clt
    3836:	6f 93       	push	r22
    3838:	6e 7f       	andi	r22, 0xFE	; 254
    383a:	6e 5f       	subi	r22, 0xFE	; 254
    383c:	7f 4f       	sbci	r23, 0xFF	; 255
    383e:	8f 4f       	sbci	r24, 0xFF	; 255
    3840:	9f 4f       	sbci	r25, 0xFF	; 255
    3842:	af 4f       	sbci	r26, 0xFF	; 255
    3844:	b1 e0       	ldi	r27, 0x01	; 1
    3846:	3e d0       	rcall	.+124    	; 0x38c4 <__ultoa_invert+0x9c>
    3848:	b4 e0       	ldi	r27, 0x04	; 4
    384a:	3c d0       	rcall	.+120    	; 0x38c4 <__ultoa_invert+0x9c>
    384c:	67 0f       	add	r22, r23
    384e:	78 1f       	adc	r23, r24
    3850:	89 1f       	adc	r24, r25
    3852:	9a 1f       	adc	r25, r26
    3854:	a1 1d       	adc	r26, r1
    3856:	68 0f       	add	r22, r24
    3858:	79 1f       	adc	r23, r25
    385a:	8a 1f       	adc	r24, r26
    385c:	91 1d       	adc	r25, r1
    385e:	a1 1d       	adc	r26, r1
    3860:	6a 0f       	add	r22, r26
    3862:	71 1d       	adc	r23, r1
    3864:	81 1d       	adc	r24, r1
    3866:	91 1d       	adc	r25, r1
    3868:	a1 1d       	adc	r26, r1
    386a:	20 d0       	rcall	.+64     	; 0x38ac <__ultoa_invert+0x84>
    386c:	09 f4       	brne	.+2      	; 0x3870 <__ultoa_invert+0x48>
    386e:	68 94       	set
    3870:	3f 91       	pop	r19
    3872:	2a e0       	ldi	r18, 0x0A	; 10
    3874:	26 9f       	mul	r18, r22
    3876:	11 24       	eor	r1, r1
    3878:	30 19       	sub	r19, r0
    387a:	30 5d       	subi	r19, 0xD0	; 208
    387c:	31 93       	st	Z+, r19
    387e:	de f6       	brtc	.-74     	; 0x3836 <__ultoa_invert+0xe>
    3880:	cf 01       	movw	r24, r30
    3882:	08 95       	ret
    3884:	46 2f       	mov	r20, r22
    3886:	47 70       	andi	r20, 0x07	; 7
    3888:	40 5d       	subi	r20, 0xD0	; 208
    388a:	41 93       	st	Z+, r20
    388c:	b3 e0       	ldi	r27, 0x03	; 3
    388e:	0f d0       	rcall	.+30     	; 0x38ae <__ultoa_invert+0x86>
    3890:	c9 f7       	brne	.-14     	; 0x3884 <__ultoa_invert+0x5c>
    3892:	f6 cf       	rjmp	.-20     	; 0x3880 <__ultoa_invert+0x58>
    3894:	46 2f       	mov	r20, r22
    3896:	4f 70       	andi	r20, 0x0F	; 15
    3898:	40 5d       	subi	r20, 0xD0	; 208
    389a:	4a 33       	cpi	r20, 0x3A	; 58
    389c:	18 f0       	brcs	.+6      	; 0x38a4 <__ultoa_invert+0x7c>
    389e:	49 5d       	subi	r20, 0xD9	; 217
    38a0:	31 fd       	sbrc	r19, 1
    38a2:	40 52       	subi	r20, 0x20	; 32
    38a4:	41 93       	st	Z+, r20
    38a6:	02 d0       	rcall	.+4      	; 0x38ac <__ultoa_invert+0x84>
    38a8:	a9 f7       	brne	.-22     	; 0x3894 <__ultoa_invert+0x6c>
    38aa:	ea cf       	rjmp	.-44     	; 0x3880 <__ultoa_invert+0x58>
    38ac:	b4 e0       	ldi	r27, 0x04	; 4
    38ae:	a6 95       	lsr	r26
    38b0:	97 95       	ror	r25
    38b2:	87 95       	ror	r24
    38b4:	77 95       	ror	r23
    38b6:	67 95       	ror	r22
    38b8:	ba 95       	dec	r27
    38ba:	c9 f7       	brne	.-14     	; 0x38ae <__ultoa_invert+0x86>
    38bc:	00 97       	sbiw	r24, 0x00	; 0
    38be:	61 05       	cpc	r22, r1
    38c0:	71 05       	cpc	r23, r1
    38c2:	08 95       	ret
    38c4:	9b 01       	movw	r18, r22
    38c6:	ac 01       	movw	r20, r24
    38c8:	0a 2e       	mov	r0, r26
    38ca:	06 94       	lsr	r0
    38cc:	57 95       	ror	r21
    38ce:	47 95       	ror	r20
    38d0:	37 95       	ror	r19
    38d2:	27 95       	ror	r18
    38d4:	ba 95       	dec	r27
    38d6:	c9 f7       	brne	.-14     	; 0x38ca <__ultoa_invert+0xa2>
    38d8:	62 0f       	add	r22, r18
    38da:	73 1f       	adc	r23, r19
    38dc:	84 1f       	adc	r24, r20
    38de:	95 1f       	adc	r25, r21
    38e0:	a0 1d       	adc	r26, r0
    38e2:	08 95       	ret

000038e4 <__ctype_isfalse>:
    38e4:	99 27       	eor	r25, r25
    38e6:	88 27       	eor	r24, r24

000038e8 <__ctype_istrue>:
    38e8:	08 95       	ret

000038ea <__muluhisi3>:
    38ea:	0e 94 80 1c 	call	0x3900	; 0x3900 <__umulhisi3>
    38ee:	a5 9f       	mul	r26, r21
    38f0:	90 0d       	add	r25, r0
    38f2:	b4 9f       	mul	r27, r20
    38f4:	90 0d       	add	r25, r0
    38f6:	a4 9f       	mul	r26, r20
    38f8:	80 0d       	add	r24, r0
    38fa:	91 1d       	adc	r25, r1
    38fc:	11 24       	eor	r1, r1
    38fe:	08 95       	ret

00003900 <__umulhisi3>:
    3900:	a2 9f       	mul	r26, r18
    3902:	b0 01       	movw	r22, r0
    3904:	b3 9f       	mul	r27, r19
    3906:	c0 01       	movw	r24, r0
    3908:	a3 9f       	mul	r26, r19
    390a:	70 0d       	add	r23, r0
    390c:	81 1d       	adc	r24, r1
    390e:	11 24       	eor	r1, r1
    3910:	91 1d       	adc	r25, r1
    3912:	b2 9f       	mul	r27, r18
    3914:	70 0d       	add	r23, r0
    3916:	81 1d       	adc	r24, r1
    3918:	11 24       	eor	r1, r1
    391a:	91 1d       	adc	r25, r1
    391c:	08 95       	ret

0000391e <_exit>:
    391e:	f8 94       	cli

00003920 <__stop_program>:
    3920:	ff cf       	rjmp	.-2      	; 0x3920 <__stop_program>
